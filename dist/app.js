!function(e){var t={};function n(i){if(t[i])return t[i].exports;var s=t[i]={i:i,l:!1,exports:{}};return e[i].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(i,s,function(t){return e[t]}.bind(null,s));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=46)}([function(e,t){e.exports=require("util")},function(e,t){e.exports=require("events")},function(e,t){e.exports=require("url")},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("stream")},function(e,t){e.exports=require("crypto")},function(e,t,n){"use strict";e.exports={BINARY_TYPES:["nodebuffer","arraybuffer","fragments"],GUID:"258EAFA5-E914-47DA-95CA-C5AB0DC85B11",kStatusCode:Symbol("status-code"),kWebSocket:Symbol("websocket"),EMPTY_BUFFER:Buffer.alloc(0),NOOP:()=>{}}},function(e,t,n){"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=n(115):e.exports=n(117)},function(e,t){e.exports=require("tty")},function(e,t,n){"use strict";const i=n(53),s=n(54),{env:a}=process;let o;function r(e){return function(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}(function(e){if(0===o)return 0;if(s("color=16m")||s("color=full")||s("color=truecolor"))return 3;if(s("color=256"))return 2;if(e&&!e.isTTY&&void 0===o)return 0;const t=o||0;if("dumb"===a.TERM)return t;if("win32"===process.platform){const e=i.release().split(".");return Number(process.versions.node.split(".")[0])>=8&&Number(e[0])>=10&&Number(e[2])>=10586?Number(e[2])>=14931?3:2:1}if("CI"in a)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI"].some(e=>e in a)||"codeship"===a.CI_NAME?1:t;if("TEAMCITY_VERSION"in a)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(a.TEAMCITY_VERSION)?1:0;if("truecolor"===a.COLORTERM)return 3;if("TERM_PROGRAM"in a){const e=parseInt((a.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(a.TERM_PROGRAM){case"iTerm.app":return e>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(a.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(a.TERM)||"COLORTERM"in a?1:t}(e))}s("no-color")||s("no-colors")||s("color=false")||s("color=never")?o=0:(s("color")||s("colors")||s("color=true")||s("color=always"))&&(o=1),"FORCE_COLOR"in a&&(o=!0===a.FORCE_COLOR||"true"===a.FORCE_COLOR?1:!1===a.FORCE_COLOR||"false"===a.FORCE_COLOR?0:0===a.FORCE_COLOR.length?1:Math.min(parseInt(a.FORCE_COLOR,10),3)),e.exports={supportsColor:r,stdout:r(process.stdout),stderr:r(process.stderr)}},function(e,t,n){"use strict";
/*!
 * statuses
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */var i=n(67);function s(e){if("number"==typeof e){if(!s[e])throw new Error("invalid status code: "+e);return e}if("string"!=typeof e)throw new TypeError("code must be a number or string");var t=parseInt(e,10);if(!isNaN(t)){if(!s[t])throw new Error("invalid status code: "+t);return t}if(!(t=s[e.toLowerCase()]))throw new Error('invalid status message: "'+e+'"');return t}e.exports=s,s.STATUS_CODES=i,s.codes=function(e,t){var n=[];return Object.keys(t).forEach((function(i){var s=t[i],a=Number(i);e[a]=s,e[s]=a,e[s.toLowerCase()]=a,n.push(a)})),n}(s,i),s.redirect={300:!0,301:!0,302:!0,303:!0,305:!0,307:!0,308:!0},s.empty={204:!0,205:!0,304:!0},s.retry={502:!0,503:!0,504:!0}},function(e,t,n){var i=n(111),s=n(23),a=n(113),o=n(114);t.protocol=3;var r=t.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},c=o(r),p={type:"error",data:"parser error"};const l=Buffer.concat([]);function u(e,n,i){if(!n)return t.encodeBase64Packet(e,i);var s=e.data,a=Buffer.allocUnsafe(1);return a[0]=r[e.type],i(Buffer.concat([a,s]))}function d(e,t,n){for(var i=new Array(e.length),s=a(e.length,n),o=0;o<e.length;o++)t(e[o],(function(e,t){i[o]=t,s(e,i)}))}function m(e){for(var t="",n=0,i=e.length;n<i;n++)t+=String.fromCharCode(e[n]);return t}function f(e){for(var t=Buffer.allocUnsafe(e.length),n=0,i=e.length;n<i;n++)t.writeUInt8(e.charCodeAt(n),n);return t}function h(e){var t=e.byteLength||e.length,n=e.byteOffset||0;return Buffer.from(e.buffer||e,n,t)}function v(e,n){t.encodePacket(e,!0,!0,(function(e){var t,i=""+e.length;if("string"==typeof e){(t=Buffer.allocUnsafe(i.length+2))[0]=0;for(var s=0;s<i.length;s++)t[s+1]=parseInt(i[s],10);return t[t.length-1]=255,n(null,Buffer.concat([t,f(e)]))}for((t=Buffer.allocUnsafe(i.length+2))[0]=1,s=0;s<i.length;s++)t[s+1]=parseInt(i[s],10);t[t.length-1]=255,n(null,Buffer.concat([t,e]))}))}t.encodePacket=function(e,t,n,s){if("function"==typeof t&&(s=t,t=null),"function"==typeof n&&(s=n,n=null),Buffer.isBuffer(e.data))return u(e,t,s);if(e.data&&(e.data.buffer||e.data)instanceof ArrayBuffer)return u({type:e.type,data:h(e.data)},t,s);var a=r[e.type];return void 0!==e.data&&(a+=n?i.encode(String(e.data),{strict:!1}):String(e.data)),s(""+a)},t.encodeBase64Packet=function(e,t){var n=Buffer.isBuffer(e.data)?e.data:h(e.data),i="b"+r[e.type];return t(i+=n.toString("base64"))},t.decodePacket=function(e,n,s){if(void 0===e)return p;var a;if("string"==typeof e)return"b"===(a=e.charAt(0))?t.decodeBase64Packet(e.substr(1),n):s&&!1===(e=function(e){try{e=i.decode(e,{strict:!1})}catch(e){return!1}return e}(e))?p:Number(a)==a&&c[a]?e.length>1?{type:c[a],data:e.substring(1)}:{type:c[a]}:p;if("arraybuffer"===n){var o=new Uint8Array(e);return a=o[0],{type:c[a],data:o.buffer.slice(1)}}return e instanceof ArrayBuffer&&(e=h(e)),a=e[0],{type:c[a],data:e.slice(1)}},t.decodeBase64Packet=function(e,t){var n=c[e.charAt(0)],i=Buffer.from(e.substr(1),"base64");if("arraybuffer"===t){for(var s=new Uint8Array(i.length),a=0;a<s.length;a++)s[a]=i[a];i=s.buffer}return{type:n,data:i}},t.encodePayload=function(e,n,i){if("function"==typeof n&&(i=n,n=null),n&&s(e))return t.encodePayloadAsBinary(e,i);if(!e.length)return i("0:");d(e,(function(e,i){t.encodePacket(e,n,!1,(function(e){i(null,function(e){return e.length+":"+e}(e))}))}),(function(e,t){return i(t.join(""))}))},t.decodePayload=function(e,n,i){if("string"!=typeof e)return t.decodePayloadAsBinary(e,n,i);if("function"==typeof n&&(i=n,n=null),""===e)return i(p,0,1);for(var s,a,o,r="",c=0,l=e.length;c<l;c++){var u=e.charAt(c);if(":"===u){if(""===r||r!=(s=Number(r)))return i(p,0,1);if(r!=(a=e.substr(c+1,s)).length)return i(p,0,1);if(a.length){if(o=t.decodePacket(a,n,!1),p.type===o.type&&p.data===o.data)return i(p,0,1);if(!1===i(o,c+s,l))return}c+=s,r=""}else r+=u}return""!==r?i(p,0,1):void 0},t.encodePayloadAsBinary=function(e,t){if(!e.length)return t(l);d(e,v,(function(e,n){return t(Buffer.concat(n))}))},t.decodePayloadAsBinary=function(e,n,i){"function"==typeof n&&(i=n,n=null);for(var s,a=e,o=[];a.length>0;){var r="",c=0===a[0];for(s=1;255!==a[s];s++){if(r.length>310)return i(p,0,1);r+=""+a[s]}a=a.slice(r.length+1);var l=parseInt(r,10),u=a.slice(1,l+1);c&&(u=m(u)),o.push(u),a=a.slice(l+1)}var d=o.length;for(s=0;s<d;s++){var f=o[s];i(t.decodePacket(f,n,!0),s,d)}}},function(e,t,n){"use strict";const i=n(34),s=n(14),a=n(124),{kStatusCode:o,NOOP:r}=n(7),c=Buffer.from([0,0,255,255]),p=Symbol("permessage-deflate"),l=Symbol("total-length"),u=Symbol("callback"),d=Symbol("buffers"),m=Symbol("error");let f;function h(e){this[d].push(e),this[l]+=e.length}function v(e){this[l]+=e.length,this[p]._maxPayload<1||this[l]<=this[p]._maxPayload?this[d].push(e):(this[m]=new RangeError("Max payload size exceeded"),this[m][o]=1009,this.removeListener("data",v),this.reset())}function x(e){this[p]._inflate=null,e[o]=1007,this[u](e)}e.exports=class{constructor(e,t,n){if(this._maxPayload=0|n,this._options=e||{},this._threshold=void 0!==this._options.threshold?this._options.threshold:1024,this._isServer=!!t,this._deflate=null,this._inflate=null,this.params=null,!f){const e=void 0!==this._options.concurrencyLimit?this._options.concurrencyLimit:10;f=new a(e)}}static get extensionName(){return"permessage-deflate"}offer(){const e={};return this._options.serverNoContextTakeover&&(e.server_no_context_takeover=!0),this._options.clientNoContextTakeover&&(e.client_no_context_takeover=!0),this._options.serverMaxWindowBits&&(e.server_max_window_bits=this._options.serverMaxWindowBits),this._options.clientMaxWindowBits?e.client_max_window_bits=this._options.clientMaxWindowBits:null==this._options.clientMaxWindowBits&&(e.client_max_window_bits=!0),e}accept(e){return e=this.normalizeParams(e),this.params=this._isServer?this.acceptAsServer(e):this.acceptAsClient(e),this.params}cleanup(){if(this._inflate&&(this._inflate.close(),this._inflate=null),this._deflate){const e=this._deflate[u];this._deflate.close(),this._deflate=null,e&&e(new Error("The deflate stream was closed while data was being processed"))}}acceptAsServer(e){const t=this._options,n=e.find(e=>!(!1===t.serverNoContextTakeover&&e.server_no_context_takeover||e.server_max_window_bits&&(!1===t.serverMaxWindowBits||"number"==typeof t.serverMaxWindowBits&&t.serverMaxWindowBits>e.server_max_window_bits)||"number"==typeof t.clientMaxWindowBits&&!e.client_max_window_bits));if(!n)throw new Error("None of the extension offers can be accepted");return t.serverNoContextTakeover&&(n.server_no_context_takeover=!0),t.clientNoContextTakeover&&(n.client_no_context_takeover=!0),"number"==typeof t.serverMaxWindowBits&&(n.server_max_window_bits=t.serverMaxWindowBits),"number"==typeof t.clientMaxWindowBits?n.client_max_window_bits=t.clientMaxWindowBits:!0!==n.client_max_window_bits&&!1!==t.clientMaxWindowBits||delete n.client_max_window_bits,n}acceptAsClient(e){const t=e[0];if(!1===this._options.clientNoContextTakeover&&t.client_no_context_takeover)throw new Error('Unexpected parameter "client_no_context_takeover"');if(t.client_max_window_bits){if(!1===this._options.clientMaxWindowBits||"number"==typeof this._options.clientMaxWindowBits&&t.client_max_window_bits>this._options.clientMaxWindowBits)throw new Error('Unexpected or invalid parameter "client_max_window_bits"')}else"number"==typeof this._options.clientMaxWindowBits&&(t.client_max_window_bits=this._options.clientMaxWindowBits);return t}normalizeParams(e){return e.forEach(e=>{Object.keys(e).forEach(t=>{let n=e[t];if(n.length>1)throw new Error(`Parameter "${t}" must have only a single value`);if(n=n[0],"client_max_window_bits"===t){if(!0!==n){const e=+n;if(!Number.isInteger(e)||e<8||e>15)throw new TypeError(`Invalid value for parameter "${t}": ${n}`);n=e}else if(!this._isServer)throw new TypeError(`Invalid value for parameter "${t}": ${n}`)}else if("server_max_window_bits"===t){const e=+n;if(!Number.isInteger(e)||e<8||e>15)throw new TypeError(`Invalid value for parameter "${t}": ${n}`);n=e}else{if("client_no_context_takeover"!==t&&"server_no_context_takeover"!==t)throw new Error(`Unknown parameter "${t}"`);if(!0!==n)throw new TypeError(`Invalid value for parameter "${t}": ${n}`)}e[t]=n})}),e}decompress(e,t,n){f.add(i=>{this._decompress(e,t,(e,t)=>{i(),n(e,t)})})}compress(e,t,n){f.add(i=>{this._compress(e,t,(e,t)=>{i(),n(e,t)})})}_decompress(e,t,n){const a=this._isServer?"client":"server";if(!this._inflate){const e=`${a}_max_window_bits`,t="number"!=typeof this.params[e]?i.Z_DEFAULT_WINDOWBITS:this.params[e];this._inflate=i.createInflateRaw({...this._options.zlibInflateOptions,windowBits:t}),this._inflate[p]=this,this._inflate[l]=0,this._inflate[d]=[],this._inflate.on("error",x),this._inflate.on("data",v)}this._inflate[u]=n,this._inflate.write(e),t&&this._inflate.write(c),this._inflate.flush(()=>{const e=this._inflate[m];if(e)return this._inflate.close(),this._inflate=null,void n(e);const i=s.concat(this._inflate[d],this._inflate[l]);t&&this.params[`${a}_no_context_takeover`]?(this._inflate.close(),this._inflate=null):(this._inflate[l]=0,this._inflate[d]=[]),n(null,i)})}_compress(e,t,n){const a=this._isServer?"server":"client";if(!this._deflate){const e=`${a}_max_window_bits`,t="number"!=typeof this.params[e]?i.Z_DEFAULT_WINDOWBITS:this.params[e];this._deflate=i.createDeflateRaw({...this._options.zlibDeflateOptions,windowBits:t}),this._deflate[l]=0,this._deflate[d]=[],this._deflate.on("error",r),this._deflate.on("data",h)}this._deflate[u]=n,this._deflate.write(e),this._deflate.flush(i.Z_SYNC_FLUSH,()=>{if(!this._deflate)return;let e=s.concat(this._deflate[d],this._deflate[l]);t&&(e=e.slice(0,e.length-4)),this._deflate[u]=null,t&&this.params[`${a}_no_context_takeover`]?(this._deflate.close(),this._deflate=null):(this._deflate[l]=0,this._deflate[d]=[]),n(null,e)})}}},function(e,t,n){"use strict";const{EMPTY_BUFFER:i}=n(7);function s(e,t){if(0===e.length)return i;if(1===e.length)return e[0];const n=Buffer.allocUnsafe(t);let s=0;for(let t=0;t<e.length;t++){const i=e[t];n.set(i,s),s+=i.length}return s<t?n.slice(0,s):n}function a(e,t,n,i,s){for(let a=0;a<s;a++)n[i+a]=e[a]^t[3&a]}function o(e,t){const n=e.length;for(let i=0;i<n;i++)e[i]^=t[3&i]}function r(e){return e.byteLength===e.buffer.byteLength?e.buffer:e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}function c(e){if(c.readOnly=!0,Buffer.isBuffer(e))return e;let t;return e instanceof ArrayBuffer?t=Buffer.from(e):ArrayBuffer.isView(e)?t=function(e){const t=Buffer.from(e.buffer);if(e.byteLength!==e.buffer.byteLength)return t.slice(e.byteOffset,e.byteOffset+e.byteLength);return t}(e):(t=Buffer.from(e),c.readOnly=!1),t}try{const t=n(!function(){var e=new Error("Cannot find module 'bufferutil'");throw e.code="MODULE_NOT_FOUND",e}()),i=t.BufferUtil||t;e.exports={concat:s,mask(e,t,n,s,o){o<48?a(e,t,n,s,o):i.mask(e,t,n,s,o)},toArrayBuffer:r,toBuffer:c,unmask(e,t){e.length<32?o(e,t):i.unmask(e,t)}}}catch(t){e.exports={concat:s,mask:a,toArrayBuffer:r,toBuffer:c,unmask:o}}},function(e,t,n){var i=n(130)("socket.io-parser"),s=n(134),a=n(135),o=n(42),r=n(43);function c(){}t.protocol=4,t.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],t.CONNECT=0,t.DISCONNECT=1,t.EVENT=2,t.ACK=3,t.ERROR=4,t.BINARY_EVENT=5,t.BINARY_ACK=6,t.Encoder=c,t.Decoder=u;var p=t.ERROR+'"encode error"';function l(e){var n=""+e.type;if(t.BINARY_EVENT!==e.type&&t.BINARY_ACK!==e.type||(n+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(n+=e.nsp+","),null!=e.id&&(n+=e.id),null!=e.data){var s=function(e){try{return JSON.stringify(e)}catch(e){return!1}}(e.data);if(!1===s)return p;n+=s}return i("encoded %j as %s",e,n),n}function u(){this.reconstructor=null}function d(e){this.reconPack=e,this.buffers=[]}function m(e){return{type:t.ERROR,data:"parser error: "+e}}c.prototype.encode=function(e,n){(i("encoding packet %j",e),t.BINARY_EVENT===e.type||t.BINARY_ACK===e.type)?function(e,t){a.removeBlobs(e,(function(e){var n=a.deconstructPacket(e),i=l(n.packet),s=n.buffers;s.unshift(i),t(s)}))}(e,n):n([l(e)])},s(u.prototype),u.prototype.add=function(e){var n;if("string"==typeof e)n=function(e){var n=0,s={type:Number(e.charAt(0))};if(null==t.types[s.type])return m("unknown packet type "+s.type);if(t.BINARY_EVENT===s.type||t.BINARY_ACK===s.type){for(var a="";"-"!==e.charAt(++n)&&(a+=e.charAt(n),n!=e.length););if(a!=Number(a)||"-"!==e.charAt(n))throw new Error("Illegal attachments");s.attachments=Number(a)}if("/"===e.charAt(n+1))for(s.nsp="";++n;){if(","===(c=e.charAt(n)))break;if(s.nsp+=c,n===e.length)break}else s.nsp="/";var r=e.charAt(n+1);if(""!==r&&Number(r)==r){for(s.id="";++n;){var c;if(null==(c=e.charAt(n))||Number(c)!=c){--n;break}if(s.id+=e.charAt(n),n===e.length)break}s.id=Number(s.id)}if(e.charAt(++n)){var p=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(n));if(!(!1!==p&&(s.type===t.ERROR||o(p))))return m("invalid payload");s.data=p}return i("decoded %s as %j",e,s),s}(e),t.BINARY_EVENT===n.type||t.BINARY_ACK===n.type?(this.reconstructor=new d(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!r(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(e))&&(this.reconstructor=null,this.emit("decoded",n))}},u.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},d.prototype.takeBinaryData=function(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){var t=a.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null},d.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(e,t,n){"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=n(136):e.exports=n(138)},function(e,t,n){"use strict";
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var i,s,a,o=n(62),r=n(4).extname,c=/^\s*([^;\s]*)(?:;|\s|$)/,p=/^text\//i;function l(e){if(!e||"string"!=typeof e)return!1;var t=c.exec(e),n=t&&o[t[1].toLowerCase()];return n&&n.charset?n.charset:!(!t||!p.test(t[1]))&&"UTF-8"}t.charset=l,t.charsets={lookup:l},t.contentType=function(e){if(!e||"string"!=typeof e)return!1;var n=-1===e.indexOf("/")?t.lookup(e):e;if(!n)return!1;if(-1===n.indexOf("charset")){var i=t.charset(n);i&&(n+="; charset="+i.toLowerCase())}return n},t.extension=function(e){if(!e||"string"!=typeof e)return!1;var n=c.exec(e),i=n&&t.extensions[n[1].toLowerCase()];if(!i||!i.length)return!1;return i[0]},t.extensions=Object.create(null),t.lookup=function(e){if(!e||"string"!=typeof e)return!1;var n=r("x."+e).toLowerCase().substr(1);if(!n)return!1;return t.types[n]||!1},t.types=Object.create(null),i=t.extensions,s=t.types,a=["nginx","apache",void 0,"iana"],Object.keys(o).forEach((function(e){var t=o[e],n=t.extensions;if(n&&n.length){i[e]=n;for(var r=0;r<n.length;r++){var c=n[r];if(s[c]){var p=a.indexOf(o[s[c]].source),l=a.indexOf(t.source);if("application/octet-stream"!==s[c]&&(p>l||p===l&&"application/"===s[c].substr(0,12)))continue}s[c]=e}}}))},function(e,t){e.exports=require("fs")},function(e,t){e.exports=function(e,t){return e=e||{},"string"==typeof t&&(t=t.split(/ +/)),t.reduce((function(t,n){return null==e[n]||(t[n]=e[n]),t}),{})}},function(e,t,n){"use strict";
/*!
 * http-errors
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */var i=n(27)("http-errors"),s=n(76),a=n(11),o=n(77),r=n(79);function c(e){return Number(String(e).charAt(0)+"00")}function p(e,t){var n=Object.getOwnPropertyDescriptor(e,"name");n&&n.configurable&&(n.value=t,Object.defineProperty(e,"name",n))}e.exports=function e(){for(var t,n,s=500,o={},r=0;r<arguments.length;r++){var p=arguments[r];if(p instanceof Error)s=(t=p).status||t.statusCode||s;else switch(typeof p){case"string":n=p;break;case"number":s=p,0!==r&&i("non-first-argument status code; replace with createError("+p+", ...)");break;case"object":o=p}}"number"==typeof s&&(s<400||s>=600)&&i("non-error status code; use only 4xx or 5xx status codes");("number"!=typeof s||!a[s]&&(s<400||s>=600))&&(s=500);var l=e[s]||e[c(s)];t||(t=l?new l(n):new Error(n||a[s]),Error.captureStackTrace(t,e));l&&t instanceof l&&t.status===s||(t.expose=s<500,t.status=t.statusCode=s);for(var u in o)"status"!==u&&"statusCode"!==u&&(t[u]=o[u]);return t},e.exports.HttpError=function(){function e(){throw new TypeError("cannot construct abstract class")}return o(e,Error),e}(),function(e,t,n){t.forEach((function(t){var i,l=r(a[t]);switch(c(t)){case 400:i=function(e,t,n){var i=t.match(/Error$/)?t:t+"Error";function r(e){var t=null!=e?e:a[n],o=new Error(t);return Error.captureStackTrace(o,r),s(o,r.prototype),Object.defineProperty(o,"message",{enumerable:!0,configurable:!0,value:t,writable:!0}),Object.defineProperty(o,"name",{enumerable:!1,configurable:!0,value:i,writable:!0}),o}return o(r,e),p(r,i),r.prototype.status=n,r.prototype.statusCode=n,r.prototype.expose=!0,r}(n,l,t);break;case 500:i=function(e,t,n){var i=t.match(/Error$/)?t:t+"Error";function r(e){var t=null!=e?e:a[n],o=new Error(t);return Error.captureStackTrace(o,r),s(o,r.prototype),Object.defineProperty(o,"message",{enumerable:!0,configurable:!0,value:t,writable:!0}),Object.defineProperty(o,"name",{enumerable:!1,configurable:!0,value:i,writable:!0}),o}return o(r,e),p(r,i),r.prototype.status=n,r.prototype.statusCode=n,r.prototype.expose=!1,r}(n,l,t)}i&&(e[t]=i,e[l]=i)})),e["I'mateapot"]=i.function(e.ImATeapot,'"I\'mateapot"; use "ImATeapot" instead')}(e.exports,a.codes,e.exports.HttpError)},function(e,t){e.exports=require("querystring")},function(e,t,n){var i=n(1).EventEmitter,s=n(12),a=n(0),o=n(8)("engine:transport");function r(){}function c(e){this.readyState="open",this.discarded=!1}e.exports=c,a.inherits(c,i),c.prototype.discard=function(){this.discarded=!0},c.prototype.onRequest=function(e){o("setting request"),this.req=e},c.prototype.close=function(e){"closed"!==this.readyState&&"closing"!==this.readyState&&(this.readyState="closing",this.doClose(e||r))},c.prototype.onError=function(e,t){if(this.listeners("error").length){var n=new Error(e);n.type="TransportError",n.description=t,this.emit("error",n)}else o("ignored transport error %s (%s)",e,t)},c.prototype.onPacket=function(e){this.emit("packet",e)},c.prototype.onData=function(e){this.onPacket(s.decodePacket(e))},c.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(e,t,n){var i=n(112),s=Object.prototype.toString,a="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===s.call(Blob),o="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===s.call(File);e.exports=function e(t){if(!t||"object"!=typeof t)return!1;if(i(t)){for(var n=0,s=t.length;n<s;n++)if(e(t[n]))return!0;return!1}if("function"==typeof Buffer&&Buffer.isBuffer&&Buffer.isBuffer(t)||"function"==typeof ArrayBuffer&&t instanceof ArrayBuffer||a&&t instanceof Blob||o&&t instanceof File)return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return e(t.toJSON(),!0);for(var r in t)if(Object.prototype.hasOwnProperty.call(t,r)&&e(t[r]))return!0;return!1}},function(e,t,n){function i(e){var n;function i(){if(i.enabled){var e=i,s=+new Date,a=s-(n||s);e.diff=a,e.prev=n,e.curr=s,n=s;for(var o=new Array(arguments.length),r=0;r<o.length;r++)o[r]=arguments[r];o[0]=t.coerce(o[0]),"string"!=typeof o[0]&&o.unshift("%O");var c=0;o[0]=o[0].replace(/%([a-zA-Z%])/g,(function(n,i){if("%%"===n)return n;c++;var s=t.formatters[i];if("function"==typeof s){var a=o[c];n=s.call(e,a),o.splice(c,1),c--}return n})),t.formatArgs.call(e,o);var p=i.log||t.log||console.log.bind(console);p.apply(e,o)}}return i.namespace=e,i.enabled=t.enabled(e),i.useColors=t.useColors(),i.color=function(e){var n,i=0;for(n in e)i=(i<<5)-i+e.charCodeAt(n),i|=0;return t.colors[Math.abs(i)%t.colors.length]}(e),i.destroy=s,"function"==typeof t.init&&t.init(i),t.instances.push(i),i}function s(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=i.debug=i.default=i).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var i=("string"==typeof e?e:"").split(/[\s,]+/),s=i.length;for(n=0;n<s;n++)i[n]&&("-"===(e=i[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var a=t.instances[n];a.enabled=t.enabled(a.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,i;for(n=0,i=t.skips.length;n<i;n++)if(t.skips[n].test(e))return!1;for(n=0,i=t.names.length;n<i;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(51),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t,n){"use strict";
/*!
 * on-finished
 * Copyright(c) 2013 Jonathan Ong
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e,t){if(!1!==a(e))return s(t,null,e),e;return function(e,t){var n=e.__onFinished;n&&n.queue||(n=e.__onFinished=function(e){function t(n){if(e.__onFinished===t&&(e.__onFinished=null),t.queue){var i=t.queue;t.queue=null;for(var s=0;s<i.length;s++)i[s](n,e)}}return t.queue=[],t}(e),function(e,t){var n,s,a=!1;function o(e){n.cancel(),s.cancel(),a=!0,t(e)}function r(t){e.removeListener("socket",r),a||n===s&&(s=i([[t,"error","close"]],o))}if(n=s=i([[e,"end","finish"]],o),e.socket)return void r(e.socket);e.on("socket",r),void 0===e.socket&&function(e,t){var n=e.assignSocket;if("function"!=typeof n)return;e.assignSocket=function(e){n.call(this,e),t(e)}}(e,r)}(e,n));n.queue.push(t)}(e,t),e},e.exports.isFinished=a;var i=n(55),s="function"==typeof setImmediate?setImmediate:function(e){process.nextTick(e.bind.apply(e,arguments))};function a(e){var t=e.socket;return"boolean"==typeof e.finished?Boolean(e.finished||t&&!t.writable):"boolean"==typeof e.complete?Boolean(e.upgrade||!t||!t.readable||e.complete&&!e.readable):void 0}},function(e,t,n){"use strict";
/*!
 * type-is
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var i=n(66),s=n(17);function a(e,t){var n,i,s=t,a=p(e);if(!a)return!1;if(s&&!Array.isArray(s))for(s=new Array(arguments.length-1),n=0;n<s.length;n++)s[n]=arguments[n+1];if(!s||!s.length)return a;for(n=0;n<s.length;n++)if(c(r(i=s[n]),a))return"+"===i[0]||-1!==i.indexOf("*")?a:i;return!1}function o(e){return void 0!==e.headers["transfer-encoding"]||!isNaN(e.headers["content-length"])}function r(e){if("string"!=typeof e)return!1;switch(e){case"urlencoded":return"application/x-www-form-urlencoded";case"multipart":return"multipart/*"}return"+"===e[0]?"*/*"+e:-1===e.indexOf("/")?s.lookup(e):e}function c(e,t){if(!1===e)return!1;var n=t.split("/"),i=e.split("/");return 2===n.length&&2===i.length&&(("*"===i[0]||i[0]===n[0])&&("*+"===i[1].substr(0,2)?i[1].length<=n[1].length+1&&i[1].substr(1)===n[1].substr(1-i[1].length):"*"===i[1]||i[1]===n[1]))}function p(e){if(!e)return null;try{return function(e){var t=i.parse(e);return t.parameters=void 0,i.format(t)}(e)}catch(e){return null}}e.exports=function(e,t){var n=t;if(!o(e))return null;if(arguments.length>2){n=new Array(arguments.length-1);for(var i=0;i<n.length;i++)n[i]=arguments[i+1]}var s=e.headers["content-type"];return a(s,n)},e.exports.is=a,e.exports.hasBody=o,e.exports.normalize=r,e.exports.match=c},function(module,exports,__webpack_require__){
/*!
 * depd
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */
var callSiteToString=__webpack_require__(28).callSiteToString,eventListenerCount=__webpack_require__(28).eventListenerCount,relative=__webpack_require__(4).relative;module.exports=depd;var basePath=process.cwd();function containsNamespace(e,t){for(var n=e.split(/[ ,]+/),i=String(t).toLowerCase(),s=0;s<n.length;s++){var a=n[s];if(a&&("*"===a||a.toLowerCase()===i))return!0}return!1}function convertDataDescriptorToAccessor(e,t,n){var i=Object.getOwnPropertyDescriptor(e,t),s=i.value;return i.get=function(){return s},i.writable&&(i.set=function(e){return s=e}),delete i.value,delete i.writable,Object.defineProperty(e,t,i),i}function createArgumentsString(e){for(var t="",n=0;n<e;n++)t+=", arg"+n;return t.substr(2)}function createStackString(e){var t=this.name+": "+this.namespace;this.message&&(t+=" deprecated "+this.message);for(var n=0;n<e.length;n++)t+="\n    at "+callSiteToString(e[n]);return t}function depd(e){if(!e)throw new TypeError("argument namespace is required");var t=callSiteLocation(getStack()[1])[0];function n(e){log.call(n,e)}return n._file=t,n._ignored=isignored(e),n._namespace=e,n._traced=istraced(e),n._warned=Object.create(null),n.function=wrapfunction,n.property=wrapproperty,n}function isignored(e){return!!process.noDeprecation||containsNamespace(process.env.NO_DEPRECATION||"",e)}function istraced(e){return!!process.traceDeprecation||containsNamespace(process.env.TRACE_DEPRECATION||"",e)}function log(e,t){var n=0!==eventListenerCount(process,"deprecation");if(n||!this._ignored){var i,s,a,o,r=0,c=!1,p=getStack(),l=this._file;for(t?(o=t,(a=callSiteLocation(p[1])).name=o.name,l=a[0]):a=o=callSiteLocation(p[r=2]);r<p.length;r++)if((s=(i=callSiteLocation(p[r]))[0])===l)c=!0;else if(s===this._file)l=this._file;else if(c)break;var u=i?o.join(":")+"__"+i.join(":"):void 0;if(!(void 0!==u&&u in this._warned)){this._warned[u]=!0;var d=e;if(d||(d=a!==o&&a.name?defaultMessage(a):defaultMessage(o)),n){var m=DeprecationError(this._namespace,d,p.slice(r));process.emit("deprecation",m)}else{var f=(process.stderr.isTTY?formatColor:formatPlain).call(this,d,i,p.slice(r));process.stderr.write(f+"\n","utf8")}}}}function callSiteLocation(e){var t=e.getFileName()||"<anonymous>",n=e.getLineNumber(),i=e.getColumnNumber();e.isEval()&&(t=e.getEvalOrigin()+", "+t);var s=[t,n,i];return s.callSite=e,s.name=e.getFunctionName(),s}function defaultMessage(e){var t=e.callSite,n=e.name;n||(n="<anonymous@"+formatLocation(e)+">");var i=t.getThis(),s=i&&t.getTypeName();return"Object"===s&&(s=void 0),"Function"===s&&(s=i.name||s),s&&t.getMethodName()?s+"."+n:n}function formatPlain(e,t,n){var i=(new Date).toUTCString()+" "+this._namespace+" deprecated "+e;if(this._traced){for(var s=0;s<n.length;s++)i+="\n    at "+callSiteToString(n[s]);return i}return t&&(i+=" at "+formatLocation(t)),i}function formatColor(e,t,n){var i="[36;1m"+this._namespace+"[22;39m [33;1mdeprecated[22;39m [0m"+e+"[39m";if(this._traced){for(var s=0;s<n.length;s++)i+="\n    [36mat "+callSiteToString(n[s])+"[39m";return i}return t&&(i+=" [36m"+formatLocation(t)+"[39m"),i}function formatLocation(e){return relative(basePath,e[0])+":"+e[1]+":"+e[2]}function getStack(){var e=Error.stackTraceLimit,t={},n=Error.prepareStackTrace;Error.prepareStackTrace=prepareObjectStackTrace,Error.stackTraceLimit=Math.max(10,e),Error.captureStackTrace(t);var i=t.stack.slice(1);return Error.prepareStackTrace=n,Error.stackTraceLimit=e,i}function prepareObjectStackTrace(e,t){return t}function wrapfunction(fn,message){if("function"!=typeof fn)throw new TypeError("argument fn must be a function");var args=createArgumentsString(fn.length),deprecate=this,stack=getStack(),site=callSiteLocation(stack[1]);site.name=fn.name;var deprecatedfn=eval("(function ("+args+') {\n"use strict"\nlog.call(deprecate, message, site)\nreturn fn.apply(this, arguments)\n})');return deprecatedfn}function wrapproperty(e,t,n){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("argument obj must be object");var i=Object.getOwnPropertyDescriptor(e,t);if(!i)throw new TypeError("must call property on owner object");if(!i.configurable)throw new TypeError("property must be configurable");var s=this,a=callSiteLocation(getStack()[1]);a.name=t,"value"in i&&(i=convertDataDescriptorToAccessor(e,t,n));var o=i.get,r=i.set;"function"==typeof o&&(i.get=function(){return log.call(s,n,a),o.apply(this,arguments)}),"function"==typeof r&&(i.set=function(){return log.call(s,n,a),r.apply(this,arguments)}),Object.defineProperty(e,t,i)}function DeprecationError(e,t,n){var i,s=new Error;return Object.defineProperty(s,"constructor",{value:DeprecationError}),Object.defineProperty(s,"message",{configurable:!0,enumerable:!1,value:t,writable:!0}),Object.defineProperty(s,"name",{enumerable:!1,configurable:!0,value:"DeprecationError",writable:!0}),Object.defineProperty(s,"namespace",{configurable:!0,enumerable:!1,value:e,writable:!0}),Object.defineProperty(s,"stack",{configurable:!0,enumerable:!1,get:function(){return void 0!==i?i:i=createStackString.call(this,n)},set:function(e){i=e}}),s}},function(e,t,n){"use strict";
/*!
 * depd
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var i=n(1).EventEmitter;function s(e,t,n){Object.defineProperty(e,t,{configurable:!0,enumerable:!0,get:function(){var i=n();return Object.defineProperty(e,t,{configurable:!0,enumerable:!0,value:i}),i}})}function a(e){return e.toString()}s(e.exports,"callSiteToString",(function(){var e=Error.stackTraceLimit,t={},i=Error.prepareStackTrace;Error.prepareStackTrace=function(e,t){return t},Error.stackTraceLimit=2,Error.captureStackTrace(t);var s=t.stack.slice();return Error.prepareStackTrace=i,Error.stackTraceLimit=e,s[0].toString?a:n(74)})),s(e.exports,"eventListenerCount",(function(){return i.listenerCount||n(75)}))},function(e,t){e.exports=require("net")},function(e,t,n){"use strict";
/*!
 * accepts
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var i=n(90),s=n(17);function a(e){if(!(this instanceof a))return new a(e);this.headers=e.headers,this.negotiator=new i(e)}function o(e){return-1===e.indexOf("/")?s.lookup(e):e}function r(e){return"string"==typeof e}e.exports=a,a.prototype.type=a.prototype.types=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var n=0;n<t.length;n++)t[n]=arguments[n]}if(!t||0===t.length)return this.negotiator.mediaTypes();if(!this.headers.accept)return t[0];var i=t.map(o),s=this.negotiator.mediaTypes(i.filter(r)),a=s[0];return!!a&&t[i.indexOf(a)]},a.prototype.encoding=a.prototype.encodings=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var n=0;n<t.length;n++)t[n]=arguments[n]}return t&&0!==t.length?this.negotiator.encodings(t)[0]||!1:this.negotiator.encodings()},a.prototype.charset=a.prototype.charsets=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var n=0;n<t.length;n++)t[n]=arguments[n]}return t&&0!==t.length?this.negotiator.charsets(t)[0]||!1:this.negotiator.charsets()},a.prototype.lang=a.prototype.langs=a.prototype.language=a.prototype.languages=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var n=0;n<t.length;n++)t[n]=arguments[n]}return t&&0!==t.length?this.negotiator.languages(t)[0]||!1:this.negotiator.languages()}},function(e,t,n){var i=n(110),s=n(118);e.exports=t={polling:function(e){return"string"==typeof e._query.j?new s(e):new i(e)},websocket:n(119)},t.polling.upgradesTo=["websocket"]},function(e,t,n){var i=n(22),s=n(12),a=n(34),o=n(30),r=n(0),c=n(8)("engine:polling"),p={gzip:a.createGzip,deflate:a.createDeflate};function l(e){i.call(this,e),this.closeTimeout=3e4,this.maxHttpBufferSize=null,this.httpCompression=null}e.exports=l,r.inherits(l,i),l.prototype.name="polling",l.prototype.onRequest=function(e){var t=e.res;"GET"===e.method?this.onPollRequest(e,t):"POST"===e.method?this.onDataRequest(e,t):(t.writeHead(500),t.end())},l.prototype.onPollRequest=function(e,t){if(this.req)return c("request overlap"),this.onError("overlap from client"),t.writeHead(500),void t.end();c("setting request"),this.req=e,this.res=t;var n=this;function i(){n.onError("poll connection closed prematurely")}e.cleanup=function(){e.removeListener("close",i),n.req=n.res=null},e.on("close",i),this.writable=!0,this.emit("drain"),this.writable&&this.shouldClose&&(c("triggering empty send to append close packet"),this.send([{type:"noop"}]))},l.prototype.onDataRequest=function(e,t){if(this.dataReq)return this.onError("data request overlap from client"),t.writeHead(500),void t.end();var n="application/octet-stream"===e.headers["content-type"];this.dataReq=e,this.dataRes=t;var i=n?Buffer.concat([]):"",s=this;function a(){e.removeListener("data",r),e.removeListener("end",c),e.removeListener("close",o),s.dataReq=s.dataRes=i=null}function o(){a(),s.onError("data request connection closed prematurely")}function r(t){var a;n?a=(i=Buffer.concat([i,t])).length:(i+=t,a=Buffer.byteLength(i)),a>s.maxHttpBufferSize&&(i=n?Buffer.concat([]):"",e.connection.destroy())}function c(){s.onData(i);t.writeHead(200,s.headers(e,{"Content-Type":"text/html","Content-Length":2})),t.end("ok"),a()}e.on("close",o),n||e.setEncoding("utf8"),e.on("data",r),e.on("end",c)},l.prototype.onData=function(e){c('received "%s"',e);var t=this;s.decodePayload(e,(function(e){if("close"===e.type)return c("got xhr close packet"),t.onClose(),!1;t.onPacket(e)}))},l.prototype.onClose=function(){this.writable&&this.send([{type:"noop"}]),i.prototype.onClose.call(this)},l.prototype.send=function(e){this.writable=!1,this.shouldClose&&(c("appending close packet to payload"),e.push({type:"close"}),this.shouldClose(),this.shouldClose=null);var t=this;s.encodePayload(e,this.supportsBinary,(function(n){var i=e.some((function(e){return e.options&&e.options.compress}));t.write(n,{compress:i})}))},l.prototype.write=function(e,t){c('writing "%s"',e);var n=this;this.doWrite(e,t,(function(){n.req.cleanup()}))},l.prototype.doWrite=function(e,t,n){var i=this,s="string"==typeof e,a={"Content-Type":s?"text/plain; charset=UTF-8":"application/octet-stream"};if(this.httpCompression&&t.compress)if((s?Buffer.byteLength(e):e.length)<this.httpCompression.threshold)c(e);else{var r=o(this.req).encodings(["gzip","deflate"]);r?this.compress(e,r,(function(e,t){if(e)return i.res.writeHead(500),i.res.end(),void n(e);a["Content-Encoding"]=r,c(t)})):c(e)}else c(e);function c(e){a["Content-Length"]="string"==typeof e?Buffer.byteLength(e):e.length,i.res.writeHead(200,i.headers(i.req,a)),i.res.end(e),n()}},l.prototype.compress=function(e,t,n){c("compressing");var i=[],s=0;p[t](this.httpCompression).on("error",n).on("data",(function(e){i.push(e),s+=e.length})).on("end",(function(){n(null,Buffer.concat(i,s))})).end(e)},l.prototype.doClose=function(e){c("closing");var t,n=this;function i(){clearTimeout(t),e(),n.onClose()}this.dataReq&&(c("aborting ongoing data request"),this.dataReq.destroy()),this.writable?(c("transport writable - closing right away"),this.send([{type:"close"}]),i()):this.discarded?(c("transport discarded - closing right away"),i()):(c("transport not writable - buffering orderly close"),this.shouldClose=i,t=setTimeout(i,this.closeTimeout))},l.prototype.headers=function(e,t){t=t||{};var n=e.headers["user-agent"];return n&&(~n.indexOf(";MSIE")||~n.indexOf("Trident/"))&&(t["X-XSS-Protection"]="0"),this.emit("headers",t),t}},function(e,t,n){e.exports=function(e){function t(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return i.colors[Math.abs(t)%i.colors.length]}function i(e){let n;function o(...e){if(!o.enabled)return;const t=o,s=Number(new Date),a=s-(n||s);t.diff=a,t.prev=n,t.curr=s,n=s,e[0]=i.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let r=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(n,s)=>{if("%%"===n)return n;r++;const a=i.formatters[s];if("function"==typeof a){const i=e[r];n=a.call(t,i),e.splice(r,1),r--}return n}),i.formatArgs.call(t,e),(t.log||i.log).apply(t,e)}return o.namespace=e,o.enabled=i.enabled(e),o.useColors=i.useColors(),o.color=t(e),o.destroy=s,o.extend=a,"function"==typeof i.init&&i.init(o),i.instances.push(o),o}function s(){const e=i.instances.indexOf(this);return-1!==e&&(i.instances.splice(e,1),!0)}function a(e,t){const n=i(this.namespace+(void 0===t?":":t)+e);return n.log=this.log,n}function o(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return i.debug=i,i.default=i,i.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},i.disable=function(){const e=[...i.names.map(o),...i.skips.map(o).map(e=>"-"+e)].join(",");return i.enable(""),e},i.enable=function(e){let t;i.save(e),i.names=[],i.skips=[];const n=("string"==typeof e?e:"").split(/[\s,]+/),s=n.length;for(t=0;t<s;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?i.skips.push(new RegExp("^"+e.substr(1)+"$")):i.names.push(new RegExp("^"+e+"$")));for(t=0;t<i.instances.length;t++){const e=i.instances[t];e.enabled=i.enabled(e.namespace)}},i.enabled=function(e){if("*"===e[e.length-1])return!0;let t,n;for(t=0,n=i.skips.length;t<n;t++)if(i.skips[t].test(e))return!1;for(t=0,n=i.names.length;t<n;t++)if(i.names[t].test(e))return!0;return!1},i.humanize=n(116),Object.keys(e).forEach(t=>{i[t]=e[t]}),i.instances=[],i.names=[],i.skips=[],i.formatters={},i.selectColor=t,i.enable(i.load()),i}},function(e,t){e.exports=require("zlib")},function(e,t,n){var i=n(1).EventEmitter,s=n(0),a=n(8)("engine:socket");function o(e,t,n,i){this.id=e,this.server=t,this.upgrading=!1,this.upgraded=!1,this.readyState="opening",this.writeBuffer=[],this.packetsFn=[],this.sentCallbackFn=[],this.cleanupFn=[],this.request=i,i.websocket&&i.websocket._socket?this.remoteAddress=i.websocket._socket.remoteAddress:this.remoteAddress=i.connection.remoteAddress,this.checkIntervalTimer=null,this.upgradeTimeoutTimer=null,this.pingTimeoutTimer=null,this.setTransport(n),this.onOpen()}e.exports=o,s.inherits(o,i),o.prototype.onOpen=function(){this.readyState="open",this.transport.sid=this.id,this.sendPacket("open",JSON.stringify({sid:this.id,upgrades:this.getAvailableUpgrades(),pingInterval:this.server.pingInterval,pingTimeout:this.server.pingTimeout})),this.server.initialPacket&&this.sendPacket("message",this.server.initialPacket),this.emit("open"),this.setPingTimeout()},o.prototype.onPacket=function(e){if("open"===this.readyState)switch(a("packet"),this.emit("packet",e),this.setPingTimeout(),e.type){case"ping":a("got ping"),this.sendPacket("pong"),this.emit("heartbeat");break;case"error":this.onClose("parse error");break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else a("packet received with closed socket")},o.prototype.onError=function(e){a("transport error"),this.onClose("transport error",e)},o.prototype.setPingTimeout=function(){var e=this;clearTimeout(e.pingTimeoutTimer),e.pingTimeoutTimer=setTimeout((function(){e.onClose("ping timeout")}),e.server.pingInterval+e.server.pingTimeout)},o.prototype.setTransport=function(e){var t=this.onError.bind(this),n=this.onPacket.bind(this),i=this.flush.bind(this),s=this.onClose.bind(this,"transport close");this.transport=e,this.transport.once("error",t),this.transport.on("packet",n),this.transport.on("drain",i),this.transport.once("close",s),this.setupSendCallback(),this.cleanupFn.push((function(){e.removeListener("error",t),e.removeListener("packet",n),e.removeListener("drain",i),e.removeListener("close",s)}))},o.prototype.maybeUpgrade=function(e){a('might upgrade socket transport from "%s" to "%s"',this.transport.name,e.name),this.upgrading=!0;var t=this;function n(n){"ping"===n.type&&"probe"===n.data?(e.send([{type:"pong",data:"probe"}]),t.emit("upgrading",e),clearInterval(t.checkIntervalTimer),t.checkIntervalTimer=setInterval(i,100)):"upgrade"===n.type&&"closed"!==t.readyState?(a("got upgrade packet - upgrading"),s(),t.transport.discard(),t.upgraded=!0,t.clearTransport(),t.setTransport(e),t.emit("upgrade",e),t.setPingTimeout(),t.flush(),"closing"===t.readyState&&e.close((function(){t.onClose("forced close")}))):(s(),e.close())}function i(){"polling"===t.transport.name&&t.transport.writable&&(a("writing a noop packet to polling for fast upgrade"),t.transport.send([{type:"noop"}]))}function s(){t.upgrading=!1,clearInterval(t.checkIntervalTimer),t.checkIntervalTimer=null,clearTimeout(t.upgradeTimeoutTimer),t.upgradeTimeoutTimer=null,e.removeListener("packet",n),e.removeListener("close",r),e.removeListener("error",o),t.removeListener("close",c)}function o(t){a("client did not complete upgrade - %s",t),s(),e.close(),e=null}function r(){o("transport closed")}function c(){o("socket closed")}t.upgradeTimeoutTimer=setTimeout((function(){a("client did not complete upgrade - closing transport"),s(),"open"===e.readyState&&e.close()}),this.server.upgradeTimeout),e.on("packet",n),e.once("close",r),e.once("error",o),t.once("close",c)},o.prototype.clearTransport=function(){for(var e=this.cleanupFn.length,t=0;t<e;t++)this.cleanupFn.shift()();this.transport.on("error",(function(){a("error triggered by discarded transport")})),this.transport.close(),clearTimeout(this.pingTimeoutTimer)},o.prototype.onClose=function(e,t){if("closed"!==this.readyState){this.readyState="closed",clearTimeout(this.pingTimeoutTimer),clearInterval(this.checkIntervalTimer),this.checkIntervalTimer=null,clearTimeout(this.upgradeTimeoutTimer);var n=this;process.nextTick((function(){n.writeBuffer=[]})),this.packetsFn=[],this.sentCallbackFn=[],this.clearTransport(),this.emit("close",e,t)}},o.prototype.setupSendCallback=function(){var e=this;function t(){if(e.sentCallbackFn.length>0){var t=e.sentCallbackFn.splice(0,1)[0];if("function"==typeof t)a("executing send callback"),t(e.transport);else if(Array.isArray(t)){a("executing batch send callback");for(var n=t.length,i=0;i<n;i++)"function"==typeof t[i]&&t[i](e.transport)}}}this.transport.on("drain",t),this.cleanupFn.push((function(){e.transport.removeListener("drain",t)}))},o.prototype.send=o.prototype.write=function(e,t,n){return this.sendPacket("message",e,t,n),this},o.prototype.sendPacket=function(e,t,n,i){if("function"==typeof n&&(i=n,n=null),(n=n||{}).compress=!1!==n.compress,"closing"!==this.readyState&&"closed"!==this.readyState){a('sending packet "%s" (%s)',e,t);var s={type:e,options:n};t&&(s.data=t),this.emit("packetCreate",s),this.writeBuffer.push(s),i&&this.packetsFn.push(i),this.flush()}},o.prototype.flush=function(){if("closed"!==this.readyState&&this.transport.writable&&this.writeBuffer.length){a("flushing buffer to transport"),this.emit("flush",this.writeBuffer),this.server.emit("flush",this,this.writeBuffer);var e=this.writeBuffer;this.writeBuffer=[],this.transport.supportsFraming?this.sentCallbackFn.push.apply(this.sentCallbackFn,this.packetsFn):this.sentCallbackFn.push(this.packetsFn),this.packetsFn=[],this.transport.send(e),this.emit("drain"),this.server.emit("drain",this)}},o.prototype.getAvailableUpgrades=function(){for(var e=[],t=this.server.upgrades(this.transport.name),n=0,i=t.length;n<i;++n){var s=t[n];-1!==this.server.transports.indexOf(s)&&e.push(s)}return e},o.prototype.close=function(e){"open"===this.readyState&&(this.readyState="closing",this.writeBuffer.length?this.once("drain",this.closeTransport.bind(this,e)):this.closeTransport(e))},o.prototype.closeTransport=function(e){e&&this.transport.discard(),this.transport.close(this.onClose.bind(this,"forced close"))}},function(e,t,n){"use strict";const i=n(1),s=n(122),a=n(3),o=n(29),r=n(123),{randomBytes:c,createHash:p}=n(6),{URL:l}=n(2),u=n(13),d=n(37),m=n(39),{BINARY_TYPES:f,EMPTY_BUFFER:h,GUID:v,kStatusCode:x,kWebSocket:g,NOOP:b}=n(7),{addEventListener:y,removeEventListener:w}=n(125),{format:k,parse:C}=n(40),{toBuffer:_}=n(14),E=["CONNECTING","OPEN","CLOSING","CLOSED"],S=[8,13];class O extends i{constructor(e,t,n){super(),this.readyState=O.CONNECTING,this.protocol="",this._binaryType=f[0],this._closeFrameReceived=!1,this._closeFrameSent=!1,this._closeMessage="",this._closeTimer=null,this._closeCode=1006,this._extensions={},this._receiver=null,this._sender=null,this._socket=null,null!==e?(this._bufferedAmount=0,this._isServer=!1,this._redirects=0,Array.isArray(t)?t=t.join(", "):"object"==typeof t&&null!==t&&(n=t,t=void 0),function e(t,n,i,o){const r={protocolVersion:S[1],maxPayload:104857600,perMessageDeflate:!0,followRedirects:!1,maxRedirects:10,...o,createConnection:void 0,socketPath:void 0,hostname:void 0,protocol:void 0,timeout:void 0,method:void 0,auth:void 0,host:void 0,path:void 0,port:void 0};if(!S.includes(r.protocolVersion))throw new RangeError(`Unsupported protocol version: ${r.protocolVersion} `+`(supported versions: ${S.join(", ")})`);let d;n instanceof l?(d=n,t.url=n.href):(d=new l(n),t.url=n);const m="ws+unix:"===d.protocol;if(!(d.host||m&&d.pathname))throw new Error(`Invalid URL: ${t.url}`);const f="wss:"===d.protocol||"https:"===d.protocol,h=f?443:80,x=c(16).toString("base64"),g=f?s.get:a.get;let b;r.createConnection=f?F:j,r.defaultPort=r.defaultPort||h,r.port=d.port||h,r.host=d.hostname.startsWith("[")?d.hostname.slice(1,-1):d.hostname,r.headers={"Sec-WebSocket-Version":r.protocolVersion,"Sec-WebSocket-Key":x,Connection:"Upgrade",Upgrade:"websocket",...r.headers},r.path=d.pathname+d.search,r.timeout=r.handshakeTimeout,r.perMessageDeflate&&(b=new u(!0!==r.perMessageDeflate?r.perMessageDeflate:{},!1,r.maxPayload),r.headers["Sec-WebSocket-Extensions"]=k({[u.extensionName]:b.offer()}));i&&(r.headers["Sec-WebSocket-Protocol"]=i);r.origin&&(r.protocolVersion<13?r.headers["Sec-WebSocket-Origin"]=r.origin:r.headers.Origin=r.origin);(d.username||d.password)&&(r.auth=`${d.username}:${d.password}`);if(m){const e=r.path.split(":");r.socketPath=e[0],r.path=e[1]}let y=t._req=g(r);r.timeout&&y.on("timeout",()=>{T(t,y,"Opening handshake has timed out")});y.on("error",e=>{t._req.aborted||(y=t._req=null,t.readyState=O.CLOSING,t.emit("error",e),t.emitClose())}),y.on("response",s=>{const a=s.headers.location,c=s.statusCode;if(a&&r.followRedirects&&c>=300&&c<400){if(++t._redirects>r.maxRedirects)return void T(t,y,"Maximum redirects exceeded");y.abort();const s=new l(a,n);e(t,s,i,o)}else t.emit("unexpected-response",y,s)||T(t,y,`Unexpected server response: ${s.statusCode}`)}),y.on("upgrade",(e,n,s)=>{if(t.emit("upgrade",e),t.readyState!==O.CONNECTING)return;y=t._req=null;const a=p("sha1").update(x+v).digest("base64");if(e.headers["sec-websocket-accept"]!==a)return void T(t,n,"Invalid Sec-WebSocket-Accept header");const o=e.headers["sec-websocket-protocol"],c=(i||"").split(/, */);let l;if(!i&&o?l="Server sent a subprotocol but none was requested":i&&!o?l="Server sent no subprotocol":o&&!c.includes(o)&&(l="Server sent an invalid subprotocol"),l)T(t,n,l);else{if(o&&(t.protocol=o),b)try{const n=C(e.headers["sec-websocket-extensions"]);n[u.extensionName]&&(b.accept(n[u.extensionName]),t._extensions[u.extensionName]=b)}catch(e){return void T(t,n,"Invalid Sec-WebSocket-Extensions header")}t.setSocket(n,s,r.maxPayload)}})}(this,e,t,n)):this._isServer=!0}get CONNECTING(){return O.CONNECTING}get CLOSING(){return O.CLOSING}get CLOSED(){return O.CLOSED}get OPEN(){return O.OPEN}get binaryType(){return this._binaryType}set binaryType(e){f.includes(e)&&(this._binaryType=e,this._receiver&&(this._receiver._binaryType=e))}get bufferedAmount(){return this._socket?(this._socket.bufferSize||0)+this._sender._bufferedBytes:this._bufferedAmount}get extensions(){return Object.keys(this._extensions).join()}setSocket(e,t,n){const i=new d(this._binaryType,this._extensions,this._isServer,n);this._sender=new m(e,this._extensions),this._receiver=i,this._socket=e,i[g]=this,e[g]=this,i.on("conclude",q),i.on("drain",N),i.on("error",B),i.on("message",P),i.on("ping",R),i.on("pong",z),e.setTimeout(0),e.setNoDelay(),t.length>0&&e.unshift(t),e.on("close",I),e.on("data",D),e.on("end",M),e.on("error",U),this.readyState=O.OPEN,this.emit("open")}emitClose(){if(!this._socket)return this.readyState=O.CLOSED,void this.emit("close",this._closeCode,this._closeMessage);this._extensions[u.extensionName]&&this._extensions[u.extensionName].cleanup(),this._receiver.removeAllListeners(),this.readyState=O.CLOSED,this.emit("close",this._closeCode,this._closeMessage)}close(e,t){if(this.readyState!==O.CLOSED){if(this.readyState===O.CONNECTING){const e="WebSocket was closed before the connection was established";return T(this,this._req,e)}this.readyState!==O.CLOSING?(this.readyState=O.CLOSING,this._sender.close(e,t,!this._isServer,e=>{e||(this._closeFrameSent=!0,this._closeFrameReceived&&this._socket.end())}),this._closeTimer=setTimeout(this._socket.destroy.bind(this._socket),3e4)):this._closeFrameSent&&this._closeFrameReceived&&this._socket.end()}}ping(e,t,n){if(this.readyState===O.CONNECTING)throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");"function"==typeof e?(n=e,e=t=void 0):"function"==typeof t&&(n=t,t=void 0),"number"==typeof e&&(e=e.toString()),this.readyState===O.OPEN?(void 0===t&&(t=!this._isServer),this._sender.ping(e||h,t,n)):A(this,e,n)}pong(e,t,n){if(this.readyState===O.CONNECTING)throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");"function"==typeof e?(n=e,e=t=void 0):"function"==typeof t&&(n=t,t=void 0),"number"==typeof e&&(e=e.toString()),this.readyState===O.OPEN?(void 0===t&&(t=!this._isServer),this._sender.pong(e||h,t,n)):A(this,e,n)}send(e,t,n){if(this.readyState===O.CONNECTING)throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");if("function"==typeof t&&(n=t,t={}),"number"==typeof e&&(e=e.toString()),this.readyState!==O.OPEN)return void A(this,e,n);const i={binary:"string"!=typeof e,mask:!this._isServer,compress:!0,fin:!0,...t};this._extensions[u.extensionName]||(i.compress=!1),this._sender.send(e||h,i,n)}terminate(){if(this.readyState!==O.CLOSED){if(this.readyState===O.CONNECTING){const e="WebSocket was closed before the connection was established";return T(this,this._req,e)}this._socket&&(this.readyState=O.CLOSING,this._socket.destroy())}}}function j(e){return e.path=e.socketPath,o.connect(e)}function F(e){return e.path=void 0,e.servername||""===e.servername||(e.servername=e.host),r.connect(e)}function T(e,t,n){e.readyState=O.CLOSING;const i=new Error(n);Error.captureStackTrace(i,T),t.setHeader?(t.abort(),t.once("abort",e.emitClose.bind(e)),e.emit("error",i)):(t.destroy(i),t.once("error",e.emit.bind(e,"error")),t.once("close",e.emitClose.bind(e)))}function A(e,t,n){if(t){const n=_(t).length;e._socket?e._sender._bufferedBytes+=n:e._bufferedAmount+=n}if(n){n(new Error(`WebSocket is not open: readyState ${e.readyState} `+`(${E[e.readyState]})`))}}function q(e,t){const n=this[g];n._socket.removeListener("data",D),n._socket.resume(),n._closeFrameReceived=!0,n._closeMessage=t,n._closeCode=e,1005===e?n.close():n.close(e,t)}function N(){this[g]._socket.resume()}function B(e){const t=this[g];t._socket.removeListener("data",D),t.readyState=O.CLOSING,t._closeCode=e[x],t.emit("error",e),t._socket.destroy()}function L(){this[g].emitClose()}function P(e){this[g].emit("message",e)}function R(e){const t=this[g];t.pong(e,!t._isServer,b),t.emit("ping",e)}function z(e){this[g].emit("pong",e)}function I(){const e=this[g];this.removeListener("close",I),this.removeListener("end",M),e.readyState=O.CLOSING,e._socket.read(),e._receiver.end(),this.removeListener("data",D),this[g]=void 0,clearTimeout(e._closeTimer),e._receiver._writableState.finished||e._receiver._writableState.errorEmitted?e.emitClose():(e._receiver.on("error",L),e._receiver.on("finish",L))}function D(e){this[g]._receiver.write(e)||this.pause()}function M(){const e=this[g];e.readyState=O.CLOSING,e._receiver.end(),this.end()}function U(){const e=this[g];this.removeListener("error",U),this.on("error",b),e&&(e.readyState=O.CLOSING,this.destroy())}E.forEach((e,t)=>{O[e]=t}),["open","error","close","message"].forEach(e=>{Object.defineProperty(O.prototype,`on${e}`,{get(){const t=this.listeners(e);for(let e=0;e<t.length;e++)if(t[e]._listener)return t[e]._listener},set(t){const n=this.listeners(e);for(let t=0;t<n.length;t++)n[t]._listener&&this.removeListener(e,n[t]);this.addEventListener(e,t)}})}),O.prototype.addEventListener=y,O.prototype.removeEventListener=w,e.exports=O},function(e,t,n){"use strict";const{Writable:i}=n(5),s=n(13),{BINARY_TYPES:a,EMPTY_BUFFER:o,kStatusCode:r,kWebSocket:c}=n(7),{concat:p,toArrayBuffer:l,unmask:u}=n(14),{isValidStatusCode:d,isValidUTF8:m}=n(38);function f(e,t,n,i){const s=new e(n?`Invalid WebSocket frame: ${t}`:t);return Error.captureStackTrace(s,f),s[r]=i,s}e.exports=class extends i{constructor(e,t,n,i){super(),this._binaryType=e||a[0],this[c]=void 0,this._extensions=t||{},this._isServer=!!n,this._maxPayload=0|i,this._bufferedBytes=0,this._buffers=[],this._compressed=!1,this._payloadLength=0,this._mask=void 0,this._fragmented=0,this._masked=!1,this._fin=!1,this._opcode=0,this._totalPayloadLength=0,this._messageLength=0,this._fragments=[],this._state=0,this._loop=!1}_write(e,t,n){if(8===this._opcode&&0==this._state)return n();this._bufferedBytes+=e.length,this._buffers.push(e),this.startLoop(n)}consume(e){if(this._bufferedBytes-=e,e===this._buffers[0].length)return this._buffers.shift();if(e<this._buffers[0].length){const t=this._buffers[0];return this._buffers[0]=t.slice(e),t.slice(0,e)}const t=Buffer.allocUnsafe(e);do{const n=this._buffers[0],i=t.length-e;e>=n.length?t.set(this._buffers.shift(),i):(t.set(new Uint8Array(n.buffer,n.byteOffset,e),i),this._buffers[0]=n.slice(e)),e-=n.length}while(e>0);return t}startLoop(e){let t;this._loop=!0;do{switch(this._state){case 0:t=this.getInfo();break;case 1:t=this.getPayloadLength16();break;case 2:t=this.getPayloadLength64();break;case 3:this.getMask();break;case 4:t=this.getData(e);break;default:return void(this._loop=!1)}}while(this._loop);e(t)}getInfo(){if(this._bufferedBytes<2)return void(this._loop=!1);const e=this.consume(2);if(0!=(48&e[0]))return this._loop=!1,f(RangeError,"RSV2 and RSV3 must be clear",!0,1002);const t=64==(64&e[0]);if(t&&!this._extensions[s.extensionName])return this._loop=!1,f(RangeError,"RSV1 must be clear",!0,1002);if(this._fin=128==(128&e[0]),this._opcode=15&e[0],this._payloadLength=127&e[1],0===this._opcode){if(t)return this._loop=!1,f(RangeError,"RSV1 must be clear",!0,1002);if(!this._fragmented)return this._loop=!1,f(RangeError,"invalid opcode 0",!0,1002);this._opcode=this._fragmented}else if(1===this._opcode||2===this._opcode){if(this._fragmented)return this._loop=!1,f(RangeError,`invalid opcode ${this._opcode}`,!0,1002);this._compressed=t}else{if(!(this._opcode>7&&this._opcode<11))return this._loop=!1,f(RangeError,`invalid opcode ${this._opcode}`,!0,1002);if(!this._fin)return this._loop=!1,f(RangeError,"FIN must be set",!0,1002);if(t)return this._loop=!1,f(RangeError,"RSV1 must be clear",!0,1002);if(this._payloadLength>125)return this._loop=!1,f(RangeError,`invalid payload length ${this._payloadLength}`,!0,1002)}if(this._fin||this._fragmented||(this._fragmented=this._opcode),this._masked=128==(128&e[1]),this._isServer){if(!this._masked)return this._loop=!1,f(RangeError,"MASK must be set",!0,1002)}else if(this._masked)return this._loop=!1,f(RangeError,"MASK must be clear",!0,1002);if(126===this._payloadLength)this._state=1;else{if(127!==this._payloadLength)return this.haveLength();this._state=2}}getPayloadLength16(){if(!(this._bufferedBytes<2))return this._payloadLength=this.consume(2).readUInt16BE(0),this.haveLength();this._loop=!1}getPayloadLength64(){if(this._bufferedBytes<8)return void(this._loop=!1);const e=this.consume(8),t=e.readUInt32BE(0);return t>Math.pow(2,21)-1?(this._loop=!1,f(RangeError,"Unsupported WebSocket frame: payload length > 2^53 - 1",!1,1009)):(this._payloadLength=t*Math.pow(2,32)+e.readUInt32BE(4),this.haveLength())}haveLength(){if(this._payloadLength&&this._opcode<8&&(this._totalPayloadLength+=this._payloadLength,this._totalPayloadLength>this._maxPayload&&this._maxPayload>0))return this._loop=!1,f(RangeError,"Max payload size exceeded",!1,1009);this._masked?this._state=3:this._state=4}getMask(){this._bufferedBytes<4?this._loop=!1:(this._mask=this.consume(4),this._state=4)}getData(e){let t=o;if(this._payloadLength){if(this._bufferedBytes<this._payloadLength)return void(this._loop=!1);t=this.consume(this._payloadLength),this._masked&&u(t,this._mask)}return this._opcode>7?this.controlMessage(t):this._compressed?(this._state=5,void this.decompress(t,e)):(t.length&&(this._messageLength=this._totalPayloadLength,this._fragments.push(t)),this.dataMessage())}decompress(e,t){this._extensions[s.extensionName].decompress(e,this._fin,(e,n)=>{if(e)return t(e);if(n.length){if(this._messageLength+=n.length,this._messageLength>this._maxPayload&&this._maxPayload>0)return t(f(RangeError,"Max payload size exceeded",!1,1009));this._fragments.push(n)}const i=this.dataMessage();if(i)return t(i);this.startLoop(t)})}dataMessage(){if(this._fin){const e=this._messageLength,t=this._fragments;if(this._totalPayloadLength=0,this._messageLength=0,this._fragmented=0,this._fragments=[],2===this._opcode){let n;n="nodebuffer"===this._binaryType?p(t,e):"arraybuffer"===this._binaryType?l(p(t,e)):t,this.emit("message",n)}else{const n=p(t,e);if(!m(n))return this._loop=!1,f(Error,"invalid UTF-8 sequence",!0,1007);this.emit("message",n.toString())}}this._state=0}controlMessage(e){if(8===this._opcode)if(this._loop=!1,0===e.length)this.emit("conclude",1005,""),this.end();else{if(1===e.length)return f(RangeError,"invalid payload length 1",!0,1002);{const t=e.readUInt16BE(0);if(!d(t))return f(RangeError,`invalid status code ${t}`,!0,1002);const n=e.slice(2);if(!m(n))return f(Error,"invalid UTF-8 sequence",!0,1007);this.emit("conclude",t,n.toString()),this.end()}}else 9===this._opcode?this.emit("ping",e):this.emit("pong",e);this._state=0}}},function(e,t,n){"use strict";try{const e=n(!function(){var e=new Error("Cannot find module 'utf-8-validate'");throw e.code="MODULE_NOT_FOUND",e}());t.isValidUTF8="object"==typeof e?e.Validation.isValidUTF8:e}catch(e){t.isValidUTF8=()=>!0}t.isValidStatusCode=e=>e>=1e3&&e<=1014&&1004!==e&&1005!==e&&1006!==e||e>=3e3&&e<=4999},function(e,t,n){"use strict";const{randomFillSync:i}=n(6),s=n(13),{EMPTY_BUFFER:a}=n(7),{isValidStatusCode:o}=n(38),{mask:r,toBuffer:c}=n(14),p=Buffer.alloc(4);class l{constructor(e,t){this._extensions=t||{},this._socket=e,this._firstFragment=!0,this._compress=!1,this._bufferedBytes=0,this._deflating=!1,this._queue=[]}static frame(e,t){const n=t.mask&&t.readOnly;let s=t.mask?6:2,a=e.length;e.length>=65536?(s+=8,a=127):e.length>125&&(s+=2,a=126);const o=Buffer.allocUnsafe(n?e.length+s:s);return o[0]=t.fin?128|t.opcode:t.opcode,t.rsv1&&(o[0]|=64),o[1]=a,126===a?o.writeUInt16BE(e.length,2):127===a&&(o.writeUInt32BE(0,2),o.writeUInt32BE(e.length,6)),t.mask?(i(p,0,4),o[1]|=128,o[s-4]=p[0],o[s-3]=p[1],o[s-2]=p[2],o[s-1]=p[3],n?(r(e,p,o,s,e.length),[o]):(r(e,p,e,0,e.length),[o,e])):[o,e]}close(e,t,n,i){let s;if(void 0===e)s=a;else{if("number"!=typeof e||!o(e))throw new TypeError("First argument must be a valid error code number");if(void 0===t||""===t)s=Buffer.allocUnsafe(2),s.writeUInt16BE(e,0);else{const n=Buffer.byteLength(t);if(n>123)throw new RangeError("The message must not be greater than 123 bytes");s=Buffer.allocUnsafe(2+n),s.writeUInt16BE(e,0),s.write(t,2)}}this._deflating?this.enqueue([this.doClose,s,n,i]):this.doClose(s,n,i)}doClose(e,t,n){this.sendFrame(l.frame(e,{fin:!0,rsv1:!1,opcode:8,mask:t,readOnly:!1}),n)}ping(e,t,n){const i=c(e);if(i.length>125)throw new RangeError("The data size must not be greater than 125 bytes");this._deflating?this.enqueue([this.doPing,i,t,c.readOnly,n]):this.doPing(i,t,c.readOnly,n)}doPing(e,t,n,i){this.sendFrame(l.frame(e,{fin:!0,rsv1:!1,opcode:9,mask:t,readOnly:n}),i)}pong(e,t,n){const i=c(e);if(i.length>125)throw new RangeError("The data size must not be greater than 125 bytes");this._deflating?this.enqueue([this.doPong,i,t,c.readOnly,n]):this.doPong(i,t,c.readOnly,n)}doPong(e,t,n,i){this.sendFrame(l.frame(e,{fin:!0,rsv1:!1,opcode:10,mask:t,readOnly:n}),i)}send(e,t,n){const i=c(e),a=this._extensions[s.extensionName];let o=t.binary?2:1,r=t.compress;if(this._firstFragment?(this._firstFragment=!1,r&&a&&(r=i.length>=a._threshold),this._compress=r):(r=!1,o=0),t.fin&&(this._firstFragment=!0),a){const e={fin:t.fin,rsv1:r,opcode:o,mask:t.mask,readOnly:c.readOnly};this._deflating?this.enqueue([this.dispatch,i,this._compress,e,n]):this.dispatch(i,this._compress,e,n)}else this.sendFrame(l.frame(i,{fin:t.fin,rsv1:!1,opcode:o,mask:t.mask,readOnly:c.readOnly}),n)}dispatch(e,t,n,i){if(!t)return void this.sendFrame(l.frame(e,n),i);const a=this._extensions[s.extensionName];this._deflating=!0,a.compress(e,n.fin,(e,t)=>{if(this._socket.destroyed){const e=new Error("The socket was closed while data was being compressed");"function"==typeof i&&i(e);for(let t=0;t<this._queue.length;t++){const n=this._queue[t][4];"function"==typeof n&&n(e)}}else this._deflating=!1,n.readOnly=!1,this.sendFrame(l.frame(t,n),i),this.dequeue()})}dequeue(){for(;!this._deflating&&this._queue.length;){const e=this._queue.shift();this._bufferedBytes-=e[1].length,Reflect.apply(e[0],this,e.slice(1))}}enqueue(e){this._bufferedBytes+=e[1].length,this._queue.push(e)}sendFrame(e,t){2===e.length?(this._socket.cork(),this._socket.write(e[0]),this._socket.write(e[1],t),this._socket.uncork()):this._socket.write(e[0],t)}}e.exports=l},function(e,t,n){"use strict";const i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0];function s(e,t,n){void 0===e[t]?e[t]=[n]:e[t].push(n)}e.exports={format:function(e){return Object.keys(e).map(t=>{let n=e[t];return Array.isArray(n)||(n=[n]),n.map(e=>[t].concat(Object.keys(e).map(t=>{let n=e[t];return Array.isArray(n)||(n=[n]),n.map(e=>!0===e?t:`${t}=${e}`).join("; ")})).join("; ")).join(", ")}).join(", ")},parse:function(e){const t=Object.create(null);if(void 0===e||""===e)return t;let n,a,o=Object.create(null),r=!1,c=!1,p=!1,l=-1,u=-1,d=0;for(;d<e.length;d++){const m=e.charCodeAt(d);if(void 0===n)if(-1===u&&1===i[m])-1===l&&(l=d);else if(32===m||9===m)-1===u&&-1!==l&&(u=d);else{if(59!==m&&44!==m)throw new SyntaxError(`Unexpected character at index ${d}`);{if(-1===l)throw new SyntaxError(`Unexpected character at index ${d}`);-1===u&&(u=d);const i=e.slice(l,u);44===m?(s(t,i,o),o=Object.create(null)):n=i,l=u=-1}}else if(void 0===a)if(-1===u&&1===i[m])-1===l&&(l=d);else if(32===m||9===m)-1===u&&-1!==l&&(u=d);else if(59===m||44===m){if(-1===l)throw new SyntaxError(`Unexpected character at index ${d}`);-1===u&&(u=d),s(o,e.slice(l,u),!0),44===m&&(s(t,n,o),o=Object.create(null),n=void 0),l=u=-1}else{if(61!==m||-1===l||-1!==u)throw new SyntaxError(`Unexpected character at index ${d}`);a=e.slice(l,d),l=u=-1}else if(c){if(1!==i[m])throw new SyntaxError(`Unexpected character at index ${d}`);-1===l?l=d:r||(r=!0),c=!1}else if(p)if(1===i[m])-1===l&&(l=d);else if(34===m&&-1!==l)p=!1,u=d;else{if(92!==m)throw new SyntaxError(`Unexpected character at index ${d}`);c=!0}else if(34===m&&61===e.charCodeAt(d-1))p=!0;else if(-1===u&&1===i[m])-1===l&&(l=d);else if(-1===l||32!==m&&9!==m){if(59!==m&&44!==m)throw new SyntaxError(`Unexpected character at index ${d}`);{if(-1===l)throw new SyntaxError(`Unexpected character at index ${d}`);-1===u&&(u=d);let i=e.slice(l,u);r&&(i=i.replace(/\\/g,""),r=!1),s(o,a,i),44===m&&(s(t,n,o),o=Object.create(null),n=void 0),a=void 0,l=u=-1}}else-1===u&&(u=d)}if(-1===l||p)throw new SyntaxError("Unexpected end of input");-1===u&&(u=d);const m=e.slice(l,u);return void 0===n?s(t,m,o):(void 0===a?s(o,m,!0):s(o,a,r?m.replace(/\\/g,""):m),s(t,n,o)),t}}},function(e,t,n){e.exports=function(e){function t(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return i.colors[Math.abs(t)%i.colors.length]}function i(e){let n;function o(...e){if(!o.enabled)return;const t=o,s=Number(new Date),a=s-(n||s);t.diff=a,t.prev=n,t.curr=s,n=s,e[0]=i.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let r=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(n,s)=>{if("%%"===n)return n;r++;const a=i.formatters[s];if("function"==typeof a){const i=e[r];n=a.call(t,i),e.splice(r,1),r--}return n}),i.formatArgs.call(t,e),(t.log||i.log).apply(t,e)}return o.namespace=e,o.enabled=i.enabled(e),o.useColors=i.useColors(),o.color=t(e),o.destroy=s,o.extend=a,"function"==typeof i.init&&i.init(o),i.instances.push(o),o}function s(){const e=i.instances.indexOf(this);return-1!==e&&(i.instances.splice(e,1),!0)}function a(e,t){const n=i(this.namespace+(void 0===t?":":t)+e);return n.log=this.log,n}function o(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return i.debug=i,i.default=i,i.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},i.disable=function(){const e=[...i.names.map(o),...i.skips.map(o).map(e=>"-"+e)].join(",");return i.enable(""),e},i.enable=function(e){let t;i.save(e),i.names=[],i.skips=[];const n=("string"==typeof e?e:"").split(/[\s,]+/),s=n.length;for(t=0;t<s;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?i.skips.push(new RegExp("^"+e.substr(1)+"$")):i.names.push(new RegExp("^"+e+"$")));for(t=0;t<i.instances.length;t++){const e=i.instances[t];e.enabled=i.enabled(e.namespace)}},i.enabled=function(e){if("*"===e[e.length-1])return!0;let t,n;for(t=0,n=i.skips.length;t<n;t++)if(i.skips[t].test(e))return!1;for(t=0,n=i.names.length;t<n;t++)if(i.names[t].test(e))return!0;return!1},i.humanize=n(132),Object.keys(e).forEach(t=>{i[t]=e[t]}),i.instances=[],i.names=[],i.skips=[],i.formatters={},i.selectColor=t,i.enable(i.load()),i}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){e.exports=function(e){return n&&Buffer.isBuffer(e)||i&&(e instanceof ArrayBuffer||function(e){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer}(e))};var n="function"==typeof Buffer&&"function"==typeof Buffer.isBuffer,i="function"==typeof ArrayBuffer},function(e,t,n){e.exports=function(e){function t(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return i.colors[Math.abs(t)%i.colors.length]}function i(e){let n;function o(...e){if(!o.enabled)return;const t=o,s=Number(new Date),a=s-(n||s);t.diff=a,t.prev=n,t.curr=s,n=s,e[0]=i.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let r=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(n,s)=>{if("%%"===n)return n;r++;const a=i.formatters[s];if("function"==typeof a){const i=e[r];n=a.call(t,i),e.splice(r,1),r--}return n}),i.formatArgs.call(t,e),(t.log||i.log).apply(t,e)}return o.namespace=e,o.enabled=i.enabled(e),o.useColors=i.useColors(),o.color=t(e),o.destroy=s,o.extend=a,"function"==typeof i.init&&i.init(o),i.instances.push(o),o}function s(){const e=i.instances.indexOf(this);return-1!==e&&(i.instances.splice(e,1),!0)}function a(e,t){const n=i(this.namespace+(void 0===t?":":t)+e);return n.log=this.log,n}function o(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return i.debug=i,i.default=i,i.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},i.disable=function(){const e=[...i.names.map(o),...i.skips.map(o).map(e=>"-"+e)].join(",");return i.enable(""),e},i.enable=function(e){let t;i.save(e),i.names=[],i.skips=[];const n=("string"==typeof e?e:"").split(/[\s,]+/),s=n.length;for(t=0;t<s;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?i.skips.push(new RegExp("^"+e.substr(1)+"$")):i.names.push(new RegExp("^"+e+"$")));for(t=0;t<i.instances.length;t++){const e=i.instances[t];e.enabled=i.enabled(e.namespace)}},i.enabled=function(e){if("*"===e[e.length-1])return!0;let t,n;for(t=0,n=i.skips.length;t<n;t++)if(i.skips[t].test(e))return!1;for(t=0,n=i.names.length;t<n;t++)if(i.names[t].test(e))return!0;return!1},i.humanize=n(137),Object.keys(e).forEach(t=>{i[t]=e[t]}),i.instances=[],i.names=[],i.skips=[],i.formatters={},i.selectColor=t,i.enable(i.load()),i}},function(e,t,n){var i=n(139),s=n(1).EventEmitter,a=n(15),o=n(23),r=n(16)("socket.io:namespace");e.exports=t=p,t.events=["connect","connection","newListener"],t.flags=["json","volatile","local"];var c=s.prototype.emit;function p(e,t){this.name=t,this.server=e,this.sockets={},this.connected={},this.fns=[],this.ids=0,this.rooms=[],this.flags={},this.initAdapter()}p.prototype.__proto__=s.prototype,t.flags.forEach((function(e){Object.defineProperty(p.prototype,e,{get:function(){return this.flags[e]=!0,this}})})),p.prototype.initAdapter=function(){this.adapter=new(this.server.adapter())(this)},p.prototype.use=function(e){return this.server.eio&&"/"===this.name&&(r("removing initial packet"),delete this.server.eio.initialPacket),this.fns.push(e),this},p.prototype.run=function(e,t){var n=this.fns.slice(0);if(!n.length)return t(null);!function i(s){n[s](e,(function(e){return e?t(e):n[s+1]?void i(s+1):t(null)}))}(0)},p.prototype.to=p.prototype.in=function(e){return~this.rooms.indexOf(e)||this.rooms.push(e),this},p.prototype.add=function(e,t,n){r("adding socket to nsp %s",this.name);var s=new i(this,e,t),a=this;return this.run(s,(function(t){process.nextTick((function(){if("open"==e.conn.readyState){if(t)return s.error(t.data||t.message);a.sockets[s.id]=s,s.onconnect(),n&&n(),a.emit("connect",s),a.emit("connection",s)}else r("next called after client was closed - ignoring socket")}))})),s},p.prototype.remove=function(e){this.sockets.hasOwnProperty(e.id)?delete this.sockets[e.id]:r("ignoring remove for %s",e.id)},p.prototype.emit=function(e){if(~t.events.indexOf(e))return c.apply(this,arguments),this;var n=Array.prototype.slice.call(arguments),i={type:(void 0!==this.flags.binary?this.flags.binary:o(n))?a.BINARY_EVENT:a.EVENT,data:n};if("function"==typeof n[n.length-1])throw new Error("Callbacks are not supported when broadcasting");var s=this.rooms.slice(0),r=Object.assign({},this.flags);return this.rooms=[],this.flags={},this.adapter.broadcast(i,{rooms:s,flags:r}),this},p.prototype.send=p.prototype.write=function(){var e=Array.prototype.slice.call(arguments);return e.unshift("message"),this.emit.apply(this,e),this},p.prototype.clients=function(e){if(!this.adapter)throw new Error("No adapter for this namespace, are you trying to get the list of clients of a dynamic namespace?");return this.adapter.clients(this.rooms,e),this.rooms=[],this},p.prototype.compress=function(e){return this.flags.compress=e,this},p.prototype.binary=function(e){return this.flags.binary=e,this}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(47),s=n(105),a=n(106),o=new i;s.default(o,a),o.use(e=>{e.body={code:0,message:"koa server is running"}}),o.listen(3005)},function(e,t,n){"use strict";const i=n(48),s=n(49)("koa:application"),a=n(25),o=n(56),r=n(72),c=n(73),p=n(89),l=n(11),u=n(1),d=n(0),m=n(5),f=n(3),h=n(19),v=n(98),x=n(27)("koa"),{HttpError:g}=n(20);e.exports=class extends u{constructor(e){super(),e=e||{},this.proxy=e.proxy||!1,this.subdomainOffset=e.subdomainOffset||2,this.proxyIpHeader=e.proxyIpHeader||"X-Forwarded-For",this.maxIpsCount=e.maxIpsCount||0,this.env=e.env||"production",e.keys&&(this.keys=e.keys),this.middleware=[],this.context=Object.create(c),this.request=Object.create(p),this.response=Object.create(o),d.inspect.custom&&(this[d.inspect.custom]=this.inspect)}listen(...e){return s("listen"),f.createServer(this.callback()).listen(...e)}toJSON(){return h(this,["subdomainOffset","proxy","env"])}inspect(){return this.toJSON()}use(e){if("function"!=typeof e)throw new TypeError("middleware must be a function!");return i(e)&&(x("Support for generators will be removed in v3. See the documentation for examples of how to convert old middleware https://github.com/koajs/koa/blob/master/docs/migration.md"),e=v(e)),s("use %s",e._name||e.name||"-"),this.middleware.push(e),this}callback(){const e=r(this.middleware);this.listenerCount("error")||this.on("error",this.onerror);return(t,n)=>{const i=this.createContext(t,n);return this.handleRequest(i,e)}}handleRequest(e,t){const n=e.res;n.statusCode=404;const i=t=>e.onerror(t);return a(n,i),t(e).then(()=>function(e){if(!1===e.respond)return;if(!e.writable)return;const t=e.res;let n=e.body;const i=e.status;if(l.empty[i])return e.body=null,t.end();if("HEAD"===e.method){if(!t.headersSent&&!e.response.has("Content-Length")){const{length:t}=e.response;Number.isInteger(t)&&(e.length=t)}return t.end()}if(null==n)return n=e.req.httpVersionMajor>=2?String(i):e.message||String(i),t.headersSent||(e.type="text",e.length=Buffer.byteLength(n)),t.end(n);if(Buffer.isBuffer(n))return t.end(n);if("string"==typeof n)return t.end(n);if(n instanceof m)return n.pipe(t);n=JSON.stringify(n),t.headersSent||(e.length=Buffer.byteLength(n));t.end(n)}(e)).catch(i)}createContext(e,t){const n=Object.create(this.context),i=n.request=Object.create(this.request),s=n.response=Object.create(this.response);return n.app=i.app=s.app=this,n.req=i.req=s.req=e,n.res=i.res=s.res=t,i.ctx=s.ctx=n,i.response=s,s.request=i,n.originalUrl=i.originalUrl=e.url,n.state={},n}onerror(e){if(!(e instanceof Error))throw new TypeError(d.format("non-error thrown: %j",e));if(404==e.status||e.expose)return;if(this.silent)return;const t=e.stack||e.toString();console.error(),console.error(t.replace(/^/gm,"  ")),console.error()}},e.exports.HttpError=g},function(e,t,n){"use strict";var i=Object.prototype.toString,s=Function.prototype.toString,a=/^\s*(?:function)?\*/,o="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,r=Object.getPrototypeOf,c=function(){if(!o)return!1;try{return Function("return function*() {}")()}catch(e){}}(),p=c?r(c):{};e.exports=function(e){return"function"==typeof e&&(!!a.test(s.call(e))||(o?r(e)===p:"[object GeneratorFunction]"===i.call(e)))}},function(e,t,n){"undefined"==typeof process||"renderer"===process.type?e.exports=n(50):e.exports=n(52)},function(e,t,n){function i(){var e;try{e=t.storage.debug}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e}(t=e.exports=n(24)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var i="color: "+this.color;e.splice(1,0,i,"color: inherit");var s=0,a=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(s++,"%c"===e&&(a=s))})),e.splice(a,0,i)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=i,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(i())},function(e,t){var n=1e3,i=6e4,s=36e5,a=24*s;function o(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}e.exports=function(e,t){t=t||{};var r,c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var o=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"days":case"day":case"d":return o*a;case"hours":case"hour":case"hrs":case"hr":case"h":return o*s;case"minutes":case"minute":case"mins":case"min":case"m":return o*i;case"seconds":case"second":case"secs":case"sec":case"s":return o*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}(e);if("number"===c&&!1===isNaN(e))return t.long?o(r=e,a,"day")||o(r,s,"hour")||o(r,i,"minute")||o(r,n,"second")||r+" ms":function(e){if(e>=a)return Math.round(e/a)+"d";if(e>=s)return Math.round(e/s)+"h";if(e>=i)return Math.round(e/i)+"m";if(e>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){var i=n(9),s=n(0);(t=e.exports=n(24)).init=function(e){e.inspectOpts={};for(var n=Object.keys(t.inspectOpts),i=0;i<n.length;i++)e.inspectOpts[n[i]]=t.inspectOpts[n[i]]},t.log=function(){return process.stderr.write(s.format.apply(s,arguments)+"\n")},t.formatArgs=function(e){var n=this.namespace;if(this.useColors){var i=this.color,s="[3"+(i<8?i:"8;5;"+i),a="  "+s+";1m"+n+" [0m";e[0]=a+e[0].split("\n").join("\n"+a),e.push(s+"m+"+t.humanize(this.diff)+"[0m")}else e[0]=(t.inspectOpts.hideDate?"":(new Date).toISOString()+" ")+n+" "+e[0]},t.save=function(e){null==e?delete process.env.DEBUG:process.env.DEBUG=e},t.load=o,t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):i.isatty(process.stderr.fd)},t.colors=[6,2,3,4,5,1];try{var a=n(10);a&&a.level>=2&&(t.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}function o(){return process.env.DEBUG}t.inspectOpts=Object.keys(process.env).filter((function(e){return/^debug_/i.test(e)})).reduce((function(e,t){var n=t.substring(6).toLowerCase().replace(/_([a-z])/g,(function(e,t){return t.toUpperCase()})),i=process.env[t];return i=!!/^(yes|on|true|enabled)$/i.test(i)||!/^(no|off|false|disabled)$/i.test(i)&&("null"===i?null:Number(i)),e[n]=i,e}),{}),t.formatters.o=function(e){return this.inspectOpts.colors=this.useColors,s.inspect(e,this.inspectOpts).split("\n").map((function(e){return e.trim()})).join(" ")},t.formatters.O=function(e){return this.inspectOpts.colors=this.useColors,s.inspect(e,this.inspectOpts)},t.enable(o())},function(e,t){e.exports=require("os")},function(e,t,n){"use strict";e.exports=(e,t)=>{t=t||process.argv;const n=e.startsWith("-")?"":1===e.length?"-":"--",i=t.indexOf(n+e),s=t.indexOf("--");return-1!==i&&(-1===s||i<s)}},function(e,t,n){"use strict";
/*!
 * ee-first
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */function i(e,t){return function(n){for(var i=new Array(arguments.length),s=this,a="error"===e?n:null,o=0;o<i.length;o++)i[o]=arguments[o];t(a,s,e,i)}}e.exports=function(e,t){if(!Array.isArray(e))throw new TypeError("arg must be an array of [ee, events...] arrays");for(var n=[],s=0;s<e.length;s++){var a=e[s];if(!Array.isArray(a)||a.length<2)throw new TypeError("each array member must be [ee, events...]");for(var o=a[0],r=1;r<a.length;r++){var c=a[r],p=i(c,l);o.on(c,p),n.push({ee:o,event:c,fn:p})}}function l(){u(),t.apply(null,arguments)}function u(){for(var e,t=0;t<n.length;t++)(e=n[t]).ee.removeListener(e.event,e.fn)}function d(e){t=e}return d.cancel=u,d}},function(e,t,n){"use strict";const i=n(57),s=n(60),a=n(61),o=n(25),r=n(65),c=n(26).is,p=n(11),l=n(68),u=n(69),d=n(4).extname,m=n(70),f=n(19),h=n(0),v=n(71),x=n(5);e.exports={get socket(){return this.res.socket},get header(){const{res:e}=this;return"function"==typeof e.getHeaders?e.getHeaders():e._headers||{}},get headers(){return this.header},get status(){return this.res.statusCode},set status(e){this.headerSent||(u(Number.isInteger(e),"status code must be a number"),u(e>=100&&e<=999,`invalid status code: ${e}`),this._explicitStatus=!0,this.res.statusCode=e,this.req.httpVersionMajor<2&&(this.res.statusMessage=p[e]),this.body&&p.empty[e]&&(this.body=null))},get message(){return this.res.statusMessage||p[this.status]},set message(e){this.res.statusMessage=e},get body(){return this._body},set body(e){const t=this._body;if(this._body=e,null==e)return p.empty[this.status]||(this.status=204),this.remove("Content-Type"),this.remove("Content-Length"),void this.remove("Transfer-Encoding");this._explicitStatus||(this.status=200);const n=!this.has("Content-Type");return"string"==typeof e?(n&&(this.type=/^\s*</.test(e)?"html":"text"),void(this.length=Buffer.byteLength(e))):Buffer.isBuffer(e)?(n&&(this.type="bin"),void(this.length=e.length)):"function"==typeof e.pipe?(o(this.res,l.bind(null,e)),s(e,e=>this.ctx.onerror(e)),null!=t&&t!=e&&this.remove("Content-Length"),void(n&&(this.type="bin"))):(this.remove("Content-Length"),void(this.type="json"))},set length(e){this.set("Content-Length",e)},get length(){if(this.has("Content-Length"))return parseInt(this.get("Content-Length"),10)||0;const{body:e}=this;return!e||e instanceof x?void 0:"string"==typeof e?Buffer.byteLength(e):Buffer.isBuffer(e)?e.length:Buffer.byteLength(JSON.stringify(e))},get headerSent(){return this.res.headersSent},vary(e){this.headerSent||m(this.res,e)},redirect(e,t){if("back"==e&&(e=this.ctx.get("Referrer")||t||"/"),this.set("Location",v(e)),p.redirect[this.status]||(this.status=302),this.ctx.accepts("html"))return e=r(e),this.type="text/html; charset=utf-8",void(this.body=`Redirecting to <a href="${e}">${e}</a>.`);this.type="text/plain; charset=utf-8",this.body=`Redirecting to ${e}.`},attachment(e,t){e&&(this.type=d(e)),this.set("Content-Disposition",i(e,t))},set type(e){(e=a(e))?this.set("Content-Type",e):this.remove("Content-Type")},set lastModified(e){"string"==typeof e&&(e=new Date(e)),this.set("Last-Modified",e.toUTCString())},get lastModified(){const e=this.get("last-modified");if(e)return new Date(e)},set etag(e){/^(W\/)?"/.test(e)||(e=`"${e}"`),this.set("ETag",e)},get etag(){return this.get("ETag")},get type(){const e=this.get("Content-Type");return e?e.split(";",1)[0]:""},is(e,...t){return c(this.type,e,...t)},get(e){return this.header[e.toLowerCase()]||""},has(e){return"function"==typeof this.res.hasHeader?this.res.hasHeader(e):e.toLowerCase()in this.headers},set(e,t){if(!this.headerSent)if(2==arguments.length)Array.isArray(t)?t=t.map(e=>"string"==typeof e?e:String(e)):"string"!=typeof t&&(t=String(t)),this.res.setHeader(e,t);else for(const t in e)this.set(t,e[t])},append(e,t){const n=this.get(e);return n&&(t=Array.isArray(n)?n.concat(t):[n].concat(t)),this.set(e,t)},remove(e){this.headerSent||this.res.removeHeader(e)},get writable(){if(this.res.writableEnded||this.res.finished)return!1;const e=this.res.socket;return!e||e.writable},inspect(){if(!this.res)return;const e=this.toJSON();return e.body=this.body,e},toJSON(){return f(this,["status","message","header"])},flushHeaders(){this.res.flushHeaders()}},h.inspect.custom&&(e.exports[h.inspect.custom]=e.exports.inspect)},function(e,t,n){"use strict";
/*!
 * content-disposition
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e,t){var n=t||{},s=n.type||"attachment",a=function(e,t){if(void 0===e)return;var n={};if("string"!=typeof e)throw new TypeError("filename must be a string");void 0===t&&(t=!0);if("string"!=typeof t&&"boolean"!=typeof t)throw new TypeError("fallback must be a string or boolean");if("string"==typeof t&&c.test(t))throw new TypeError("fallback must be ISO-8859-1 string");var s=i(e),a=d.test(s),r="string"!=typeof t?t&&x(s):i(t),p="string"==typeof r&&r!==s;(p||!a||o.test(s))&&(n["filename*"]=s);(a||p)&&(n.filename=p?r:s);return n}(e,n.fallback);return function(e){var t=e.parameters,n=e.type;if(!n||"string"!=typeof n||!m.test(n))throw new TypeError("invalid type");var i=String(n).toLowerCase();if(t&&"object"==typeof t)for(var s,a=Object.keys(t).sort(),o=0;o<a.length;o++){var r="*"===(s=a[o]).substr(-1)?w(t[s]):y(t[s]);i+="; "+s+"="+r}return i}(new k(s,a))},e.exports.parse=function(e){if(!e||"string"!=typeof e)throw new TypeError("argument string is required");var t=h.exec(e);if(!t)throw new TypeError("invalid type format");var n,i,s=t[0].length,a=t[1].toLowerCase(),o=[],r={};s=u.lastIndex=";"===t[0].substr(-1)?s-1:s;for(;t=u.exec(e);){if(t.index!==s)throw new TypeError("invalid parameter format");if(s+=t[0].length,n=t[1].toLowerCase(),i=t[2],-1!==o.indexOf(n))throw new TypeError("invalid duplicate parameter");o.push(n),n.indexOf("*")+1!==n.length?"string"!=typeof r[n]&&('"'===i[0]&&(i=i.substr(1,i.length-2).replace(p,"$1")),r[n]=i):(n=n.slice(0,-1),i=v(i),r[n]=i)}if(-1!==s&&s!==e.length)throw new TypeError("invalid parameter format");return new k(a,r)};var i=n(4).basename,s=n(58).Buffer,a=/[\x00-\x20"'()*,/:;<=>?@[\\\]{}\x7f]/g,o=/%[0-9A-Fa-f]{2}/,r=/%([0-9A-Fa-f]{2})/g,c=/[^\x20-\x7e\xa0-\xff]/g,p=/\\([\u0000-\u007f])/g,l=/([\\"])/g,u=/;[\x09\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*=[\x09\x20]*("(?:[\x20!\x23-\x5b\x5d-\x7e\x80-\xff]|\\[\x20-\x7e])*"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*/g,d=/^[\x20-\x7e\x80-\xff]+$/,m=/^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/,f=/^([A-Za-z0-9!#$%&+\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/,h=/^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*(?:$|;)/;function v(e){var t=f.exec(e);if(!t)throw new TypeError("invalid extended field value");var n,i=t[1].toLowerCase(),a=t[2].replace(r,g);switch(i){case"iso-8859-1":n=x(a);break;case"utf-8":n=s.from(a,"binary").toString("utf8");break;default:throw new TypeError("unsupported charset in extended field")}return n}function x(e){return String(e).replace(c,"?")}function g(e,t){return String.fromCharCode(parseInt(t,16))}function b(e){return"%"+String(e).charCodeAt(0).toString(16).toUpperCase()}function y(e){return'"'+String(e).replace(l,"\\$1")+'"'}function w(e){var t=String(e);return"UTF-8''"+encodeURIComponent(t).replace(a,b)}function k(e,t){this.type=e,this.parameters=t}},function(e,t,n){var i=n(59),s=i.Buffer;function a(e,t){for(var n in e)t[n]=e[n]}function o(e,t,n){return s(e,t,n)}s.from&&s.alloc&&s.allocUnsafe&&s.allocUnsafeSlow?e.exports=i:(a(i,t),t.Buffer=o),a(s,o),o.from=function(e,t,n){if("number"==typeof e)throw new TypeError("Argument must not be a number");return s(e,t,n)},o.alloc=function(e,t,n){if("number"!=typeof e)throw new TypeError("Argument must be a number");var i=s(e);return void 0!==t?"string"==typeof n?i.fill(t,n):i.fill(t):i.fill(0),i},o.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return s(e)},o.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i.SlowBuffer(e)}},function(e,t){e.exports=require("buffer")},function(e,t,n){var i=n(5);e.exports=function(e,t){return e instanceof i&&!~e.listeners("error").indexOf(t)&&e.on("error",t),e}},function(e,t,n){"use strict";const i=n(17),s=new(n(64))(100);e.exports=e=>{let t=s.get(e);return t||(t=i.contentType(e),s.set(e,t)),t}},function(e,t,n){
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */
e.exports=n(63)},function(e){e.exports=JSON.parse('{"application/1d-interleaved-parityfec":{"source":"iana"},"application/3gpdash-qoe-report+xml":{"source":"iana","compressible":true},"application/3gpp-ims+xml":{"source":"iana","compressible":true},"application/a2l":{"source":"iana"},"application/activemessage":{"source":"iana"},"application/activity+json":{"source":"iana","compressible":true},"application/alto-costmap+json":{"source":"iana","compressible":true},"application/alto-costmapfilter+json":{"source":"iana","compressible":true},"application/alto-directory+json":{"source":"iana","compressible":true},"application/alto-endpointcost+json":{"source":"iana","compressible":true},"application/alto-endpointcostparams+json":{"source":"iana","compressible":true},"application/alto-endpointprop+json":{"source":"iana","compressible":true},"application/alto-endpointpropparams+json":{"source":"iana","compressible":true},"application/alto-error+json":{"source":"iana","compressible":true},"application/alto-networkmap+json":{"source":"iana","compressible":true},"application/alto-networkmapfilter+json":{"source":"iana","compressible":true},"application/aml":{"source":"iana"},"application/andrew-inset":{"source":"iana","extensions":["ez"]},"application/applefile":{"source":"iana"},"application/applixware":{"source":"apache","extensions":["aw"]},"application/atf":{"source":"iana"},"application/atfx":{"source":"iana"},"application/atom+xml":{"source":"iana","compressible":true,"extensions":["atom"]},"application/atomcat+xml":{"source":"iana","compressible":true,"extensions":["atomcat"]},"application/atomdeleted+xml":{"source":"iana","compressible":true,"extensions":["atomdeleted"]},"application/atomicmail":{"source":"iana"},"application/atomsvc+xml":{"source":"iana","compressible":true,"extensions":["atomsvc"]},"application/atsc-dwd+xml":{"source":"iana","compressible":true,"extensions":["dwd"]},"application/atsc-held+xml":{"source":"iana","compressible":true,"extensions":["held"]},"application/atsc-rdt+json":{"source":"iana","compressible":true},"application/atsc-rsat+xml":{"source":"iana","compressible":true,"extensions":["rsat"]},"application/atxml":{"source":"iana"},"application/auth-policy+xml":{"source":"iana","compressible":true},"application/bacnet-xdd+zip":{"source":"iana","compressible":false},"application/batch-smtp":{"source":"iana"},"application/bdoc":{"compressible":false,"extensions":["bdoc"]},"application/beep+xml":{"source":"iana","compressible":true},"application/calendar+json":{"source":"iana","compressible":true},"application/calendar+xml":{"source":"iana","compressible":true,"extensions":["xcs"]},"application/call-completion":{"source":"iana"},"application/cals-1840":{"source":"iana"},"application/cbor":{"source":"iana"},"application/cbor-seq":{"source":"iana"},"application/cccex":{"source":"iana"},"application/ccmp+xml":{"source":"iana","compressible":true},"application/ccxml+xml":{"source":"iana","compressible":true,"extensions":["ccxml"]},"application/cdfx+xml":{"source":"iana","compressible":true,"extensions":["cdfx"]},"application/cdmi-capability":{"source":"iana","extensions":["cdmia"]},"application/cdmi-container":{"source":"iana","extensions":["cdmic"]},"application/cdmi-domain":{"source":"iana","extensions":["cdmid"]},"application/cdmi-object":{"source":"iana","extensions":["cdmio"]},"application/cdmi-queue":{"source":"iana","extensions":["cdmiq"]},"application/cdni":{"source":"iana"},"application/cea":{"source":"iana"},"application/cea-2018+xml":{"source":"iana","compressible":true},"application/cellml+xml":{"source":"iana","compressible":true},"application/cfw":{"source":"iana"},"application/clue+xml":{"source":"iana","compressible":true},"application/clue_info+xml":{"source":"iana","compressible":true},"application/cms":{"source":"iana"},"application/cnrp+xml":{"source":"iana","compressible":true},"application/coap-group+json":{"source":"iana","compressible":true},"application/coap-payload":{"source":"iana"},"application/commonground":{"source":"iana"},"application/conference-info+xml":{"source":"iana","compressible":true},"application/cose":{"source":"iana"},"application/cose-key":{"source":"iana"},"application/cose-key-set":{"source":"iana"},"application/cpl+xml":{"source":"iana","compressible":true},"application/csrattrs":{"source":"iana"},"application/csta+xml":{"source":"iana","compressible":true},"application/cstadata+xml":{"source":"iana","compressible":true},"application/csvm+json":{"source":"iana","compressible":true},"application/cu-seeme":{"source":"apache","extensions":["cu"]},"application/cwt":{"source":"iana"},"application/cybercash":{"source":"iana"},"application/dart":{"compressible":true},"application/dash+xml":{"source":"iana","compressible":true,"extensions":["mpd"]},"application/dashdelta":{"source":"iana"},"application/davmount+xml":{"source":"iana","compressible":true,"extensions":["davmount"]},"application/dca-rft":{"source":"iana"},"application/dcd":{"source":"iana"},"application/dec-dx":{"source":"iana"},"application/dialog-info+xml":{"source":"iana","compressible":true},"application/dicom":{"source":"iana"},"application/dicom+json":{"source":"iana","compressible":true},"application/dicom+xml":{"source":"iana","compressible":true},"application/dii":{"source":"iana"},"application/dit":{"source":"iana"},"application/dns":{"source":"iana"},"application/dns+json":{"source":"iana","compressible":true},"application/dns-message":{"source":"iana"},"application/docbook+xml":{"source":"apache","compressible":true,"extensions":["dbk"]},"application/dskpp+xml":{"source":"iana","compressible":true},"application/dssc+der":{"source":"iana","extensions":["dssc"]},"application/dssc+xml":{"source":"iana","compressible":true,"extensions":["xdssc"]},"application/dvcs":{"source":"iana"},"application/ecmascript":{"source":"iana","compressible":true,"extensions":["ecma","es"]},"application/edi-consent":{"source":"iana"},"application/edi-x12":{"source":"iana","compressible":false},"application/edifact":{"source":"iana","compressible":false},"application/efi":{"source":"iana"},"application/emergencycalldata.comment+xml":{"source":"iana","compressible":true},"application/emergencycalldata.control+xml":{"source":"iana","compressible":true},"application/emergencycalldata.deviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.ecall.msd":{"source":"iana"},"application/emergencycalldata.providerinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.serviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.subscriberinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.veds+xml":{"source":"iana","compressible":true},"application/emma+xml":{"source":"iana","compressible":true,"extensions":["emma"]},"application/emotionml+xml":{"source":"iana","compressible":true,"extensions":["emotionml"]},"application/encaprtp":{"source":"iana"},"application/epp+xml":{"source":"iana","compressible":true},"application/epub+zip":{"source":"iana","compressible":false,"extensions":["epub"]},"application/eshop":{"source":"iana"},"application/exi":{"source":"iana","extensions":["exi"]},"application/expect-ct-report+json":{"source":"iana","compressible":true},"application/fastinfoset":{"source":"iana"},"application/fastsoap":{"source":"iana"},"application/fdt+xml":{"source":"iana","compressible":true,"extensions":["fdt"]},"application/fhir+json":{"source":"iana","compressible":true},"application/fhir+xml":{"source":"iana","compressible":true},"application/fido.trusted-apps+json":{"compressible":true},"application/fits":{"source":"iana"},"application/flexfec":{"source":"iana"},"application/font-sfnt":{"source":"iana"},"application/font-tdpfr":{"source":"iana","extensions":["pfr"]},"application/font-woff":{"source":"iana","compressible":false},"application/framework-attributes+xml":{"source":"iana","compressible":true},"application/geo+json":{"source":"iana","compressible":true,"extensions":["geojson"]},"application/geo+json-seq":{"source":"iana"},"application/geopackage+sqlite3":{"source":"iana"},"application/geoxacml+xml":{"source":"iana","compressible":true},"application/gltf-buffer":{"source":"iana"},"application/gml+xml":{"source":"iana","compressible":true,"extensions":["gml"]},"application/gpx+xml":{"source":"apache","compressible":true,"extensions":["gpx"]},"application/gxf":{"source":"apache","extensions":["gxf"]},"application/gzip":{"source":"iana","compressible":false,"extensions":["gz"]},"application/h224":{"source":"iana"},"application/held+xml":{"source":"iana","compressible":true},"application/hjson":{"extensions":["hjson"]},"application/http":{"source":"iana"},"application/hyperstudio":{"source":"iana","extensions":["stk"]},"application/ibe-key-request+xml":{"source":"iana","compressible":true},"application/ibe-pkg-reply+xml":{"source":"iana","compressible":true},"application/ibe-pp-data":{"source":"iana"},"application/iges":{"source":"iana"},"application/im-iscomposing+xml":{"source":"iana","compressible":true},"application/index":{"source":"iana"},"application/index.cmd":{"source":"iana"},"application/index.obj":{"source":"iana"},"application/index.response":{"source":"iana"},"application/index.vnd":{"source":"iana"},"application/inkml+xml":{"source":"iana","compressible":true,"extensions":["ink","inkml"]},"application/iotp":{"source":"iana"},"application/ipfix":{"source":"iana","extensions":["ipfix"]},"application/ipp":{"source":"iana"},"application/isup":{"source":"iana"},"application/its+xml":{"source":"iana","compressible":true,"extensions":["its"]},"application/java-archive":{"source":"apache","compressible":false,"extensions":["jar","war","ear"]},"application/java-serialized-object":{"source":"apache","compressible":false,"extensions":["ser"]},"application/java-vm":{"source":"apache","compressible":false,"extensions":["class"]},"application/javascript":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["js","mjs"]},"application/jf2feed+json":{"source":"iana","compressible":true},"application/jose":{"source":"iana"},"application/jose+json":{"source":"iana","compressible":true},"application/jrd+json":{"source":"iana","compressible":true},"application/json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["json","map"]},"application/json-patch+json":{"source":"iana","compressible":true},"application/json-seq":{"source":"iana"},"application/json5":{"extensions":["json5"]},"application/jsonml+json":{"source":"apache","compressible":true,"extensions":["jsonml"]},"application/jwk+json":{"source":"iana","compressible":true},"application/jwk-set+json":{"source":"iana","compressible":true},"application/jwt":{"source":"iana"},"application/kpml-request+xml":{"source":"iana","compressible":true},"application/kpml-response+xml":{"source":"iana","compressible":true},"application/ld+json":{"source":"iana","compressible":true,"extensions":["jsonld"]},"application/lgr+xml":{"source":"iana","compressible":true,"extensions":["lgr"]},"application/link-format":{"source":"iana"},"application/load-control+xml":{"source":"iana","compressible":true},"application/lost+xml":{"source":"iana","compressible":true,"extensions":["lostxml"]},"application/lostsync+xml":{"source":"iana","compressible":true},"application/lxf":{"source":"iana"},"application/mac-binhex40":{"source":"iana","extensions":["hqx"]},"application/mac-compactpro":{"source":"apache","extensions":["cpt"]},"application/macwriteii":{"source":"iana"},"application/mads+xml":{"source":"iana","compressible":true,"extensions":["mads"]},"application/manifest+json":{"charset":"UTF-8","compressible":true,"extensions":["webmanifest"]},"application/marc":{"source":"iana","extensions":["mrc"]},"application/marcxml+xml":{"source":"iana","compressible":true,"extensions":["mrcx"]},"application/mathematica":{"source":"iana","extensions":["ma","nb","mb"]},"application/mathml+xml":{"source":"iana","compressible":true,"extensions":["mathml"]},"application/mathml-content+xml":{"source":"iana","compressible":true},"application/mathml-presentation+xml":{"source":"iana","compressible":true},"application/mbms-associated-procedure-description+xml":{"source":"iana","compressible":true},"application/mbms-deregister+xml":{"source":"iana","compressible":true},"application/mbms-envelope+xml":{"source":"iana","compressible":true},"application/mbms-msk+xml":{"source":"iana","compressible":true},"application/mbms-msk-response+xml":{"source":"iana","compressible":true},"application/mbms-protection-description+xml":{"source":"iana","compressible":true},"application/mbms-reception-report+xml":{"source":"iana","compressible":true},"application/mbms-register+xml":{"source":"iana","compressible":true},"application/mbms-register-response+xml":{"source":"iana","compressible":true},"application/mbms-schedule+xml":{"source":"iana","compressible":true},"application/mbms-user-service-description+xml":{"source":"iana","compressible":true},"application/mbox":{"source":"iana","extensions":["mbox"]},"application/media-policy-dataset+xml":{"source":"iana","compressible":true},"application/media_control+xml":{"source":"iana","compressible":true},"application/mediaservercontrol+xml":{"source":"iana","compressible":true,"extensions":["mscml"]},"application/merge-patch+json":{"source":"iana","compressible":true},"application/metalink+xml":{"source":"apache","compressible":true,"extensions":["metalink"]},"application/metalink4+xml":{"source":"iana","compressible":true,"extensions":["meta4"]},"application/mets+xml":{"source":"iana","compressible":true,"extensions":["mets"]},"application/mf4":{"source":"iana"},"application/mikey":{"source":"iana"},"application/mipc":{"source":"iana"},"application/mmt-aei+xml":{"source":"iana","compressible":true,"extensions":["maei"]},"application/mmt-usd+xml":{"source":"iana","compressible":true,"extensions":["musd"]},"application/mods+xml":{"source":"iana","compressible":true,"extensions":["mods"]},"application/moss-keys":{"source":"iana"},"application/moss-signature":{"source":"iana"},"application/mosskey-data":{"source":"iana"},"application/mosskey-request":{"source":"iana"},"application/mp21":{"source":"iana","extensions":["m21","mp21"]},"application/mp4":{"source":"iana","extensions":["mp4s","m4p"]},"application/mpeg4-generic":{"source":"iana"},"application/mpeg4-iod":{"source":"iana"},"application/mpeg4-iod-xmt":{"source":"iana"},"application/mrb-consumer+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/mrb-publish+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/msc-ivr+xml":{"source":"iana","compressible":true},"application/msc-mixer+xml":{"source":"iana","compressible":true},"application/msword":{"source":"iana","compressible":false,"extensions":["doc","dot"]},"application/mud+json":{"source":"iana","compressible":true},"application/multipart-core":{"source":"iana"},"application/mxf":{"source":"iana","extensions":["mxf"]},"application/n-quads":{"source":"iana","extensions":["nq"]},"application/n-triples":{"source":"iana","extensions":["nt"]},"application/nasdata":{"source":"iana"},"application/news-checkgroups":{"source":"iana"},"application/news-groupinfo":{"source":"iana"},"application/news-transmission":{"source":"iana"},"application/nlsml+xml":{"source":"iana","compressible":true},"application/node":{"source":"iana"},"application/nss":{"source":"iana"},"application/ocsp-request":{"source":"iana"},"application/ocsp-response":{"source":"iana"},"application/octet-stream":{"source":"iana","compressible":false,"extensions":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{"source":"iana","extensions":["oda"]},"application/odm+xml":{"source":"iana","compressible":true},"application/odx":{"source":"iana"},"application/oebps-package+xml":{"source":"iana","compressible":true,"extensions":["opf"]},"application/ogg":{"source":"iana","compressible":false,"extensions":["ogx"]},"application/omdoc+xml":{"source":"apache","compressible":true,"extensions":["omdoc"]},"application/onenote":{"source":"apache","extensions":["onetoc","onetoc2","onetmp","onepkg"]},"application/oscore":{"source":"iana"},"application/oxps":{"source":"iana","extensions":["oxps"]},"application/p2p-overlay+xml":{"source":"iana","compressible":true,"extensions":["relo"]},"application/parityfec":{"source":"iana"},"application/passport":{"source":"iana"},"application/patch-ops-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/pdf":{"source":"iana","compressible":false,"extensions":["pdf"]},"application/pdx":{"source":"iana"},"application/pem-certificate-chain":{"source":"iana"},"application/pgp-encrypted":{"source":"iana","compressible":false,"extensions":["pgp"]},"application/pgp-keys":{"source":"iana"},"application/pgp-signature":{"source":"iana","extensions":["asc","sig"]},"application/pics-rules":{"source":"apache","extensions":["prf"]},"application/pidf+xml":{"source":"iana","compressible":true},"application/pidf-diff+xml":{"source":"iana","compressible":true},"application/pkcs10":{"source":"iana","extensions":["p10"]},"application/pkcs12":{"source":"iana"},"application/pkcs7-mime":{"source":"iana","extensions":["p7m","p7c"]},"application/pkcs7-signature":{"source":"iana","extensions":["p7s"]},"application/pkcs8":{"source":"iana","extensions":["p8"]},"application/pkcs8-encrypted":{"source":"iana"},"application/pkix-attr-cert":{"source":"iana","extensions":["ac"]},"application/pkix-cert":{"source":"iana","extensions":["cer"]},"application/pkix-crl":{"source":"iana","extensions":["crl"]},"application/pkix-pkipath":{"source":"iana","extensions":["pkipath"]},"application/pkixcmp":{"source":"iana","extensions":["pki"]},"application/pls+xml":{"source":"iana","compressible":true,"extensions":["pls"]},"application/poc-settings+xml":{"source":"iana","compressible":true},"application/postscript":{"source":"iana","compressible":true,"extensions":["ai","eps","ps"]},"application/ppsp-tracker+json":{"source":"iana","compressible":true},"application/problem+json":{"source":"iana","compressible":true},"application/problem+xml":{"source":"iana","compressible":true},"application/provenance+xml":{"source":"iana","compressible":true,"extensions":["provx"]},"application/prs.alvestrand.titrax-sheet":{"source":"iana"},"application/prs.cww":{"source":"iana","extensions":["cww"]},"application/prs.hpub+zip":{"source":"iana","compressible":false},"application/prs.nprend":{"source":"iana"},"application/prs.plucker":{"source":"iana"},"application/prs.rdf-xml-crypt":{"source":"iana"},"application/prs.xsf+xml":{"source":"iana","compressible":true},"application/pskc+xml":{"source":"iana","compressible":true,"extensions":["pskcxml"]},"application/qsig":{"source":"iana"},"application/raml+yaml":{"compressible":true,"extensions":["raml"]},"application/raptorfec":{"source":"iana"},"application/rdap+json":{"source":"iana","compressible":true},"application/rdf+xml":{"source":"iana","compressible":true,"extensions":["rdf","owl"]},"application/reginfo+xml":{"source":"iana","compressible":true,"extensions":["rif"]},"application/relax-ng-compact-syntax":{"source":"iana","extensions":["rnc"]},"application/remote-printing":{"source":"iana"},"application/reputon+json":{"source":"iana","compressible":true},"application/resource-lists+xml":{"source":"iana","compressible":true,"extensions":["rl"]},"application/resource-lists-diff+xml":{"source":"iana","compressible":true,"extensions":["rld"]},"application/rfc+xml":{"source":"iana","compressible":true},"application/riscos":{"source":"iana"},"application/rlmi+xml":{"source":"iana","compressible":true},"application/rls-services+xml":{"source":"iana","compressible":true,"extensions":["rs"]},"application/route-apd+xml":{"source":"iana","compressible":true,"extensions":["rapd"]},"application/route-s-tsid+xml":{"source":"iana","compressible":true,"extensions":["sls"]},"application/route-usd+xml":{"source":"iana","compressible":true,"extensions":["rusd"]},"application/rpki-ghostbusters":{"source":"iana","extensions":["gbr"]},"application/rpki-manifest":{"source":"iana","extensions":["mft"]},"application/rpki-publication":{"source":"iana"},"application/rpki-roa":{"source":"iana","extensions":["roa"]},"application/rpki-updown":{"source":"iana"},"application/rsd+xml":{"source":"apache","compressible":true,"extensions":["rsd"]},"application/rss+xml":{"source":"apache","compressible":true,"extensions":["rss"]},"application/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"application/rtploopback":{"source":"iana"},"application/rtx":{"source":"iana"},"application/samlassertion+xml":{"source":"iana","compressible":true},"application/samlmetadata+xml":{"source":"iana","compressible":true},"application/sbml+xml":{"source":"iana","compressible":true,"extensions":["sbml"]},"application/scaip+xml":{"source":"iana","compressible":true},"application/scim+json":{"source":"iana","compressible":true},"application/scvp-cv-request":{"source":"iana","extensions":["scq"]},"application/scvp-cv-response":{"source":"iana","extensions":["scs"]},"application/scvp-vp-request":{"source":"iana","extensions":["spq"]},"application/scvp-vp-response":{"source":"iana","extensions":["spp"]},"application/sdp":{"source":"iana","extensions":["sdp"]},"application/secevent+jwt":{"source":"iana"},"application/senml+cbor":{"source":"iana"},"application/senml+json":{"source":"iana","compressible":true},"application/senml+xml":{"source":"iana","compressible":true,"extensions":["senmlx"]},"application/senml-exi":{"source":"iana"},"application/sensml+cbor":{"source":"iana"},"application/sensml+json":{"source":"iana","compressible":true},"application/sensml+xml":{"source":"iana","compressible":true,"extensions":["sensmlx"]},"application/sensml-exi":{"source":"iana"},"application/sep+xml":{"source":"iana","compressible":true},"application/sep-exi":{"source":"iana"},"application/session-info":{"source":"iana"},"application/set-payment":{"source":"iana"},"application/set-payment-initiation":{"source":"iana","extensions":["setpay"]},"application/set-registration":{"source":"iana"},"application/set-registration-initiation":{"source":"iana","extensions":["setreg"]},"application/sgml":{"source":"iana"},"application/sgml-open-catalog":{"source":"iana"},"application/shf+xml":{"source":"iana","compressible":true,"extensions":["shf"]},"application/sieve":{"source":"iana","extensions":["siv","sieve"]},"application/simple-filter+xml":{"source":"iana","compressible":true},"application/simple-message-summary":{"source":"iana"},"application/simplesymbolcontainer":{"source":"iana"},"application/sipc":{"source":"iana"},"application/slate":{"source":"iana"},"application/smil":{"source":"iana"},"application/smil+xml":{"source":"iana","compressible":true,"extensions":["smi","smil"]},"application/smpte336m":{"source":"iana"},"application/soap+fastinfoset":{"source":"iana"},"application/soap+xml":{"source":"iana","compressible":true},"application/sparql-query":{"source":"iana","extensions":["rq"]},"application/sparql-results+xml":{"source":"iana","compressible":true,"extensions":["srx"]},"application/spirits-event+xml":{"source":"iana","compressible":true},"application/sql":{"source":"iana"},"application/srgs":{"source":"iana","extensions":["gram"]},"application/srgs+xml":{"source":"iana","compressible":true,"extensions":["grxml"]},"application/sru+xml":{"source":"iana","compressible":true,"extensions":["sru"]},"application/ssdl+xml":{"source":"apache","compressible":true,"extensions":["ssdl"]},"application/ssml+xml":{"source":"iana","compressible":true,"extensions":["ssml"]},"application/stix+json":{"source":"iana","compressible":true},"application/swid+xml":{"source":"iana","compressible":true,"extensions":["swidtag"]},"application/tamp-apex-update":{"source":"iana"},"application/tamp-apex-update-confirm":{"source":"iana"},"application/tamp-community-update":{"source":"iana"},"application/tamp-community-update-confirm":{"source":"iana"},"application/tamp-error":{"source":"iana"},"application/tamp-sequence-adjust":{"source":"iana"},"application/tamp-sequence-adjust-confirm":{"source":"iana"},"application/tamp-status-query":{"source":"iana"},"application/tamp-status-response":{"source":"iana"},"application/tamp-update":{"source":"iana"},"application/tamp-update-confirm":{"source":"iana"},"application/tar":{"compressible":true},"application/taxii+json":{"source":"iana","compressible":true},"application/tei+xml":{"source":"iana","compressible":true,"extensions":["tei","teicorpus"]},"application/tetra_isi":{"source":"iana"},"application/thraud+xml":{"source":"iana","compressible":true,"extensions":["tfi"]},"application/timestamp-query":{"source":"iana"},"application/timestamp-reply":{"source":"iana"},"application/timestamped-data":{"source":"iana","extensions":["tsd"]},"application/tlsrpt+gzip":{"source":"iana"},"application/tlsrpt+json":{"source":"iana","compressible":true},"application/tnauthlist":{"source":"iana"},"application/toml":{"compressible":true,"extensions":["toml"]},"application/trickle-ice-sdpfrag":{"source":"iana"},"application/trig":{"source":"iana"},"application/ttml+xml":{"source":"iana","compressible":true,"extensions":["ttml"]},"application/tve-trigger":{"source":"iana"},"application/tzif":{"source":"iana"},"application/tzif-leap":{"source":"iana"},"application/ulpfec":{"source":"iana"},"application/urc-grpsheet+xml":{"source":"iana","compressible":true},"application/urc-ressheet+xml":{"source":"iana","compressible":true,"extensions":["rsheet"]},"application/urc-targetdesc+xml":{"source":"iana","compressible":true},"application/urc-uisocketdesc+xml":{"source":"iana","compressible":true},"application/vcard+json":{"source":"iana","compressible":true},"application/vcard+xml":{"source":"iana","compressible":true},"application/vemmi":{"source":"iana"},"application/vividence.scriptfile":{"source":"apache"},"application/vnd.1000minds.decision-model+xml":{"source":"iana","compressible":true,"extensions":["1km"]},"application/vnd.3gpp-prose+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-prose-pc3ch+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-v2x-local-service-information":{"source":"iana"},"application/vnd.3gpp.access-transfer-events+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.bsf+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gmop+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mc-signalling-ear":{"source":"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-payload":{"source":"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-signalling":{"source":"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-floor-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-signed+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-init-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-transmission-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mid-call+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.pic-bw-large":{"source":"iana","extensions":["plb"]},"application/vnd.3gpp.pic-bw-small":{"source":"iana","extensions":["psb"]},"application/vnd.3gpp.pic-bw-var":{"source":"iana","extensions":["pvb"]},"application/vnd.3gpp.sms":{"source":"iana"},"application/vnd.3gpp.sms+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-ext+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.state-and-event-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ussd+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.bcmcsinfo+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.sms":{"source":"iana"},"application/vnd.3gpp2.tcap":{"source":"iana","extensions":["tcap"]},"application/vnd.3lightssoftware.imagescal":{"source":"iana"},"application/vnd.3m.post-it-notes":{"source":"iana","extensions":["pwn"]},"application/vnd.accpac.simply.aso":{"source":"iana","extensions":["aso"]},"application/vnd.accpac.simply.imp":{"source":"iana","extensions":["imp"]},"application/vnd.acucobol":{"source":"iana","extensions":["acu"]},"application/vnd.acucorp":{"source":"iana","extensions":["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{"source":"apache","compressible":false,"extensions":["air"]},"application/vnd.adobe.flash.movie":{"source":"iana"},"application/vnd.adobe.formscentral.fcdt":{"source":"iana","extensions":["fcdt"]},"application/vnd.adobe.fxp":{"source":"iana","extensions":["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{"source":"iana"},"application/vnd.adobe.xdp+xml":{"source":"iana","compressible":true,"extensions":["xdp"]},"application/vnd.adobe.xfdf":{"source":"iana","extensions":["xfdf"]},"application/vnd.aether.imp":{"source":"iana"},"application/vnd.afpc.afplinedata":{"source":"iana"},"application/vnd.afpc.afplinedata-pagedef":{"source":"iana"},"application/vnd.afpc.foca-charset":{"source":"iana"},"application/vnd.afpc.foca-codedfont":{"source":"iana"},"application/vnd.afpc.foca-codepage":{"source":"iana"},"application/vnd.afpc.modca":{"source":"iana"},"application/vnd.afpc.modca-formdef":{"source":"iana"},"application/vnd.afpc.modca-mediummap":{"source":"iana"},"application/vnd.afpc.modca-objectcontainer":{"source":"iana"},"application/vnd.afpc.modca-overlay":{"source":"iana"},"application/vnd.afpc.modca-pagesegment":{"source":"iana"},"application/vnd.ah-barcode":{"source":"iana"},"application/vnd.ahead.space":{"source":"iana","extensions":["ahead"]},"application/vnd.airzip.filesecure.azf":{"source":"iana","extensions":["azf"]},"application/vnd.airzip.filesecure.azs":{"source":"iana","extensions":["azs"]},"application/vnd.amadeus+json":{"source":"iana","compressible":true},"application/vnd.amazon.ebook":{"source":"apache","extensions":["azw"]},"application/vnd.amazon.mobi8-ebook":{"source":"iana"},"application/vnd.americandynamics.acc":{"source":"iana","extensions":["acc"]},"application/vnd.amiga.ami":{"source":"iana","extensions":["ami"]},"application/vnd.amundsen.maze+xml":{"source":"iana","compressible":true},"application/vnd.android.ota":{"source":"iana"},"application/vnd.android.package-archive":{"source":"apache","compressible":false,"extensions":["apk"]},"application/vnd.anki":{"source":"iana"},"application/vnd.anser-web-certificate-issue-initiation":{"source":"iana","extensions":["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{"source":"apache","extensions":["fti"]},"application/vnd.antix.game-component":{"source":"iana","extensions":["atx"]},"application/vnd.apache.thrift.binary":{"source":"iana"},"application/vnd.apache.thrift.compact":{"source":"iana"},"application/vnd.apache.thrift.json":{"source":"iana"},"application/vnd.api+json":{"source":"iana","compressible":true},"application/vnd.aplextor.warrp+json":{"source":"iana","compressible":true},"application/vnd.apothekende.reservation+json":{"source":"iana","compressible":true},"application/vnd.apple.installer+xml":{"source":"iana","compressible":true,"extensions":["mpkg"]},"application/vnd.apple.keynote":{"source":"iana","extensions":["keynote"]},"application/vnd.apple.mpegurl":{"source":"iana","extensions":["m3u8"]},"application/vnd.apple.numbers":{"source":"iana","extensions":["numbers"]},"application/vnd.apple.pages":{"source":"iana","extensions":["pages"]},"application/vnd.apple.pkpass":{"compressible":false,"extensions":["pkpass"]},"application/vnd.arastra.swi":{"source":"iana"},"application/vnd.aristanetworks.swi":{"source":"iana","extensions":["swi"]},"application/vnd.artisan+json":{"source":"iana","compressible":true},"application/vnd.artsquare":{"source":"iana"},"application/vnd.astraea-software.iota":{"source":"iana","extensions":["iota"]},"application/vnd.audiograph":{"source":"iana","extensions":["aep"]},"application/vnd.autopackage":{"source":"iana"},"application/vnd.avalon+json":{"source":"iana","compressible":true},"application/vnd.avistar+xml":{"source":"iana","compressible":true},"application/vnd.balsamiq.bmml+xml":{"source":"iana","compressible":true,"extensions":["bmml"]},"application/vnd.balsamiq.bmpr":{"source":"iana"},"application/vnd.banana-accounting":{"source":"iana"},"application/vnd.bbf.usp.error":{"source":"iana"},"application/vnd.bbf.usp.msg":{"source":"iana"},"application/vnd.bbf.usp.msg+json":{"source":"iana","compressible":true},"application/vnd.bekitzur-stech+json":{"source":"iana","compressible":true},"application/vnd.bint.med-content":{"source":"iana"},"application/vnd.biopax.rdf+xml":{"source":"iana","compressible":true},"application/vnd.blink-idb-value-wrapper":{"source":"iana"},"application/vnd.blueice.multipass":{"source":"iana","extensions":["mpm"]},"application/vnd.bluetooth.ep.oob":{"source":"iana"},"application/vnd.bluetooth.le.oob":{"source":"iana"},"application/vnd.bmi":{"source":"iana","extensions":["bmi"]},"application/vnd.bpf":{"source":"iana"},"application/vnd.bpf3":{"source":"iana"},"application/vnd.businessobjects":{"source":"iana","extensions":["rep"]},"application/vnd.byu.uapi+json":{"source":"iana","compressible":true},"application/vnd.cab-jscript":{"source":"iana"},"application/vnd.canon-cpdl":{"source":"iana"},"application/vnd.canon-lips":{"source":"iana"},"application/vnd.capasystems-pg+json":{"source":"iana","compressible":true},"application/vnd.cendio.thinlinc.clientconf":{"source":"iana"},"application/vnd.century-systems.tcp_stream":{"source":"iana"},"application/vnd.chemdraw+xml":{"source":"iana","compressible":true,"extensions":["cdxml"]},"application/vnd.chess-pgn":{"source":"iana"},"application/vnd.chipnuts.karaoke-mmd":{"source":"iana","extensions":["mmd"]},"application/vnd.ciedi":{"source":"iana"},"application/vnd.cinderella":{"source":"iana","extensions":["cdy"]},"application/vnd.cirpack.isdn-ext":{"source":"iana"},"application/vnd.citationstyles.style+xml":{"source":"iana","compressible":true,"extensions":["csl"]},"application/vnd.claymore":{"source":"iana","extensions":["cla"]},"application/vnd.cloanto.rp9":{"source":"iana","extensions":["rp9"]},"application/vnd.clonk.c4group":{"source":"iana","extensions":["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{"source":"iana","extensions":["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{"source":"iana","extensions":["c11amz"]},"application/vnd.coffeescript":{"source":"iana"},"application/vnd.collabio.xodocuments.document":{"source":"iana"},"application/vnd.collabio.xodocuments.document-template":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation-template":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{"source":"iana"},"application/vnd.collection+json":{"source":"iana","compressible":true},"application/vnd.collection.doc+json":{"source":"iana","compressible":true},"application/vnd.collection.next+json":{"source":"iana","compressible":true},"application/vnd.comicbook+zip":{"source":"iana","compressible":false},"application/vnd.comicbook-rar":{"source":"iana"},"application/vnd.commerce-battelle":{"source":"iana"},"application/vnd.commonspace":{"source":"iana","extensions":["csp"]},"application/vnd.contact.cmsg":{"source":"iana","extensions":["cdbcmsg"]},"application/vnd.coreos.ignition+json":{"source":"iana","compressible":true},"application/vnd.cosmocaller":{"source":"iana","extensions":["cmc"]},"application/vnd.crick.clicker":{"source":"iana","extensions":["clkx"]},"application/vnd.crick.clicker.keyboard":{"source":"iana","extensions":["clkk"]},"application/vnd.crick.clicker.palette":{"source":"iana","extensions":["clkp"]},"application/vnd.crick.clicker.template":{"source":"iana","extensions":["clkt"]},"application/vnd.crick.clicker.wordbank":{"source":"iana","extensions":["clkw"]},"application/vnd.criticaltools.wbs+xml":{"source":"iana","compressible":true,"extensions":["wbs"]},"application/vnd.cryptii.pipe+json":{"source":"iana","compressible":true},"application/vnd.crypto-shade-file":{"source":"iana"},"application/vnd.ctc-posml":{"source":"iana","extensions":["pml"]},"application/vnd.ctct.ws+xml":{"source":"iana","compressible":true},"application/vnd.cups-pdf":{"source":"iana"},"application/vnd.cups-postscript":{"source":"iana"},"application/vnd.cups-ppd":{"source":"iana","extensions":["ppd"]},"application/vnd.cups-raster":{"source":"iana"},"application/vnd.cups-raw":{"source":"iana"},"application/vnd.curl":{"source":"iana"},"application/vnd.curl.car":{"source":"apache","extensions":["car"]},"application/vnd.curl.pcurl":{"source":"apache","extensions":["pcurl"]},"application/vnd.cyan.dean.root+xml":{"source":"iana","compressible":true},"application/vnd.cybank":{"source":"iana"},"application/vnd.d2l.coursepackage1p0+zip":{"source":"iana","compressible":false},"application/vnd.dart":{"source":"iana","compressible":true,"extensions":["dart"]},"application/vnd.data-vision.rdz":{"source":"iana","extensions":["rdz"]},"application/vnd.datapackage+json":{"source":"iana","compressible":true},"application/vnd.dataresource+json":{"source":"iana","compressible":true},"application/vnd.debian.binary-package":{"source":"iana"},"application/vnd.dece.data":{"source":"iana","extensions":["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{"source":"iana","compressible":true,"extensions":["uvt","uvvt"]},"application/vnd.dece.unspecified":{"source":"iana","extensions":["uvx","uvvx"]},"application/vnd.dece.zip":{"source":"iana","extensions":["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{"source":"iana","extensions":["fe_launch"]},"application/vnd.desmume.movie":{"source":"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{"source":"iana"},"application/vnd.dm.delegation+xml":{"source":"iana","compressible":true},"application/vnd.dna":{"source":"iana","extensions":["dna"]},"application/vnd.document+json":{"source":"iana","compressible":true},"application/vnd.dolby.mlp":{"source":"apache","extensions":["mlp"]},"application/vnd.dolby.mobile.1":{"source":"iana"},"application/vnd.dolby.mobile.2":{"source":"iana"},"application/vnd.doremir.scorecloud-binary-document":{"source":"iana"},"application/vnd.dpgraph":{"source":"iana","extensions":["dpg"]},"application/vnd.dreamfactory":{"source":"iana","extensions":["dfac"]},"application/vnd.drive+json":{"source":"iana","compressible":true},"application/vnd.ds-keypoint":{"source":"apache","extensions":["kpxx"]},"application/vnd.dtg.local":{"source":"iana"},"application/vnd.dtg.local.flash":{"source":"iana"},"application/vnd.dtg.local.html":{"source":"iana"},"application/vnd.dvb.ait":{"source":"iana","extensions":["ait"]},"application/vnd.dvb.dvbj":{"source":"iana"},"application/vnd.dvb.esgcontainer":{"source":"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess2":{"source":"iana"},"application/vnd.dvb.ipdcesgpdd":{"source":"iana"},"application/vnd.dvb.ipdcroaming":{"source":"iana"},"application/vnd.dvb.iptv.alfec-base":{"source":"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{"source":"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-container+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-generic+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-msglist+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-request+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-response+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-init+xml":{"source":"iana","compressible":true},"application/vnd.dvb.pfr":{"source":"iana"},"application/vnd.dvb.service":{"source":"iana","extensions":["svc"]},"application/vnd.dxr":{"source":"iana"},"application/vnd.dynageo":{"source":"iana","extensions":["geo"]},"application/vnd.dzr":{"source":"iana"},"application/vnd.easykaraoke.cdgdownload":{"source":"iana"},"application/vnd.ecdis-update":{"source":"iana"},"application/vnd.ecip.rlp":{"source":"iana"},"application/vnd.ecowin.chart":{"source":"iana","extensions":["mag"]},"application/vnd.ecowin.filerequest":{"source":"iana"},"application/vnd.ecowin.fileupdate":{"source":"iana"},"application/vnd.ecowin.series":{"source":"iana"},"application/vnd.ecowin.seriesrequest":{"source":"iana"},"application/vnd.ecowin.seriesupdate":{"source":"iana"},"application/vnd.efi.img":{"source":"iana"},"application/vnd.efi.iso":{"source":"iana"},"application/vnd.emclient.accessrequest+xml":{"source":"iana","compressible":true},"application/vnd.enliven":{"source":"iana","extensions":["nml"]},"application/vnd.enphase.envoy":{"source":"iana"},"application/vnd.eprints.data+xml":{"source":"iana","compressible":true},"application/vnd.epson.esf":{"source":"iana","extensions":["esf"]},"application/vnd.epson.msf":{"source":"iana","extensions":["msf"]},"application/vnd.epson.quickanime":{"source":"iana","extensions":["qam"]},"application/vnd.epson.salt":{"source":"iana","extensions":["slt"]},"application/vnd.epson.ssf":{"source":"iana","extensions":["ssf"]},"application/vnd.ericsson.quickcall":{"source":"iana"},"application/vnd.espass-espass+zip":{"source":"iana","compressible":false},"application/vnd.eszigno3+xml":{"source":"iana","compressible":true,"extensions":["es3","et3"]},"application/vnd.etsi.aoc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.asic-e+zip":{"source":"iana","compressible":false},"application/vnd.etsi.asic-s+zip":{"source":"iana","compressible":false},"application/vnd.etsi.cug+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvcommand+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-bc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-cod+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-npvr+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvservice+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsync+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvueprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mcid+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mheg5":{"source":"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{"source":"iana","compressible":true},"application/vnd.etsi.pstn+xml":{"source":"iana","compressible":true},"application/vnd.etsi.sci+xml":{"source":"iana","compressible":true},"application/vnd.etsi.simservs+xml":{"source":"iana","compressible":true},"application/vnd.etsi.timestamp-token":{"source":"iana"},"application/vnd.etsi.tsl+xml":{"source":"iana","compressible":true},"application/vnd.etsi.tsl.der":{"source":"iana"},"application/vnd.eudora.data":{"source":"iana"},"application/vnd.evolv.ecig.profile":{"source":"iana"},"application/vnd.evolv.ecig.settings":{"source":"iana"},"application/vnd.evolv.ecig.theme":{"source":"iana"},"application/vnd.exstream-empower+zip":{"source":"iana","compressible":false},"application/vnd.exstream-package":{"source":"iana"},"application/vnd.ezpix-album":{"source":"iana","extensions":["ez2"]},"application/vnd.ezpix-package":{"source":"iana","extensions":["ez3"]},"application/vnd.f-secure.mobile":{"source":"iana"},"application/vnd.fastcopy-disk-image":{"source":"iana"},"application/vnd.fdf":{"source":"iana","extensions":["fdf"]},"application/vnd.fdsn.mseed":{"source":"iana","extensions":["mseed"]},"application/vnd.fdsn.seed":{"source":"iana","extensions":["seed","dataless"]},"application/vnd.ffsns":{"source":"iana"},"application/vnd.ficlab.flb+zip":{"source":"iana","compressible":false},"application/vnd.filmit.zfc":{"source":"iana"},"application/vnd.fints":{"source":"iana"},"application/vnd.firemonkeys.cloudcell":{"source":"iana"},"application/vnd.flographit":{"source":"iana","extensions":["gph"]},"application/vnd.fluxtime.clip":{"source":"iana","extensions":["ftc"]},"application/vnd.font-fontforge-sfd":{"source":"iana"},"application/vnd.framemaker":{"source":"iana","extensions":["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{"source":"iana","extensions":["fnc"]},"application/vnd.frogans.ltf":{"source":"iana","extensions":["ltf"]},"application/vnd.fsc.weblaunch":{"source":"iana","extensions":["fsc"]},"application/vnd.fujitsu.oasys":{"source":"iana","extensions":["oas"]},"application/vnd.fujitsu.oasys2":{"source":"iana","extensions":["oa2"]},"application/vnd.fujitsu.oasys3":{"source":"iana","extensions":["oa3"]},"application/vnd.fujitsu.oasysgp":{"source":"iana","extensions":["fg5"]},"application/vnd.fujitsu.oasysprs":{"source":"iana","extensions":["bh2"]},"application/vnd.fujixerox.art-ex":{"source":"iana"},"application/vnd.fujixerox.art4":{"source":"iana"},"application/vnd.fujixerox.ddd":{"source":"iana","extensions":["ddd"]},"application/vnd.fujixerox.docuworks":{"source":"iana","extensions":["xdw"]},"application/vnd.fujixerox.docuworks.binder":{"source":"iana","extensions":["xbd"]},"application/vnd.fujixerox.docuworks.container":{"source":"iana"},"application/vnd.fujixerox.hbpl":{"source":"iana"},"application/vnd.fut-misnet":{"source":"iana"},"application/vnd.futoin+cbor":{"source":"iana"},"application/vnd.futoin+json":{"source":"iana","compressible":true},"application/vnd.fuzzysheet":{"source":"iana","extensions":["fzs"]},"application/vnd.genomatix.tuxedo":{"source":"iana","extensions":["txd"]},"application/vnd.gentics.grd+json":{"source":"iana","compressible":true},"application/vnd.geo+json":{"source":"iana","compressible":true},"application/vnd.geocube+xml":{"source":"iana","compressible":true},"application/vnd.geogebra.file":{"source":"iana","extensions":["ggb"]},"application/vnd.geogebra.tool":{"source":"iana","extensions":["ggt"]},"application/vnd.geometry-explorer":{"source":"iana","extensions":["gex","gre"]},"application/vnd.geonext":{"source":"iana","extensions":["gxt"]},"application/vnd.geoplan":{"source":"iana","extensions":["g2w"]},"application/vnd.geospace":{"source":"iana","extensions":["g3w"]},"application/vnd.gerber":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt-response":{"source":"iana"},"application/vnd.gmx":{"source":"iana","extensions":["gmx"]},"application/vnd.google-apps.document":{"compressible":false,"extensions":["gdoc"]},"application/vnd.google-apps.presentation":{"compressible":false,"extensions":["gslides"]},"application/vnd.google-apps.spreadsheet":{"compressible":false,"extensions":["gsheet"]},"application/vnd.google-earth.kml+xml":{"source":"iana","compressible":true,"extensions":["kml"]},"application/vnd.google-earth.kmz":{"source":"iana","compressible":false,"extensions":["kmz"]},"application/vnd.gov.sk.e-form+xml":{"source":"iana","compressible":true},"application/vnd.gov.sk.e-form+zip":{"source":"iana","compressible":false},"application/vnd.gov.sk.xmldatacontainer+xml":{"source":"iana","compressible":true},"application/vnd.grafeq":{"source":"iana","extensions":["gqf","gqs"]},"application/vnd.gridmp":{"source":"iana"},"application/vnd.groove-account":{"source":"iana","extensions":["gac"]},"application/vnd.groove-help":{"source":"iana","extensions":["ghf"]},"application/vnd.groove-identity-message":{"source":"iana","extensions":["gim"]},"application/vnd.groove-injector":{"source":"iana","extensions":["grv"]},"application/vnd.groove-tool-message":{"source":"iana","extensions":["gtm"]},"application/vnd.groove-tool-template":{"source":"iana","extensions":["tpl"]},"application/vnd.groove-vcard":{"source":"iana","extensions":["vcg"]},"application/vnd.hal+json":{"source":"iana","compressible":true},"application/vnd.hal+xml":{"source":"iana","compressible":true,"extensions":["hal"]},"application/vnd.handheld-entertainment+xml":{"source":"iana","compressible":true,"extensions":["zmm"]},"application/vnd.hbci":{"source":"iana","extensions":["hbci"]},"application/vnd.hc+json":{"source":"iana","compressible":true},"application/vnd.hcl-bireports":{"source":"iana"},"application/vnd.hdt":{"source":"iana"},"application/vnd.heroku+json":{"source":"iana","compressible":true},"application/vnd.hhe.lesson-player":{"source":"iana","extensions":["les"]},"application/vnd.hp-hpgl":{"source":"iana","extensions":["hpgl"]},"application/vnd.hp-hpid":{"source":"iana","extensions":["hpid"]},"application/vnd.hp-hps":{"source":"iana","extensions":["hps"]},"application/vnd.hp-jlyt":{"source":"iana","extensions":["jlt"]},"application/vnd.hp-pcl":{"source":"iana","extensions":["pcl"]},"application/vnd.hp-pclxl":{"source":"iana","extensions":["pclxl"]},"application/vnd.httphone":{"source":"iana"},"application/vnd.hydrostatix.sof-data":{"source":"iana","extensions":["sfd-hdstx"]},"application/vnd.hyper+json":{"source":"iana","compressible":true},"application/vnd.hyper-item+json":{"source":"iana","compressible":true},"application/vnd.hyperdrive+json":{"source":"iana","compressible":true},"application/vnd.hzn-3d-crossword":{"source":"iana"},"application/vnd.ibm.afplinedata":{"source":"iana"},"application/vnd.ibm.electronic-media":{"source":"iana"},"application/vnd.ibm.minipay":{"source":"iana","extensions":["mpy"]},"application/vnd.ibm.modcap":{"source":"iana","extensions":["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{"source":"iana","extensions":["irm"]},"application/vnd.ibm.secure-container":{"source":"iana","extensions":["sc"]},"application/vnd.iccprofile":{"source":"iana","extensions":["icc","icm"]},"application/vnd.ieee.1905":{"source":"iana"},"application/vnd.igloader":{"source":"iana","extensions":["igl"]},"application/vnd.imagemeter.folder+zip":{"source":"iana","compressible":false},"application/vnd.imagemeter.image+zip":{"source":"iana","compressible":false},"application/vnd.immervision-ivp":{"source":"iana","extensions":["ivp"]},"application/vnd.immervision-ivu":{"source":"iana","extensions":["ivu"]},"application/vnd.ims.imsccv1p1":{"source":"iana"},"application/vnd.ims.imsccv1p2":{"source":"iana"},"application/vnd.ims.imsccv1p3":{"source":"iana"},"application/vnd.ims.lis.v2.result+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy.id+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings.simple+json":{"source":"iana","compressible":true},"application/vnd.informedcontrol.rms+xml":{"source":"iana","compressible":true},"application/vnd.informix-visionary":{"source":"iana"},"application/vnd.infotech.project":{"source":"iana"},"application/vnd.infotech.project+xml":{"source":"iana","compressible":true},"application/vnd.innopath.wamp.notification":{"source":"iana"},"application/vnd.insors.igm":{"source":"iana","extensions":["igm"]},"application/vnd.intercon.formnet":{"source":"iana","extensions":["xpw","xpx"]},"application/vnd.intergeo":{"source":"iana","extensions":["i2g"]},"application/vnd.intertrust.digibox":{"source":"iana"},"application/vnd.intertrust.nncp":{"source":"iana"},"application/vnd.intu.qbo":{"source":"iana","extensions":["qbo"]},"application/vnd.intu.qfx":{"source":"iana","extensions":["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.conceptitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.knowledgeitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsmessage+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.packageitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.planningitem+xml":{"source":"iana","compressible":true},"application/vnd.ipunplugged.rcprofile":{"source":"iana","extensions":["rcprofile"]},"application/vnd.irepository.package+xml":{"source":"iana","compressible":true,"extensions":["irp"]},"application/vnd.is-xpr":{"source":"iana","extensions":["xpr"]},"application/vnd.isac.fcs":{"source":"iana","extensions":["fcs"]},"application/vnd.iso11783-10+zip":{"source":"iana","compressible":false},"application/vnd.jam":{"source":"iana","extensions":["jam"]},"application/vnd.japannet-directory-service":{"source":"iana"},"application/vnd.japannet-jpnstore-wakeup":{"source":"iana"},"application/vnd.japannet-payment-wakeup":{"source":"iana"},"application/vnd.japannet-registration":{"source":"iana"},"application/vnd.japannet-registration-wakeup":{"source":"iana"},"application/vnd.japannet-setstore-wakeup":{"source":"iana"},"application/vnd.japannet-verification":{"source":"iana"},"application/vnd.japannet-verification-wakeup":{"source":"iana"},"application/vnd.jcp.javame.midlet-rms":{"source":"iana","extensions":["rms"]},"application/vnd.jisp":{"source":"iana","extensions":["jisp"]},"application/vnd.joost.joda-archive":{"source":"iana","extensions":["joda"]},"application/vnd.jsk.isdn-ngn":{"source":"iana"},"application/vnd.kahootz":{"source":"iana","extensions":["ktz","ktr"]},"application/vnd.kde.karbon":{"source":"iana","extensions":["karbon"]},"application/vnd.kde.kchart":{"source":"iana","extensions":["chrt"]},"application/vnd.kde.kformula":{"source":"iana","extensions":["kfo"]},"application/vnd.kde.kivio":{"source":"iana","extensions":["flw"]},"application/vnd.kde.kontour":{"source":"iana","extensions":["kon"]},"application/vnd.kde.kpresenter":{"source":"iana","extensions":["kpr","kpt"]},"application/vnd.kde.kspread":{"source":"iana","extensions":["ksp"]},"application/vnd.kde.kword":{"source":"iana","extensions":["kwd","kwt"]},"application/vnd.kenameaapp":{"source":"iana","extensions":["htke"]},"application/vnd.kidspiration":{"source":"iana","extensions":["kia"]},"application/vnd.kinar":{"source":"iana","extensions":["kne","knp"]},"application/vnd.koan":{"source":"iana","extensions":["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{"source":"iana","extensions":["sse"]},"application/vnd.las":{"source":"iana"},"application/vnd.las.las+json":{"source":"iana","compressible":true},"application/vnd.las.las+xml":{"source":"iana","compressible":true,"extensions":["lasxml"]},"application/vnd.laszip":{"source":"iana"},"application/vnd.leap+json":{"source":"iana","compressible":true},"application/vnd.liberty-request+xml":{"source":"iana","compressible":true},"application/vnd.llamagraphics.life-balance.desktop":{"source":"iana","extensions":["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{"source":"iana","compressible":true,"extensions":["lbe"]},"application/vnd.logipipe.circuit+zip":{"source":"iana","compressible":false},"application/vnd.loom":{"source":"iana"},"application/vnd.lotus-1-2-3":{"source":"iana","extensions":["123"]},"application/vnd.lotus-approach":{"source":"iana","extensions":["apr"]},"application/vnd.lotus-freelance":{"source":"iana","extensions":["pre"]},"application/vnd.lotus-notes":{"source":"iana","extensions":["nsf"]},"application/vnd.lotus-organizer":{"source":"iana","extensions":["org"]},"application/vnd.lotus-screencam":{"source":"iana","extensions":["scm"]},"application/vnd.lotus-wordpro":{"source":"iana","extensions":["lwp"]},"application/vnd.macports.portpkg":{"source":"iana","extensions":["portpkg"]},"application/vnd.mapbox-vector-tile":{"source":"iana"},"application/vnd.marlin.drm.actiontoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.conftoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.license+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.mdcf":{"source":"iana"},"application/vnd.mason+json":{"source":"iana","compressible":true},"application/vnd.maxmind.maxmind-db":{"source":"iana"},"application/vnd.mcd":{"source":"iana","extensions":["mcd"]},"application/vnd.medcalcdata":{"source":"iana","extensions":["mc1"]},"application/vnd.mediastation.cdkey":{"source":"iana","extensions":["cdkey"]},"application/vnd.meridian-slingshot":{"source":"iana"},"application/vnd.mfer":{"source":"iana","extensions":["mwf"]},"application/vnd.mfmp":{"source":"iana","extensions":["mfm"]},"application/vnd.micro+json":{"source":"iana","compressible":true},"application/vnd.micrografx.flo":{"source":"iana","extensions":["flo"]},"application/vnd.micrografx.igx":{"source":"iana","extensions":["igx"]},"application/vnd.microsoft.portable-executable":{"source":"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{"source":"iana"},"application/vnd.miele+json":{"source":"iana","compressible":true},"application/vnd.mif":{"source":"iana","extensions":["mif"]},"application/vnd.minisoft-hp3000-save":{"source":"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{"source":"iana"},"application/vnd.mobius.daf":{"source":"iana","extensions":["daf"]},"application/vnd.mobius.dis":{"source":"iana","extensions":["dis"]},"application/vnd.mobius.mbk":{"source":"iana","extensions":["mbk"]},"application/vnd.mobius.mqy":{"source":"iana","extensions":["mqy"]},"application/vnd.mobius.msl":{"source":"iana","extensions":["msl"]},"application/vnd.mobius.plc":{"source":"iana","extensions":["plc"]},"application/vnd.mobius.txf":{"source":"iana","extensions":["txf"]},"application/vnd.mophun.application":{"source":"iana","extensions":["mpn"]},"application/vnd.mophun.certificate":{"source":"iana","extensions":["mpc"]},"application/vnd.motorola.flexsuite":{"source":"iana"},"application/vnd.motorola.flexsuite.adsi":{"source":"iana"},"application/vnd.motorola.flexsuite.fis":{"source":"iana"},"application/vnd.motorola.flexsuite.gotap":{"source":"iana"},"application/vnd.motorola.flexsuite.kmr":{"source":"iana"},"application/vnd.motorola.flexsuite.ttc":{"source":"iana"},"application/vnd.motorola.flexsuite.wem":{"source":"iana"},"application/vnd.motorola.iprm":{"source":"iana"},"application/vnd.mozilla.xul+xml":{"source":"iana","compressible":true,"extensions":["xul"]},"application/vnd.ms-3mfdocument":{"source":"iana"},"application/vnd.ms-artgalry":{"source":"iana","extensions":["cil"]},"application/vnd.ms-asf":{"source":"iana"},"application/vnd.ms-cab-compressed":{"source":"iana","extensions":["cab"]},"application/vnd.ms-color.iccprofile":{"source":"apache"},"application/vnd.ms-excel":{"source":"iana","compressible":false,"extensions":["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{"source":"iana","extensions":["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{"source":"iana","extensions":["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{"source":"iana","extensions":["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{"source":"iana","extensions":["xltm"]},"application/vnd.ms-fontobject":{"source":"iana","compressible":true,"extensions":["eot"]},"application/vnd.ms-htmlhelp":{"source":"iana","extensions":["chm"]},"application/vnd.ms-ims":{"source":"iana","extensions":["ims"]},"application/vnd.ms-lrm":{"source":"iana","extensions":["lrm"]},"application/vnd.ms-office.activex+xml":{"source":"iana","compressible":true},"application/vnd.ms-officetheme":{"source":"iana","extensions":["thmx"]},"application/vnd.ms-opentype":{"source":"apache","compressible":true},"application/vnd.ms-outlook":{"compressible":false,"extensions":["msg"]},"application/vnd.ms-package.obfuscated-opentype":{"source":"apache"},"application/vnd.ms-pki.seccat":{"source":"apache","extensions":["cat"]},"application/vnd.ms-pki.stl":{"source":"apache","extensions":["stl"]},"application/vnd.ms-playready.initiator+xml":{"source":"iana","compressible":true},"application/vnd.ms-powerpoint":{"source":"iana","compressible":false,"extensions":["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{"source":"iana","extensions":["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{"source":"iana","extensions":["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{"source":"iana","extensions":["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{"source":"iana","extensions":["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{"source":"iana","extensions":["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{"source":"iana","compressible":true},"application/vnd.ms-printing.printticket+xml":{"source":"apache","compressible":true},"application/vnd.ms-printschematicket+xml":{"source":"iana","compressible":true},"application/vnd.ms-project":{"source":"iana","extensions":["mpp","mpt"]},"application/vnd.ms-tnef":{"source":"iana"},"application/vnd.ms-windows.devicepairing":{"source":"iana"},"application/vnd.ms-windows.nwprinting.oob":{"source":"iana"},"application/vnd.ms-windows.printerpairing":{"source":"iana"},"application/vnd.ms-windows.wsd.oob":{"source":"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.lic-resp":{"source":"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.meter-resp":{"source":"iana"},"application/vnd.ms-word.document.macroenabled.12":{"source":"iana","extensions":["docm"]},"application/vnd.ms-word.template.macroenabled.12":{"source":"iana","extensions":["dotm"]},"application/vnd.ms-works":{"source":"iana","extensions":["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{"source":"iana","extensions":["wpl"]},"application/vnd.ms-xpsdocument":{"source":"iana","compressible":false,"extensions":["xps"]},"application/vnd.msa-disk-image":{"source":"iana"},"application/vnd.mseq":{"source":"iana","extensions":["mseq"]},"application/vnd.msign":{"source":"iana"},"application/vnd.multiad.creator":{"source":"iana"},"application/vnd.multiad.creator.cif":{"source":"iana"},"application/vnd.music-niff":{"source":"iana"},"application/vnd.musician":{"source":"iana","extensions":["mus"]},"application/vnd.muvee.style":{"source":"iana","extensions":["msty"]},"application/vnd.mynfc":{"source":"iana","extensions":["taglet"]},"application/vnd.ncd.control":{"source":"iana"},"application/vnd.ncd.reference":{"source":"iana"},"application/vnd.nearst.inv+json":{"source":"iana","compressible":true},"application/vnd.nervana":{"source":"iana"},"application/vnd.netfpx":{"source":"iana"},"application/vnd.neurolanguage.nlu":{"source":"iana","extensions":["nlu"]},"application/vnd.nimn":{"source":"iana"},"application/vnd.nintendo.nitro.rom":{"source":"iana"},"application/vnd.nintendo.snes.rom":{"source":"iana"},"application/vnd.nitf":{"source":"iana","extensions":["ntf","nitf"]},"application/vnd.noblenet-directory":{"source":"iana","extensions":["nnd"]},"application/vnd.noblenet-sealer":{"source":"iana","extensions":["nns"]},"application/vnd.noblenet-web":{"source":"iana","extensions":["nnw"]},"application/vnd.nokia.catalogs":{"source":"iana"},"application/vnd.nokia.conml+wbxml":{"source":"iana"},"application/vnd.nokia.conml+xml":{"source":"iana","compressible":true},"application/vnd.nokia.iptv.config+xml":{"source":"iana","compressible":true},"application/vnd.nokia.isds-radio-presets":{"source":"iana"},"application/vnd.nokia.landmark+wbxml":{"source":"iana"},"application/vnd.nokia.landmark+xml":{"source":"iana","compressible":true},"application/vnd.nokia.landmarkcollection+xml":{"source":"iana","compressible":true},"application/vnd.nokia.n-gage.ac+xml":{"source":"iana","compressible":true,"extensions":["ac"]},"application/vnd.nokia.n-gage.data":{"source":"iana","extensions":["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{"source":"iana","extensions":["n-gage"]},"application/vnd.nokia.ncd":{"source":"iana"},"application/vnd.nokia.pcd+wbxml":{"source":"iana"},"application/vnd.nokia.pcd+xml":{"source":"iana","compressible":true},"application/vnd.nokia.radio-preset":{"source":"iana","extensions":["rpst"]},"application/vnd.nokia.radio-presets":{"source":"iana","extensions":["rpss"]},"application/vnd.novadigm.edm":{"source":"iana","extensions":["edm"]},"application/vnd.novadigm.edx":{"source":"iana","extensions":["edx"]},"application/vnd.novadigm.ext":{"source":"iana","extensions":["ext"]},"application/vnd.ntt-local.content-share":{"source":"iana"},"application/vnd.ntt-local.file-transfer":{"source":"iana"},"application/vnd.ntt-local.ogw_remote-access":{"source":"iana"},"application/vnd.ntt-local.sip-ta_remote":{"source":"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{"source":"iana"},"application/vnd.oasis.opendocument.chart":{"source":"iana","extensions":["odc"]},"application/vnd.oasis.opendocument.chart-template":{"source":"iana","extensions":["otc"]},"application/vnd.oasis.opendocument.database":{"source":"iana","extensions":["odb"]},"application/vnd.oasis.opendocument.formula":{"source":"iana","extensions":["odf"]},"application/vnd.oasis.opendocument.formula-template":{"source":"iana","extensions":["odft"]},"application/vnd.oasis.opendocument.graphics":{"source":"iana","compressible":false,"extensions":["odg"]},"application/vnd.oasis.opendocument.graphics-template":{"source":"iana","extensions":["otg"]},"application/vnd.oasis.opendocument.image":{"source":"iana","extensions":["odi"]},"application/vnd.oasis.opendocument.image-template":{"source":"iana","extensions":["oti"]},"application/vnd.oasis.opendocument.presentation":{"source":"iana","compressible":false,"extensions":["odp"]},"application/vnd.oasis.opendocument.presentation-template":{"source":"iana","extensions":["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{"source":"iana","compressible":false,"extensions":["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{"source":"iana","extensions":["ots"]},"application/vnd.oasis.opendocument.text":{"source":"iana","compressible":false,"extensions":["odt"]},"application/vnd.oasis.opendocument.text-master":{"source":"iana","extensions":["odm"]},"application/vnd.oasis.opendocument.text-template":{"source":"iana","extensions":["ott"]},"application/vnd.oasis.opendocument.text-web":{"source":"iana","extensions":["oth"]},"application/vnd.obn":{"source":"iana"},"application/vnd.ocf+cbor":{"source":"iana"},"application/vnd.oftn.l10n+json":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessdownload+xml":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessstreaming+xml":{"source":"iana","compressible":true},"application/vnd.oipf.cspg-hexbinary":{"source":"iana"},"application/vnd.oipf.dae.svg+xml":{"source":"iana","compressible":true},"application/vnd.oipf.dae.xhtml+xml":{"source":"iana","compressible":true},"application/vnd.oipf.mippvcontrolmessage+xml":{"source":"iana","compressible":true},"application/vnd.oipf.pae.gem":{"source":"iana"},"application/vnd.oipf.spdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.oipf.spdlist+xml":{"source":"iana","compressible":true},"application/vnd.oipf.ueprofile+xml":{"source":"iana","compressible":true},"application/vnd.oipf.userprofile+xml":{"source":"iana","compressible":true},"application/vnd.olpc-sugar":{"source":"iana","extensions":["xo"]},"application/vnd.oma-scws-config":{"source":"iana"},"application/vnd.oma-scws-http-request":{"source":"iana"},"application/vnd.oma-scws-http-response":{"source":"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.drm-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.imd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.ltkm":{"source":"iana"},"application/vnd.oma.bcast.notification+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.provisioningtrigger":{"source":"iana"},"application/vnd.oma.bcast.sgboot":{"source":"iana"},"application/vnd.oma.bcast.sgdd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sgdu":{"source":"iana"},"application/vnd.oma.bcast.simple-symbol-container":{"source":"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sprov+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.stkm":{"source":"iana"},"application/vnd.oma.cab-address-book+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-feature-handler+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-pcc+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-subs-invite+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-user-prefs+xml":{"source":"iana","compressible":true},"application/vnd.oma.dcd":{"source":"iana"},"application/vnd.oma.dcdc":{"source":"iana"},"application/vnd.oma.dd2+xml":{"source":"iana","compressible":true,"extensions":["dd2"]},"application/vnd.oma.drm.risd+xml":{"source":"iana","compressible":true},"application/vnd.oma.group-usage-list+xml":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+json":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+tlv":{"source":"iana"},"application/vnd.oma.pal+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.detailed-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.final-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.groups+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.invocation-descriptor+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.optimized-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.push":{"source":"iana"},"application/vnd.oma.scidm.messages+xml":{"source":"iana","compressible":true},"application/vnd.oma.xcap-directory+xml":{"source":"iana","compressible":true},"application/vnd.omads-email+xml":{"source":"iana","compressible":true},"application/vnd.omads-file+xml":{"source":"iana","compressible":true},"application/vnd.omads-folder+xml":{"source":"iana","compressible":true},"application/vnd.omaloc-supl-init":{"source":"iana"},"application/vnd.onepager":{"source":"iana"},"application/vnd.onepagertamp":{"source":"iana"},"application/vnd.onepagertamx":{"source":"iana"},"application/vnd.onepagertat":{"source":"iana"},"application/vnd.onepagertatp":{"source":"iana"},"application/vnd.onepagertatx":{"source":"iana"},"application/vnd.openblox.game+xml":{"source":"iana","compressible":true,"extensions":["obgx"]},"application/vnd.openblox.game-binary":{"source":"iana"},"application/vnd.openeye.oeb":{"source":"iana"},"application/vnd.openofficeorg.extension":{"source":"apache","extensions":["oxt"]},"application/vnd.openstreetmap.data+xml":{"source":"iana","compressible":true,"extensions":["osm"]},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawing+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{"source":"iana","compressible":false,"extensions":["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slide":{"source":"iana","extensions":["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{"source":"iana","extensions":["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.template":{"source":"iana","extensions":["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{"source":"iana","compressible":false,"extensions":["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{"source":"iana","extensions":["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.theme+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.vmldrawing":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{"source":"iana","compressible":false,"extensions":["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{"source":"iana","extensions":["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.core-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.relationships+xml":{"source":"iana","compressible":true},"application/vnd.oracle.resource+json":{"source":"iana","compressible":true},"application/vnd.orange.indata":{"source":"iana"},"application/vnd.osa.netdeploy":{"source":"iana"},"application/vnd.osgeo.mapguide.package":{"source":"iana","extensions":["mgp"]},"application/vnd.osgi.bundle":{"source":"iana"},"application/vnd.osgi.dp":{"source":"iana","extensions":["dp"]},"application/vnd.osgi.subsystem":{"source":"iana","extensions":["esa"]},"application/vnd.otps.ct-kip+xml":{"source":"iana","compressible":true},"application/vnd.oxli.countgraph":{"source":"iana"},"application/vnd.pagerduty+json":{"source":"iana","compressible":true},"application/vnd.palm":{"source":"iana","extensions":["pdb","pqa","oprc"]},"application/vnd.panoply":{"source":"iana"},"application/vnd.paos.xml":{"source":"iana"},"application/vnd.patentdive":{"source":"iana"},"application/vnd.patientecommsdoc":{"source":"iana"},"application/vnd.pawaafile":{"source":"iana","extensions":["paw"]},"application/vnd.pcos":{"source":"iana"},"application/vnd.pg.format":{"source":"iana","extensions":["str"]},"application/vnd.pg.osasli":{"source":"iana","extensions":["ei6"]},"application/vnd.piaccess.application-licence":{"source":"iana"},"application/vnd.picsel":{"source":"iana","extensions":["efif"]},"application/vnd.pmi.widget":{"source":"iana","extensions":["wg"]},"application/vnd.poc.group-advertisement+xml":{"source":"iana","compressible":true},"application/vnd.pocketlearn":{"source":"iana","extensions":["plf"]},"application/vnd.powerbuilder6":{"source":"iana","extensions":["pbd"]},"application/vnd.powerbuilder6-s":{"source":"iana"},"application/vnd.powerbuilder7":{"source":"iana"},"application/vnd.powerbuilder7-s":{"source":"iana"},"application/vnd.powerbuilder75":{"source":"iana"},"application/vnd.powerbuilder75-s":{"source":"iana"},"application/vnd.preminet":{"source":"iana"},"application/vnd.previewsystems.box":{"source":"iana","extensions":["box"]},"application/vnd.proteus.magazine":{"source":"iana","extensions":["mgz"]},"application/vnd.psfs":{"source":"iana"},"application/vnd.publishare-delta-tree":{"source":"iana","extensions":["qps"]},"application/vnd.pvi.ptid1":{"source":"iana","extensions":["ptid"]},"application/vnd.pwg-multiplexed":{"source":"iana"},"application/vnd.pwg-xhtml-print+xml":{"source":"iana","compressible":true},"application/vnd.qualcomm.brew-app-res":{"source":"iana"},"application/vnd.quarantainenet":{"source":"iana"},"application/vnd.quark.quarkxpress":{"source":"iana","extensions":["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{"source":"iana"},"application/vnd.radisys.moml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conn+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-stream+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-base+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-detect+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-group+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-speech+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-transform+xml":{"source":"iana","compressible":true},"application/vnd.rainstor.data":{"source":"iana"},"application/vnd.rapid":{"source":"iana"},"application/vnd.rar":{"source":"iana"},"application/vnd.realvnc.bed":{"source":"iana","extensions":["bed"]},"application/vnd.recordare.musicxml":{"source":"iana","extensions":["mxl"]},"application/vnd.recordare.musicxml+xml":{"source":"iana","compressible":true,"extensions":["musicxml"]},"application/vnd.renlearn.rlprint":{"source":"iana"},"application/vnd.restful+json":{"source":"iana","compressible":true},"application/vnd.rig.cryptonote":{"source":"iana","extensions":["cryptonote"]},"application/vnd.rim.cod":{"source":"apache","extensions":["cod"]},"application/vnd.rn-realmedia":{"source":"apache","extensions":["rm"]},"application/vnd.rn-realmedia-vbr":{"source":"apache","extensions":["rmvb"]},"application/vnd.route66.link66+xml":{"source":"iana","compressible":true,"extensions":["link66"]},"application/vnd.rs-274x":{"source":"iana"},"application/vnd.ruckus.download":{"source":"iana"},"application/vnd.s3sms":{"source":"iana"},"application/vnd.sailingtracker.track":{"source":"iana","extensions":["st"]},"application/vnd.sbm.cid":{"source":"iana"},"application/vnd.sbm.mid2":{"source":"iana"},"application/vnd.scribus":{"source":"iana"},"application/vnd.sealed.3df":{"source":"iana"},"application/vnd.sealed.csf":{"source":"iana"},"application/vnd.sealed.doc":{"source":"iana"},"application/vnd.sealed.eml":{"source":"iana"},"application/vnd.sealed.mht":{"source":"iana"},"application/vnd.sealed.net":{"source":"iana"},"application/vnd.sealed.ppt":{"source":"iana"},"application/vnd.sealed.tiff":{"source":"iana"},"application/vnd.sealed.xls":{"source":"iana"},"application/vnd.sealedmedia.softseal.html":{"source":"iana"},"application/vnd.sealedmedia.softseal.pdf":{"source":"iana"},"application/vnd.seemail":{"source":"iana","extensions":["see"]},"application/vnd.sema":{"source":"iana","extensions":["sema"]},"application/vnd.semd":{"source":"iana","extensions":["semd"]},"application/vnd.semf":{"source":"iana","extensions":["semf"]},"application/vnd.shade-save-file":{"source":"iana"},"application/vnd.shana.informed.formdata":{"source":"iana","extensions":["ifm"]},"application/vnd.shana.informed.formtemplate":{"source":"iana","extensions":["itp"]},"application/vnd.shana.informed.interchange":{"source":"iana","extensions":["iif"]},"application/vnd.shana.informed.package":{"source":"iana","extensions":["ipk"]},"application/vnd.shootproof+json":{"source":"iana","compressible":true},"application/vnd.shopkick+json":{"source":"iana","compressible":true},"application/vnd.sigrok.session":{"source":"iana"},"application/vnd.simtech-mindmapper":{"source":"iana","extensions":["twd","twds"]},"application/vnd.siren+json":{"source":"iana","compressible":true},"application/vnd.smaf":{"source":"iana","extensions":["mmf"]},"application/vnd.smart.notebook":{"source":"iana"},"application/vnd.smart.teacher":{"source":"iana","extensions":["teacher"]},"application/vnd.software602.filler.form+xml":{"source":"iana","compressible":true,"extensions":["fo"]},"application/vnd.software602.filler.form-xml-zip":{"source":"iana"},"application/vnd.solent.sdkm+xml":{"source":"iana","compressible":true,"extensions":["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{"source":"iana","extensions":["dxp"]},"application/vnd.spotfire.sfs":{"source":"iana","extensions":["sfs"]},"application/vnd.sqlite3":{"source":"iana"},"application/vnd.sss-cod":{"source":"iana"},"application/vnd.sss-dtf":{"source":"iana"},"application/vnd.sss-ntf":{"source":"iana"},"application/vnd.stardivision.calc":{"source":"apache","extensions":["sdc"]},"application/vnd.stardivision.draw":{"source":"apache","extensions":["sda"]},"application/vnd.stardivision.impress":{"source":"apache","extensions":["sdd"]},"application/vnd.stardivision.math":{"source":"apache","extensions":["smf"]},"application/vnd.stardivision.writer":{"source":"apache","extensions":["sdw","vor"]},"application/vnd.stardivision.writer-global":{"source":"apache","extensions":["sgl"]},"application/vnd.stepmania.package":{"source":"iana","extensions":["smzip"]},"application/vnd.stepmania.stepchart":{"source":"iana","extensions":["sm"]},"application/vnd.street-stream":{"source":"iana"},"application/vnd.sun.wadl+xml":{"source":"iana","compressible":true,"extensions":["wadl"]},"application/vnd.sun.xml.calc":{"source":"apache","extensions":["sxc"]},"application/vnd.sun.xml.calc.template":{"source":"apache","extensions":["stc"]},"application/vnd.sun.xml.draw":{"source":"apache","extensions":["sxd"]},"application/vnd.sun.xml.draw.template":{"source":"apache","extensions":["std"]},"application/vnd.sun.xml.impress":{"source":"apache","extensions":["sxi"]},"application/vnd.sun.xml.impress.template":{"source":"apache","extensions":["sti"]},"application/vnd.sun.xml.math":{"source":"apache","extensions":["sxm"]},"application/vnd.sun.xml.writer":{"source":"apache","extensions":["sxw"]},"application/vnd.sun.xml.writer.global":{"source":"apache","extensions":["sxg"]},"application/vnd.sun.xml.writer.template":{"source":"apache","extensions":["stw"]},"application/vnd.sus-calendar":{"source":"iana","extensions":["sus","susp"]},"application/vnd.svd":{"source":"iana","extensions":["svd"]},"application/vnd.swiftview-ics":{"source":"iana"},"application/vnd.symbian.install":{"source":"apache","extensions":["sis","sisx"]},"application/vnd.syncml+xml":{"source":"iana","compressible":true,"extensions":["xsm"]},"application/vnd.syncml.dm+wbxml":{"source":"iana","extensions":["bdm"]},"application/vnd.syncml.dm+xml":{"source":"iana","compressible":true,"extensions":["xdm"]},"application/vnd.syncml.dm.notification":{"source":"iana"},"application/vnd.syncml.dmddf+wbxml":{"source":"iana"},"application/vnd.syncml.dmddf+xml":{"source":"iana","compressible":true,"extensions":["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{"source":"iana"},"application/vnd.syncml.dmtnds+xml":{"source":"iana","compressible":true},"application/vnd.syncml.ds.notification":{"source":"iana"},"application/vnd.tableschema+json":{"source":"iana","compressible":true},"application/vnd.tao.intent-module-archive":{"source":"iana","extensions":["tao"]},"application/vnd.tcpdump.pcap":{"source":"iana","extensions":["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{"source":"iana","compressible":true},"application/vnd.tmd.mediaflex.api+xml":{"source":"iana","compressible":true},"application/vnd.tml":{"source":"iana"},"application/vnd.tmobile-livetv":{"source":"iana","extensions":["tmo"]},"application/vnd.tri.onesource":{"source":"iana"},"application/vnd.trid.tpt":{"source":"iana","extensions":["tpt"]},"application/vnd.triscape.mxs":{"source":"iana","extensions":["mxs"]},"application/vnd.trueapp":{"source":"iana","extensions":["tra"]},"application/vnd.truedoc":{"source":"iana"},"application/vnd.ubisoft.webplayer":{"source":"iana"},"application/vnd.ufdl":{"source":"iana","extensions":["ufd","ufdl"]},"application/vnd.uiq.theme":{"source":"iana","extensions":["utz"]},"application/vnd.umajin":{"source":"iana","extensions":["umj"]},"application/vnd.unity":{"source":"iana","extensions":["unityweb"]},"application/vnd.uoml+xml":{"source":"iana","compressible":true,"extensions":["uoml"]},"application/vnd.uplanet.alert":{"source":"iana"},"application/vnd.uplanet.alert-wbxml":{"source":"iana"},"application/vnd.uplanet.bearer-choice":{"source":"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{"source":"iana"},"application/vnd.uplanet.cacheop":{"source":"iana"},"application/vnd.uplanet.cacheop-wbxml":{"source":"iana"},"application/vnd.uplanet.channel":{"source":"iana"},"application/vnd.uplanet.channel-wbxml":{"source":"iana"},"application/vnd.uplanet.list":{"source":"iana"},"application/vnd.uplanet.list-wbxml":{"source":"iana"},"application/vnd.uplanet.listcmd":{"source":"iana"},"application/vnd.uplanet.listcmd-wbxml":{"source":"iana"},"application/vnd.uplanet.signal":{"source":"iana"},"application/vnd.uri-map":{"source":"iana"},"application/vnd.valve.source.material":{"source":"iana"},"application/vnd.vcx":{"source":"iana","extensions":["vcx"]},"application/vnd.vd-study":{"source":"iana"},"application/vnd.vectorworks":{"source":"iana"},"application/vnd.vel+json":{"source":"iana","compressible":true},"application/vnd.verimatrix.vcas":{"source":"iana"},"application/vnd.veryant.thin":{"source":"iana"},"application/vnd.ves.encrypted":{"source":"iana"},"application/vnd.vidsoft.vidconference":{"source":"iana"},"application/vnd.visio":{"source":"iana","extensions":["vsd","vst","vss","vsw"]},"application/vnd.visionary":{"source":"iana","extensions":["vis"]},"application/vnd.vividence.scriptfile":{"source":"iana"},"application/vnd.vsf":{"source":"iana","extensions":["vsf"]},"application/vnd.wap.sic":{"source":"iana"},"application/vnd.wap.slc":{"source":"iana"},"application/vnd.wap.wbxml":{"source":"iana","extensions":["wbxml"]},"application/vnd.wap.wmlc":{"source":"iana","extensions":["wmlc"]},"application/vnd.wap.wmlscriptc":{"source":"iana","extensions":["wmlsc"]},"application/vnd.webturbo":{"source":"iana","extensions":["wtb"]},"application/vnd.wfa.p2p":{"source":"iana"},"application/vnd.wfa.wsc":{"source":"iana"},"application/vnd.windows.devicepairing":{"source":"iana"},"application/vnd.wmc":{"source":"iana"},"application/vnd.wmf.bootstrap":{"source":"iana"},"application/vnd.wolfram.mathematica":{"source":"iana"},"application/vnd.wolfram.mathematica.package":{"source":"iana"},"application/vnd.wolfram.player":{"source":"iana","extensions":["nbp"]},"application/vnd.wordperfect":{"source":"iana","extensions":["wpd"]},"application/vnd.wqd":{"source":"iana","extensions":["wqd"]},"application/vnd.wrq-hp3000-labelled":{"source":"iana"},"application/vnd.wt.stf":{"source":"iana","extensions":["stf"]},"application/vnd.wv.csp+wbxml":{"source":"iana"},"application/vnd.wv.csp+xml":{"source":"iana","compressible":true},"application/vnd.wv.ssp+xml":{"source":"iana","compressible":true},"application/vnd.xacml+json":{"source":"iana","compressible":true},"application/vnd.xara":{"source":"iana","extensions":["xar"]},"application/vnd.xfdl":{"source":"iana","extensions":["xfdl"]},"application/vnd.xfdl.webform":{"source":"iana"},"application/vnd.xmi+xml":{"source":"iana","compressible":true},"application/vnd.xmpie.cpkg":{"source":"iana"},"application/vnd.xmpie.dpkg":{"source":"iana"},"application/vnd.xmpie.plan":{"source":"iana"},"application/vnd.xmpie.ppkg":{"source":"iana"},"application/vnd.xmpie.xlim":{"source":"iana"},"application/vnd.yamaha.hv-dic":{"source":"iana","extensions":["hvd"]},"application/vnd.yamaha.hv-script":{"source":"iana","extensions":["hvs"]},"application/vnd.yamaha.hv-voice":{"source":"iana","extensions":["hvp"]},"application/vnd.yamaha.openscoreformat":{"source":"iana","extensions":["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{"source":"iana","compressible":true,"extensions":["osfpvg"]},"application/vnd.yamaha.remote-setup":{"source":"iana"},"application/vnd.yamaha.smaf-audio":{"source":"iana","extensions":["saf"]},"application/vnd.yamaha.smaf-phrase":{"source":"iana","extensions":["spf"]},"application/vnd.yamaha.through-ngn":{"source":"iana"},"application/vnd.yamaha.tunnel-udpencap":{"source":"iana"},"application/vnd.yaoweme":{"source":"iana"},"application/vnd.yellowriver-custom-menu":{"source":"iana","extensions":["cmp"]},"application/vnd.youtube.yt":{"source":"iana"},"application/vnd.zul":{"source":"iana","extensions":["zir","zirz"]},"application/vnd.zzazz.deck+xml":{"source":"iana","compressible":true,"extensions":["zaz"]},"application/voicexml+xml":{"source":"iana","compressible":true,"extensions":["vxml"]},"application/voucher-cms+json":{"source":"iana","compressible":true},"application/vq-rtcpxr":{"source":"iana"},"application/wasm":{"compressible":true,"extensions":["wasm"]},"application/watcherinfo+xml":{"source":"iana","compressible":true},"application/webpush-options+json":{"source":"iana","compressible":true},"application/whoispp-query":{"source":"iana"},"application/whoispp-response":{"source":"iana"},"application/widget":{"source":"iana","extensions":["wgt"]},"application/winhlp":{"source":"apache","extensions":["hlp"]},"application/wita":{"source":"iana"},"application/wordperfect5.1":{"source":"iana"},"application/wsdl+xml":{"source":"iana","compressible":true,"extensions":["wsdl"]},"application/wspolicy+xml":{"source":"iana","compressible":true,"extensions":["wspolicy"]},"application/x-7z-compressed":{"source":"apache","compressible":false,"extensions":["7z"]},"application/x-abiword":{"source":"apache","extensions":["abw"]},"application/x-ace-compressed":{"source":"apache","extensions":["ace"]},"application/x-amf":{"source":"apache"},"application/x-apple-diskimage":{"source":"apache","extensions":["dmg"]},"application/x-arj":{"compressible":false,"extensions":["arj"]},"application/x-authorware-bin":{"source":"apache","extensions":["aab","x32","u32","vox"]},"application/x-authorware-map":{"source":"apache","extensions":["aam"]},"application/x-authorware-seg":{"source":"apache","extensions":["aas"]},"application/x-bcpio":{"source":"apache","extensions":["bcpio"]},"application/x-bdoc":{"compressible":false,"extensions":["bdoc"]},"application/x-bittorrent":{"source":"apache","extensions":["torrent"]},"application/x-blorb":{"source":"apache","extensions":["blb","blorb"]},"application/x-bzip":{"source":"apache","compressible":false,"extensions":["bz"]},"application/x-bzip2":{"source":"apache","compressible":false,"extensions":["bz2","boz"]},"application/x-cbr":{"source":"apache","extensions":["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{"source":"apache","extensions":["vcd"]},"application/x-cfs-compressed":{"source":"apache","extensions":["cfs"]},"application/x-chat":{"source":"apache","extensions":["chat"]},"application/x-chess-pgn":{"source":"apache","extensions":["pgn"]},"application/x-chrome-extension":{"extensions":["crx"]},"application/x-cocoa":{"source":"nginx","extensions":["cco"]},"application/x-compress":{"source":"apache"},"application/x-conference":{"source":"apache","extensions":["nsc"]},"application/x-cpio":{"source":"apache","extensions":["cpio"]},"application/x-csh":{"source":"apache","extensions":["csh"]},"application/x-deb":{"compressible":false},"application/x-debian-package":{"source":"apache","extensions":["deb","udeb"]},"application/x-dgc-compressed":{"source":"apache","extensions":["dgc"]},"application/x-director":{"source":"apache","extensions":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{"source":"apache","extensions":["wad"]},"application/x-dtbncx+xml":{"source":"apache","compressible":true,"extensions":["ncx"]},"application/x-dtbook+xml":{"source":"apache","compressible":true,"extensions":["dtb"]},"application/x-dtbresource+xml":{"source":"apache","compressible":true,"extensions":["res"]},"application/x-dvi":{"source":"apache","compressible":false,"extensions":["dvi"]},"application/x-envoy":{"source":"apache","extensions":["evy"]},"application/x-eva":{"source":"apache","extensions":["eva"]},"application/x-font-bdf":{"source":"apache","extensions":["bdf"]},"application/x-font-dos":{"source":"apache"},"application/x-font-framemaker":{"source":"apache"},"application/x-font-ghostscript":{"source":"apache","extensions":["gsf"]},"application/x-font-libgrx":{"source":"apache"},"application/x-font-linux-psf":{"source":"apache","extensions":["psf"]},"application/x-font-pcf":{"source":"apache","extensions":["pcf"]},"application/x-font-snf":{"source":"apache","extensions":["snf"]},"application/x-font-speedo":{"source":"apache"},"application/x-font-sunos-news":{"source":"apache"},"application/x-font-type1":{"source":"apache","extensions":["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{"source":"apache"},"application/x-freearc":{"source":"apache","extensions":["arc"]},"application/x-futuresplash":{"source":"apache","extensions":["spl"]},"application/x-gca-compressed":{"source":"apache","extensions":["gca"]},"application/x-glulx":{"source":"apache","extensions":["ulx"]},"application/x-gnumeric":{"source":"apache","extensions":["gnumeric"]},"application/x-gramps-xml":{"source":"apache","extensions":["gramps"]},"application/x-gtar":{"source":"apache","extensions":["gtar"]},"application/x-gzip":{"source":"apache"},"application/x-hdf":{"source":"apache","extensions":["hdf"]},"application/x-httpd-php":{"compressible":true,"extensions":["php"]},"application/x-install-instructions":{"source":"apache","extensions":["install"]},"application/x-iso9660-image":{"source":"apache","extensions":["iso"]},"application/x-java-archive-diff":{"source":"nginx","extensions":["jardiff"]},"application/x-java-jnlp-file":{"source":"apache","compressible":false,"extensions":["jnlp"]},"application/x-javascript":{"compressible":true},"application/x-keepass2":{"extensions":["kdbx"]},"application/x-latex":{"source":"apache","compressible":false,"extensions":["latex"]},"application/x-lua-bytecode":{"extensions":["luac"]},"application/x-lzh-compressed":{"source":"apache","extensions":["lzh","lha"]},"application/x-makeself":{"source":"nginx","extensions":["run"]},"application/x-mie":{"source":"apache","extensions":["mie"]},"application/x-mobipocket-ebook":{"source":"apache","extensions":["prc","mobi"]},"application/x-mpegurl":{"compressible":false},"application/x-ms-application":{"source":"apache","extensions":["application"]},"application/x-ms-shortcut":{"source":"apache","extensions":["lnk"]},"application/x-ms-wmd":{"source":"apache","extensions":["wmd"]},"application/x-ms-wmz":{"source":"apache","extensions":["wmz"]},"application/x-ms-xbap":{"source":"apache","extensions":["xbap"]},"application/x-msaccess":{"source":"apache","extensions":["mdb"]},"application/x-msbinder":{"source":"apache","extensions":["obd"]},"application/x-mscardfile":{"source":"apache","extensions":["crd"]},"application/x-msclip":{"source":"apache","extensions":["clp"]},"application/x-msdos-program":{"extensions":["exe"]},"application/x-msdownload":{"source":"apache","extensions":["exe","dll","com","bat","msi"]},"application/x-msmediaview":{"source":"apache","extensions":["mvb","m13","m14"]},"application/x-msmetafile":{"source":"apache","extensions":["wmf","wmz","emf","emz"]},"application/x-msmoney":{"source":"apache","extensions":["mny"]},"application/x-mspublisher":{"source":"apache","extensions":["pub"]},"application/x-msschedule":{"source":"apache","extensions":["scd"]},"application/x-msterminal":{"source":"apache","extensions":["trm"]},"application/x-mswrite":{"source":"apache","extensions":["wri"]},"application/x-netcdf":{"source":"apache","extensions":["nc","cdf"]},"application/x-ns-proxy-autoconfig":{"compressible":true,"extensions":["pac"]},"application/x-nzb":{"source":"apache","extensions":["nzb"]},"application/x-perl":{"source":"nginx","extensions":["pl","pm"]},"application/x-pilot":{"source":"nginx","extensions":["prc","pdb"]},"application/x-pkcs12":{"source":"apache","compressible":false,"extensions":["p12","pfx"]},"application/x-pkcs7-certificates":{"source":"apache","extensions":["p7b","spc"]},"application/x-pkcs7-certreqresp":{"source":"apache","extensions":["p7r"]},"application/x-rar-compressed":{"source":"apache","compressible":false,"extensions":["rar"]},"application/x-redhat-package-manager":{"source":"nginx","extensions":["rpm"]},"application/x-research-info-systems":{"source":"apache","extensions":["ris"]},"application/x-sea":{"source":"nginx","extensions":["sea"]},"application/x-sh":{"source":"apache","compressible":true,"extensions":["sh"]},"application/x-shar":{"source":"apache","extensions":["shar"]},"application/x-shockwave-flash":{"source":"apache","compressible":false,"extensions":["swf"]},"application/x-silverlight-app":{"source":"apache","extensions":["xap"]},"application/x-sql":{"source":"apache","extensions":["sql"]},"application/x-stuffit":{"source":"apache","compressible":false,"extensions":["sit"]},"application/x-stuffitx":{"source":"apache","extensions":["sitx"]},"application/x-subrip":{"source":"apache","extensions":["srt"]},"application/x-sv4cpio":{"source":"apache","extensions":["sv4cpio"]},"application/x-sv4crc":{"source":"apache","extensions":["sv4crc"]},"application/x-t3vm-image":{"source":"apache","extensions":["t3"]},"application/x-tads":{"source":"apache","extensions":["gam"]},"application/x-tar":{"source":"apache","compressible":true,"extensions":["tar"]},"application/x-tcl":{"source":"apache","extensions":["tcl","tk"]},"application/x-tex":{"source":"apache","extensions":["tex"]},"application/x-tex-tfm":{"source":"apache","extensions":["tfm"]},"application/x-texinfo":{"source":"apache","extensions":["texinfo","texi"]},"application/x-tgif":{"source":"apache","extensions":["obj"]},"application/x-ustar":{"source":"apache","extensions":["ustar"]},"application/x-virtualbox-hdd":{"compressible":true,"extensions":["hdd"]},"application/x-virtualbox-ova":{"compressible":true,"extensions":["ova"]},"application/x-virtualbox-ovf":{"compressible":true,"extensions":["ovf"]},"application/x-virtualbox-vbox":{"compressible":true,"extensions":["vbox"]},"application/x-virtualbox-vbox-extpack":{"compressible":false,"extensions":["vbox-extpack"]},"application/x-virtualbox-vdi":{"compressible":true,"extensions":["vdi"]},"application/x-virtualbox-vhd":{"compressible":true,"extensions":["vhd"]},"application/x-virtualbox-vmdk":{"compressible":true,"extensions":["vmdk"]},"application/x-wais-source":{"source":"apache","extensions":["src"]},"application/x-web-app-manifest+json":{"compressible":true,"extensions":["webapp"]},"application/x-www-form-urlencoded":{"source":"iana","compressible":true},"application/x-x509-ca-cert":{"source":"apache","extensions":["der","crt","pem"]},"application/x-xfig":{"source":"apache","extensions":["fig"]},"application/x-xliff+xml":{"source":"apache","compressible":true,"extensions":["xlf"]},"application/x-xpinstall":{"source":"apache","compressible":false,"extensions":["xpi"]},"application/x-xz":{"source":"apache","extensions":["xz"]},"application/x-zmachine":{"source":"apache","extensions":["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{"source":"iana"},"application/xacml+xml":{"source":"iana","compressible":true},"application/xaml+xml":{"source":"apache","compressible":true,"extensions":["xaml"]},"application/xcap-att+xml":{"source":"iana","compressible":true,"extensions":["xav"]},"application/xcap-caps+xml":{"source":"iana","compressible":true,"extensions":["xca"]},"application/xcap-diff+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/xcap-el+xml":{"source":"iana","compressible":true,"extensions":["xel"]},"application/xcap-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/xcap-ns+xml":{"source":"iana","compressible":true,"extensions":["xns"]},"application/xcon-conference-info+xml":{"source":"iana","compressible":true},"application/xcon-conference-info-diff+xml":{"source":"iana","compressible":true},"application/xenc+xml":{"source":"iana","compressible":true,"extensions":["xenc"]},"application/xhtml+xml":{"source":"iana","compressible":true,"extensions":["xhtml","xht"]},"application/xhtml-voice+xml":{"source":"apache","compressible":true},"application/xliff+xml":{"source":"iana","compressible":true,"extensions":["xlf"]},"application/xml":{"source":"iana","compressible":true,"extensions":["xml","xsl","xsd","rng"]},"application/xml-dtd":{"source":"iana","compressible":true,"extensions":["dtd"]},"application/xml-external-parsed-entity":{"source":"iana"},"application/xml-patch+xml":{"source":"iana","compressible":true},"application/xmpp+xml":{"source":"iana","compressible":true},"application/xop+xml":{"source":"iana","compressible":true,"extensions":["xop"]},"application/xproc+xml":{"source":"apache","compressible":true,"extensions":["xpl"]},"application/xslt+xml":{"source":"iana","compressible":true,"extensions":["xslt"]},"application/xspf+xml":{"source":"apache","compressible":true,"extensions":["xspf"]},"application/xv+xml":{"source":"iana","compressible":true,"extensions":["mxml","xhvml","xvml","xvm"]},"application/yang":{"source":"iana","extensions":["yang"]},"application/yang-data+json":{"source":"iana","compressible":true},"application/yang-data+xml":{"source":"iana","compressible":true},"application/yang-patch+json":{"source":"iana","compressible":true},"application/yang-patch+xml":{"source":"iana","compressible":true},"application/yin+xml":{"source":"iana","compressible":true,"extensions":["yin"]},"application/zip":{"source":"iana","compressible":false,"extensions":["zip"]},"application/zlib":{"source":"iana"},"application/zstd":{"source":"iana"},"audio/1d-interleaved-parityfec":{"source":"iana"},"audio/32kadpcm":{"source":"iana"},"audio/3gpp":{"source":"iana","compressible":false,"extensions":["3gpp"]},"audio/3gpp2":{"source":"iana"},"audio/aac":{"source":"iana"},"audio/ac3":{"source":"iana"},"audio/adpcm":{"source":"apache","extensions":["adp"]},"audio/amr":{"source":"iana"},"audio/amr-wb":{"source":"iana"},"audio/amr-wb+":{"source":"iana"},"audio/aptx":{"source":"iana"},"audio/asc":{"source":"iana"},"audio/atrac-advanced-lossless":{"source":"iana"},"audio/atrac-x":{"source":"iana"},"audio/atrac3":{"source":"iana"},"audio/basic":{"source":"iana","compressible":false,"extensions":["au","snd"]},"audio/bv16":{"source":"iana"},"audio/bv32":{"source":"iana"},"audio/clearmode":{"source":"iana"},"audio/cn":{"source":"iana"},"audio/dat12":{"source":"iana"},"audio/dls":{"source":"iana"},"audio/dsr-es201108":{"source":"iana"},"audio/dsr-es202050":{"source":"iana"},"audio/dsr-es202211":{"source":"iana"},"audio/dsr-es202212":{"source":"iana"},"audio/dv":{"source":"iana"},"audio/dvi4":{"source":"iana"},"audio/eac3":{"source":"iana"},"audio/encaprtp":{"source":"iana"},"audio/evrc":{"source":"iana"},"audio/evrc-qcp":{"source":"iana"},"audio/evrc0":{"source":"iana"},"audio/evrc1":{"source":"iana"},"audio/evrcb":{"source":"iana"},"audio/evrcb0":{"source":"iana"},"audio/evrcb1":{"source":"iana"},"audio/evrcnw":{"source":"iana"},"audio/evrcnw0":{"source":"iana"},"audio/evrcnw1":{"source":"iana"},"audio/evrcwb":{"source":"iana"},"audio/evrcwb0":{"source":"iana"},"audio/evrcwb1":{"source":"iana"},"audio/evs":{"source":"iana"},"audio/flexfec":{"source":"iana"},"audio/fwdred":{"source":"iana"},"audio/g711-0":{"source":"iana"},"audio/g719":{"source":"iana"},"audio/g722":{"source":"iana"},"audio/g7221":{"source":"iana"},"audio/g723":{"source":"iana"},"audio/g726-16":{"source":"iana"},"audio/g726-24":{"source":"iana"},"audio/g726-32":{"source":"iana"},"audio/g726-40":{"source":"iana"},"audio/g728":{"source":"iana"},"audio/g729":{"source":"iana"},"audio/g7291":{"source":"iana"},"audio/g729d":{"source":"iana"},"audio/g729e":{"source":"iana"},"audio/gsm":{"source":"iana"},"audio/gsm-efr":{"source":"iana"},"audio/gsm-hr-08":{"source":"iana"},"audio/ilbc":{"source":"iana"},"audio/ip-mr_v2.5":{"source":"iana"},"audio/isac":{"source":"apache"},"audio/l16":{"source":"iana"},"audio/l20":{"source":"iana"},"audio/l24":{"source":"iana","compressible":false},"audio/l8":{"source":"iana"},"audio/lpc":{"source":"iana"},"audio/melp":{"source":"iana"},"audio/melp1200":{"source":"iana"},"audio/melp2400":{"source":"iana"},"audio/melp600":{"source":"iana"},"audio/midi":{"source":"apache","extensions":["mid","midi","kar","rmi"]},"audio/mobile-xmf":{"source":"iana","extensions":["mxmf"]},"audio/mp3":{"compressible":false,"extensions":["mp3"]},"audio/mp4":{"source":"iana","compressible":false,"extensions":["m4a","mp4a"]},"audio/mp4a-latm":{"source":"iana"},"audio/mpa":{"source":"iana"},"audio/mpa-robust":{"source":"iana"},"audio/mpeg":{"source":"iana","compressible":false,"extensions":["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{"source":"iana"},"audio/musepack":{"source":"apache"},"audio/ogg":{"source":"iana","compressible":false,"extensions":["oga","ogg","spx"]},"audio/opus":{"source":"iana"},"audio/parityfec":{"source":"iana"},"audio/pcma":{"source":"iana"},"audio/pcma-wb":{"source":"iana"},"audio/pcmu":{"source":"iana"},"audio/pcmu-wb":{"source":"iana"},"audio/prs.sid":{"source":"iana"},"audio/qcelp":{"source":"iana"},"audio/raptorfec":{"source":"iana"},"audio/red":{"source":"iana"},"audio/rtp-enc-aescm128":{"source":"iana"},"audio/rtp-midi":{"source":"iana"},"audio/rtploopback":{"source":"iana"},"audio/rtx":{"source":"iana"},"audio/s3m":{"source":"apache","extensions":["s3m"]},"audio/silk":{"source":"apache","extensions":["sil"]},"audio/smv":{"source":"iana"},"audio/smv-qcp":{"source":"iana"},"audio/smv0":{"source":"iana"},"audio/sp-midi":{"source":"iana"},"audio/speex":{"source":"iana"},"audio/t140c":{"source":"iana"},"audio/t38":{"source":"iana"},"audio/telephone-event":{"source":"iana"},"audio/tetra_acelp":{"source":"iana"},"audio/tone":{"source":"iana"},"audio/uemclip":{"source":"iana"},"audio/ulpfec":{"source":"iana"},"audio/usac":{"source":"iana"},"audio/vdvi":{"source":"iana"},"audio/vmr-wb":{"source":"iana"},"audio/vnd.3gpp.iufp":{"source":"iana"},"audio/vnd.4sb":{"source":"iana"},"audio/vnd.audiokoz":{"source":"iana"},"audio/vnd.celp":{"source":"iana"},"audio/vnd.cisco.nse":{"source":"iana"},"audio/vnd.cmles.radio-events":{"source":"iana"},"audio/vnd.cns.anp1":{"source":"iana"},"audio/vnd.cns.inf1":{"source":"iana"},"audio/vnd.dece.audio":{"source":"iana","extensions":["uva","uvva"]},"audio/vnd.digital-winds":{"source":"iana","extensions":["eol"]},"audio/vnd.dlna.adts":{"source":"iana"},"audio/vnd.dolby.heaac.1":{"source":"iana"},"audio/vnd.dolby.heaac.2":{"source":"iana"},"audio/vnd.dolby.mlp":{"source":"iana"},"audio/vnd.dolby.mps":{"source":"iana"},"audio/vnd.dolby.pl2":{"source":"iana"},"audio/vnd.dolby.pl2x":{"source":"iana"},"audio/vnd.dolby.pl2z":{"source":"iana"},"audio/vnd.dolby.pulse.1":{"source":"iana"},"audio/vnd.dra":{"source":"iana","extensions":["dra"]},"audio/vnd.dts":{"source":"iana","extensions":["dts"]},"audio/vnd.dts.hd":{"source":"iana","extensions":["dtshd"]},"audio/vnd.dts.uhd":{"source":"iana"},"audio/vnd.dvb.file":{"source":"iana"},"audio/vnd.everad.plj":{"source":"iana"},"audio/vnd.hns.audio":{"source":"iana"},"audio/vnd.lucent.voice":{"source":"iana","extensions":["lvp"]},"audio/vnd.ms-playready.media.pya":{"source":"iana","extensions":["pya"]},"audio/vnd.nokia.mobile-xmf":{"source":"iana"},"audio/vnd.nortel.vbk":{"source":"iana"},"audio/vnd.nuera.ecelp4800":{"source":"iana","extensions":["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{"source":"iana","extensions":["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{"source":"iana","extensions":["ecelp9600"]},"audio/vnd.octel.sbc":{"source":"iana"},"audio/vnd.presonus.multitrack":{"source":"iana"},"audio/vnd.qcelp":{"source":"iana"},"audio/vnd.rhetorex.32kadpcm":{"source":"iana"},"audio/vnd.rip":{"source":"iana","extensions":["rip"]},"audio/vnd.rn-realaudio":{"compressible":false},"audio/vnd.sealedmedia.softseal.mpeg":{"source":"iana"},"audio/vnd.vmx.cvsd":{"source":"iana"},"audio/vnd.wave":{"compressible":false},"audio/vorbis":{"source":"iana","compressible":false},"audio/vorbis-config":{"source":"iana"},"audio/wav":{"compressible":false,"extensions":["wav"]},"audio/wave":{"compressible":false,"extensions":["wav"]},"audio/webm":{"source":"apache","compressible":false,"extensions":["weba"]},"audio/x-aac":{"source":"apache","compressible":false,"extensions":["aac"]},"audio/x-aiff":{"source":"apache","extensions":["aif","aiff","aifc"]},"audio/x-caf":{"source":"apache","compressible":false,"extensions":["caf"]},"audio/x-flac":{"source":"apache","extensions":["flac"]},"audio/x-m4a":{"source":"nginx","extensions":["m4a"]},"audio/x-matroska":{"source":"apache","extensions":["mka"]},"audio/x-mpegurl":{"source":"apache","extensions":["m3u"]},"audio/x-ms-wax":{"source":"apache","extensions":["wax"]},"audio/x-ms-wma":{"source":"apache","extensions":["wma"]},"audio/x-pn-realaudio":{"source":"apache","extensions":["ram","ra"]},"audio/x-pn-realaudio-plugin":{"source":"apache","extensions":["rmp"]},"audio/x-realaudio":{"source":"nginx","extensions":["ra"]},"audio/x-tta":{"source":"apache"},"audio/x-wav":{"source":"apache","extensions":["wav"]},"audio/xm":{"source":"apache","extensions":["xm"]},"chemical/x-cdx":{"source":"apache","extensions":["cdx"]},"chemical/x-cif":{"source":"apache","extensions":["cif"]},"chemical/x-cmdf":{"source":"apache","extensions":["cmdf"]},"chemical/x-cml":{"source":"apache","extensions":["cml"]},"chemical/x-csml":{"source":"apache","extensions":["csml"]},"chemical/x-pdb":{"source":"apache"},"chemical/x-xyz":{"source":"apache","extensions":["xyz"]},"font/collection":{"source":"iana","extensions":["ttc"]},"font/otf":{"source":"iana","compressible":true,"extensions":["otf"]},"font/sfnt":{"source":"iana"},"font/ttf":{"source":"iana","compressible":true,"extensions":["ttf"]},"font/woff":{"source":"iana","extensions":["woff"]},"font/woff2":{"source":"iana","extensions":["woff2"]},"image/aces":{"source":"iana","extensions":["exr"]},"image/apng":{"compressible":false,"extensions":["apng"]},"image/avci":{"source":"iana"},"image/avcs":{"source":"iana"},"image/bmp":{"source":"iana","compressible":true,"extensions":["bmp"]},"image/cgm":{"source":"iana","extensions":["cgm"]},"image/dicom-rle":{"source":"iana","extensions":["drle"]},"image/emf":{"source":"iana","extensions":["emf"]},"image/fits":{"source":"iana","extensions":["fits"]},"image/g3fax":{"source":"iana","extensions":["g3"]},"image/gif":{"source":"iana","compressible":false,"extensions":["gif"]},"image/heic":{"source":"iana","extensions":["heic"]},"image/heic-sequence":{"source":"iana","extensions":["heics"]},"image/heif":{"source":"iana","extensions":["heif"]},"image/heif-sequence":{"source":"iana","extensions":["heifs"]},"image/hej2k":{"source":"iana","extensions":["hej2"]},"image/hsj2":{"source":"iana","extensions":["hsj2"]},"image/ief":{"source":"iana","extensions":["ief"]},"image/jls":{"source":"iana","extensions":["jls"]},"image/jp2":{"source":"iana","compressible":false,"extensions":["jp2","jpg2"]},"image/jpeg":{"source":"iana","compressible":false,"extensions":["jpeg","jpg","jpe"]},"image/jph":{"source":"iana","extensions":["jph"]},"image/jphc":{"source":"iana","extensions":["jhc"]},"image/jpm":{"source":"iana","compressible":false,"extensions":["jpm"]},"image/jpx":{"source":"iana","compressible":false,"extensions":["jpx","jpf"]},"image/jxr":{"source":"iana","extensions":["jxr"]},"image/jxra":{"source":"iana","extensions":["jxra"]},"image/jxrs":{"source":"iana","extensions":["jxrs"]},"image/jxs":{"source":"iana","extensions":["jxs"]},"image/jxsc":{"source":"iana","extensions":["jxsc"]},"image/jxsi":{"source":"iana","extensions":["jxsi"]},"image/jxss":{"source":"iana","extensions":["jxss"]},"image/ktx":{"source":"iana","extensions":["ktx"]},"image/naplps":{"source":"iana"},"image/pjpeg":{"compressible":false},"image/png":{"source":"iana","compressible":false,"extensions":["png"]},"image/prs.btif":{"source":"iana","extensions":["btif"]},"image/prs.pti":{"source":"iana","extensions":["pti"]},"image/pwg-raster":{"source":"iana"},"image/sgi":{"source":"apache","extensions":["sgi"]},"image/svg+xml":{"source":"iana","compressible":true,"extensions":["svg","svgz"]},"image/t38":{"source":"iana","extensions":["t38"]},"image/tiff":{"source":"iana","compressible":false,"extensions":["tif","tiff"]},"image/tiff-fx":{"source":"iana","extensions":["tfx"]},"image/vnd.adobe.photoshop":{"source":"iana","compressible":true,"extensions":["psd"]},"image/vnd.airzip.accelerator.azv":{"source":"iana","extensions":["azv"]},"image/vnd.cns.inf2":{"source":"iana"},"image/vnd.dece.graphic":{"source":"iana","extensions":["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{"source":"iana","extensions":["djvu","djv"]},"image/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"image/vnd.dwg":{"source":"iana","extensions":["dwg"]},"image/vnd.dxf":{"source":"iana","extensions":["dxf"]},"image/vnd.fastbidsheet":{"source":"iana","extensions":["fbs"]},"image/vnd.fpx":{"source":"iana","extensions":["fpx"]},"image/vnd.fst":{"source":"iana","extensions":["fst"]},"image/vnd.fujixerox.edmics-mmr":{"source":"iana","extensions":["mmr"]},"image/vnd.fujixerox.edmics-rlc":{"source":"iana","extensions":["rlc"]},"image/vnd.globalgraphics.pgb":{"source":"iana"},"image/vnd.microsoft.icon":{"source":"iana","extensions":["ico"]},"image/vnd.mix":{"source":"iana"},"image/vnd.mozilla.apng":{"source":"iana"},"image/vnd.ms-dds":{"extensions":["dds"]},"image/vnd.ms-modi":{"source":"iana","extensions":["mdi"]},"image/vnd.ms-photo":{"source":"apache","extensions":["wdp"]},"image/vnd.net-fpx":{"source":"iana","extensions":["npx"]},"image/vnd.radiance":{"source":"iana"},"image/vnd.sealed.png":{"source":"iana"},"image/vnd.sealedmedia.softseal.gif":{"source":"iana"},"image/vnd.sealedmedia.softseal.jpg":{"source":"iana"},"image/vnd.svf":{"source":"iana"},"image/vnd.tencent.tap":{"source":"iana","extensions":["tap"]},"image/vnd.valve.source.texture":{"source":"iana","extensions":["vtf"]},"image/vnd.wap.wbmp":{"source":"iana","extensions":["wbmp"]},"image/vnd.xiff":{"source":"iana","extensions":["xif"]},"image/vnd.zbrush.pcx":{"source":"iana","extensions":["pcx"]},"image/webp":{"source":"apache","extensions":["webp"]},"image/wmf":{"source":"iana","extensions":["wmf"]},"image/x-3ds":{"source":"apache","extensions":["3ds"]},"image/x-cmu-raster":{"source":"apache","extensions":["ras"]},"image/x-cmx":{"source":"apache","extensions":["cmx"]},"image/x-freehand":{"source":"apache","extensions":["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{"source":"apache","compressible":true,"extensions":["ico"]},"image/x-jng":{"source":"nginx","extensions":["jng"]},"image/x-mrsid-image":{"source":"apache","extensions":["sid"]},"image/x-ms-bmp":{"source":"nginx","compressible":true,"extensions":["bmp"]},"image/x-pcx":{"source":"apache","extensions":["pcx"]},"image/x-pict":{"source":"apache","extensions":["pic","pct"]},"image/x-portable-anymap":{"source":"apache","extensions":["pnm"]},"image/x-portable-bitmap":{"source":"apache","extensions":["pbm"]},"image/x-portable-graymap":{"source":"apache","extensions":["pgm"]},"image/x-portable-pixmap":{"source":"apache","extensions":["ppm"]},"image/x-rgb":{"source":"apache","extensions":["rgb"]},"image/x-tga":{"source":"apache","extensions":["tga"]},"image/x-xbitmap":{"source":"apache","extensions":["xbm"]},"image/x-xcf":{"compressible":false},"image/x-xpixmap":{"source":"apache","extensions":["xpm"]},"image/x-xwindowdump":{"source":"apache","extensions":["xwd"]},"message/cpim":{"source":"iana"},"message/delivery-status":{"source":"iana"},"message/disposition-notification":{"source":"iana","extensions":["disposition-notification"]},"message/external-body":{"source":"iana"},"message/feedback-report":{"source":"iana"},"message/global":{"source":"iana","extensions":["u8msg"]},"message/global-delivery-status":{"source":"iana","extensions":["u8dsn"]},"message/global-disposition-notification":{"source":"iana","extensions":["u8mdn"]},"message/global-headers":{"source":"iana","extensions":["u8hdr"]},"message/http":{"source":"iana","compressible":false},"message/imdn+xml":{"source":"iana","compressible":true},"message/news":{"source":"iana"},"message/partial":{"source":"iana","compressible":false},"message/rfc822":{"source":"iana","compressible":true,"extensions":["eml","mime"]},"message/s-http":{"source":"iana"},"message/sip":{"source":"iana"},"message/sipfrag":{"source":"iana"},"message/tracking-status":{"source":"iana"},"message/vnd.si.simp":{"source":"iana"},"message/vnd.wfa.wsc":{"source":"iana","extensions":["wsc"]},"model/3mf":{"source":"iana","extensions":["3mf"]},"model/gltf+json":{"source":"iana","compressible":true,"extensions":["gltf"]},"model/gltf-binary":{"source":"iana","compressible":true,"extensions":["glb"]},"model/iges":{"source":"iana","compressible":false,"extensions":["igs","iges"]},"model/mesh":{"source":"iana","compressible":false,"extensions":["msh","mesh","silo"]},"model/stl":{"source":"iana","extensions":["stl"]},"model/vnd.collada+xml":{"source":"iana","compressible":true,"extensions":["dae"]},"model/vnd.dwf":{"source":"iana","extensions":["dwf"]},"model/vnd.flatland.3dml":{"source":"iana"},"model/vnd.gdl":{"source":"iana","extensions":["gdl"]},"model/vnd.gs-gdl":{"source":"apache"},"model/vnd.gs.gdl":{"source":"iana"},"model/vnd.gtw":{"source":"iana","extensions":["gtw"]},"model/vnd.moml+xml":{"source":"iana","compressible":true},"model/vnd.mts":{"source":"iana","extensions":["mts"]},"model/vnd.opengex":{"source":"iana","extensions":["ogex"]},"model/vnd.parasolid.transmit.binary":{"source":"iana","extensions":["x_b"]},"model/vnd.parasolid.transmit.text":{"source":"iana","extensions":["x_t"]},"model/vnd.rosette.annotated-data-model":{"source":"iana"},"model/vnd.usdz+zip":{"source":"iana","compressible":false,"extensions":["usdz"]},"model/vnd.valve.source.compiled-map":{"source":"iana","extensions":["bsp"]},"model/vnd.vtu":{"source":"iana","extensions":["vtu"]},"model/vrml":{"source":"iana","compressible":false,"extensions":["wrl","vrml"]},"model/x3d+binary":{"source":"apache","compressible":false,"extensions":["x3db","x3dbz"]},"model/x3d+fastinfoset":{"source":"iana","extensions":["x3db"]},"model/x3d+vrml":{"source":"apache","compressible":false,"extensions":["x3dv","x3dvz"]},"model/x3d+xml":{"source":"iana","compressible":true,"extensions":["x3d","x3dz"]},"model/x3d-vrml":{"source":"iana","extensions":["x3dv"]},"multipart/alternative":{"source":"iana","compressible":false},"multipart/appledouble":{"source":"iana"},"multipart/byteranges":{"source":"iana"},"multipart/digest":{"source":"iana"},"multipart/encrypted":{"source":"iana","compressible":false},"multipart/form-data":{"source":"iana","compressible":false},"multipart/header-set":{"source":"iana"},"multipart/mixed":{"source":"iana"},"multipart/multilingual":{"source":"iana"},"multipart/parallel":{"source":"iana"},"multipart/related":{"source":"iana","compressible":false},"multipart/report":{"source":"iana"},"multipart/signed":{"source":"iana","compressible":false},"multipart/vnd.bint.med-plus":{"source":"iana"},"multipart/voice-message":{"source":"iana"},"multipart/x-mixed-replace":{"source":"iana"},"text/1d-interleaved-parityfec":{"source":"iana"},"text/cache-manifest":{"source":"iana","compressible":true,"extensions":["appcache","manifest"]},"text/calendar":{"source":"iana","extensions":["ics","ifb"]},"text/calender":{"compressible":true},"text/cmd":{"compressible":true},"text/coffeescript":{"extensions":["coffee","litcoffee"]},"text/css":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["css"]},"text/csv":{"source":"iana","compressible":true,"extensions":["csv"]},"text/csv-schema":{"source":"iana"},"text/directory":{"source":"iana"},"text/dns":{"source":"iana"},"text/ecmascript":{"source":"iana"},"text/encaprtp":{"source":"iana"},"text/enriched":{"source":"iana"},"text/flexfec":{"source":"iana"},"text/fwdred":{"source":"iana"},"text/grammar-ref-list":{"source":"iana"},"text/html":{"source":"iana","compressible":true,"extensions":["html","htm","shtml"]},"text/jade":{"extensions":["jade"]},"text/javascript":{"source":"iana","compressible":true},"text/jcr-cnd":{"source":"iana"},"text/jsx":{"compressible":true,"extensions":["jsx"]},"text/less":{"compressible":true,"extensions":["less"]},"text/markdown":{"source":"iana","compressible":true,"extensions":["markdown","md"]},"text/mathml":{"source":"nginx","extensions":["mml"]},"text/mdx":{"compressible":true,"extensions":["mdx"]},"text/mizar":{"source":"iana"},"text/n3":{"source":"iana","compressible":true,"extensions":["n3"]},"text/parameters":{"source":"iana"},"text/parityfec":{"source":"iana"},"text/plain":{"source":"iana","compressible":true,"extensions":["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{"source":"iana"},"text/prs.fallenstein.rst":{"source":"iana"},"text/prs.lines.tag":{"source":"iana","extensions":["dsc"]},"text/prs.prop.logic":{"source":"iana"},"text/raptorfec":{"source":"iana"},"text/red":{"source":"iana"},"text/rfc822-headers":{"source":"iana"},"text/richtext":{"source":"iana","compressible":true,"extensions":["rtx"]},"text/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"text/rtp-enc-aescm128":{"source":"iana"},"text/rtploopback":{"source":"iana"},"text/rtx":{"source":"iana"},"text/sgml":{"source":"iana","extensions":["sgml","sgm"]},"text/shex":{"extensions":["shex"]},"text/slim":{"extensions":["slim","slm"]},"text/strings":{"source":"iana"},"text/stylus":{"extensions":["stylus","styl"]},"text/t140":{"source":"iana"},"text/tab-separated-values":{"source":"iana","compressible":true,"extensions":["tsv"]},"text/troff":{"source":"iana","extensions":["t","tr","roff","man","me","ms"]},"text/turtle":{"source":"iana","charset":"UTF-8","extensions":["ttl"]},"text/ulpfec":{"source":"iana"},"text/uri-list":{"source":"iana","compressible":true,"extensions":["uri","uris","urls"]},"text/vcard":{"source":"iana","compressible":true,"extensions":["vcard"]},"text/vnd.a":{"source":"iana"},"text/vnd.abc":{"source":"iana"},"text/vnd.ascii-art":{"source":"iana"},"text/vnd.curl":{"source":"iana","extensions":["curl"]},"text/vnd.curl.dcurl":{"source":"apache","extensions":["dcurl"]},"text/vnd.curl.mcurl":{"source":"apache","extensions":["mcurl"]},"text/vnd.curl.scurl":{"source":"apache","extensions":["scurl"]},"text/vnd.debian.copyright":{"source":"iana"},"text/vnd.dmclientscript":{"source":"iana"},"text/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"text/vnd.esmertec.theme-descriptor":{"source":"iana"},"text/vnd.ficlab.flt":{"source":"iana"},"text/vnd.fly":{"source":"iana","extensions":["fly"]},"text/vnd.fmi.flexstor":{"source":"iana","extensions":["flx"]},"text/vnd.gml":{"source":"iana"},"text/vnd.graphviz":{"source":"iana","extensions":["gv"]},"text/vnd.hgl":{"source":"iana"},"text/vnd.in3d.3dml":{"source":"iana","extensions":["3dml"]},"text/vnd.in3d.spot":{"source":"iana","extensions":["spot"]},"text/vnd.iptc.newsml":{"source":"iana"},"text/vnd.iptc.nitf":{"source":"iana"},"text/vnd.latex-z":{"source":"iana"},"text/vnd.motorola.reflex":{"source":"iana"},"text/vnd.ms-mediapackage":{"source":"iana"},"text/vnd.net2phone.commcenter.command":{"source":"iana"},"text/vnd.radisys.msml-basic-layout":{"source":"iana"},"text/vnd.senx.warpscript":{"source":"iana"},"text/vnd.si.uricatalogue":{"source":"iana"},"text/vnd.sosi":{"source":"iana"},"text/vnd.sun.j2me.app-descriptor":{"source":"iana","extensions":["jad"]},"text/vnd.trolltech.linguist":{"source":"iana"},"text/vnd.wap.si":{"source":"iana"},"text/vnd.wap.sl":{"source":"iana"},"text/vnd.wap.wml":{"source":"iana","extensions":["wml"]},"text/vnd.wap.wmlscript":{"source":"iana","extensions":["wmls"]},"text/vtt":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["vtt"]},"text/x-asm":{"source":"apache","extensions":["s","asm"]},"text/x-c":{"source":"apache","extensions":["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{"source":"nginx","extensions":["htc"]},"text/x-fortran":{"source":"apache","extensions":["f","for","f77","f90"]},"text/x-gwt-rpc":{"compressible":true},"text/x-handlebars-template":{"extensions":["hbs"]},"text/x-java-source":{"source":"apache","extensions":["java"]},"text/x-jquery-tmpl":{"compressible":true},"text/x-lua":{"extensions":["lua"]},"text/x-markdown":{"compressible":true,"extensions":["mkd"]},"text/x-nfo":{"source":"apache","extensions":["nfo"]},"text/x-opml":{"source":"apache","extensions":["opml"]},"text/x-org":{"compressible":true,"extensions":["org"]},"text/x-pascal":{"source":"apache","extensions":["p","pas"]},"text/x-processing":{"compressible":true,"extensions":["pde"]},"text/x-sass":{"extensions":["sass"]},"text/x-scss":{"extensions":["scss"]},"text/x-setext":{"source":"apache","extensions":["etx"]},"text/x-sfv":{"source":"apache","extensions":["sfv"]},"text/x-suse-ymp":{"compressible":true,"extensions":["ymp"]},"text/x-uuencode":{"source":"apache","extensions":["uu"]},"text/x-vcalendar":{"source":"apache","extensions":["vcs"]},"text/x-vcard":{"source":"apache","extensions":["vcf"]},"text/xml":{"source":"iana","compressible":true,"extensions":["xml"]},"text/xml-external-parsed-entity":{"source":"iana"},"text/yaml":{"extensions":["yaml","yml"]},"video/1d-interleaved-parityfec":{"source":"iana"},"video/3gpp":{"source":"iana","extensions":["3gp","3gpp"]},"video/3gpp-tt":{"source":"iana"},"video/3gpp2":{"source":"iana","extensions":["3g2"]},"video/bmpeg":{"source":"iana"},"video/bt656":{"source":"iana"},"video/celb":{"source":"iana"},"video/dv":{"source":"iana"},"video/encaprtp":{"source":"iana"},"video/flexfec":{"source":"iana"},"video/h261":{"source":"iana","extensions":["h261"]},"video/h263":{"source":"iana","extensions":["h263"]},"video/h263-1998":{"source":"iana"},"video/h263-2000":{"source":"iana"},"video/h264":{"source":"iana","extensions":["h264"]},"video/h264-rcdo":{"source":"iana"},"video/h264-svc":{"source":"iana"},"video/h265":{"source":"iana"},"video/iso.segment":{"source":"iana"},"video/jpeg":{"source":"iana","extensions":["jpgv"]},"video/jpeg2000":{"source":"iana"},"video/jpm":{"source":"apache","extensions":["jpm","jpgm"]},"video/mj2":{"source":"iana","extensions":["mj2","mjp2"]},"video/mp1s":{"source":"iana"},"video/mp2p":{"source":"iana"},"video/mp2t":{"source":"iana","extensions":["ts"]},"video/mp4":{"source":"iana","compressible":false,"extensions":["mp4","mp4v","mpg4"]},"video/mp4v-es":{"source":"iana"},"video/mpeg":{"source":"iana","compressible":false,"extensions":["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{"source":"iana"},"video/mpv":{"source":"iana"},"video/nv":{"source":"iana"},"video/ogg":{"source":"iana","compressible":false,"extensions":["ogv"]},"video/parityfec":{"source":"iana"},"video/pointer":{"source":"iana"},"video/quicktime":{"source":"iana","compressible":false,"extensions":["qt","mov"]},"video/raptorfec":{"source":"iana"},"video/raw":{"source":"iana"},"video/rtp-enc-aescm128":{"source":"iana"},"video/rtploopback":{"source":"iana"},"video/rtx":{"source":"iana"},"video/smpte291":{"source":"iana"},"video/smpte292m":{"source":"iana"},"video/ulpfec":{"source":"iana"},"video/vc1":{"source":"iana"},"video/vc2":{"source":"iana"},"video/vnd.cctv":{"source":"iana"},"video/vnd.dece.hd":{"source":"iana","extensions":["uvh","uvvh"]},"video/vnd.dece.mobile":{"source":"iana","extensions":["uvm","uvvm"]},"video/vnd.dece.mp4":{"source":"iana"},"video/vnd.dece.pd":{"source":"iana","extensions":["uvp","uvvp"]},"video/vnd.dece.sd":{"source":"iana","extensions":["uvs","uvvs"]},"video/vnd.dece.video":{"source":"iana","extensions":["uvv","uvvv"]},"video/vnd.directv.mpeg":{"source":"iana"},"video/vnd.directv.mpeg-tts":{"source":"iana"},"video/vnd.dlna.mpeg-tts":{"source":"iana"},"video/vnd.dvb.file":{"source":"iana","extensions":["dvb"]},"video/vnd.fvt":{"source":"iana","extensions":["fvt"]},"video/vnd.hns.video":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.ttsavc":{"source":"iana"},"video/vnd.iptvforum.ttsmpeg2":{"source":"iana"},"video/vnd.motorola.video":{"source":"iana"},"video/vnd.motorola.videop":{"source":"iana"},"video/vnd.mpegurl":{"source":"iana","extensions":["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{"source":"iana","extensions":["pyv"]},"video/vnd.nokia.interleaved-multimedia":{"source":"iana"},"video/vnd.nokia.mp4vr":{"source":"iana"},"video/vnd.nokia.videovoip":{"source":"iana"},"video/vnd.objectvideo":{"source":"iana"},"video/vnd.radgamettools.bink":{"source":"iana"},"video/vnd.radgamettools.smacker":{"source":"iana"},"video/vnd.sealed.mpeg1":{"source":"iana"},"video/vnd.sealed.mpeg4":{"source":"iana"},"video/vnd.sealed.swf":{"source":"iana"},"video/vnd.sealedmedia.softseal.mov":{"source":"iana"},"video/vnd.uvvu.mp4":{"source":"iana","extensions":["uvu","uvvu"]},"video/vnd.vivo":{"source":"iana","extensions":["viv"]},"video/vnd.youtube.yt":{"source":"iana"},"video/vp8":{"source":"iana"},"video/webm":{"source":"apache","compressible":false,"extensions":["webm"]},"video/x-f4v":{"source":"apache","extensions":["f4v"]},"video/x-fli":{"source":"apache","extensions":["fli"]},"video/x-flv":{"source":"apache","compressible":false,"extensions":["flv"]},"video/x-m4v":{"source":"apache","extensions":["m4v"]},"video/x-matroska":{"source":"apache","compressible":false,"extensions":["mkv","mk3d","mks"]},"video/x-mng":{"source":"apache","extensions":["mng"]},"video/x-ms-asf":{"source":"apache","extensions":["asf","asx"]},"video/x-ms-vob":{"source":"apache","extensions":["vob"]},"video/x-ms-wm":{"source":"apache","extensions":["wm"]},"video/x-ms-wmv":{"source":"apache","compressible":false,"extensions":["wmv"]},"video/x-ms-wmx":{"source":"apache","extensions":["wmx"]},"video/x-ms-wvx":{"source":"apache","extensions":["wvx"]},"video/x-msvideo":{"source":"apache","extensions":["avi"]},"video/x-sgi-movie":{"source":"apache","extensions":["movie"]},"video/x-smv":{"source":"apache","extensions":["smv"]},"x-conference/x-cooltalk":{"source":"apache","extensions":["ice"]},"x-shader/x-fragment":{"compressible":true},"x-shader/x-vertex":{"compressible":true}}')},function(e,t,n){"use strict";e.exports=class{constructor(e){this.max=e,this.size=0,this.cache=new Map,this._cache=new Map}get(e,t){let n=this.cache.get(e);const i=t&&t.maxAge;let s;function a(){return s=s||Date.now(),s}if(n){if(n.expired&&a()>n.expired)n.expired=0,n.value=void 0;else if(void 0!==i){const e=i?a()+i:0;n.expired=e}return n.value}if(n=this._cache.get(e),n){if(n.expired&&a()>n.expired)n.expired=0,n.value=void 0;else if(this._update(e,n),void 0!==i){const e=i?a()+i:0;n.expired=e}return n.value}}set(e,t,n){const i=n&&n.maxAge,s=i?Date.now()+i:0;let a=this.cache.get(e);a?(a.expired=s,a.value=t):(a={value:t,expired:s},this._update(e,a))}keys(){const e=new Set,t=Date.now();for(const e of this.cache.entries())n(e);for(const e of this._cache.entries())n(e);function n(n){const i=n[0],s=n[1];(n[1].value&&!n[1].expired||s.expired>=t)&&e.add(i)}return Array.from(e.keys())}_update(e,t){this.cache.set(e,t),this.size++,this.size>=this.max&&(this.size=0,this._cache=this.cache,this.cache=new Map)}}},function(e,t,n){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var i=/["'&<>]/;e.exports=function(e){var t,n=""+e,s=i.exec(n);if(!s)return n;var a="",o=0,r=0;for(o=s.index;o<n.length;o++){switch(n.charCodeAt(o)){case 34:t="&quot;";break;case 38:t="&amp;";break;case 39:t="&#39;";break;case 60:t="&lt;";break;case 62:t="&gt;";break;default:continue}r!==o&&(a+=n.substring(r,o)),r=o+1,a+=t}return r!==o?a+n.substring(r,o):a}},function(e,t){
/*!
 * media-typer
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */
var n=/; *([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *= *("(?:[ !\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u0020-\u007e])*"|[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) */g,i=/^[\u0020-\u007e\u0080-\u00ff]+$/,s=/^[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+$/,a=/\\([\u0000-\u007f])/g,o=/([\\"])/g,r=/^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/,c=/^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/,p=/^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;function l(e){var t=String(e);if(s.test(t))return t;if(t.length>0&&!i.test(t))throw new TypeError("invalid parameter value");return'"'+t.replace(o,"\\$1")+'"'}t.format=function(e){if(!e||"object"!=typeof e)throw new TypeError("argument obj is required");var t=e.parameters,n=e.subtype,i=e.suffix,a=e.type;if(!a||!c.test(a))throw new TypeError("invalid type");if(!n||!r.test(n))throw new TypeError("invalid subtype");var o=a+"/"+n;if(i){if(!c.test(i))throw new TypeError("invalid suffix");o+="+"+i}if(t&&"object"==typeof t)for(var p,u=Object.keys(t).sort(),d=0;d<u.length;d++){if(p=u[d],!s.test(p))throw new TypeError("invalid parameter name");o+="; "+p+"="+l(t[p])}return o},t.parse=function(e){if(!e)throw new TypeError("argument string is required");"object"==typeof e&&(e=function(e){if("function"==typeof e.getHeader)return e.getHeader("content-type");if("object"==typeof e.headers)return e.headers&&e.headers["content-type"]}(e));if("string"!=typeof e)throw new TypeError("argument string is required to be a string");var t,i,s,o=e.indexOf(";"),r=function(e){var t=p.exec(e.toLowerCase());if(!t)throw new TypeError("invalid media type");var n,i=t[1],s=t[2],a=s.lastIndexOf("+");-1!==a&&(n=s.substr(a+1),s=s.substr(0,a));return{type:i,subtype:s,suffix:n}}(-1!==o?e.substr(0,o):e),c={};n.lastIndex=o;for(;i=n.exec(e);){if(i.index!==o)throw new TypeError("invalid parameter format");o+=i[0].length,t=i[1].toLowerCase(),'"'===(s=i[2])[0]&&(s=s.substr(1,s.length-2).replace(a,"$1")),c[t]=s}if(-1!==o&&o!==e.length)throw new TypeError("invalid parameter format");return r.parameters=c,r}},function(e){e.exports=JSON.parse('{"100":"Continue","101":"Switching Protocols","102":"Processing","103":"Early Hints","200":"OK","201":"Created","202":"Accepted","203":"Non-Authoritative Information","204":"No Content","205":"Reset Content","206":"Partial Content","207":"Multi-Status","208":"Already Reported","226":"IM Used","300":"Multiple Choices","301":"Moved Permanently","302":"Found","303":"See Other","304":"Not Modified","305":"Use Proxy","306":"(Unused)","307":"Temporary Redirect","308":"Permanent Redirect","400":"Bad Request","401":"Unauthorized","402":"Payment Required","403":"Forbidden","404":"Not Found","405":"Method Not Allowed","406":"Not Acceptable","407":"Proxy Authentication Required","408":"Request Timeout","409":"Conflict","410":"Gone","411":"Length Required","412":"Precondition Failed","413":"Payload Too Large","414":"URI Too Long","415":"Unsupported Media Type","416":"Range Not Satisfiable","417":"Expectation Failed","418":"I\'m a teapot","421":"Misdirected Request","422":"Unprocessable Entity","423":"Locked","424":"Failed Dependency","425":"Unordered Collection","426":"Upgrade Required","428":"Precondition Required","429":"Too Many Requests","431":"Request Header Fields Too Large","451":"Unavailable For Legal Reasons","500":"Internal Server Error","501":"Not Implemented","502":"Bad Gateway","503":"Service Unavailable","504":"Gateway Timeout","505":"HTTP Version Not Supported","506":"Variant Also Negotiates","507":"Insufficient Storage","508":"Loop Detected","509":"Bandwidth Limit Exceeded","510":"Not Extended","511":"Network Authentication Required"}')},function(e,t,n){"use strict";
/*!
 * destroy
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */var i=n(18).ReadStream,s=n(5);function a(){"number"==typeof this.fd&&this.close()}e.exports=function(e){if(e instanceof i)return function(e){e.destroy(),"function"==typeof e.close&&e.on("open",a);return e}(e);if(!(e instanceof s))return e;"function"==typeof e.destroy&&e.destroy();return e}},function(e,t){e.exports=require("assert")},function(e,t,n){"use strict";
/*!
 * vary
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e,t){if(!e||!e.getHeader||!e.setHeader)throw new TypeError("res argument is required");var n=e.getHeader("Vary")||"",i=Array.isArray(n)?n.join(", "):String(n);(n=s(i,t))&&e.setHeader("Vary",n)},e.exports.append=s;var i=/^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;function s(e,t){if("string"!=typeof e)throw new TypeError("header argument is required");if(!t)throw new TypeError("field argument is required");for(var n=Array.isArray(t)?t:a(String(t)),s=0;s<n.length;s++)if(!i.test(n[s]))throw new TypeError("field argument contains an invalid header name");if("*"===e)return e;var o=e,r=a(e.toLowerCase());if(-1!==n.indexOf("*")||-1!==r.indexOf("*"))return"*";for(var c=0;c<n.length;c++){var p=n[c].toLowerCase();-1===r.indexOf(p)&&(r.push(p),o=o?o+", "+n[c]:n[c])}return o}function a(e){for(var t=0,n=[],i=0,s=0,a=e.length;s<a;s++)switch(e.charCodeAt(s)){case 32:i===t&&(i=t=s+1);break;case 44:n.push(e.substring(i,t)),i=t=s+1;break;default:t=s+1}return n.push(e.substring(i,t)),n}},function(e,t,n){"use strict";
/*!
 * encodeurl
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e){return String(e).replace(s,"$1�$2").replace(i,encodeURI)};var i=/(?:[^\x21\x25\x26-\x3B\x3D\x3F-\x5B\x5D\x5F\x61-\x7A\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g,s=/(^|[^\uD800-\uDBFF])[\uDC00-\uDFFF]|[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/g},function(e,t,n){"use strict";e.exports=function(e){if(!Array.isArray(e))throw new TypeError("Middleware stack must be an array!");for(const t of e)if("function"!=typeof t)throw new TypeError("Middleware must be composed of functions!");return function(t,n){let i=-1;return function s(a){if(a<=i)return Promise.reject(new Error("next() called multiple times"));i=a;let o=e[a];a===e.length&&(o=n);if(!o)return Promise.resolve();try{return Promise.resolve(o(t,s.bind(null,a+1)))}catch(e){return Promise.reject(e)}}(0)}}},function(e,t,n){"use strict";const i=n(0),s=n(20),a=n(80),o=n(84),r=n(11),c=n(85),p=Symbol("context#cookies"),l=e.exports={inspect(){return this===l?this:this.toJSON()},toJSON(){return{request:this.request.toJSON(),response:this.response.toJSON(),app:this.app.toJSON(),originalUrl:this.originalUrl,req:"<original node req>",res:"<original node res>",socket:"<original node socket>"}},assert:a,throw(...e){throw s(...e)},onerror(e){if(null==e)return;e instanceof Error||(e=new Error(i.format("non-error thrown: %j",e)));let t=!1;if(!this.headerSent&&this.writable||(t=e.headerSent=!0),this.app.emit("error",e,this),t)return;const{res:n}=this;"function"==typeof n.getHeaderNames?n.getHeaderNames().forEach(e=>n.removeHeader(e)):n._headers={},this.set(e.headers),this.type="text","ENOENT"==e.code&&(e.status=404),"number"==typeof e.status&&r[e.status]||(e.status=500);const s=r[e.status],a=e.expose?e.message:s;this.status=e.status,this.length=Buffer.byteLength(a),n.end(a)},get cookies(){return this[p]||(this[p]=new c(this.req,this.res,{keys:this.app.keys,secure:this.request.secure})),this[p]},set cookies(e){this[p]=e}};i.inspect.custom&&(e.exports[i.inspect.custom]=e.exports.inspect),o(l,"response").method("attachment").method("redirect").method("remove").method("vary").method("has").method("set").method("append").method("flushHeaders").access("status").access("message").access("body").access("length").access("type").access("lastModified").access("etag").getter("headerSent").getter("writable"),o(l,"request").method("acceptsLanguages").method("acceptsEncodings").method("acceptsCharsets").method("accepts").method("get").method("is").access("querystring").access("idempotent").access("socket").access("search").access("method").access("query").access("path").access("url").access("accept").getter("origin").getter("href").getter("subdomains").getter("protocol").getter("host").getter("hostname").getter("URL").getter("header").getter("headers").getter("secure").getter("stale").getter("fresh").getter("ips").getter("ip")},function(e,t,n){"use strict";
/*!
 * depd
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e){var t=!0,n=function(e){var t,n="";e.isNative()?n="native":e.isEval()?(t=e.getScriptNameOrSourceURL())||(n=e.getEvalOrigin()):t=e.getFileName();if(t){n+=t;var i=e.getLineNumber();if(null!=i){n+=":"+i;var s=e.getColumnNumber();s&&(n+=":"+s)}}return n||"unknown source"}(e),i=e.getFunctionName(),s=e.isConstructor(),a=!(e.isToplevel()||s),o="";if(a){var r=e.getMethodName(),c=(p=e.receiver).constructor&&p.constructor.name||null;i?(c&&0!==i.indexOf(c)&&(o+=c+"."),o+=i,r&&i.lastIndexOf("."+r)!==i.length-r.length-1&&(o+=" [as "+r+"]")):o+=c+"."+(r||"<anonymous>")}else s?o+="new "+(i||"<anonymous>"):i?o+=i:(t=!1,o+=n);var p;t&&(o+=" ("+n+")");return o}},function(e,t,n){"use strict";
/*!
 * depd
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e,t){return e.listeners(t).length}},function(e,t,n){"use strict";e.exports=Object.setPrototypeOf||({__proto__:[]}instanceof Array?function(e,t){return e.__proto__=t,e}:function(e,t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n]);return e})},function(e,t,n){try{var i=n(0);if("function"!=typeof i.inherits)throw"";e.exports=i.inherits}catch(t){e.exports=n(78)}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},function(e,t){
/*!
 * toidentifier
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */
e.exports=function(e){return e.split(" ").map((function(e){return e.slice(0,1).toUpperCase()+e.slice(1)})).join("").replace(/[^ _0-9a-z]/gi,"")}},function(e,t,n){var i=n(20),s=n(81);function a(e,t,n,s){if(!e)throw i(t,n,s)}e.exports=a,a.equal=function(e,t,n,i,s){a(e==t,n,i,s)},a.notEqual=function(e,t,n,i,s){a(e!=t,n,i,s)},a.ok=function(e,t,n,i){a(e,t,n,i)},a.strictEqual=function(e,t,n,i,s){a(e===t,n,i,s)},a.notStrictEqual=function(e,t,n,i,s){a(e!==t,n,i,s)},a.deepEqual=function(e,t,n,i,o){a(s(e,t),n,i,o)},a.notDeepEqual=function(e,t,n,i,o){a(!s(e,t),n,i,o)}},function(e,t,n){var i=Array.prototype.slice,s=n(82),a=n(83),o=e.exports=function(e,t,n){return n||(n={}),e===t||(e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():!e||!t||"object"!=typeof e&&"object"!=typeof t?n.strict?e===t:e==t:function(e,t,n){var p,l;if(r(e)||r(t))return!1;if(e.prototype!==t.prototype)return!1;if(a(e))return!!a(t)&&(e=i.call(e),t=i.call(t),o(e,t,n));if(c(e)){if(!c(t))return!1;if(e.length!==t.length)return!1;for(p=0;p<e.length;p++)if(e[p]!==t[p])return!1;return!0}try{var u=s(e),d=s(t)}catch(e){return!1}if(u.length!=d.length)return!1;for(u.sort(),d.sort(),p=u.length-1;p>=0;p--)if(u[p]!=d[p])return!1;for(p=u.length-1;p>=0;p--)if(l=u[p],!o(e[l],t[l],n))return!1;return typeof e==typeof t}(e,t,n))};function r(e){return null==e}function c(e){return!(!e||"object"!=typeof e||"number"!=typeof e.length)&&("function"==typeof e.copy&&"function"==typeof e.slice&&!(e.length>0&&"number"!=typeof e[0]))}},function(e,t){function n(e){var t=[];for(var n in e)t.push(n);return t}(e.exports="function"==typeof Object.keys?Object.keys:n).shim=n},function(e,t){var n="[object Arguments]"==function(){return Object.prototype.toString.call(arguments)}();function i(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function s(e){return e&&"object"==typeof e&&"number"==typeof e.length&&Object.prototype.hasOwnProperty.call(e,"callee")&&!Object.prototype.propertyIsEnumerable.call(e,"callee")||!1}(t=e.exports=n?i:s).supported=i,t.unsupported=s},function(e,t){function n(e,t){if(!(this instanceof n))return new n(e,t);this.proto=e,this.target=t,this.methods=[],this.getters=[],this.setters=[],this.fluents=[]}e.exports=n,n.prototype.method=function(e){var t=this.proto,n=this.target;return this.methods.push(e),t[e]=function(){return this[n][e].apply(this[n],arguments)},this},n.prototype.access=function(e){return this.getter(e).setter(e)},n.prototype.getter=function(e){var t=this.proto,n=this.target;return this.getters.push(e),t.__defineGetter__(e,(function(){return this[n][e]})),this},n.prototype.setter=function(e){var t=this.proto,n=this.target;return this.setters.push(e),t.__defineSetter__(e,(function(t){return this[n][e]=t})),this},n.prototype.fluent=function(e){var t=this.proto,n=this.target;return this.fluents.push(e),t[e]=function(t){return void 0!==t?(this[n][e]=t,this):this[n][e]},this}},function(e,t,n){"use strict";
/*!
 * cookies
 * Copyright(c) 2014 Jed Schmidt, http://jed.is/
 * Copyright(c) 2015-2016 Douglas Christopher Wilson
 * MIT Licensed
 */var i=n(86)("cookies"),s=n(87),a=n(3),o={},r=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/,c=/^(?:lax|none|strict)$/i;function p(e,t,n){if(!(this instanceof p))return new p(e,t,n);this.secure=void 0,this.request=e,this.response=t,n&&(Array.isArray(n)?(i('"keys" argument; provide using options {"keys": [...]}'),this.keys=new s(n)):n.constructor&&"Keygrip"===n.constructor.name?(i('"keys" argument; provide using options {"keys": keygrip}'),this.keys=n):(this.keys=Array.isArray(n.keys)?new s(n.keys):n.keys,this.secure=n.secure))}function l(e,t,n){if(!r.test(e))throw new TypeError("argument name is invalid");if(t&&!r.test(t))throw new TypeError("argument value is invalid");for(var e in this.name=e,this.value=t||"",n)this[e]=n[e];if(this.value||(this.expires=new Date(0),this.maxAge=null),this.path&&!r.test(this.path))throw new TypeError("option path is invalid");if(this.domain&&!r.test(this.domain))throw new TypeError("option domain is invalid");if(this.sameSite&&!0!==this.sameSite&&!c.test(this.sameSite))throw new TypeError("option sameSite is invalid")}function u(e,t){if(t.overwrite)for(var n=e.length-1;n>=0;n--)0===e[n].indexOf(t.name+"=")&&e.splice(n,1);e.push(t.toHeader())}p.prototype.get=function(e,t){var n,i,s,a,r,c,p=e+".sig",l=t&&void 0!==t.signed?t.signed:!!this.keys;if((n=this.request.headers.cookie)&&(i=n.match(function(e){return o[e]?o[e]:o[e]=new RegExp("(?:^|;) *"+e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")+"=([^;]*)")}(e)))){if(s=i[1],!t||!l)return s;if(a=this.get(p)){if(r=e+"="+s,!this.keys)throw new Error(".keys required for signed cookies");if(!((c=this.keys.index(r,a))<0))return c&&this.set(p,this.keys.sign(r),{signed:!1}),s;this.set(p,null,{path:"/",signed:!1})}}},p.prototype.set=function(e,t,n){var s=this.response,o=this.request,r=s.getHeader("Set-Cookie")||[],c=void 0!==this.secure?!!this.secure:"https"===o.protocol||o.connection.encrypted,p=new l(e,t,n),d=n&&void 0!==n.signed?n.signed:!!this.keys;if("string"==typeof r&&(r=[r]),!c&&n&&n.secure)throw new Error("Cannot send secure cookie over unencrypted connection");if(p.secure=n&&void 0!==n.secure?n.secure:c,n&&"secureProxy"in n&&(i('"secureProxy" option; use "secure" option, provide "secure" to constructor if needed'),p.secure=n.secureProxy),u(r,p),n&&d){if(!this.keys)throw new Error(".keys required for signed cookies");p.value=this.keys.sign(p.toString()),p.name+=".sig",u(r,p)}return(s.set?a.OutgoingMessage.prototype.setHeader:s.setHeader).call(s,"Set-Cookie",r),this},l.prototype.path="/",l.prototype.expires=void 0,l.prototype.domain=void 0,l.prototype.httpOnly=!0,l.prototype.sameSite=!1,l.prototype.secure=!1,l.prototype.overwrite=!1,l.prototype.toString=function(){return this.name+"="+this.value},l.prototype.toHeader=function(){var e=this.toString();return this.maxAge&&(this.expires=new Date(Date.now()+this.maxAge)),this.path&&(e+="; path="+this.path),this.expires&&(e+="; expires="+this.expires.toUTCString()),this.domain&&(e+="; domain="+this.domain),this.sameSite&&(e+="; samesite="+(!0===this.sameSite?"strict":this.sameSite.toLowerCase())),this.secure&&(e+="; secure"),this.httpOnly&&(e+="; httponly"),e},Object.defineProperty(l.prototype,"maxage",{configurable:!0,enumerable:!0,get:function(){return this.maxAge},set:function(e){return this.maxAge=e}}),i.property(l.prototype,"maxage",'"maxage"; use "maxAge" instead'),p.connect=p.express=function(e){return function(t,n,i){t.cookies=n.cookies=new p(t,n,{keys:e}),i()}},p.Cookie=l,e.exports=p},function(e,t,n){
/*!
 * depd
 * Copyright(c) 2014-2018 Douglas Christopher Wilson
 * MIT Licensed
 */
var i=n(4).relative;e.exports=function(e){if(!e)throw new TypeError("argument namespace is required");var t=c(m()[1])[0];function n(e){r.call(n,e)}return n._file=t,n._ignored=function(e){if(process.noDeprecation)return!0;return a(process.env.NO_DEPRECATION||"",e)}(e),n._namespace=e,n._traced=function(e){if(process.traceDeprecation)return!0;return a(process.env.TRACE_DEPRECATION||"",e)}(e),n._warned=Object.create(null),n.function=h,n.property=v,n};var s=process.cwd();function a(e,t){for(var n=e.split(/[ ,]+/),i=String(t).toLowerCase(),s=0;s<n.length;s++){var a=n[s];if(a&&("*"===a||a.toLowerCase()===i))return!0}return!1}function o(e){var t=this.name+": "+this.namespace;this.message&&(t+=" deprecated "+this.message);for(var n=0;n<e.length;n++)t+="\n    at "+e[n].toString();return t}function r(e,t){var n,i,s=(n=process,i="deprecation",("function"!=typeof n.listenerCount?n.listeners(i).length:n.listenerCount(i))>0);if(s||!this._ignored){var a,o,r,d,f=0,h=!1,v=m(),g=this._file;for(t?(d=t,(r=c(v[1])).name=d.name,g=r[0]):r=d=c(v[f=2]);f<v.length;f++)if((o=(a=c(v[f]))[0])===g)h=!0;else if(o===this._file)g=this._file;else if(h)break;var b=a?d.join(":")+"__"+a.join(":"):void 0;if(!(void 0!==b&&b in this._warned)){this._warned[b]=!0;var y=e;if(y||(y=r!==d&&r.name?p(r):p(d)),s){var w=x(this._namespace,y,v.slice(f));process.emit("deprecation",w)}else{var k=(process.stderr.isTTY?u:l).call(this,y,a,v.slice(f));process.stderr.write(k+"\n","utf8")}}}}function c(e){var t=e.getFileName()||"<anonymous>",n=e.getLineNumber(),i=e.getColumnNumber();e.isEval()&&(t=e.getEvalOrigin()+", "+t);var s=[t,n,i];return s.callSite=e,s.name=e.getFunctionName(),s}function p(e){var t=e.callSite,n=e.name;n||(n="<anonymous@"+d(e)+">");var i=t.getThis(),s=i&&t.getTypeName();return"Object"===s&&(s=void 0),"Function"===s&&(s=i.name||s),s&&t.getMethodName()?s+"."+n:n}function l(e,t,n){var i=(new Date).toUTCString()+" "+this._namespace+" deprecated "+e;if(this._traced){for(var s=0;s<n.length;s++)i+="\n    at "+n[s].toString();return i}return t&&(i+=" at "+d(t)),i}function u(e,t,n){var i="[36;1m"+this._namespace+"[22;39m [33;1mdeprecated[22;39m [0m"+e+"[39m";if(this._traced){for(var s=0;s<n.length;s++)i+="\n    [36mat "+n[s].toString()+"[39m";return i}return t&&(i+=" [36m"+d(t)+"[39m"),i}function d(e){return i(s,e[0])+":"+e[1]+":"+e[2]}function m(){var e=Error.stackTraceLimit,t={},n=Error.prepareStackTrace;Error.prepareStackTrace=f,Error.stackTraceLimit=Math.max(10,e),Error.captureStackTrace(t);var i=t.stack.slice(1);return Error.prepareStackTrace=n,Error.stackTraceLimit=e,i}function f(e,t){return t}function h(e,t){if("function"!=typeof e)throw new TypeError("argument fn must be a function");var n=function(e){for(var t="",n=0;n<e;n++)t+=", arg"+n;return t.substr(2)}(e.length),i=c(m()[1]);return i.name=e.name,new Function("fn","log","deprecate","message","site",'"use strict"\nreturn function ('+n+") {log.call(deprecate, message, site)\nreturn fn.apply(this, arguments)\n}")(e,r,this,t,i)}function v(e,t,n){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("argument obj must be object");var i=Object.getOwnPropertyDescriptor(e,t);if(!i)throw new TypeError("must call property on owner object");if(!i.configurable)throw new TypeError("property must be configurable");var s=this,a=c(m()[1]);a.name=t,"value"in i&&(i=function(e,t,n){var i=Object.getOwnPropertyDescriptor(e,t),s=i.value;return i.get=function(){return s},i.writable&&(i.set=function(e){return s=e}),delete i.value,delete i.writable,Object.defineProperty(e,t,i),i}(e,t));var o=i.get,p=i.set;"function"==typeof o&&(i.get=function(){return r.call(s,n,a),o.apply(this,arguments)}),"function"==typeof p&&(i.set=function(){return r.call(s,n,a),p.apply(this,arguments)}),Object.defineProperty(e,t,i)}function x(e,t,n){var i,s=new Error;return Object.defineProperty(s,"constructor",{value:x}),Object.defineProperty(s,"message",{configurable:!0,enumerable:!1,value:t,writable:!0}),Object.defineProperty(s,"name",{enumerable:!1,configurable:!0,value:"DeprecationError",writable:!0}),Object.defineProperty(s,"namespace",{configurable:!0,enumerable:!1,value:e,writable:!0}),Object.defineProperty(s,"stack",{configurable:!0,enumerable:!1,get:function(){return void 0!==i?i:i=o.call(this,n)},set:function(e){i=e}}),s}},function(e,t,n){"use strict";
/*!
 * keygrip
 * Copyright(c) 2011-2014 Jed Schmidt
 * MIT Licensed
 */var i=n(88),s=n(6);function a(e,t,n){if(t||(t="sha1"),n||(n="base64"),!(this instanceof a))return new a(e,t,n);if(!(e&&0 in e))throw new Error("Keys must be provided.");function o(e,i){return s.createHmac(t,i).update(e).digest(n).replace(/\/|\+|=/g,(function(e){return{"/":"_","+":"-","=":""}[e]}))}this.sign=function(t){return o(t,e[0])},this.verify=function(e,t){return this.index(e,t)>-1},this.index=function(t,n){for(var s=0,a=e.length;s<a;s++)if(i(n,o(t,e[s])))return s;return-1}}a.sign=a.verify=a.index=function(){throw new Error("Usage: require('keygrip')(<array-of-keys>)")},e.exports=a},function(e,t,n){"use strict";var i=n(6);e.exports=function(e,t){var n=String(e),s=String(t),a=i.pseudoRandomBytes(32);return function(e,t){if(e.length!==t.length)return!1;if(i.timingSafeEqual)return i.timingSafeEqual(e,t);for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}(i.createHmac("sha256",a).update(n).digest(),i.createHmac("sha256",a).update(s).digest())&&e===t}},function(e,t,n){"use strict";const i=n(2).URL,s=n(29),a=n(30),o=n(95),r=n(2).format,c=n(96),p=n(21),l=n(26),u=n(97),d=n(19),m=n(0),f=Symbol("context#ip");e.exports={get header(){return this.req.headers},set header(e){this.req.headers=e},get headers(){return this.req.headers},set headers(e){this.req.headers=e},get url(){return this.req.url},set url(e){this.req.url=e},get origin(){return`${this.protocol}://${this.host}`},get href(){return/^https?:\/\//i.test(this.originalUrl)?this.originalUrl:this.origin+this.originalUrl},get method(){return this.req.method},set method(e){this.req.method=e},get path(){return c(this.req).pathname},set path(e){const t=c(this.req);t.pathname!==e&&(t.pathname=e,t.path=null,this.url=r(t))},get query(){const e=this.querystring,t=this._querycache=this._querycache||{};return t[e]||(t[e]=p.parse(e))},set query(e){this.querystring=p.stringify(e)},get querystring(){return this.req&&c(this.req).query||""},set querystring(e){const t=c(this.req);t.search!==`?${e}`&&(t.search=e,t.path=null,this.url=r(t))},get search(){return this.querystring?`?${this.querystring}`:""},set search(e){this.querystring=e},get host(){let e=this.app.proxy&&this.get("X-Forwarded-Host");return e||(this.req.httpVersionMajor>=2&&(e=this.get(":authority")),e||(e=this.get("Host"))),e?e.split(/\s*,\s*/,1)[0]:""},get hostname(){const e=this.host;return e?"["==e[0]?this.URL.hostname||"":e.split(":",1)[0]:""},get URL(){if(!this.memoizedURL){const e=this.originalUrl||"";try{this.memoizedURL=new i(`${this.origin}${e}`)}catch(e){this.memoizedURL=Object.create(null)}}return this.memoizedURL},get fresh(){const e=this.method,t=this.ctx.status;return("GET"==e||"HEAD"==e)&&((t>=200&&t<300||304==t)&&u(this.header,this.response.header))},get stale(){return!this.fresh},get idempotent(){return!!~["GET","HEAD","PUT","DELETE","OPTIONS","TRACE"].indexOf(this.method)},get socket(){return this.req.socket},get charset(){try{const{parameters:e}=o.parse(this.req);return e.charset||""}catch(e){return""}},get length(){const e=this.get("Content-Length");if(""!=e)return~~e},get protocol(){if(this.socket.encrypted)return"https";if(!this.app.proxy)return"http";const e=this.get("X-Forwarded-Proto");return e?e.split(/\s*,\s*/,1)[0]:"http"},get secure(){return"https"==this.protocol},get ips(){const e=this.app.proxy,t=this.get(this.app.proxyIpHeader);let n=e&&t?t.split(/\s*,\s*/):[];return this.app.maxIpsCount>0&&(n=n.slice(-this.app.maxIpsCount)),n},get ip(){return this[f]||(this[f]=this.ips[0]||this.socket.remoteAddress||""),this[f]},set ip(e){this[f]=e},get subdomains(){const e=this.app.subdomainOffset,t=this.hostname;return s.isIP(t)?[]:t.split(".").reverse().slice(e)},get accept(){return this._accept||(this._accept=a(this.req))},set accept(e){this._accept=e},accepts(...e){return this.accept.types(...e)},acceptsEncodings(...e){return this.accept.encodings(...e)},acceptsCharsets(...e){return this.accept.charsets(...e)},acceptsLanguages(...e){return this.accept.languages(...e)},is(e,...t){return l(this.req,e,...t)},get type(){const e=this.get("Content-Type");return e?e.split(";")[0]:""},get(e){const t=this.req;switch(e=e.toLowerCase()){case"referer":case"referrer":return t.headers.referrer||t.headers.referer||"";default:return t.headers[e]||""}},inspect(){if(this.req)return this.toJSON()},toJSON(){return d(this,["method","url","header"])}},m.inspect.custom&&(e.exports[m.inspect.custom]=e.exports.inspect)},function(e,t,n){"use strict";
/*!
 * negotiator
 * Copyright(c) 2012 Federico Romero
 * Copyright(c) 2012-2014 Isaac Z. Schlueter
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var i=Object.create(null);function s(e){if(!(this instanceof s))return new s(e);this.request=e}function a(e){var t=i[e];if(void 0!==t)return t;switch(e){case"charset":t=n(91);break;case"encoding":t=n(92);break;case"language":t=n(93);break;case"mediaType":t=n(94);break;default:throw new Error("Cannot find module '"+e+"'")}return i[e]=t,t}e.exports=s,e.exports.Negotiator=s,s.prototype.charset=function(e){var t=this.charsets(e);return t&&t[0]},s.prototype.charsets=function(e){return(0,a("charset").preferredCharsets)(this.request.headers["accept-charset"],e)},s.prototype.encoding=function(e){var t=this.encodings(e);return t&&t[0]},s.prototype.encodings=function(e){return(0,a("encoding").preferredEncodings)(this.request.headers["accept-encoding"],e)},s.prototype.language=function(e){var t=this.languages(e);return t&&t[0]},s.prototype.languages=function(e){return(0,a("language").preferredLanguages)(this.request.headers["accept-language"],e)},s.prototype.mediaType=function(e){var t=this.mediaTypes(e);return t&&t[0]},s.prototype.mediaTypes=function(e){return(0,a("mediaType").preferredMediaTypes)(this.request.headers.accept,e)},s.prototype.preferredCharset=s.prototype.charset,s.prototype.preferredCharsets=s.prototype.charsets,s.prototype.preferredEncoding=s.prototype.encoding,s.prototype.preferredEncodings=s.prototype.encodings,s.prototype.preferredLanguage=s.prototype.language,s.prototype.preferredLanguages=s.prototype.languages,s.prototype.preferredMediaType=s.prototype.mediaType,s.prototype.preferredMediaTypes=s.prototype.mediaTypes},function(e,t,n){"use strict";e.exports=o,e.exports.preferredCharsets=o;var i=/^\s*([^\s;]+)\s*(?:;(.*))?$/;function s(e,t){var n=i.exec(e);if(!n)return null;var s=n[1],a=1;if(n[2])for(var o=n[2].split(";"),r=0;r<o.length;r++){var c=o[r].trim().split("=");if("q"===c[0]){a=parseFloat(c[1]);break}}return{charset:s,q:a,i:t}}function a(e,t,n){var i=0;if(t.charset.toLowerCase()===e.toLowerCase())i|=1;else if("*"!==t.charset)return null;return{i:n,o:t.i,q:t.q,s:i}}function o(e,t){var n=function(e){for(var t=e.split(","),n=0,i=0;n<t.length;n++){var a=s(t[n].trim(),n);a&&(t[i++]=a)}return t.length=i,t}(void 0===e?"*":e||"");if(!t)return n.filter(p).sort(r).map(c);var i=t.map((function(e,t){return function(e,t,n){for(var i={o:-1,q:0,s:0},s=0;s<t.length;s++){var o=a(e,t[s],n);o&&(i.s-o.s||i.q-o.q||i.o-o.o)<0&&(i=o)}return i}(e,n,t)}));return i.filter(p).sort(r).map((function(e){return t[i.indexOf(e)]}))}function r(e,t){return t.q-e.q||t.s-e.s||e.o-t.o||e.i-t.i||0}function c(e){return e.charset}function p(e){return e.q>0}},function(e,t,n){"use strict";e.exports=o,e.exports.preferredEncodings=o;var i=/^\s*([^\s;]+)\s*(?:;(.*))?$/;function s(e,t){var n=i.exec(e);if(!n)return null;var s=n[1],a=1;if(n[2])for(var o=n[2].split(";"),r=0;r<o.length;r++){var c=o[r].trim().split("=");if("q"===c[0]){a=parseFloat(c[1]);break}}return{encoding:s,q:a,i:t}}function a(e,t,n){var i=0;if(t.encoding.toLowerCase()===e.toLowerCase())i|=1;else if("*"!==t.encoding)return null;return{i:n,o:t.i,q:t.q,s:i}}function o(e,t){var n=function(e){for(var t=e.split(","),n=!1,i=1,o=0,r=0;o<t.length;o++){var c=s(t[o].trim(),o);c&&(t[r++]=c,n=n||a("identity",c),i=Math.min(i,c.q||1))}return n||(t[r++]={encoding:"identity",q:i,i:o}),t.length=r,t}(e||"");if(!t)return n.filter(p).sort(r).map(c);var i=t.map((function(e,t){return function(e,t,n){for(var i={o:-1,q:0,s:0},s=0;s<t.length;s++){var o=a(e,t[s],n);o&&(i.s-o.s||i.q-o.q||i.o-o.o)<0&&(i=o)}return i}(e,n,t)}));return i.filter(p).sort(r).map((function(e){return t[i.indexOf(e)]}))}function r(e,t){return t.q-e.q||t.s-e.s||e.o-t.o||e.i-t.i||0}function c(e){return e.encoding}function p(e){return e.q>0}},function(e,t,n){"use strict";e.exports=o,e.exports.preferredLanguages=o;var i=/^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/;function s(e,t){var n=i.exec(e);if(!n)return null;var s=n[1],a=n[2],o=s;a&&(o+="-"+a);var r=1;if(n[3])for(var c=n[3].split(";"),p=0;p<c.length;p++){var l=c[p].split("=");"q"===l[0]&&(r=parseFloat(l[1]))}return{prefix:s,suffix:a,q:r,i:t,full:o}}function a(e,t,n){var i=s(e);if(!i)return null;var a=0;if(t.full.toLowerCase()===i.full.toLowerCase())a|=4;else if(t.prefix.toLowerCase()===i.full.toLowerCase())a|=2;else if(t.full.toLowerCase()===i.prefix.toLowerCase())a|=1;else if("*"!==t.full)return null;return{i:n,o:t.i,q:t.q,s:a}}function o(e,t){var n=function(e){for(var t=e.split(","),n=0,i=0;n<t.length;n++){var a=s(t[n].trim(),n);a&&(t[i++]=a)}return t.length=i,t}(void 0===e?"*":e||"");if(!t)return n.filter(p).sort(r).map(c);var i=t.map((function(e,t){return function(e,t,n){for(var i={o:-1,q:0,s:0},s=0;s<t.length;s++){var o=a(e,t[s],n);o&&(i.s-o.s||i.q-o.q||i.o-o.o)<0&&(i=o)}return i}(e,n,t)}));return i.filter(p).sort(r).map((function(e){return t[i.indexOf(e)]}))}function r(e,t){return t.q-e.q||t.s-e.s||e.o-t.o||e.i-t.i||0}function c(e){return e.full}function p(e){return e.q>0}},function(e,t,n){"use strict";e.exports=r,e.exports.preferredMediaTypes=r;var i=/^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;function s(e){for(var t=function(e){for(var t=e.split(","),n=1,i=0;n<t.length;n++)u(t[i])%2==0?t[++i]=t[n]:t[i]+=","+t[n];return t.length=i+1,t}(e),n=0,i=0;n<t.length;n++){var s=a(t[n].trim(),n);s&&(t[i++]=s)}return t.length=i,t}function a(e,t){var n=i.exec(e);if(!n)return null;var s=Object.create(null),a=1,o=n[2],r=n[1];if(n[3])for(var c=function(e){for(var t=e.split(";"),n=1,i=0;n<t.length;n++)u(t[i])%2==0?t[++i]=t[n]:t[i]+=";"+t[n];t.length=i+1;for(n=0;n<t.length;n++)t[n]=t[n].trim();return t}(n[3]).map(d),p=0;p<c.length;p++){var l=c[p],m=l[0].toLowerCase(),f=l[1],h=f&&'"'===f[0]&&'"'===f[f.length-1]?f.substr(1,f.length-2):f;if("q"===m){a=parseFloat(h);break}s[m]=h}return{type:r,subtype:o,params:s,q:a,i:t}}function o(e,t,n){var i=a(e),s=0;if(!i)return null;if(t.type.toLowerCase()==i.type.toLowerCase())s|=4;else if("*"!=t.type)return null;if(t.subtype.toLowerCase()==i.subtype.toLowerCase())s|=2;else if("*"!=t.subtype)return null;var o=Object.keys(t.params);if(o.length>0){if(!o.every((function(e){return"*"==t.params[e]||(t.params[e]||"").toLowerCase()==(i.params[e]||"").toLowerCase()})))return null;s|=1}return{i:n,o:t.i,q:t.q,s:s}}function r(e,t){var n=s(void 0===e?"*/*":e||"");if(!t)return n.filter(l).sort(c).map(p);var i=t.map((function(e,t){return function(e,t,n){for(var i={o:-1,q:0,s:0},s=0;s<t.length;s++){var a=o(e,t[s],n);a&&(i.s-a.s||i.q-a.q||i.o-a.o)<0&&(i=a)}return i}(e,n,t)}));return i.filter(l).sort(c).map((function(e){return t[i.indexOf(e)]}))}function c(e,t){return t.q-e.q||t.s-e.s||e.o-t.o||e.i-t.i||0}function p(e){return e.type+"/"+e.subtype}function l(e){return e.q>0}function u(e){for(var t=0,n=0;-1!==(n=e.indexOf('"',n));)t++,n++;return t}function d(e){var t,n,i=e.indexOf("=");return-1===i?t=e:(t=e.substr(0,i),n=e.substr(i+1)),[t,n]}},function(e,t,n){"use strict";
/*!
 * content-type
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var i=/; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g,s=/^[\u000b\u0020-\u007e\u0080-\u00ff]+$/,a=/^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/,o=/\\([\u000b\u0020-\u00ff])/g,r=/([\\"])/g,c=/^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;function p(e){var t=String(e);if(a.test(t))return t;if(t.length>0&&!s.test(t))throw new TypeError("invalid parameter value");return'"'+t.replace(r,"\\$1")+'"'}function l(e){this.parameters=Object.create(null),this.type=e}t.format=function(e){if(!e||"object"!=typeof e)throw new TypeError("argument obj is required");var t=e.parameters,n=e.type;if(!n||!c.test(n))throw new TypeError("invalid type");var i=n;if(t&&"object"==typeof t)for(var s,o=Object.keys(t).sort(),r=0;r<o.length;r++){if(s=o[r],!a.test(s))throw new TypeError("invalid parameter name");i+="; "+s+"="+p(t[s])}return i},t.parse=function(e){if(!e)throw new TypeError("argument string is required");var t="object"==typeof e?function(e){var t;"function"==typeof e.getHeader?t=e.getHeader("content-type"):"object"==typeof e.headers&&(t=e.headers&&e.headers["content-type"]);if("string"!=typeof t)throw new TypeError("content-type header is missing from object");return t}(e):e;if("string"!=typeof t)throw new TypeError("argument string is required to be a string");var n=t.indexOf(";"),s=-1!==n?t.substr(0,n).trim():t.trim();if(!c.test(s))throw new TypeError("invalid media type");var a=new l(s.toLowerCase());if(-1!==n){var r,p,u;for(i.lastIndex=n;p=i.exec(t);){if(p.index!==n)throw new TypeError("invalid parameter format");n+=p[0].length,r=p[1].toLowerCase(),'"'===(u=p[2])[0]&&(u=u.substr(1,u.length-2).replace(o,"$1")),a.parameters[r]=u}if(n!==t.length)throw new TypeError("invalid parameter format")}return a}},function(e,t,n){"use strict";
/*!
 * parseurl
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */var i=n(2),s=i.parse,a=i.Url;function o(e){var t=e.url;if(void 0!==t){var n=e._parsedUrl;return c(t,n)?n:((n=r(t))._raw=t,e._parsedUrl=n)}}function r(e){if("string"!=typeof e||47!==e.charCodeAt(0))return s(e);for(var t=e,n=null,i=null,o=1;o<e.length;o++)switch(e.charCodeAt(o)){case 63:null===i&&(t=e.substring(0,o),n=e.substring(o+1),i=e.substring(o));break;case 9:case 10:case 12:case 13:case 32:case 35:case 160:case 65279:return s(e)}var r=void 0!==a?new a:{};return r.path=e,r.href=e,r.pathname=t,null!==i&&(r.query=n,r.search=i),r}function c(e,t){return"object"==typeof t&&null!==t&&(void 0===a||t instanceof a)&&t._raw===e}e.exports=o,e.exports.original=function(e){var t=e.originalUrl;if("string"!=typeof t)return o(e);var n=e._parsedOriginalUrl;if(c(t,n))return n;return(n=r(t))._raw=t,e._parsedOriginalUrl=n}},function(e,t,n){"use strict";
/*!
 * fresh
 * Copyright(c) 2012 TJ Holowaychuk
 * Copyright(c) 2016-2017 Douglas Christopher Wilson
 * MIT Licensed
 */var i=/(?:^|,)\s*?no-cache\s*?(?:,|$)/;function s(e){var t=e&&Date.parse(e);return"number"==typeof t?t:NaN}e.exports=function(e,t){var n=e["if-modified-since"],a=e["if-none-match"];if(!n&&!a)return!1;var o=e["cache-control"];if(o&&i.test(o))return!1;if(a&&"*"!==a){var r=t.etag;if(!r)return!1;for(var c=!0,p=function(e){for(var t=0,n=[],i=0,s=0,a=e.length;s<a;s++)switch(e.charCodeAt(s)){case 32:i===t&&(i=t=s+1);break;case 44:n.push(e.substring(i,t)),i=t=s+1;break;default:t=s+1}return n.push(e.substring(i,t)),n}(a),l=0;l<p.length;l++){var u=p[l];if(u===r||u==="W/"+r||"W/"+u===r){c=!1;break}}if(c)return!1}if(n){var d=t["last-modified"];if(!(d&&s(d)<=s(n)))return!1}return!0}},function(e,t,n){"use strict";const i=n(99),s=n(100);function a(e){if("function"!=typeof e)throw new TypeError("middleware must be a function");if("GeneratorFunction"!==e.constructor.name)return e;const t=function(t,n){return i.call(t,e.call(t,function*(e){return yield e()}(n)))};return t._name=e._name||e.name,t}e.exports=a,a.compose=function(e){return Array.isArray(e)||(e=Array.from(arguments)),s(e.map(a))},a.back=function(e){if("function"!=typeof e)throw new TypeError("middleware must be a function");if("GeneratorFunction"===e.constructor.name)return e;const t=function*(t){let n=this,s=!1;yield Promise.resolve(e(n,(function(){return s?Promise.reject(new Error("next() called multiple times")):(s=!0,i.call(n,t))})))};return t._name=e._name||e.name,t}},function(e,t){var n=Array.prototype.slice;function i(e){var t=this,i=n.call(arguments,1);return new Promise((function(n,a){if("function"==typeof e&&(e=e.apply(t,i)),!e||"function"!=typeof e.next)return n(e);function o(t){var n;try{n=e.next(t)}catch(e){return a(e)}p(n)}function r(t){var n;try{n=e.throw(t)}catch(e){return a(e)}p(n)}function p(e){if(e.done)return n(e.value);var i=s.call(t,e.value);return i&&c(i)?i.then(o,r):r(new TypeError('You may only yield a function, promise, generator, array, or object, but the following object was passed: "'+String(e.value)+'"'))}o()}))}function s(e){return e?c(e)?e:function(e){var t=e.constructor;return!!t&&("GeneratorFunction"===t.name||"GeneratorFunction"===t.displayName||p(t.prototype))}(e)||p(e)?i.call(this,e):"function"==typeof e?a.call(this,e):Array.isArray(e)?o.call(this,e):Object==e.constructor?r.call(this,e):e:e}function a(e){var t=this;return new Promise((function(i,s){e.call(t,(function(e,t){if(e)return s(e);arguments.length>2&&(t=n.call(arguments,1)),i(t)}))}))}function o(e){return Promise.all(e.map(s,this))}function r(e){for(var t=new e.constructor,n=Object.keys(e),i=[],a=0;a<n.length;a++){var o=n[a],r=s.call(this,e[o]);r&&c(r)?p(r,o):t[o]=e[o]}return Promise.all(i).then((function(){return t}));function p(e,n){t[n]=void 0,i.push(e.then((function(e){t[n]=e})))}}function c(e){return"function"==typeof e.then}function p(e){return"function"==typeof e.next&&"function"==typeof e.throw}e.exports=i.default=i.co=i,i.wrap=function(e){return t.__generatorFunction__=e,t;function t(){return i.call(this,e.apply(this,arguments))}}},function(e,t,n){"use strict";const i=n(101);e.exports=function(e){if(!Array.isArray(e))throw new TypeError("Middleware stack must be an array!");for(const t of e)if("function"!=typeof t)throw new TypeError("Middleware must be composed of functions!");return function(t,n){let s=-1;return function a(o){if(o<=s)return i.reject(new Error("next() called multiple times"));s=o;let r=e[o];o===e.length&&(r=n);if(!r)return i.resolve();try{return i.resolve(r(t,(function(){return a(o+1)})))}catch(e){return i.reject(e)}}(0)}}},function(e,t,n){e.exports=n(102)().Promise},function(e,t,n){"use strict";function i(e){var t=null;if(function(e){if(e)return"global.Promise"===e;if(void 0!==global.Promise){var t=/v(\d+)\.(\d+)\.(\d+)/.exec(process.version);return!(t&&0==+t[1]&&+t[2]<12)}return!1}(e))t={Promise:global.Promise,implementation:"global.Promise"};else if(e){var s=n(104)(e);t={Promise:s.Promise||s,implementation:e}}else t=function(){for(var e=["es6-promise","promise","native-promise-only","bluebird","rsvp","when","q","pinkie","lie","vow"],t=0,n=e.length;t<n;t++)try{return i(e[t])}catch(e){}return null}();if(null===t)throw new Error('Cannot find any-promise implementation nor global.Promise. You must install polyfill or call require("any-promise/register") with your preferred implementation, e.g. require("any-promise/register/bluebird") on application load prior to any require("any-promise").');return t}e.exports=n(103)(global,i)},function(e,t,n){"use strict";var i=null;e.exports=function(e,t){return function(n,s){n=n||null;var a=!1!==(s=s||{}).global;if(null===i&&a&&(i=e["@@any-promise/REGISTRATION"]||null),null!==i&&null!==n&&i.implementation!==n)throw new Error('any-promise already defined as "'+i.implementation+'".  You can only register an implementation before the first  call to require("any-promise") and an implementation cannot be changed');return null===i&&(i=null!==n&&void 0!==s.Promise?{Promise:s.Promise,implementation:n}:t(n),a&&(e["@@any-promise/REGISTRATION"]=i)),i}}},function(e,t){function n(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}n.keys=function(){return[]},n.resolve=n,e.exports=n,n.id=104},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(3);t.default=function(e,t){const n=i.createServer(e.callback()),s=t(n,{path:"/socket",serveClient:!1,pingInterval:1e4,pingTimeout:5e3,cookie:!1});s.use((e,t)=>{t()}),s.on("connection",(function(e){})),s.on("error",(function(e){})),n.listen(3006)}},function(e,t,n){"use strict";(function(t){var i=n(3),s=n(18).readFileSync,a=n(4),o=n(18).existsSync,r=n(107),c=n(128).version,p=n(129),l=n(1).EventEmitter,u=n(45),d=n(140),m=n(141),f=n(15),h=n(16)("socket.io:server"),v=n(2);e.exports=b;var x=void 0,g=void 0;function b(e,t){if(!(this instanceof b))return new b(e,t);"object"==typeof e&&e instanceof Object&&!e.listen&&(t=e,e=null),t=t||{},this.nsps={},this.parentNsps=new Map,this.path(t.path||"/socket.io"),this.serveClient(!1!==t.serveClient),this.parser=t.parser||f,this.encoder=new this.parser.Encoder,this.adapter(t.adapter||m),this.origins(t.origins||"*:*"),this.sockets=this.of("/"),e&&this.attach(e,t)}b.prototype.checkRequest=function(e,t){var n=e.headers.origin||e.headers.referer;if("null"!=n&&null!=n||(n="*"),n&&"function"==typeof this._origins)return this._origins(n,t);if(-1!==this._origins.indexOf("*:*"))return t(null,!0);if(n)try{var i=v.parse(n),s="https:"==i.protocol?443:80;i.port=null!=i.port?i.port:s;var a=~this._origins.indexOf(i.protocol+"//"+i.hostname+":"+i.port)||~this._origins.indexOf(i.hostname+":"+i.port)||~this._origins.indexOf(i.hostname+":*")||~this._origins.indexOf("*:"+i.port);return h("origin %s is %svalid",n,a?"":"not "),t(null,!!a)}catch(e){}t(null,!1)},b.prototype.serveClient=function(e){if(!arguments.length)return this._serveClient;this._serveClient=e;var i=function(e){var i=a.resolve(t,"./../../",e);return o(i)?i:n(142).resolve(e)};if(e&&!x){x=s(i("socket.io-client/dist/socket.io.js"),"utf-8");try{g=s(i("socket.io-client/dist/socket.io.js.map"),"utf-8")}catch(e){h("could not load sourcemap file")}}return this};var y={transports:"transports","heartbeat timeout":"pingTimeout","heartbeat interval":"pingInterval","destroy buffer size":"maxHttpBufferSize"};b.prototype.set=function(e,t){return"authorization"==e&&t?this.use((function(e,n){t(e.request,(function(e,t){return e?n(new Error(e)):t?void n():n(new Error("Not authorized"))}))})):"origins"==e&&t?this.origins(t):"resource"==e?this.path(t):y[e]&&this.eio[y[e]]?this.eio[y[e]]=t:console.error("Option %s is not valid. Please refer to the README.",e),this},b.prototype.checkNamespace=function(e,t,n){if(0===this.parentNsps.size)return n(!1);const i=this.parentNsps.keys(),s=()=>{let a=i.next();if(a.done)return n(!1);a.value(e,t,(t,i)=>{t||!i?s():n(this.parentNsps.get(a.value).createChild(e))})};s()},b.prototype.path=function(e){return arguments.length?(this._path=e.replace(/\/$/,""),this):this._path},b.prototype.adapter=function(e){if(!arguments.length)return this._adapter;for(var t in this._adapter=e,this.nsps)this.nsps.hasOwnProperty(t)&&this.nsps[t].initAdapter();return this},b.prototype.origins=function(e){return arguments.length?(this._origins=e,this):this._origins},b.prototype.listen=b.prototype.attach=function(e,t){if("function"==typeof e){throw new Error("You are trying to attach socket.io to an express request handler function. Please pass a http.Server instance.")}if(Number(e)==e&&(e=Number(e)),"number"==typeof e){h("creating http server and binding to %d",e);var n=e;(e=i.Server((function(e,t){t.writeHead(404),t.end()}))).listen(n)}if((t=t||{}).path=t.path||this.path(),t.allowRequest=t.allowRequest||this.checkRequest.bind(this),this.sockets.fns.length>0)return this.initEngine(e,t),this;var s=this,a={type:f.CONNECT,nsp:"/"};return this.encoder.encode(a,(function(n){t.initialPacket=n,s.initEngine(e,t)})),this},b.prototype.initEngine=function(e,t){h("creating engine.io instance with opts %j",t),this.eio=r.attach(e,t),this._serveClient&&this.attachServe(e),this.httpServer=e,this.bind(this.eio)},b.prototype.attachServe=function(e){h("attaching client serving req handler");var t=this._path+"/socket.io.js",n=this._path+"/socket.io.js.map",i=e.listeners("request").slice(0),s=this;e.removeAllListeners("request"),e.on("request",(function(a,o){if(0===a.url.indexOf(n))s.serveMap(a,o);else if(0===a.url.indexOf(t))s.serve(a,o);else for(var r=0;r<i.length;r++)i[r].call(e,a,o)}))},b.prototype.serve=function(e,t){var n='"'+c+'"',i=e.headers["if-none-match"];if(i&&n==i)return h("serve client 304"),t.writeHead(304),void t.end();h("serve client source"),t.setHeader("Cache-Control","public, max-age=0"),t.setHeader("Content-Type","application/javascript"),t.setHeader("ETag",n),t.writeHead(200),t.end(x)},b.prototype.serveMap=function(e,t){var n='"'+c+'"',i=e.headers["if-none-match"];if(i&&n==i)return h("serve client 304"),t.writeHead(304),void t.end();h("serve client sourcemap"),t.setHeader("Content-Type","application/json"),t.setHeader("ETag",n),t.writeHead(200),t.end(g)},b.prototype.bind=function(e){return this.engine=e,this.engine.on("connection",this.onconnection.bind(this)),this},b.prototype.onconnection=function(e){return h("incoming connection with id %s",e.id),new p(this,e).connect("/"),this},b.prototype.of=function(e,t){if("function"==typeof e||e instanceof RegExp){const n=new d(this);return h("initializing parent namespace %s",n.name),"function"==typeof e?this.parentNsps.set(e,n):this.parentNsps.set((t,n,i)=>i(null,e.test(t)),n),t&&n.on("connect",t),n}"/"!==String(e)[0]&&(e="/"+e);var n=this.nsps[e];return n||(h("initializing namespace %s",e),n=new u(this,e),this.nsps[e]=n),t&&n.on("connect",t),n},b.prototype.close=function(e){for(var t in this.nsps["/"].sockets)this.nsps["/"].sockets.hasOwnProperty(t)&&this.nsps["/"].sockets[t].onclose();this.engine.close(),this.httpServer?this.httpServer.close(e):e&&e()},Object.keys(l.prototype).filter((function(e){return"function"==typeof l.prototype[e]})).concat(["to","in","use","send","write","clients","compress","binary"]).forEach((function(e){b.prototype[e]=function(){return this.sockets[e].apply(this.sockets,arguments)}})),u.flags.forEach((function(e){Object.defineProperty(b.prototype,e,{get:function(){return this.sockets.flags=this.sockets.flags||{},this.sockets.flags[e]=!0,this}})})),b.listen=b}).call(this,"/")},function(e,t,n){var i=n(3);function s(e,n){var i=new t.Server(n);return i.attach(e,n),i}(t=e.exports=function(){return arguments.length&&arguments[0]instanceof i.Server?s.apply(this,arguments):t.Server.apply(null,arguments)}).protocol=1,t.Server=n(108),t.Socket=n(35),t.Transport=n(22),t.transports=n(31),t.parser=n(12),t.listen=function(e,n,s){"function"==typeof n&&(s=n,n={});var a=i.createServer((function(e,t){t.writeHead(501),t.end("Not Implemented")})),o=t.attach(a,n);return o.httpServer=a,a.listen(e,s),o},t.attach=s},function(e,t,n){var i=n(21),s=n(2).parse,a=n(109),o=n(31),r=n(1).EventEmitter,c=n(35),p=n(0),l=n(8)("engine"),u=n(120);function d(e){if(!(this instanceof d))return new d(e);this.clients={},this.clientsCount=0,e=e||{},this.wsEngine=e.wsEngine||process.env.EIO_WS_ENGINE||"ws",this.pingTimeout=e.pingTimeout||5e3,this.pingInterval=e.pingInterval||25e3,this.upgradeTimeout=e.upgradeTimeout||1e4,this.maxHttpBufferSize=e.maxHttpBufferSize||1e8,this.transports=e.transports||Object.keys(o),this.allowUpgrades=!1!==e.allowUpgrades,this.allowRequest=e.allowRequest,this.cookie=!1!==e.cookie&&(e.cookie||"io"),this.cookiePath=!1!==e.cookiePath&&(e.cookiePath||"/"),this.cookieHttpOnly=!1!==e.cookieHttpOnly,this.perMessageDeflate=!1!==e.perMessageDeflate&&(e.perMessageDeflate||!0),this.httpCompression=!1!==e.httpCompression&&(e.httpCompression||{}),this.initialPacket=e.initialPacket;var t=this;["perMessageDeflate","httpCompression"].forEach((function(e){var n=t[e];!0===n&&(t[e]=n={}),n&&null==n.threshold&&(n.threshold=1024)})),this.init()}function m(e,t,n){var i={"Content-Type":"application/json"};if(!d.errorMessages.hasOwnProperty(n))return t.writeHead(403,i),void t.end(JSON.stringify({code:d.errors.FORBIDDEN,message:n||d.errorMessages[d.errors.FORBIDDEN]}));e.headers.origin?(i["Access-Control-Allow-Credentials"]="true",i["Access-Control-Allow-Origin"]=e.headers.origin):i["Access-Control-Allow-Origin"]="*",void 0!==t&&(t.writeHead(400,i),t.end(JSON.stringify({code:n,message:d.errorMessages[n]})))}e.exports=d,d.errors={UNKNOWN_TRANSPORT:0,UNKNOWN_SID:1,BAD_HANDSHAKE_METHOD:2,BAD_REQUEST:3,FORBIDDEN:4},d.errorMessages={0:"Transport unknown",1:"Session ID unknown",2:"Bad handshake method",3:"Bad request",4:"Forbidden"},p.inherits(d,r),d.prototype.init=function(){if(~this.transports.indexOf("websocket")){var e;switch(this.ws&&this.ws.close(),this.wsEngine){case"uws":e=n(!function(){var e=new Error("Cannot find module 'uws'");throw e.code="MODULE_NOT_FOUND",e}());break;case"ws":e=n(121);break;default:throw new Error("unknown wsEngine")}this.ws=new e.Server({noServer:!0,clientTracking:!1,perMessageDeflate:this.perMessageDeflate,maxPayload:this.maxHttpBufferSize})}},d.prototype.upgrades=function(e){return this.allowUpgrades&&o[e].upgradesTo||[]},d.prototype.verify=function(e,t,n){var i=e._query.transport;if(!~this.transports.indexOf(i))return l('unknown transport "%s"',i),n(d.errors.UNKNOWN_TRANSPORT,!1);if(function(e){if((e+="").length<1)return!1;if(!f[e.charCodeAt(0)])return l('invalid header, index 0, char "%s"',e.charCodeAt(0)),!0;if(e.length<2)return!1;if(!f[e.charCodeAt(1)])return l('invalid header, index 1, char "%s"',e.charCodeAt(1)),!0;if(e.length<3)return!1;if(!f[e.charCodeAt(2)])return l('invalid header, index 2, char "%s"',e.charCodeAt(2)),!0;if(e.length<4)return!1;if(!f[e.charCodeAt(3)])return l('invalid header, index 3, char "%s"',e.charCodeAt(3)),!0;for(var t=4;t<e.length;++t)if(!f[e.charCodeAt(t)])return l('invalid header, index "%i", char "%s"',t,e.charCodeAt(t)),!0;return!1}(e.headers.origin))return e.headers.origin=null,l("origin header invalid"),n(d.errors.BAD_REQUEST,!1);var s=e._query.sid;return s?this.clients.hasOwnProperty(s)?t||this.clients[s].transport.name===i?void n(null,!0):(l("bad request: unexpected transport without upgrade"),n(d.errors.BAD_REQUEST,!1)):(l('unknown sid "%s"',s),n(d.errors.UNKNOWN_SID,!1)):"GET"!==e.method?n(d.errors.BAD_HANDSHAKE_METHOD,!1):this.allowRequest?this.allowRequest(e,n):n(null,!0)},d.prototype.prepare=function(e){e._query||(e._query=~e.url.indexOf("?")?i.parse(s(e.url).query):{})},d.prototype.close=function(){for(var e in l("closing all open clients"),this.clients)this.clients.hasOwnProperty(e)&&this.clients[e].close(!0);return this.ws&&(l("closing webSocketServer"),this.ws.close()),this},d.prototype.handleRequest=function(e,t){l('handling "%s" http request "%s"',e.method,e.url),this.prepare(e),e.res=t;var n=this;this.verify(e,!1,(function(i,s){s?e._query.sid?(l("setting new request for existing client"),n.clients[e._query.sid].transport.onRequest(e)):n.handshake(e._query.transport,e):m(e,t,i)}))},d.prototype.generateId=function(e){return a.generateId()},d.prototype.handshake=function(e,t){var n=this.generateId(t);l('handshaking client "%s"',n);try{var i=new o[e](t);"polling"===e?(i.maxHttpBufferSize=this.maxHttpBufferSize,i.httpCompression=this.httpCompression):"websocket"===e&&(i.perMessageDeflate=this.perMessageDeflate),t._query&&t._query.b64?i.supportsBinary=!1:i.supportsBinary=!0}catch(n){return l('error handshaking to transport "%s"',e),void m(t,t.res,d.errors.BAD_REQUEST)}var s=new c(n,this,i,t),a=this;!1!==this.cookie&&i.on("headers",(function(e){e["Set-Cookie"]=u.serialize(a.cookie,n,{path:a.cookiePath,httpOnly:!!a.cookiePath&&a.cookieHttpOnly})})),i.onRequest(t),this.clients[n]=s,this.clientsCount++,s.once("close",(function(){delete a.clients[n],a.clientsCount--})),this.emit("connection",s)},d.prototype.handleUpgrade=function(e,t,n){this.prepare(e);var i=this;this.verify(e,!0,(function(s,a){if(a){var o=Buffer.from(n);n=null,i.ws.handleUpgrade(e,t,o,(function(t){i.onWebSocket(e,t)}))}else!function(e,t){if(e.writable){var n=d.errorMessages.hasOwnProperty(t)?d.errorMessages[t]:String(t||""),i=Buffer.byteLength(n);e.write("HTTP/1.1 400 Bad Request\r\nConnection: close\r\nContent-type: text/html\r\nContent-Length: "+i+"\r\n\r\n"+n)}e.destroy()}(t,s)}))},d.prototype.onWebSocket=function(e,t){if(t.on("error",a),void 0!==o[e._query.transport]&&!o[e._query.transport].prototype.handlesUpgrades)return l("transport doesnt handle upgraded requests"),void t.close();var n=e._query.sid;if(e.websocket=t,n){var i=this.clients[n];if(i)if(i.upgrading)l("transport has already been trying to upgrade"),t.close();else if(i.upgraded)l("transport had already been upgraded"),t.close();else{l("upgrading existing transport"),t.removeListener("error",a);var s=new o[e._query.transport](e);e._query&&e._query.b64?s.supportsBinary=!1:s.supportsBinary=!0,s.perMessageDeflate=this.perMessageDeflate,i.maybeUpgrade(s)}else l("upgrade attempt for closed client"),t.close()}else t.removeListener("error",a),this.handshake(e._query.transport,e);function a(){l("websocket error before upgrade")}},d.prototype.attach=function(e,t){var n=this,i=((t=t||{}).path||"/engine.io").replace(/\/$/,""),s=t.destroyUpgradeTimeout||1e3;function a(e){return("OPTIONS"!==e.method||!1!==t.handlePreflightRequest)&&i===e.url.substr(0,i.length)}i+="/";var o=e.listeners("request").slice(0);e.removeAllListeners("request"),e.on("close",n.close.bind(n)),e.on("listening",n.init.bind(n)),e.on("request",(function(s,r){if(a(s))l('intercepting request for path "%s"',i),"OPTIONS"===s.method&&"function"==typeof t.handlePreflightRequest?t.handlePreflightRequest.call(e,s,r):n.handleRequest(s,r);else for(var c=0,p=o.length;c<p;c++)o[c].call(e,s,r)})),~n.transports.indexOf("websocket")&&e.on("upgrade",(function(e,i,o){a(e)?n.handleUpgrade(e,i,o):!1!==t.destroyUpgrade&&setTimeout((function(){if(i.writable&&i.bytesWritten<=0)return i.end()}),s)}))};var f=[0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},function(e,t,n){
/*!
 * base64id v0.1.0
 */
var i=n(6),s=function(){};s.prototype.getRandomBytes=function(e){var t=this;if((e=e||12)>4096)return i.randomBytes(e);var n=parseInt(4096/e),s=parseInt(.85*n);if(!s)return i.randomBytes(e);if(null==this.bytesBufferIndex&&(this.bytesBufferIndex=-1),this.bytesBufferIndex==n&&(this.bytesBuffer=null,this.bytesBufferIndex=-1),(-1==this.bytesBufferIndex||this.bytesBufferIndex>s)&&(this.isGeneratingBytes||(this.isGeneratingBytes=!0,i.randomBytes(4096,(function(e,n){t.bytesBuffer=n,t.bytesBufferIndex=0,t.isGeneratingBytes=!1}))),-1==this.bytesBufferIndex))return i.randomBytes(e);var a=this.bytesBuffer.slice(e*this.bytesBufferIndex,e*(this.bytesBufferIndex+1));return this.bytesBufferIndex++,a},s.prototype.generateId=function(){var e=Buffer.alloc(15);return e.writeInt32BE?(this.sequenceNumber=this.sequenceNumber+1|0,e.writeInt32BE(this.sequenceNumber,11),i.randomBytes?this.getRandomBytes(12).copy(e):[0,4,8].forEach((function(t){e.writeInt32BE(Math.random()*Math.pow(2,32)|0,t)})),e.toString("base64").replace(/\//g,"_").replace(/\+/g,"-")):Math.abs(Math.random()*Math.random()*Date.now()|0).toString()+Math.abs(Math.random()*Math.random()*Date.now()|0).toString()},e.exports=new s},function(e,t,n){var i=n(32),s=n(0);function a(e){i.call(this,e)}e.exports=a,s.inherits(a,i),a.prototype.onRequest=function(e){if("OPTIONS"===e.method){var t=e.res,n=this.headers(e);n["Access-Control-Allow-Headers"]="Content-Type",t.writeHead(200,n),t.end()}else i.prototype.onRequest.call(this,e)},a.prototype.headers=function(e,t){return t=t||{},e.headers.origin?(t["Access-Control-Allow-Credentials"]="true",t["Access-Control-Allow-Origin"]=e.headers.origin):t["Access-Control-Allow-Origin"]="*",i.prototype.headers.call(this,e,t)}},function(e,t){
/*! https://mths.be/utf8js v2.1.2 by @mathias */
var n,i,s,a=String.fromCharCode;function o(e){for(var t,n,i=[],s=0,a=e.length;s<a;)(t=e.charCodeAt(s++))>=55296&&t<=56319&&s<a?56320==(64512&(n=e.charCodeAt(s++)))?i.push(((1023&t)<<10)+(1023&n)+65536):(i.push(t),s--):i.push(t);return i}function r(e,t){if(e>=55296&&e<=57343){if(t)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function c(e,t){return a(e>>t&63|128)}function p(e,t){if(0==(4294967168&e))return a(e);var n="";return 0==(4294965248&e)?n=a(e>>6&31|192):0==(4294901760&e)?(r(e,t)||(e=65533),n=a(e>>12&15|224),n+=c(e,6)):0==(4292870144&e)&&(n=a(e>>18&7|240),n+=c(e,12),n+=c(e,6)),n+=a(63&e|128)}function l(){if(s>=i)throw Error("Invalid byte index");var e=255&n[s];if(s++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function u(e){var t,a;if(s>i)throw Error("Invalid byte index");if(s==i)return!1;if(t=255&n[s],s++,0==(128&t))return t;if(192==(224&t)){if((a=(31&t)<<6|l())>=128)return a;throw Error("Invalid continuation byte")}if(224==(240&t)){if((a=(15&t)<<12|l()<<6|l())>=2048)return r(a,e)?a:65533;throw Error("Invalid continuation byte")}if(240==(248&t)&&(a=(7&t)<<18|l()<<12|l()<<6|l())>=65536&&a<=1114111)return a;throw Error("Invalid UTF-8 detected")}e.exports={version:"2.1.2",encode:function(e,t){for(var n=!1!==(t=t||{}).strict,i=o(e),s=i.length,a=-1,r="";++a<s;)r+=p(i[a],n);return r},decode:function(e,t){var r=!1!==(t=t||{}).strict;n=o(e),i=n.length,s=0;for(var c,p=[];!1!==(c=u(r));)p.push(c);return function(e){for(var t,n=e.length,i=-1,s="";++i<n;)(t=e[i])>65535&&(s+=a((t-=65536)>>>10&1023|55296),t=56320|1023&t),s+=a(t);return s}(p)}}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){function n(){}e.exports=function(e,t,i){var s=!1;return i=i||n,a.count=e,0===e?t():a;function a(e,n){if(a.count<=0)throw new Error("after called too many times");--a.count,e?(s=!0,t(e),t=i):0!==a.count||s||t(null,n)}}},function(e,t){e.exports=Object.keys||function(e){var t=[],n=Object.prototype.hasOwnProperty;for(var i in e)n.call(e,i)&&t.push(i);return t}},function(e,t,n){t.log=function(...e){return"object"==typeof console&&console.log&&console.log(...e)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let i=0,s=0;t[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(i++,"%c"===e&&(s=i))}),t.splice(s,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=n(33)(t);const{formatters:i}=e.exports;i.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},function(e,t){var n=1e3,i=6e4,s=36e5,a=24*s;function o(e,t,n,i){var s=t>=1.5*n;return Math.round(e/n)+" "+i+(s?"s":"")}e.exports=function(e,t){t=t||{};var r=typeof e;if("string"===r&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var o=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return 6048e5*o;case"days":case"day":case"d":return o*a;case"hours":case"hour":case"hrs":case"hr":case"h":return o*s;case"minutes":case"minute":case"mins":case"min":case"m":return o*i;case"seconds":case"second":case"secs":case"sec":case"s":return o*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}(e);if("number"===r&&isFinite(e))return t.long?function(e){var t=Math.abs(e);if(t>=a)return o(e,t,a,"day");if(t>=s)return o(e,t,s,"hour");if(t>=i)return o(e,t,i,"minute");if(t>=n)return o(e,t,n,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=a)return Math.round(e/a)+"d";if(t>=s)return Math.round(e/s)+"h";if(t>=i)return Math.round(e/i)+"m";if(t>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){const i=n(9),s=n(0);t.init=function(e){e.inspectOpts={};const n=Object.keys(t.inspectOpts);for(let i=0;i<n.length;i++)e.inspectOpts[n[i]]=t.inspectOpts[n[i]]},t.log=function(...e){return process.stderr.write(s.format(...e)+"\n")},t.formatArgs=function(n){const{namespace:i,useColors:s}=this;if(s){const t=this.color,s="[3"+(t<8?t:"8;5;"+t),a=`  ${s};1m${i} [0m`;n[0]=a+n[0].split("\n").join("\n"+a),n.push(s+"m+"+e.exports.humanize(this.diff)+"[0m")}else n[0]=function(){if(t.inspectOpts.hideDate)return"";return(new Date).toISOString()+" "}()+i+" "+n[0]},t.save=function(e){e?process.env.DEBUG=e:delete process.env.DEBUG},t.load=function(){return process.env.DEBUG},t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):i.isatty(process.stderr.fd)},t.colors=[6,2,3,4,5,1];try{const e=n(10);e&&(e.stderr||e).level>=2&&(t.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}t.inspectOpts=Object.keys(process.env).filter(e=>/^debug_/i.test(e)).reduce((e,t)=>{const n=t.substring(6).toLowerCase().replace(/_([a-z])/g,(e,t)=>t.toUpperCase());let i=process.env[t];return i=!!/^(yes|on|true|enabled)$/i.test(i)||!/^(no|off|false|disabled)$/i.test(i)&&("null"===i?null:Number(i)),e[n]=i,e},{}),e.exports=n(33)(t);const{formatters:a}=e.exports;a.o=function(e){return this.inspectOpts.colors=this.useColors,s.inspect(e,this.inspectOpts).replace(/\s*\n\s*/g," ")},a.O=function(e){return this.inspectOpts.colors=this.useColors,s.inspect(e,this.inspectOpts)}},function(e,t,n){var i=n(32),s=n(21),a=/\\\\n/g,o=/(\\)?\\n/g,r=n(0);function c(e){i.call(this,e),this.head="___eio["+(e._query.j||"").replace(/[^0-9]/g,"")+"](",this.foot=");"}e.exports=c,r.inherits(c,i),c.prototype.onData=function(e){"string"==typeof(e=s.parse(e).d)&&(e=e.replace(o,(function(e,t){return t?e:"\n"})),i.prototype.onData.call(this,e.replace(a,"\\n")))},c.prototype.doWrite=function(e,t,n){var s=JSON.stringify(e).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029");e=this.head+s+this.foot,i.prototype.doWrite.call(this,e,t,n)}},function(e,t,n){var i=n(22),s=n(12),a=n(0),o=n(8)("engine:ws");function r(e){i.call(this,e);var t=this;this.socket=e.websocket,this.socket.on("message",this.onData.bind(this)),this.socket.once("close",this.onClose.bind(this)),this.socket.on("error",this.onError.bind(this)),this.socket.on("headers",(function(e){t.emit("headers",e)})),this.writable=!0,this.perMessageDeflate=null}e.exports=r,a.inherits(r,i),r.prototype.name="websocket",r.prototype.handlesUpgrades=!0,r.prototype.supportsFraming=!0,r.prototype.onData=function(e){o('received "%s"',e),i.prototype.onData.call(this,e)},r.prototype.send=function(e){for(var t=this,n=0;n<e.length;n++){var i=e[n];s.encodePacket(i,t.supportsBinary,a)}function a(e){o('writing "%s"',e);var n={};(i.options&&(n.compress=i.options.compress),t.perMessageDeflate)&&(("string"==typeof e?Buffer.byteLength(e):e.length)<t.perMessageDeflate.threshold&&(n.compress=!1));t.writable=!1,t.socket.send(e,n,r)}function r(e){if(e)return t.onError("write error",e.stack);t.writable=!0,t.emit("drain")}},r.prototype.doClose=function(e){o("closing"),this.socket.close(),e&&e()}},function(e,t,n){"use strict";
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */t.parse=function(e,t){if("string"!=typeof e)throw new TypeError("argument str must be a string");for(var n={},s=t||{},o=e.split(a),c=s.decode||i,p=0;p<o.length;p++){var l=o[p],u=l.indexOf("=");if(!(u<0)){var d=l.substr(0,u).trim(),m=l.substr(++u,l.length).trim();'"'==m[0]&&(m=m.slice(1,-1)),null==n[d]&&(n[d]=r(m,c))}}return n},t.serialize=function(e,t,n){var i=n||{},a=i.encode||s;if("function"!=typeof a)throw new TypeError("option encode is invalid");if(!o.test(e))throw new TypeError("argument name is invalid");var r=a(t);if(r&&!o.test(r))throw new TypeError("argument val is invalid");var c=e+"="+r;if(null!=i.maxAge){var p=i.maxAge-0;if(isNaN(p))throw new Error("maxAge should be a Number");c+="; Max-Age="+Math.floor(p)}if(i.domain){if(!o.test(i.domain))throw new TypeError("option domain is invalid");c+="; Domain="+i.domain}if(i.path){if(!o.test(i.path))throw new TypeError("option path is invalid");c+="; Path="+i.path}if(i.expires){if("function"!=typeof i.expires.toUTCString)throw new TypeError("option expires is invalid");c+="; Expires="+i.expires.toUTCString()}i.httpOnly&&(c+="; HttpOnly");i.secure&&(c+="; Secure");if(i.sameSite){switch("string"==typeof i.sameSite?i.sameSite.toLowerCase():i.sameSite){case!0:c+="; SameSite=Strict";break;case"lax":c+="; SameSite=Lax";break;case"strict":c+="; SameSite=Strict";break;default:throw new TypeError("option sameSite is invalid")}}return c};var i=decodeURIComponent,s=encodeURIComponent,a=/; */,o=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;function r(e,t){try{return t(e)}catch(t){return e}}},function(e,t,n){"use strict";const i=n(36);i.createWebSocketStream=n(126),i.Server=n(127),i.Receiver=n(37),i.Sender=n(39),e.exports=i},function(e,t){e.exports=require("https")},function(e,t){e.exports=require("tls")},function(e,t,n){"use strict";const i=Symbol("kDone"),s=Symbol("kRun");e.exports=class{constructor(e){this[i]=()=>{this.pending--,this[s]()},this.concurrency=e||1/0,this.jobs=[],this.pending=0}add(e){this.jobs.push(e),this[s]()}[s](){if(this.pending!==this.concurrency&&this.jobs.length){const e=this.jobs.shift();this.pending++,e(this[i])}}}},function(e,t,n){"use strict";class i{constructor(e,t){this.target=t,this.type=e}}class s extends i{constructor(e,t){super("message",t),this.data=e}}class a extends i{constructor(e,t,n){super("close",n),this.wasClean=n._closeFrameReceived&&n._closeFrameSent,this.reason=t,this.code=e}}class o extends i{constructor(e){super("open",e)}}class r extends i{constructor(e,t){super("error",t),this.message=e.message,this.error=e}}const c={addEventListener(e,t){function n(e){t.call(this,new s(e,this))}function i(e,n){t.call(this,new a(e,n,this))}function c(e){t.call(this,new r(e,this))}function p(){t.call(this,new o(this))}"function"==typeof t&&("message"===e?(n._listener=t,this.on(e,n)):"close"===e?(i._listener=t,this.on(e,i)):"error"===e?(c._listener=t,this.on(e,c)):"open"===e?(p._listener=t,this.on(e,p)):this.on(e,t))},removeEventListener(e,t){const n=this.listeners(e);for(let i=0;i<n.length;i++)n[i]!==t&&n[i]._listener!==t||this.removeListener(e,n[i])}};e.exports=c},function(e,t,n){"use strict";const{Duplex:i}=n(5);function s(e){e.emit("close")}function a(){!this.destroyed&&this._writableState.finished&&this.destroy()}function o(e){this.removeListener("error",o),this.destroy(),0===this.listenerCount("error")&&this.emit("error",e)}e.exports=function(e,t){let n=!0;function r(){n&&e._socket.resume()}e.readyState===e.CONNECTING?e.once("open",(function(){e._receiver.removeAllListeners("drain"),e._receiver.on("drain",r)})):(e._receiver.removeAllListeners("drain"),e._receiver.on("drain",r));const c=new i({...t,autoDestroy:!1,emitClose:!1,objectMode:!1,writableObjectMode:!1});return e.on("message",(function(t){c.push(t)||(n=!1,e._socket.pause())})),e.once("error",(function(e){c.destroyed||c.destroy(e)})),e.once("close",(function(){c.destroyed||c.push(null)})),c._destroy=function(t,n){if(e.readyState===e.CLOSED)return n(t),void process.nextTick(s,c);let i=!1;e.once("error",(function(e){i=!0,n(e)})),e.once("close",(function(){i||n(t),process.nextTick(s,c)})),e.terminate()},c._final=function(t){e.readyState!==e.CONNECTING?null!==e._socket&&(e._socket._writableState.finished?(c._readableState.endEmitted&&c.destroy(),t()):(e._socket.once("finish",(function(){t()})),e.close())):e.once("open",(function(){c._final(t)}))},c._read=function(){e.readyState!==e.OPEN||n||(n=!0,e._receiver._writableState.needDrain||e._socket.resume())},c._write=function(t,n,i){e.readyState!==e.CONNECTING?e.send(t,i):e.once("open",(function(){c._write(t,n,i)}))},c.on("end",a),c.on("error",o),c}},function(e,t,n){"use strict";const i=n(1),{createHash:s}=n(6),{createServer:a,STATUS_CODES:o}=n(3),r=n(13),c=n(36),{format:p,parse:l}=n(40),{GUID:u}=n(7),d=/^[+/0-9A-Za-z]{22}==$/,m=Symbol("kUsedByWebSocketServer");function f(e){e.emit("close")}function h(){this.destroy()}function v(e,t,n,i){e.writable&&(n=n||o[t],i={Connection:"close","Content-type":"text/html","Content-Length":Buffer.byteLength(n),...i},e.write(`HTTP/1.1 ${t} ${o[t]}\r\n`+Object.keys(i).map(e=>`${e}: ${i[e]}`).join("\r\n")+"\r\n\r\n"+n)),e.removeListener("error",h),e.destroy()}e.exports=class extends i{constructor(e,t){if(super(),null==(e={maxPayload:104857600,perMessageDeflate:!1,handleProtocols:null,clientTracking:!0,verifyClient:null,noServer:!1,backlog:null,server:null,host:null,path:null,port:null,...e}).port&&!e.server&&!e.noServer)throw new TypeError('One of the "port", "server", or "noServer" options must be specified');if(null!=e.port)this._server=a((e,t)=>{const n=o[426];t.writeHead(426,{"Content-Length":n.length,"Content-Type":"text/plain"}),t.end(n)}),this._server.listen(e.port,e.host,e.backlog,t);else if(e.server){if(e.server[m])throw new Error("The HTTP/S server is already being used by another WebSocket server");e.server[m]=!0,this._server=e.server}this._server&&(this._removeListeners=function(e,t){for(const n of Object.keys(t))e.on(n,t[n]);return function(){for(const n of Object.keys(t))e.removeListener(n,t[n])}}(this._server,{listening:this.emit.bind(this,"listening"),error:this.emit.bind(this,"error"),upgrade:(e,t,n)=>{this.handleUpgrade(e,t,n,t=>{this.emit("connection",t,e)})}})),!0===e.perMessageDeflate&&(e.perMessageDeflate={}),e.clientTracking&&(this.clients=new Set),this.options=e}address(){if(this.options.noServer)throw new Error('The server is operating in "noServer" mode');return this._server?this._server.address():null}close(e){if(e&&this.once("close",e),this.clients)for(const e of this.clients)e.terminate();const t=this._server;if(t){if(this._removeListeners(),this._removeListeners=this._server=null,null!=this.options.port)return void t.close(()=>this.emit("close"));delete t[m]}process.nextTick(f,this)}shouldHandle(e){if(this.options.path){const t=e.url.indexOf("?");if((-1!==t?e.url.slice(0,t):e.url)!==this.options.path)return!1}return!0}handleUpgrade(e,t,n,i){t.on("error",h);const s=void 0!==e.headers["sec-websocket-key"]&&e.headers["sec-websocket-key"].trim(),a=+e.headers["sec-websocket-version"],o={};if("GET"!==e.method||"websocket"!==e.headers.upgrade.toLowerCase()||!s||!d.test(s)||8!==a&&13!==a||!this.shouldHandle(e))return v(t,400);if(this.options.perMessageDeflate){const n=new r(this.options.perMessageDeflate,!0,this.options.maxPayload);try{const t=l(e.headers["sec-websocket-extensions"]);t[r.extensionName]&&(n.accept(t[r.extensionName]),o[r.extensionName]=n)}catch(e){return v(t,400)}}if(this.options.verifyClient){const r={origin:e.headers[`${8===a?"sec-websocket-origin":"origin"}`],secure:!(!e.connection.authorized&&!e.connection.encrypted),req:e};if(2===this.options.verifyClient.length)return void this.options.verifyClient(r,(a,r,c,p)=>{if(!a)return v(t,r||401,c,p);this.completeUpgrade(s,o,e,t,n,i)});if(!this.options.verifyClient(r))return v(t,401)}this.completeUpgrade(s,o,e,t,n,i)}completeUpgrade(e,t,n,i,a,o){if(!i.readable||!i.writable)return i.destroy();const l=["HTTP/1.1 101 Switching Protocols","Upgrade: websocket","Connection: Upgrade",`Sec-WebSocket-Accept: ${s("sha1").update(e+u).digest("base64")}`],d=new c(null);let m=n.headers["sec-websocket-protocol"];if(m&&(m=m.trim().split(/ *, */),m=this.options.handleProtocols?this.options.handleProtocols(m,n):m[0],m&&(l.push(`Sec-WebSocket-Protocol: ${m}`),d.protocol=m)),t[r.extensionName]){const e=t[r.extensionName].params,n=p({[r.extensionName]:[e]});l.push(`Sec-WebSocket-Extensions: ${n}`),d._extensions=t}this.emit("headers",l,n),i.write(l.concat("\r\n").join("\r\n")),i.removeListener("error",h),d.setSocket(i,a,this.options.maxPayload),this.clients&&(this.clients.add(d),d.on("close",()=>this.clients.delete(d))),o(d)}}},function(e){e.exports=JSON.parse('{"_from":"socket.io-client@2.3.0","_id":"socket.io-client@2.3.0","_inBundle":false,"_integrity":"sha512-cEQQf24gET3rfhxZ2jJ5xzAOo/xhZwK+mOqtGRg5IowZsMgwvHwnf/mCRapAAkadhM26y+iydgwsXGObBB5ZdA==","_location":"/socket.io-client","_phantomChildren":{},"_requested":{"type":"version","registry":true,"raw":"socket.io-client@2.3.0","name":"socket.io-client","escapedName":"socket.io-client","rawSpec":"2.3.0","saveSpec":null,"fetchSpec":"2.3.0"},"_requiredBy":["/socket.io"],"_resolved":"https://registry.npmjs.org/socket.io-client/-/socket.io-client-2.3.0.tgz","_shasum":"14d5ba2e00b9bcd145ae443ab96b3f86cbcc1bb4","_spec":"socket.io-client@2.3.0","_where":"E:\\\\code\\\\node\\\\koa\\\\chatServer-webpack\\\\node_modules\\\\socket.io","bugs":{"url":"https://github.com/Automattic/socket.io-client/issues"},"bundleDependencies":false,"contributors":[{"name":"Guillermo Rauch","email":"rauchg@gmail.com"},{"name":"Arnout Kazemier","email":"info@3rd-eden.com"},{"name":"Vladimir Dronnikov","email":"dronnikov@gmail.com"},{"name":"Einar Otto Stangvik","email":"einaros@gmail.com"}],"dependencies":{"backo2":"1.0.2","base64-arraybuffer":"0.1.5","component-bind":"1.0.0","component-emitter":"1.2.1","debug":"~4.1.0","engine.io-client":"~3.4.0","has-binary2":"~1.0.2","has-cors":"1.1.0","indexof":"0.0.1","object-component":"0.0.3","parseqs":"0.0.5","parseuri":"0.0.5","socket.io-parser":"~3.3.0","to-array":"0.1.4"},"deprecated":false,"description":"[![Build Status](https://secure.travis-ci.org/socketio/socket.io-client.svg?branch=master)](http://travis-ci.org/socketio/socket.io-client) [![Dependency Status](https://david-dm.org/socketio/socket.io-client.svg)](https://david-dm.org/socketio/socket.io-client) [![devDependency Status](https://david-dm.org/socketio/socket.io-client/dev-status.svg)](https://david-dm.org/socketio/socket.io-client#info=devDependencies) [![NPM version](https://badge.fury.io/js/socket.io-client.svg)](https://www.npmjs.com/package/socket.io-client) ![Downloads](http://img.shields.io/npm/dm/socket.io-client.svg?style=flat) [![](http://slack.socket.io/badge.svg?)](http://slack.socket.io)","devDependencies":{"babel-core":"^6.24.1","babel-eslint":"4.1.7","babel-loader":"7.0.0","babel-preset-es2015":"6.24.1","concat-stream":"^1.6.0","derequire":"^2.0.6","eslint-config-standard":"4.4.0","eslint-plugin-standard":"1.3.1","expect.js":"0.3.1","gulp":"^3.9.1","gulp-eslint":"1.1.1","gulp-file":"^0.3.0","gulp-istanbul":"^1.1.1","gulp-mocha":"^4.3.1","gulp-task-listing":"1.0.1","imports-loader":"^0.7.1","istanbul":"^0.4.5","mocha":"^3.3.0","socket.io":"2.3.0","socket.io-browsers":"^1.0.0","strip-loader":"0.1.2","text-blob-builder":"0.0.1","webpack-merge":"4.1.2","webpack-stream":"3.2.0","zuul":"~3.11.1","zuul-builder-webpack":"^1.2.0","zuul-ngrok":"4.0.0"},"files":["lib/","dist/"],"homepage":"https://github.com/Automattic/socket.io-client#readme","keywords":["realtime","framework","websocket","tcp","events","client"],"license":"MIT","main":"./lib/index","name":"socket.io-client","repository":{"type":"git","url":"git+https://github.com/Automattic/socket.io-client.git"},"scripts":{"test":"gulp test"},"version":"2.3.0"}')},function(e,t,n){var i=n(15),s=n(16)("socket.io:client"),a=n(2);function o(e,t){this.server=e,this.conn=t,this.encoder=e.encoder,this.decoder=new e.parser.Decoder,this.id=t.id,this.request=t.request,this.setup(),this.sockets={},this.nsps={},this.connectBuffer=[]}e.exports=o,o.prototype.setup=function(){this.onclose=this.onclose.bind(this),this.ondata=this.ondata.bind(this),this.onerror=this.onerror.bind(this),this.ondecoded=this.ondecoded.bind(this),this.decoder.on("decoded",this.ondecoded),this.conn.on("data",this.ondata),this.conn.on("error",this.onerror),this.conn.on("close",this.onclose)},o.prototype.connect=function(e,t){if(this.server.nsps[e])return s("connecting to namespace %s",e),this.doConnect(e,t);this.server.checkNamespace(e,t,n=>{n?(s("dynamic namespace %s was created",n.name),this.doConnect(e,t)):(s("creation of namespace %s was denied",e),this.packet({type:i.ERROR,nsp:e,data:"Invalid namespace"}))})},o.prototype.doConnect=function(e,t){var n=this.server.of(e);if("/"==e||this.nsps["/"])var i=this,s=n.add(this,t,(function(){i.sockets[s.id]=s,i.nsps[n.name]=s,"/"==n.name&&i.connectBuffer.length>0&&(i.connectBuffer.forEach(i.connect,i),i.connectBuffer=[])}));else this.connectBuffer.push(e)},o.prototype.disconnect=function(){for(var e in this.sockets)this.sockets.hasOwnProperty(e)&&this.sockets[e].disconnect();this.sockets={},this.close()},o.prototype.remove=function(e){if(this.sockets.hasOwnProperty(e.id)){var t=this.sockets[e.id].nsp.name;delete this.sockets[e.id],delete this.nsps[t]}else s("ignoring remove for %s",e.id)},o.prototype.close=function(){"open"==this.conn.readyState&&(s("forcing transport close"),this.conn.close(),this.onclose("forced server close"))},o.prototype.packet=function(e,t){t=t||{};var n=this;function i(e){if(!t.volatile||n.conn.transport.writable)for(var i=0;i<e.length;i++)n.conn.write(e[i],{compress:t.compress})}"open"==this.conn.readyState?(s("writing packet %j",e),t.preEncoded?i(e):this.encoder.encode(e,i)):s("ignoring packet write %j",e)},o.prototype.ondata=function(e){try{this.decoder.add(e)}catch(e){this.onerror(e)}},o.prototype.ondecoded=function(e){if(i.CONNECT==e.type)this.connect(a.parse(e.nsp).pathname,a.parse(e.nsp,!0).query);else{var t=this.nsps[e.nsp];t?process.nextTick((function(){t.onpacket(e)})):s("no socket for namespace %s",e.nsp)}},o.prototype.onerror=function(e){for(var t in this.sockets)this.sockets.hasOwnProperty(t)&&this.sockets[t].onerror(e);this.conn.close()},o.prototype.onclose=function(e){for(var t in s("client close with reason %s",e),this.destroy(),this.sockets)this.sockets.hasOwnProperty(t)&&this.sockets[t].onclose(e);this.sockets={},this.decoder.destroy()},o.prototype.destroy=function(){this.conn.removeListener("data",this.ondata),this.conn.removeListener("error",this.onerror),this.conn.removeListener("close",this.onclose),this.decoder.removeListener("decoded",this.ondecoded)}},function(e,t,n){"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=n(131):e.exports=n(133)},function(e,t,n){t.log=function(...e){return"object"==typeof console&&console.log&&console.log(...e)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let i=0,s=0;t[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(i++,"%c"===e&&(s=i))}),t.splice(s,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=n(41)(t);const{formatters:i}=e.exports;i.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},function(e,t){var n=1e3,i=6e4,s=36e5,a=24*s;function o(e,t,n,i){var s=t>=1.5*n;return Math.round(e/n)+" "+i+(s?"s":"")}e.exports=function(e,t){t=t||{};var r=typeof e;if("string"===r&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var o=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return 6048e5*o;case"days":case"day":case"d":return o*a;case"hours":case"hour":case"hrs":case"hr":case"h":return o*s;case"minutes":case"minute":case"mins":case"min":case"m":return o*i;case"seconds":case"second":case"secs":case"sec":case"s":return o*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}(e);if("number"===r&&isFinite(e))return t.long?function(e){var t=Math.abs(e);if(t>=a)return o(e,t,a,"day");if(t>=s)return o(e,t,s,"hour");if(t>=i)return o(e,t,i,"minute");if(t>=n)return o(e,t,n,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=a)return Math.round(e/a)+"d";if(t>=s)return Math.round(e/s)+"h";if(t>=i)return Math.round(e/i)+"m";if(t>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){const i=n(9),s=n(0);t.init=function(e){e.inspectOpts={};const n=Object.keys(t.inspectOpts);for(let i=0;i<n.length;i++)e.inspectOpts[n[i]]=t.inspectOpts[n[i]]},t.log=function(...e){return process.stderr.write(s.format(...e)+"\n")},t.formatArgs=function(n){const{namespace:i,useColors:s}=this;if(s){const t=this.color,s="[3"+(t<8?t:"8;5;"+t),a=`  ${s};1m${i} [0m`;n[0]=a+n[0].split("\n").join("\n"+a),n.push(s+"m+"+e.exports.humanize(this.diff)+"[0m")}else n[0]=function(){if(t.inspectOpts.hideDate)return"";return(new Date).toISOString()+" "}()+i+" "+n[0]},t.save=function(e){e?process.env.DEBUG=e:delete process.env.DEBUG},t.load=function(){return process.env.DEBUG},t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):i.isatty(process.stderr.fd)},t.colors=[6,2,3,4,5,1];try{const e=n(10);e&&(e.stderr||e).level>=2&&(t.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}t.inspectOpts=Object.keys(process.env).filter(e=>/^debug_/i.test(e)).reduce((e,t)=>{const n=t.substring(6).toLowerCase().replace(/_([a-z])/g,(e,t)=>t.toUpperCase());let i=process.env[t];return i=!!/^(yes|on|true|enabled)$/i.test(i)||!/^(no|off|false|disabled)$/i.test(i)&&("null"===i?null:Number(i)),e[n]=i,e},{}),e.exports=n(41)(t);const{formatters:a}=e.exports;a.o=function(e){return this.inspectOpts.colors=this.useColors,s.inspect(e,this.inspectOpts).replace(/\s*\n\s*/g," ")},a.O=function(e){return this.inspectOpts.colors=this.useColors,s.inspect(e,this.inspectOpts)}},function(e,t,n){function i(e){if(e)return function(e){for(var t in i.prototype)e[t]=i.prototype[t];return e}(e)}e.exports=i,i.prototype.on=i.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},i.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},i.prototype.off=i.prototype.removeListener=i.prototype.removeAllListeners=i.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,i=this._callbacks["$"+e];if(!i)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var s=0;s<i.length;s++)if((n=i[s])===t||n.fn===t){i.splice(s,1);break}return this},i.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),n=this._callbacks["$"+e];if(n)for(var i=0,s=(n=n.slice(0)).length;i<s;++i)n[i].apply(this,t);return this},i.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},i.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t,n){var i=n(42),s=n(43),a=Object.prototype.toString,o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===a.call(Blob),r="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===a.call(File);t.deconstructPacket=function(e){var t=[],n=e.data,a=e;return a.data=function e(t,n){if(!t)return t;if(s(t)){var a={_placeholder:!0,num:n.length};return n.push(t),a}if(i(t)){for(var o=new Array(t.length),r=0;r<t.length;r++)o[r]=e(t[r],n);return o}if("object"==typeof t&&!(t instanceof Date)){o={};for(var c in t)o[c]=e(t[c],n);return o}return t}(n,t),a.attachments=t.length,{packet:a,buffers:t}},t.reconstructPacket=function(e,t){return e.data=function e(t,n){if(!t)return t;if(t&&t._placeholder)return n[t.num];if(i(t))for(var s=0;s<t.length;s++)t[s]=e(t[s],n);else if("object"==typeof t)for(var a in t)t[a]=e(t[a],n);return t}(e.data,t),e.attachments=void 0,e},t.removeBlobs=function(e,t){var n=0,a=e;!function e(c,p,l){if(!c)return c;if(o&&c instanceof Blob||r&&c instanceof File){n++;var u=new FileReader;u.onload=function(){l?l[p]=this.result:a=this.result,--n||t(a)},u.readAsArrayBuffer(c)}else if(i(c))for(var d=0;d<c.length;d++)e(c[d],d,c);else if("object"==typeof c&&!s(c))for(var m in c)e(c[m],m,c)}(a),n||t(a)}},function(e,t,n){t.log=function(...e){return"object"==typeof console&&console.log&&console.log(...e)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let i=0,s=0;t[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(i++,"%c"===e&&(s=i))}),t.splice(s,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=n(44)(t);const{formatters:i}=e.exports;i.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},function(e,t){var n=1e3,i=6e4,s=36e5,a=24*s;function o(e,t,n,i){var s=t>=1.5*n;return Math.round(e/n)+" "+i+(s?"s":"")}e.exports=function(e,t){t=t||{};var r=typeof e;if("string"===r&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var o=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return 6048e5*o;case"days":case"day":case"d":return o*a;case"hours":case"hour":case"hrs":case"hr":case"h":return o*s;case"minutes":case"minute":case"mins":case"min":case"m":return o*i;case"seconds":case"second":case"secs":case"sec":case"s":return o*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}(e);if("number"===r&&isFinite(e))return t.long?function(e){var t=Math.abs(e);if(t>=a)return o(e,t,a,"day");if(t>=s)return o(e,t,s,"hour");if(t>=i)return o(e,t,i,"minute");if(t>=n)return o(e,t,n,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=a)return Math.round(e/a)+"d";if(t>=s)return Math.round(e/s)+"h";if(t>=i)return Math.round(e/i)+"m";if(t>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){const i=n(9),s=n(0);t.init=function(e){e.inspectOpts={};const n=Object.keys(t.inspectOpts);for(let i=0;i<n.length;i++)e.inspectOpts[n[i]]=t.inspectOpts[n[i]]},t.log=function(...e){return process.stderr.write(s.format(...e)+"\n")},t.formatArgs=function(n){const{namespace:i,useColors:s}=this;if(s){const t=this.color,s="[3"+(t<8?t:"8;5;"+t),a=`  ${s};1m${i} [0m`;n[0]=a+n[0].split("\n").join("\n"+a),n.push(s+"m+"+e.exports.humanize(this.diff)+"[0m")}else n[0]=function(){if(t.inspectOpts.hideDate)return"";return(new Date).toISOString()+" "}()+i+" "+n[0]},t.save=function(e){e?process.env.DEBUG=e:delete process.env.DEBUG},t.load=function(){return process.env.DEBUG},t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):i.isatty(process.stderr.fd)},t.colors=[6,2,3,4,5,1];try{const e=n(10);e&&(e.stderr||e).level>=2&&(t.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}t.inspectOpts=Object.keys(process.env).filter(e=>/^debug_/i.test(e)).reduce((e,t)=>{const n=t.substring(6).toLowerCase().replace(/_([a-z])/g,(e,t)=>t.toUpperCase());let i=process.env[t];return i=!!/^(yes|on|true|enabled)$/i.test(i)||!/^(no|off|false|disabled)$/i.test(i)&&("null"===i?null:Number(i)),e[n]=i,e},{}),e.exports=n(44)(t);const{formatters:a}=e.exports;a.o=function(e){return this.inspectOpts.colors=this.useColors,s.inspect(e,this.inspectOpts).replace(/\s*\n\s*/g," ")},a.O=function(e){return this.inspectOpts.colors=this.useColors,s.inspect(e,this.inspectOpts)}},function(e,t,n){var i=n(1).EventEmitter,s=n(15),a=n(23),o=n(2),r=n(16)("socket.io:socket");e.exports=t=p,t.events=["error","connect","disconnect","disconnecting","newListener","removeListener"];var c=i.prototype.emit;function p(e,t,n){this.nsp=e,this.server=e.server,this.adapter=this.nsp.adapter,this.id="/"!==e.name?e.name+"#"+t.id:t.id,this.client=t,this.conn=t.conn,this.rooms={},this.acks={},this.connected=!0,this.disconnected=!1,this.handshake=this.buildHandshake(n),this.fns=[],this.flags={},this._rooms=[]}p.prototype.__proto__=i.prototype,["json","volatile","broadcast","local"].forEach((function(e){Object.defineProperty(p.prototype,e,{get:function(){return this.flags[e]=!0,this}})})),Object.defineProperty(p.prototype,"request",{get:function(){return this.conn.request}}),p.prototype.buildHandshake=function(e){var t,n=this;return{headers:this.request.headers,time:new Date+"",address:this.conn.remoteAddress,xdomain:!!this.request.headers.origin,secure:!!this.request.connection.encrypted,issued:+new Date,url:this.request.url,query:(t=o.parse(n.request.url,!0).query,Object.assign({},e,t))}},p.prototype.emit=function(e){if(~t.events.indexOf(e))return c.apply(this,arguments),this;var n=Array.prototype.slice.call(arguments),i={type:(void 0!==this.flags.binary?this.flags.binary:a(n))?s.BINARY_EVENT:s.EVENT,data:n};if("function"==typeof n[n.length-1]){if(this._rooms.length||this.flags.broadcast)throw new Error("Callbacks are not supported when broadcasting");r("emitting packet with ack id %d",this.nsp.ids),this.acks[this.nsp.ids]=n.pop(),i.id=this.nsp.ids++}var o=this._rooms.slice(0),p=Object.assign({},this.flags);return this._rooms=[],this.flags={},o.length||p.broadcast?this.adapter.broadcast(i,{except:[this.id],rooms:o,flags:p}):this.packet(i,p),this},p.prototype.to=p.prototype.in=function(e){return~this._rooms.indexOf(e)||this._rooms.push(e),this},p.prototype.send=p.prototype.write=function(){var e=Array.prototype.slice.call(arguments);return e.unshift("message"),this.emit.apply(this,e),this},p.prototype.packet=function(e,t){e.nsp=this.nsp.name,(t=t||{}).compress=!1!==t.compress,this.client.packet(e,t)},p.prototype.join=function(e,t){r("joining room %s",e);var n=this;return Array.isArray(e)||(e=[e]),(e=e.filter((function(e){return!n.rooms.hasOwnProperty(e)}))).length?(this.adapter.addAll(this.id,e,(function(i){if(i)return t&&t(i);r("joined room %s",e),e.forEach((function(e){n.rooms[e]=e})),t&&t(null)})),this):(t&&t(null),this)},p.prototype.leave=function(e,t){r("leave room %s",e);var n=this;return this.adapter.del(this.id,e,(function(i){if(i)return t&&t(i);r("left room %s",e),delete n.rooms[e],t&&t(null)})),this},p.prototype.leaveAll=function(){this.adapter.delAll(this.id),this.rooms={}},p.prototype.onconnect=function(){r("socket connected - writing packet"),this.nsp.connected[this.id]=this,this.join(this.id),"/"===this.nsp.name&&0===this.nsp.fns.length?r("packet already sent in initial handshake"):this.packet({type:s.CONNECT})},p.prototype.onpacket=function(e){switch(r("got packet %j",e),e.type){case s.EVENT:case s.BINARY_EVENT:this.onevent(e);break;case s.ACK:case s.BINARY_ACK:this.onack(e);break;case s.DISCONNECT:this.ondisconnect();break;case s.ERROR:this.onerror(new Error(e.data))}},p.prototype.onevent=function(e){var t=e.data||[];r("emitting event %j",t),null!=e.id&&(r("attaching ack callback to event"),t.push(this.ack(e.id))),this.dispatch(t)},p.prototype.ack=function(e){var t=this,n=!1;return function(){if(!n){var i=Array.prototype.slice.call(arguments);r("sending ack %j",i),t.packet({id:e,type:a(i)?s.BINARY_ACK:s.ACK,data:i}),n=!0}}},p.prototype.onack=function(e){var t=this.acks[e.id];"function"==typeof t?(r("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):r("bad ack %s",e.id)},p.prototype.ondisconnect=function(){r("got disconnect packet"),this.onclose("client namespace disconnect")},p.prototype.onerror=function(e){this.listeners("error").length?this.emit("error",e):(console.error("Missing error handler on `socket`."),console.error(e.stack))},p.prototype.onclose=function(e){if(!this.connected)return this;r("closing socket - reason %s",e),this.emit("disconnecting",e),this.leaveAll(),this.nsp.remove(this),this.client.remove(this),this.connected=!1,this.disconnected=!0,delete this.nsp.connected[this.id],this.emit("disconnect",e)},p.prototype.error=function(e){this.packet({type:s.ERROR,data:e})},p.prototype.disconnect=function(e){return this.connected?(e?this.client.disconnect():(this.packet({type:s.DISCONNECT}),this.onclose("server namespace disconnect")),this):this},p.prototype.compress=function(e){return this.flags.compress=e,this},p.prototype.binary=function(e){return this.flags.binary=e,this},p.prototype.dispatch=function(e){r("dispatching an event %j",e);var t=this;this.run(e,(function(n){process.nextTick((function(){if(n)return t.error(n.data||n.message);c.apply(t,e)}))}))},p.prototype.use=function(e){return this.fns.push(e),this},p.prototype.run=function(e,t){var n=this.fns.slice(0);if(!n.length)return t(null);!function i(s){n[s](e,(function(e){return e?t(e):n[s+1]?void i(s+1):t(null)}))}(0)}},function(e,t,n){"use strict";const i=n(45);let s=0;e.exports=class extends i{constructor(e){super(e,"/_"+s++),this.children=new Set}initAdapter(){}emit(){const e=Array.prototype.slice.call(arguments);this.children.forEach(t=>{t.rooms=this.rooms,t.flags=this.flags,t.emit.apply(t,e)}),this.rooms=[],this.flags={}}createChild(e){const t=new i(this.server,e);return t.fns=this.fns.slice(0),this.listeners("connect").forEach(e=>t.on("connect",e)),this.listeners("connection").forEach(e=>t.on("connection",e)),this.children.add(t),this.server.nsps[e]=t,t}}},function(e,t,n){var i=n(1).EventEmitter;function s(e){this.nsp=e,this.rooms={},this.sids={},this.encoder=e.server.encoder}function a(){if(!(this instanceof a))return new a;this.sockets={},this.length=0}e.exports=s,s.prototype.__proto__=i.prototype,s.prototype.add=function(e,t,n){return this.addAll(e,[t],n)},s.prototype.addAll=function(e,t,n){for(var i=0;i<t.length;i++){var s=t[i];this.sids[e]=this.sids[e]||{},this.sids[e][s]=!0,this.rooms[s]=this.rooms[s]||a(),this.rooms[s].add(e)}n&&process.nextTick(n.bind(null,null))},s.prototype.del=function(e,t,n){this.sids[e]&&delete this.sids[e][t],this.rooms.hasOwnProperty(t)&&(this.rooms[t].del(e),0===this.rooms[t].length&&delete this.rooms[t]),n&&process.nextTick(n.bind(null,null))},s.prototype.delAll=function(e,t){var n=this.sids[e];if(n)for(var i in n)this.rooms.hasOwnProperty(i)&&(this.rooms[i].del(e),0===this.rooms[i].length&&delete this.rooms[i]);delete this.sids[e],t&&process.nextTick(t.bind(null,null))},s.prototype.broadcast=function(e,t){var n,i=t.rooms||[],s=t.except||[],a=t.flags||{},o={preEncoded:!0,volatile:a.volatile,compress:a.compress},r={},c=this;e.nsp=this.nsp.name,this.encoder.encode(e,(function(e){if(i.length)for(var t=0;t<i.length;t++){var a=c.rooms[i[t]];if(a){var p=a.sockets;for(var l in p)if(p.hasOwnProperty(l)){if(r[l]||~s.indexOf(l))continue;(n=c.nsp.connected[l])&&(n.packet(e,o),r[l]=!0)}}}else for(var l in c.sids)if(c.sids.hasOwnProperty(l)){if(~s.indexOf(l))continue;(n=c.nsp.connected[l])&&n.packet(e,o)}}))},s.prototype.clients=function(e,t){"function"==typeof e&&(t=e,e=null);var n={},i=[];if((e=e||[]).length)for(var s=0;s<e.length;s++){var a=this.rooms[e[s]];if(a){var o=a.sockets;for(var r in o)if(o.hasOwnProperty(r)){if(n[r])continue;this.nsp.connected[r]&&(i.push(r),n[r]=!0)}}}else for(var r in this.sids)this.sids.hasOwnProperty(r)&&this.nsp.connected[r]&&i.push(r);t&&process.nextTick(t.bind(null,null,i))},s.prototype.clientRooms=function(e,t){var n=this.sids[e];t&&process.nextTick(t.bind(null,null,n?Object.keys(n):null))},a.prototype.add=function(e){this.sockets.hasOwnProperty(e)||(this.sockets[e]=!0,this.length++)},a.prototype.del=function(e){this.sockets.hasOwnProperty(e)&&(delete this.sockets[e],this.length--)}},function(e,t){function n(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}n.keys=function(){return[]},n.resolve=n,e.exports=n,n.id=142}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwidXRpbFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImV2ZW50c1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcInVybFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImh0dHBcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJwYXRoXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwic3RyZWFtXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiY3J5cHRvXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dzL2xpYi9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcInR0eVwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdXBwb3J0cy1jb2xvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RhdHVzZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93cy9saWIvcGVybWVzc2FnZS1kZWZsYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93cy9saWIvYnVmZmVyLXV0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9taW1lLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImZzXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29ubHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h0dHAtZXJyb3JzL2luZGV4LmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcInF1ZXJ5c3RyaW5nXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby9saWIvdHJhbnNwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtYmluYXJ5Mi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2RlYnVnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vbi1maW5pc2hlZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHlwZS1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVwZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVwZC9saWIvY29tcGF0L2luZGV4LmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcIm5ldFwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hY2NlcHRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8vbGliL3RyYW5zcG9ydHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby9saWIvdHJhbnNwb3J0cy9wb2xsaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiemxpYlwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8vbGliL3NvY2tldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd3MvbGliL3dlYnNvY2tldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd3MvbGliL3JlY2VpdmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93cy9saWIvdmFsaWRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd3MvbGliL3NlbmRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd3MvbGliL2V4dGVuc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9pcy1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvL2xpYi9uYW1lc3BhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMva29hL2xpYi9hcHBsaWNhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtZ2VuZXJhdG9yLWZ1bmN0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL25vZGUuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwib3NcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWZsYWcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VlLWZpcnN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9rb2EvbGliL3Jlc3BvbnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50LWRpc3Bvc2l0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJidWZmZXJcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXJyb3ItaW5qZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jYWNoZS1jb250ZW50LXR5cGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbWUtZGIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3lscnUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzY2FwZS1odG1sL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tZWRpYS10eXBlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVzdHJveS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJhc3NlcnRcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFyeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5jb2RldXJsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9rb2EtY29tcG9zZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMva29hL2xpYi9jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZXBkL2xpYi9jb21wYXQvY2FsbHNpdGUtdG9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlcGQvbGliL2NvbXBhdC9ldmVudC1saXN0ZW5lci1jb3VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2V0cHJvdG90eXBlb2YvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90b2lkZW50aWZpZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h0dHAtYXNzZXJ0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWVwLWVxdWFsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWVwLWVxdWFsL2xpYi9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWVwLWVxdWFsL2xpYi9pc19hcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlbGVnYXRlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29va2llcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29va2llcy9ub2RlX21vZHVsZXMvZGVwZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMva2V5Z3JpcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHNzY21wL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMva29hL2xpYi9yZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9uZWdvdGlhdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9uZWdvdGlhdG9yL2xpYi9jaGFyc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9uZWdvdGlhdG9yL2xpYi9lbmNvZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbmVnb3RpYXRvci9saWIvbGFuZ3VhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25lZ290aWF0b3IvbGliL21lZGlhVHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudC10eXBlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZXVybC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJlc2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2tvYS1jb252ZXJ0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jby9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMva29hLWNvbnZlcnQvbm9kZV9tb2R1bGVzL2tvYS1jb21wb3NlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnktcHJvbWlzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW55LXByb21pc2UvcmVnaXN0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FueS1wcm9taXNlL2xvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW55LXByb21pc2Ugc3luYyIsIndlYnBhY2s6Ly8vLi9zcmMvc29ja2V0LmlvLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8vbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8vbGliL2VuZ2luZS5pby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvL2xpYi9zZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NGlkL2xpYi9iYXNlNjRpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvL2xpYi90cmFuc3BvcnRzL3BvbGxpbmcteGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi91dGY4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtYmluYXJ5Mi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWZ0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby9ub2RlX21vZHVsZXMvZGVidWcvc3JjL25vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby9saWIvdHJhbnNwb3J0cy9wb2xsaW5nLWpzb25wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8vbGliL3RyYW5zcG9ydHMvd2Vic29ja2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb29raWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dzL2luZGV4LmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImh0dHBzXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwidGxzXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dzL2xpYi9saW1pdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93cy9saWIvZXZlbnQtdGFyZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93cy9saWIvc3RyZWFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93cy9saWIvd2Vic29ja2V0LXNlcnZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvL2xpYi9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvbm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvY29tcG9uZW50LWVtaXR0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvYmluYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8vbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9ub2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8vbGliL3NvY2tldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvL2xpYi9wYXJlbnQtbmFtZXNwYWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tYWRhcHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvL2xpYiBzeW5jIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwicmVxdWlyZSIsIkJJTkFSWV9UWVBFUyIsIkdVSUQiLCJrU3RhdHVzQ29kZSIsImtXZWJTb2NrZXQiLCJFTVBUWV9CVUZGRVIiLCJCdWZmZXIiLCJhbGxvYyIsIk5PT1AiLCJwcm9jZXNzIiwidHlwZSIsImJyb3dzZXIiLCJfX253anMiLCJvcyIsImhhc0ZsYWciLCJlbnYiLCJmb3JjZUNvbG9yIiwiZ2V0U3VwcG9ydExldmVsIiwic3RyZWFtIiwibGV2ZWwiLCJoYXNCYXNpYyIsImhhczI1NiIsImhhczE2bSIsInRyYW5zbGF0ZUxldmVsIiwiaXNUVFkiLCJ1bmRlZmluZWQiLCJtaW4iLCJURVJNIiwicGxhdGZvcm0iLCJvc1JlbGVhc2UiLCJyZWxlYXNlIiwic3BsaXQiLCJOdW1iZXIiLCJ2ZXJzaW9ucyIsIm5vZGUiLCJzb21lIiwic2lnbiIsIkNJX05BTUUiLCJ0ZXN0IiwiVEVBTUNJVFlfVkVSU0lPTiIsIkNPTE9SVEVSTSIsInZlcnNpb24iLCJwYXJzZUludCIsIlRFUk1fUFJPR1JBTV9WRVJTSU9OIiwiVEVSTV9QUk9HUkFNIiwic3VwcG9ydHNDb2xvciIsIkZPUkNFX0NPTE9SIiwibGVuZ3RoIiwiTWF0aCIsInN0ZG91dCIsInN0ZGVyciIsImNvZGVzIiwic3RhdHVzIiwiY29kZSIsIkVycm9yIiwiVHlwZUVycm9yIiwiaXNOYU4iLCJ0b0xvd2VyQ2FzZSIsIlNUQVRVU19DT0RFUyIsInN0YXR1c2VzIiwiYXJyIiwia2V5cyIsImZvckVhY2giLCJtZXNzYWdlIiwicHVzaCIsInBvcHVsYXRlU3RhdHVzZXNNYXAiLCJyZWRpcmVjdCIsIjMwMCIsIjMwMSIsIjMwMiIsIjMwMyIsIjMwNSIsIjMwNyIsIjMwOCIsImVtcHR5IiwiMjA0IiwiMjA1IiwiMzA0IiwicmV0cnkiLCI1MDIiLCI1MDMiLCI1MDQiLCJ1dGY4IiwiaGFzQmluYXJ5IiwiYWZ0ZXIiLCJwcm90b2NvbCIsInBhY2tldHMiLCJvcGVuIiwiY2xvc2UiLCJwaW5nIiwicG9uZyIsInVwZ3JhZGUiLCJub29wIiwicGFja2V0c2xpc3QiLCJlcnIiLCJkYXRhIiwiY29uY2F0IiwiZW5jb2RlQnVmZmVyIiwicGFja2V0Iiwic3VwcG9ydHNCaW5hcnkiLCJjYWxsYmFjayIsImVuY29kZUJhc2U2NFBhY2tldCIsInR5cGVCdWZmZXIiLCJhbGxvY1Vuc2FmZSIsIm1hcCIsImFyeSIsImVhY2giLCJkb25lIiwicmVzdWx0IiwiQXJyYXkiLCJuZXh0IiwiZXJyb3IiLCJtc2ciLCJidWZmZXJUb1N0cmluZyIsImJ1ZmZlciIsInN0ciIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInN0cmluZ1RvQnVmZmVyIiwic3RyaW5nIiwiYnVmIiwid3JpdGVVSW50OCIsImNoYXJDb2RlQXQiLCJhcnJheUJ1ZmZlclRvQnVmZmVyIiwiYnl0ZUxlbmd0aCIsIm9mZnNldCIsImJ5dGVPZmZzZXQiLCJmcm9tIiwiZW5jb2RlT25lQmluYXJ5UGFja2V0IiwiZG9uZUNhbGxiYWNrIiwiZW5jb2RlUGFja2V0Iiwic2l6ZUJ1ZmZlciIsImVuY29kaW5nTGVuZ3RoIiwidXRmOGVuY29kZSIsImlzQnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJlbmNvZGVkIiwiZW5jb2RlIiwic3RyaWN0IiwidG9TdHJpbmciLCJkZWNvZGVQYWNrZXQiLCJiaW5hcnlUeXBlIiwidXRmOGRlY29kZSIsImNoYXJBdCIsImRlY29kZUJhc2U2NFBhY2tldCIsInN1YnN0ciIsImRlY29kZSIsImUiLCJ0cnlEZWNvZGUiLCJzdWJzdHJpbmciLCJpbnRBcnJheSIsIlVpbnQ4QXJyYXkiLCJzbGljZSIsImFidiIsImVuY29kZVBheWxvYWQiLCJlbmNvZGVQYXlsb2FkQXNCaW5hcnkiLCJzZXRMZW5ndGhIZWFkZXIiLCJyZXN1bHRzIiwiam9pbiIsImRlY29kZVBheWxvYWQiLCJkZWNvZGVQYXlsb2FkQXNCaW5hcnkiLCJjaHIiLCJidWZmZXJUYWlsIiwiYnVmZmVycyIsInN0ckxlbiIsImlzU3RyaW5nIiwibXNnTGVuZ3RoIiwidG90YWwiLCJ6bGliIiwiYnVmZmVyVXRpbCIsIkxpbWl0ZXIiLCJUUkFJTEVSIiwia1Blck1lc3NhZ2VEZWZsYXRlIiwia1RvdGFsTGVuZ3RoIiwia0NhbGxiYWNrIiwia0J1ZmZlcnMiLCJrRXJyb3IiLCJ6bGliTGltaXRlciIsImRlZmxhdGVPbkRhdGEiLCJjaHVuayIsInRoaXMiLCJpbmZsYXRlT25EYXRhIiwiX21heFBheWxvYWQiLCJSYW5nZUVycm9yIiwicmVtb3ZlTGlzdGVuZXIiLCJyZXNldCIsImluZmxhdGVPbkVycm9yIiwiX2luZmxhdGUiLCJvcHRpb25zIiwiaXNTZXJ2ZXIiLCJtYXhQYXlsb2FkIiwiX29wdGlvbnMiLCJfdGhyZXNob2xkIiwidGhyZXNob2xkIiwiX2lzU2VydmVyIiwiX2RlZmxhdGUiLCJwYXJhbXMiLCJjb25jdXJyZW5jeSIsImNvbmN1cnJlbmN5TGltaXQiLCJzZXJ2ZXJOb0NvbnRleHRUYWtlb3ZlciIsInNlcnZlcl9ub19jb250ZXh0X3Rha2VvdmVyIiwiY2xpZW50Tm9Db250ZXh0VGFrZW92ZXIiLCJjbGllbnRfbm9fY29udGV4dF90YWtlb3ZlciIsInNlcnZlck1heFdpbmRvd0JpdHMiLCJzZXJ2ZXJfbWF4X3dpbmRvd19iaXRzIiwiY2xpZW50TWF4V2luZG93Qml0cyIsImNsaWVudF9tYXhfd2luZG93X2JpdHMiLCJjb25maWd1cmF0aW9ucyIsIm5vcm1hbGl6ZVBhcmFtcyIsImFjY2VwdEFzU2VydmVyIiwiYWNjZXB0QXNDbGllbnQiLCJvZmZlcnMiLCJvcHRzIiwiYWNjZXB0ZWQiLCJmaW5kIiwicmVzcG9uc2UiLCJudW0iLCJpc0ludGVnZXIiLCJmaW4iLCJhZGQiLCJfZGVjb21wcmVzcyIsIl9jb21wcmVzcyIsImVuZHBvaW50Iiwid2luZG93Qml0cyIsIlpfREVGQVVMVF9XSU5ET1dCSVRTIiwiY3JlYXRlSW5mbGF0ZVJhdyIsInpsaWJJbmZsYXRlT3B0aW9ucyIsIm9uIiwid3JpdGUiLCJmbHVzaCIsImNyZWF0ZURlZmxhdGVSYXciLCJ6bGliRGVmbGF0ZU9wdGlvbnMiLCJaX1NZTkNfRkxVU0giLCJsaXN0IiwidG90YWxMZW5ndGgiLCJ0YXJnZXQiLCJzZXQiLCJfbWFzayIsInNvdXJjZSIsIm1hc2siLCJvdXRwdXQiLCJfdW5tYXNrIiwidG9BcnJheUJ1ZmZlciIsInRvQnVmZmVyIiwicmVhZE9ubHkiLCJpc1ZpZXciLCJ2aWV3Iiwidmlld1RvQnVmZmVyIiwiYnUiLCJCdWZmZXJVdGlsIiwidW5tYXNrIiwiZGVidWciLCJFbWl0dGVyIiwiYmluYXJ5IiwiaXNBcnJheSIsImlzQnVmIiwiRW5jb2RlciIsInR5cGVzIiwiQ09OTkVDVCIsIkRJU0NPTk5FQ1QiLCJFVkVOVCIsIkFDSyIsIkVSUk9SIiwiQklOQVJZX0VWRU5UIiwiQklOQVJZX0FDSyIsIkRlY29kZXIiLCJFUlJPUl9QQUNLRVQiLCJlbmNvZGVBc1N0cmluZyIsIm9iaiIsImF0dGFjaG1lbnRzIiwibnNwIiwiaWQiLCJwYXlsb2FkIiwiSlNPTiIsInN0cmluZ2lmeSIsInRyeVN0cmluZ2lmeSIsInJlY29uc3RydWN0b3IiLCJCaW5hcnlSZWNvbnN0cnVjdG9yIiwicmVjb25QYWNrIiwicmVtb3ZlQmxvYnMiLCJibG9ibGVzc0RhdGEiLCJkZWNvbnN0cnVjdGlvbiIsImRlY29uc3RydWN0UGFja2V0IiwicGFjayIsInVuc2hpZnQiLCJlbmNvZGVBc0JpbmFyeSIsInBhcnNlIiwidHJ5UGFyc2UiLCJkZWNvZGVTdHJpbmciLCJlbWl0IiwiYmFzZTY0IiwidGFrZUJpbmFyeURhdGEiLCJkZXN0cm95IiwiZmluaXNoZWRSZWNvbnN0cnVjdGlvbiIsImJpbkRhdGEiLCJyZWNvbnN0cnVjdFBhY2tldCIsImV4dGVuc2lvbnMiLCJwcmVmZXJlbmNlIiwiZGIiLCJleHRuYW1lIiwiRVhUUkFDVF9UWVBFX1JFR0VYUCIsIlRFWFRfVFlQRV9SRUdFWFAiLCJjaGFyc2V0IiwibWF0Y2giLCJleGVjIiwibWltZSIsImNoYXJzZXRzIiwibG9va3VwIiwiY29udGVudFR5cGUiLCJpbmRleE9mIiwiZXh0ZW5zaW9uIiwiZXh0cyIsInBhdGgiLCJ0byIsInJlZHVjZSIsInJldCIsImRlcHJlY2F0ZSIsInNldFByb3RvdHlwZU9mIiwiaW5oZXJpdHMiLCJ0b0lkZW50aWZpZXIiLCJjb2RlQ2xhc3MiLCJuYW1lRnVuYyIsImZ1bmMiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwiY3JlYXRlRXJyb3IiLCJwcm9wcyIsImFyZ3VtZW50cyIsImFyZyIsInN0YXR1c0NvZGUiLCJIdHRwRXJyb3IiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImV4cG9zZSIsImNyZWF0ZUh0dHBFcnJvckNvbnN0cnVjdG9yIiwiQ29kZUVycm9yIiwiY2xhc3NOYW1lIiwiQ2xpZW50RXJyb3IiLCJ3cml0YWJsZSIsImNyZWF0ZUNsaWVudEVycm9yQ29uc3RydWN0b3IiLCJTZXJ2ZXJFcnJvciIsImNyZWF0ZVNlcnZlckVycm9yQ29uc3RydWN0b3IiLCJmdW5jdGlvbiIsIkltQVRlYXBvdCIsInBvcHVsYXRlQ29uc3RydWN0b3JFeHBvcnRzIiwiRXZlbnRFbWl0dGVyIiwicGFyc2VyIiwidXRpbCIsIlRyYW5zcG9ydCIsInJlcSIsInJlYWR5U3RhdGUiLCJkaXNjYXJkZWQiLCJkaXNjYXJkIiwib25SZXF1ZXN0IiwiZm4iLCJkb0Nsb3NlIiwib25FcnJvciIsImxpc3RlbmVycyIsImRlc2NyaXB0aW9uIiwib25QYWNrZXQiLCJvbkRhdGEiLCJvbkNsb3NlIiwid2l0aE5hdGl2ZUJsb2IiLCJCbG9iIiwid2l0aE5hdGl2ZUZpbGUiLCJGaWxlIiwidG9KU09OIiwiY3JlYXRlRGVidWciLCJuYW1lc3BhY2UiLCJwcmV2VGltZSIsImVuYWJsZWQiLCJzZWxmIiwiY3VyciIsIkRhdGUiLCJtcyIsImRpZmYiLCJwcmV2IiwiYXJncyIsImNvZXJjZSIsImluZGV4IiwicmVwbGFjZSIsImZvcm1hdCIsImZvcm1hdHRlciIsImZvcm1hdHRlcnMiLCJ2YWwiLCJzcGxpY2UiLCJmb3JtYXRBcmdzIiwibG9nRm4iLCJsb2ciLCJjb25zb2xlIiwiYXBwbHkiLCJ1c2VDb2xvcnMiLCJjb2xvciIsImhhc2giLCJjb2xvcnMiLCJhYnMiLCJzZWxlY3RDb2xvciIsImluaXQiLCJpbnN0YW5jZXMiLCJzdGFjayIsImRpc2FibGUiLCJlbmFibGUiLCJuYW1lc3BhY2VzIiwic2F2ZSIsIm5hbWVzIiwic2tpcHMiLCJsZW4iLCJSZWdFeHAiLCJpbnN0YW5jZSIsImh1bWFuaXplIiwibGlzdGVuZXIiLCJpc0ZpbmlzaGVkIiwiZGVmZXIiLCJhdHRhY2hlZCIsIl9fb25GaW5pc2hlZCIsInF1ZXVlIiwiY3JlYXRlTGlzdGVuZXIiLCJlZU1zZyIsImVlU29ja2V0IiwiZmluaXNoZWQiLCJvbkZpbmlzaCIsImNhbmNlbCIsIm9uU29ja2V0Iiwic29ja2V0IiwiZmlyc3QiLCJyZXMiLCJhc3NpZ25Tb2NrZXQiLCJwYXRjaEFzc2lnblNvY2tldCIsImF0dGFjaEZpbmlzaGVkTGlzdGVuZXIiLCJhdHRhY2hMaXN0ZW5lciIsInNldEltbWVkaWF0ZSIsIm5leHRUaWNrIiwiQm9vbGVhbiIsImNvbXBsZXRlIiwicmVhZGFibGUiLCJ0eXBlciIsInR5cGVpcyIsInR5cGVzXyIsInRyeU5vcm1hbGl6ZVR5cGUiLCJtaW1lTWF0Y2giLCJub3JtYWxpemUiLCJoYXNib2R5IiwiaGVhZGVycyIsImV4cGVjdGVkIiwiYWN0dWFsIiwiYWN0dWFsUGFydHMiLCJleHBlY3RlZFBhcnRzIiwicGFyYW1ldGVycyIsIm5vcm1hbGl6ZVR5cGUiLCJpcyIsImhhc0JvZHkiLCJjYWxsU2l0ZVRvU3RyaW5nIiwiZXZlbnRMaXN0ZW5lckNvdW50IiwicmVsYXRpdmUiLCJkZXBkIiwiYmFzZVBhdGgiLCJjd2QiLCJjb250YWluc05hbWVzcGFjZSIsInZhbHMiLCJjb252ZXJ0RGF0YURlc2NyaXB0b3JUb0FjY2Vzc29yIiwicHJvcCIsImRlc2NyaXB0b3IiLCJjcmVhdGVBcmd1bWVudHNTdHJpbmciLCJhcml0eSIsImNyZWF0ZVN0YWNrU3RyaW5nIiwiZmlsZSIsImNhbGxTaXRlTG9jYXRpb24iLCJnZXRTdGFjayIsIl9maWxlIiwiX2lnbm9yZWQiLCJpc2lnbm9yZWQiLCJfbmFtZXNwYWNlIiwiX3RyYWNlZCIsImlzdHJhY2VkIiwiX3dhcm5lZCIsIndyYXBmdW5jdGlvbiIsIndyYXBwcm9wZXJ0eSIsIm5vRGVwcmVjYXRpb24iLCJOT19ERVBSRUNBVElPTiIsInRyYWNlRGVwcmVjYXRpb24iLCJUUkFDRV9ERVBSRUNBVElPTiIsInNpdGUiLCJoYXNsaXN0ZW5lcnMiLCJjYWxsZXIiLCJjYWxsRmlsZSIsImNhbGxTaXRlIiwiZGVwU2l0ZSIsInNlZW4iLCJkZWZhdWx0TWVzc2FnZSIsIkRlcHJlY2F0aW9uRXJyb3IiLCJmb3JtYXRDb2xvciIsImZvcm1hdFBsYWluIiwiZ2V0RmlsZU5hbWUiLCJsaW5lIiwiZ2V0TGluZU51bWJlciIsImNvbG0iLCJnZXRDb2x1bW5OdW1iZXIiLCJpc0V2YWwiLCJnZXRFdmFsT3JpZ2luIiwiZ2V0RnVuY3Rpb25OYW1lIiwiZnVuY05hbWUiLCJmb3JtYXRMb2NhdGlvbiIsImNvbnRleHQiLCJnZXRUaGlzIiwidHlwZU5hbWUiLCJnZXRUeXBlTmFtZSIsImdldE1ldGhvZE5hbWUiLCJmb3JtYXR0ZWQiLCJ0b1VUQ1N0cmluZyIsImxpbWl0Iiwic3RhY2tUcmFjZUxpbWl0IiwicHJlcCIsInByZXBhcmVTdGFja1RyYWNlIiwicHJlcGFyZU9iamVjdFN0YWNrVHJhY2UiLCJtYXgiLCJkZXByZWNhdGVkZm4iLCJldmFsIiwic3RhY2tTdHJpbmciLCJsYXp5UHJvcGVydHkiLCJsaXN0ZW5lckNvdW50IiwiTmVnb3RpYXRvciIsIkFjY2VwdHMiLCJuZWdvdGlhdG9yIiwiZXh0VG9NaW1lIiwidmFsaWRNaW1lIiwibWVkaWFUeXBlcyIsImFjY2VwdCIsIm1pbWVzIiwiYWNjZXB0cyIsImZpbHRlciIsImVuY29kaW5nIiwiZW5jb2RpbmdzIiwiZW5jb2RpbmdzXyIsImNoYXJzZXRzXyIsImxhbmciLCJsYW5ncyIsImxhbmd1YWdlIiwibGFuZ3VhZ2VzIiwibGFuZ3VhZ2VzXyIsIlhIUiIsIkpTT05QIiwicG9sbGluZyIsIl9xdWVyeSIsImoiLCJ3ZWJzb2NrZXQiLCJ1cGdyYWRlc1RvIiwiY29tcHJlc3Npb25NZXRob2RzIiwiZ3ppcCIsImNyZWF0ZUd6aXAiLCJkZWZsYXRlIiwiY3JlYXRlRGVmbGF0ZSIsIlBvbGxpbmciLCJjbG9zZVRpbWVvdXQiLCJtYXhIdHRwQnVmZmVyU2l6ZSIsImh0dHBDb21wcmVzc2lvbiIsIm1ldGhvZCIsIm9uUG9sbFJlcXVlc3QiLCJvbkRhdGFSZXF1ZXN0Iiwid3JpdGVIZWFkIiwiZW5kIiwiY2xlYW51cCIsInNob3VsZENsb3NlIiwic2VuZCIsImRhdGFSZXEiLCJpc0JpbmFyeSIsImRhdGFSZXMiLCJjaHVua3MiLCJvbkVuZCIsImNvbnRlbnRMZW5ndGgiLCJjb25uZWN0aW9uIiwic2V0RW5jb2RpbmciLCJjb21wcmVzcyIsImRvV3JpdGUiLCJyZXNwb25kIiwibnJlYWQiLCJjbG9zZVRpbWVvdXRUaW1lciIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJ1YSIsImV4dGVuZCIsImRlbGltaXRlciIsIm5ld0RlYnVnIiwidG9OYW1lc3BhY2UiLCJyZWdleHAiLCJkZWZhdWx0IiwibG9hZCIsIlNvY2tldCIsInNlcnZlciIsInRyYW5zcG9ydCIsInVwZ3JhZGluZyIsInVwZ3JhZGVkIiwid3JpdGVCdWZmZXIiLCJwYWNrZXRzRm4iLCJzZW50Q2FsbGJhY2tGbiIsImNsZWFudXBGbiIsInJlcXVlc3QiLCJfc29ja2V0IiwicmVtb3RlQWRkcmVzcyIsImNoZWNrSW50ZXJ2YWxUaW1lciIsInVwZ3JhZGVUaW1lb3V0VGltZXIiLCJwaW5nVGltZW91dFRpbWVyIiwic2V0VHJhbnNwb3J0Iiwib25PcGVuIiwic2lkIiwic2VuZFBhY2tldCIsInVwZ3JhZGVzIiwiZ2V0QXZhaWxhYmxlVXBncmFkZXMiLCJwaW5nSW50ZXJ2YWwiLCJwaW5nVGltZW91dCIsImluaXRpYWxQYWNrZXQiLCJzZXRQaW5nVGltZW91dCIsIm9uY2UiLCJzZXR1cFNlbmRDYWxsYmFjayIsIm1heWJlVXBncmFkZSIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNoZWNrIiwiY2xlYXJUcmFuc3BvcnQiLCJvblRyYW5zcG9ydENsb3NlIiwidXBncmFkZVRpbWVvdXQiLCJ0b0NsZWFuVXAiLCJzaGlmdCIsInJlYXNvbiIsIm9uRHJhaW4iLCJzZXFGbiIsIndidWYiLCJzdXBwb3J0c0ZyYW1pbmciLCJhdmFpbGFibGVVcGdyYWRlcyIsImFsbFVwZ3JhZGVzIiwidXBnIiwidHJhbnNwb3J0cyIsImNsb3NlVHJhbnNwb3J0IiwiaHR0cHMiLCJodHRwIiwibmV0IiwidGxzIiwicmFuZG9tQnl0ZXMiLCJjcmVhdGVIYXNoIiwiVVJMIiwiUGVyTWVzc2FnZURlZmxhdGUiLCJSZWNlaXZlciIsIlNlbmRlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHlTdGF0ZXMiLCJwcm90b2NvbFZlcnNpb25zIiwiV2ViU29ja2V0IiwiYWRkcmVzcyIsInByb3RvY29scyIsInN1cGVyIiwiQ09OTkVDVElORyIsIl9iaW5hcnlUeXBlIiwiX2Nsb3NlRnJhbWVSZWNlaXZlZCIsIl9jbG9zZUZyYW1lU2VudCIsIl9jbG9zZU1lc3NhZ2UiLCJfY2xvc2VUaW1lciIsIl9jbG9zZUNvZGUiLCJfZXh0ZW5zaW9ucyIsIl9yZWNlaXZlciIsIl9zZW5kZXIiLCJfYnVmZmVyZWRBbW91bnQiLCJfcmVkaXJlY3RzIiwiaW5pdEFzQ2xpZW50IiwicHJvdG9jb2xWZXJzaW9uIiwicGVyTWVzc2FnZURlZmxhdGUiLCJmb2xsb3dSZWRpcmVjdHMiLCJtYXhSZWRpcmVjdHMiLCJjcmVhdGVDb25uZWN0aW9uIiwic29ja2V0UGF0aCIsImhvc3RuYW1lIiwidGltZW91dCIsImF1dGgiLCJob3N0IiwicG9ydCIsImluY2x1ZGVzIiwicGFyc2VkVXJsIiwidXJsIiwiaHJlZiIsImlzVW5peFNvY2tldCIsInBhdGhuYW1lIiwiaXNTZWN1cmUiLCJkZWZhdWx0UG9ydCIsInRsc0Nvbm5lY3QiLCJuZXRDb25uZWN0Iiwic3RhcnRzV2l0aCIsIkNvbm5lY3Rpb24iLCJVcGdyYWRlIiwic2VhcmNoIiwiaGFuZHNoYWtlVGltZW91dCIsImV4dGVuc2lvbk5hbWUiLCJvZmZlciIsIm9yaWdpbiIsIk9yaWdpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJwYXJ0cyIsIl9yZXEiLCJhYm9ydEhhbmRzaGFrZSIsImFib3J0ZWQiLCJDTE9TSU5HIiwiZW1pdENsb3NlIiwibG9jYXRpb24iLCJhYm9ydCIsImFkZHIiLCJoZWFkIiwiZGlnZXN0IiwidXBkYXRlIiwic2VydmVyUHJvdCIsInByb3RMaXN0IiwicHJvdEVycm9yIiwic2V0U29ja2V0IiwiQ0xPU0VEIiwiT1BFTiIsImJ1ZmZlclNpemUiLCJfYnVmZmVyZWRCeXRlcyIsInJlY2VpdmVyIiwicmVjZWl2ZXJPbkNvbmNsdWRlIiwicmVjZWl2ZXJPbkRyYWluIiwicmVjZWl2ZXJPbkVycm9yIiwicmVjZWl2ZXJPbk1lc3NhZ2UiLCJyZWNlaXZlck9uUGluZyIsInJlY2VpdmVyT25Qb25nIiwic2V0Tm9EZWxheSIsInNvY2tldE9uQ2xvc2UiLCJzb2NrZXRPbkRhdGEiLCJzb2NrZXRPbkVuZCIsInNvY2tldE9uRXJyb3IiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJjYiIsInNlbmRBZnRlckNsb3NlIiwiY29ubmVjdCIsInNlcnZlcm5hbWUiLCJzZXRIZWFkZXIiLCJyZXN1bWUiLCJyZWNlaXZlck9uRmluaXNoIiwicmVhZCIsIl93cml0YWJsZVN0YXRlIiwiZXJyb3JFbWl0dGVkIiwicGF1c2UiLCJfbGlzdGVuZXIiLCJXcml0YWJsZSIsImlzVmFsaWRTdGF0dXNDb2RlIiwiaXNWYWxpZFVURjgiLCJFcnJvckN0b3IiLCJwcmVmaXgiLCJfYnVmZmVycyIsIl9jb21wcmVzc2VkIiwiX3BheWxvYWRMZW5ndGgiLCJfZnJhZ21lbnRlZCIsIl9tYXNrZWQiLCJfZmluIiwiX29wY29kZSIsIl90b3RhbFBheWxvYWRMZW5ndGgiLCJfbWVzc2FnZUxlbmd0aCIsIl9mcmFnbWVudHMiLCJfc3RhdGUiLCJfbG9vcCIsInN0YXJ0TG9vcCIsImRzdCIsImdldEluZm8iLCJnZXRQYXlsb2FkTGVuZ3RoMTYiLCJnZXRQYXlsb2FkTGVuZ3RoNjQiLCJnZXRNYXNrIiwiZ2V0RGF0YSIsImNvbnN1bWUiLCJjb21wcmVzc2VkIiwiaGF2ZUxlbmd0aCIsInJlYWRVSW50MTZCRSIsInJlYWRVSW50MzJCRSIsInBvdyIsImNvbnRyb2xNZXNzYWdlIiwiZGVjb21wcmVzcyIsImRhdGFNZXNzYWdlIiwiZXIiLCJtZXNzYWdlTGVuZ3RoIiwiZnJhZ21lbnRzIiwiVmFsaWRhdGlvbiIsInJhbmRvbUZpbGxTeW5jIiwiYXBwbHlNYXNrIiwiX2ZpcnN0RnJhZ21lbnQiLCJfZGVmbGF0aW5nIiwiX3F1ZXVlIiwibWVyZ2UiLCJwYXlsb2FkTGVuZ3RoIiwib3Bjb2RlIiwicnN2MSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkJFIiwiZW5xdWV1ZSIsInNlbmRGcmFtZSIsImZyYW1lIiwiZG9QaW5nIiwiZG9Qb25nIiwiZGlzcGF0Y2giLCJfIiwiZGVzdHJveWVkIiwiZGVxdWV1ZSIsIlJlZmxlY3QiLCJjb3JrIiwidW5jb3JrIiwidG9rZW5DaGFycyIsImRlc3QiLCJlbGVtIiwiayIsInZhbHVlcyIsInYiLCJoZWFkZXIiLCJwYXJhbU5hbWUiLCJtdXN0VW5lc2NhcGUiLCJpc0VzY2FwaW5nIiwiaW5RdW90ZXMiLCJzdGFydCIsIlN5bnRheEVycm9yIiwidG9rZW4iLCJ3aXRoTmF0aXZlQnVmZmVyIiwid2l0aE5hdGl2ZUFycmF5QnVmZmVyIiwiaGFzQmluIiwiTmFtZXNwYWNlIiwiZXZlbnRzIiwiZmxhZ3MiLCJzb2NrZXRzIiwiY29ubmVjdGVkIiwiZm5zIiwiaWRzIiwicm9vbXMiLCJpbml0QWRhcHRlciIsIl9fcHJvdG9fXyIsImZsYWciLCJhZGFwdGVyIiwidXNlIiwiZWlvIiwicnVuIiwiaW4iLCJjbGllbnQiLCJxdWVyeSIsImNvbm4iLCJvbmNvbm5lY3QiLCJyZW1vdmUiLCJldiIsImFzc2lnbiIsImJyb2FkY2FzdCIsImNsaWVudHMiLCJhcHAiLCJLb2EiLCJjdHgiLCJib2R5IiwibGlzdGVuIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsIm9uRmluaXNoZWQiLCJjb21wb3NlIiwiU3RyZWFtIiwib25seSIsImNvbnZlcnQiLCJwcm94eSIsInN1YmRvbWFpbk9mZnNldCIsInByb3h5SXBIZWFkZXIiLCJtYXhJcHNDb3VudCIsIm1pZGRsZXdhcmUiLCJpbnNwZWN0IiwiY3VzdG9tIiwiY3JlYXRlU2VydmVyIiwiX25hbWUiLCJvbmVycm9yIiwiY3JlYXRlQ29udGV4dCIsImhhbmRsZVJlcXVlc3QiLCJmbk1pZGRsZXdhcmUiLCJ0aGVuIiwiaGVhZGVyc1NlbnQiLCJoYXMiLCJodHRwVmVyc2lvbk1ham9yIiwicGlwZSIsImNhdGNoIiwib3JpZ2luYWxVcmwiLCJzdGF0ZSIsInNpbGVudCIsInRvU3RyIiwiZm5Ub1N0ciIsIkZ1bmN0aW9uIiwiaXNGblJlZ2V4IiwiaGFzVG9TdHJpbmdUYWciLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiZ2VuZXJhdG9yRnVuYyIsImdldEdlbmVyYXRvckZ1bmMiLCJHZW5lcmF0b3JGdW5jdGlvbiIsInN0b3JhZ2UiLCJERUJVRyIsImxhc3RDIiwicmVtb3ZlSXRlbSIsIndpbmRvdyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJXZWJraXRBcHBlYXJhbmNlIiwiZmlyZWJ1ZyIsImV4Y2VwdGlvbiIsInRhYmxlIiwiJDEiLCJjaHJvbWUiLCJsb2NhbCIsImxvY2FsU3RvcmFnZSIsImxvY2Fsc3RvcmFnZSIsImgiLCJwbHVyYWwiLCJmbG9vciIsImNlaWwiLCJwYXJzZUZsb2F0IiwibG9uZyIsInJvdW5kIiwiZm10U2hvcnQiLCJ0dHkiLCJpbnNwZWN0T3B0cyIsImNvbG9yQ29kZSIsImhpZGVEYXRlIiwidG9JU09TdHJpbmciLCJpc2F0dHkiLCJmZCIsInRvVXBwZXJDYXNlIiwidHJpbSIsIk8iLCJhcmd2IiwicG9zIiwidGVybWluYXRvclBvcyIsImV2ZW50IiwiYXJnMSIsImVlIiwic3R1ZmYiLCJjbGVhbnVwcyIsIngiLCJ0aHVuayIsImNvbnRlbnREaXNwb3NpdGlvbiIsImVuc3VyZUVycm9ySGFuZGxlciIsImdldFR5cGUiLCJlc2NhcGUiLCJhc3NlcnQiLCJ2YXJ5IiwiZW5jb2RlVXJsIiwiZ2V0SGVhZGVycyIsIl9oZWFkZXJzIiwiaGVhZGVyU2VudCIsIl9leHBsaWNpdFN0YXR1cyIsInN0YXR1c01lc3NhZ2UiLCJfYm9keSIsIm9yaWdpbmFsIiwic2V0VHlwZSIsImZpZWxkIiwiYWx0IiwiZmlsZW5hbWUiLCJkYXRlIiwiaGFzSGVhZGVyIiwicmVtb3ZlSGVhZGVyIiwid3JpdGFibGVFbmRlZCIsImZsdXNoSGVhZGVycyIsImZhbGxiYWNrIiwiTk9OX0xBVElOMV9SRUdFWFAiLCJiYXNlbmFtZSIsImlzUXVvdGVkU3RyaW5nIiwiVEVYVF9SRUdFWFAiLCJmYWxsYmFja05hbWUiLCJnZXRsYXRpbjEiLCJoYXNGYWxsYmFjayIsIkhFWF9FU0NBUEVfUkVHRVhQIiwiY3JlYXRlcGFyYW1zIiwiVE9LRU5fUkVHRVhQIiwicGFyYW0iLCJzb3J0IiwidXN0cmluZyIsInFzdHJpbmciLCJDb250ZW50RGlzcG9zaXRpb24iLCJESVNQT1NJVElPTl9UWVBFX1JFR0VYUCIsIlBBUkFNX1JFR0VYUCIsImxhc3RJbmRleCIsIlFFU0NfUkVHRVhQIiwiZGVjb2RlZmllbGQiLCJFTkNPREVfVVJMX0FUVFJfQ0hBUl9SRUdFWFAiLCJIRVhfRVNDQVBFX1JFUExBQ0VfUkVHRVhQIiwiUVVPVEVfUkVHRVhQIiwiRVhUX1ZBTFVFX1JFR0VYUCIsInBkZWNvZGUiLCJoZXgiLCJwZW5jb2RlIiwiY2hhciIsImVuY29kZVVSSUNvbXBvbmVudCIsImNvcHlQcm9wcyIsInNyYyIsIlNhZmVCdWZmZXIiLCJlbmNvZGluZ09yT2Zmc2V0IiwiYWxsb2NVbnNhZmVTbG93Iiwic2l6ZSIsImZpbGwiLCJTbG93QnVmZmVyIiwibWltZVR5cGVzIiwidHlwZUxSVUNhY2hlIiwibWltZVR5cGUiLCJjYWNoZSIsIk1hcCIsIl9jYWNoZSIsIml0ZW0iLCJtYXhBZ2UiLCJub3ciLCJnZXROb3ciLCJleHBpcmVkIiwiX3VwZGF0ZSIsImNhY2hlS2V5cyIsIlNldCIsImVudHJ5IiwiZW50cmllcyIsImNoZWNrRW50cnkiLCJtYXRjaEh0bWxSZWdFeHAiLCJodG1sIiwicGFyYW1SZWdFeHAiLCJ0ZXh0UmVnRXhwIiwidG9rZW5SZWdFeHAiLCJxZXNjUmVnRXhwIiwicXVvdGVSZWdFeHAiLCJzdWJ0eXBlTmFtZVJlZ0V4cCIsInR5cGVOYW1lUmVnRXhwIiwidHlwZVJlZ0V4cCIsInN1YnR5cGUiLCJzdWZmaXgiLCJnZXRIZWFkZXIiLCJnZXRjb250ZW50dHlwZSIsImxhc3RJbmRleE9mIiwic3BsaXRUeXBlIiwiUmVhZFN0cmVhbSIsIm9uT3BlbkNsb3NlIiwiZGVzdHJveVJlYWRTdHJlYW0iLCJhcHBlbmQiLCJGSUVMRF9OQU1FX1JFR0VYUCIsImZpZWxkcyIsImZsZCIsIlVOTUFUQ0hFRF9TVVJST0dBVEVfUEFJUl9SRUdFWFAiLCJFTkNPREVfQ0hBUlNfUkVHRVhQIiwiZW5jb2RlVVJJIiwiUHJvbWlzZSIsInJlamVjdCIsInJlc29sdmUiLCJodHRwQXNzZXJ0IiwiZGVsZWdhdGUiLCJDb29raWVzIiwiQ09PS0lFUyIsInByb3RvIiwiZ2V0SGVhZGVyTmFtZXMiLCJzZWN1cmUiLCJfY29va2llcyIsImFjY2VzcyIsImFkZFN1ZmZpeCIsImZpbGVMb2NhdGlvbiIsImZpbGVOYW1lIiwiaXNOYXRpdmUiLCJnZXRTY3JpcHROYW1lT3JTb3VyY2VVUkwiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwiY2FsbFNpdGVGaWxlTG9jYXRpb24iLCJmdW5jdGlvbk5hbWUiLCJpc0NvbnN0cnVjdG9yIiwiaXNNZXRob2RDYWxsIiwiaXNUb3BsZXZlbCIsIm1ldGhvZE5hbWUiLCJjb25zdHJ1Y3RvciIsImVtaXR0ZXIiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwiVGVtcEN0b3IiLCJlcWwiLCJlcXVhbCIsImEiLCJiIiwibm90RXF1YWwiLCJvayIsInN0cmljdEVxdWFsIiwibm90U3RyaWN0RXF1YWwiLCJkZWVwRXF1YWwiLCJub3REZWVwRXF1YWwiLCJwU2xpY2UiLCJvYmplY3RLZXlzIiwiaXNBcmd1bWVudHMiLCJnZXRUaW1lIiwiaXNVbmRlZmluZWRPck51bGwiLCJrYSIsImtiIiwib2JqRXF1aXYiLCJjb3B5Iiwic2hpbSIsInN1cHBvcnRzQXJndW1lbnRzQ2xhc3MiLCJzdXBwb3J0ZWQiLCJ1bnN1cHBvcnRlZCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiRGVsZWdhdG9yIiwibWV0aG9kcyIsImdldHRlcnMiLCJzZXR0ZXJzIiwiZmx1ZW50cyIsInNldHRlciIsIl9fZGVmaW5lR2V0dGVyX18iLCJfX2RlZmluZVNldHRlcl9fIiwiZmx1ZW50IiwiS2V5Z3JpcCIsImZpZWxkQ29udGVudFJlZ0V4cCIsIlNBTUVfU0lURV9SRUdFWFAiLCJDb29raWUiLCJhdHRycyIsImV4cGlyZXMiLCJkb21haW4iLCJzYW1lU2l0ZSIsInB1c2hDb29raWUiLCJjb29raWUiLCJvdmVyd3JpdGUiLCJ0b0hlYWRlciIsInJlbW90ZSIsInNpZ05hbWUiLCJzaWduZWQiLCJnZXRQYXR0ZXJuIiwiZW5jcnlwdGVkIiwic2VjdXJlUHJveHkiLCJPdXRnb2luZ01lc3NhZ2UiLCJodHRwT25seSIsImV4cHJlc3MiLCJjb29raWVzIiwiY29tcGFyZSIsImNyeXB0byIsImFsZ29yaXRobSIsImNyZWF0ZUhtYWMiLCJ2ZXJpZnkiLCJzYSIsInNiIiwicHNldWRvUmFuZG9tQnl0ZXMiLCJ0aW1pbmdTYWZlRXF1YWwiLCJidWZmZXJFcXVhbCIsInFzIiwiZnJlc2giLCJJUCIsInF1ZXJ5c3RyaW5nIiwiX3F1ZXJ5Y2FjaGUiLCJtZW1vaXplZFVSTCIsImlwcyIsIl9pcCIsImlzSVAiLCJyZXZlcnNlIiwiX2FjY2VwdCIsInJlZmVycmVyIiwicmVmZXJlciIsImxvYWRNb2R1bGUiLCJtb2R1bGVOYW1lIiwiYXZhaWxhYmxlIiwicHJlZmVycmVkQ2hhcnNldHMiLCJwcmVmZXJyZWRFbmNvZGluZ3MiLCJwcmVmZXJyZWRMYW5ndWFnZXMiLCJtZWRpYVR5cGUiLCJwcmVmZXJyZWRNZWRpYVR5cGVzIiwicHJlZmVycmVkQ2hhcnNldCIsInByZWZlcnJlZEVuY29kaW5nIiwicHJlZmVycmVkTGFuZ3VhZ2UiLCJwcmVmZXJyZWRNZWRpYVR5cGUiLCJzaW1wbGVDaGFyc2V0UmVnRXhwIiwicGFyc2VDaGFyc2V0IiwicSIsInNwZWNpZnkiLCJzcGVjIiwicHJvdmlkZWQiLCJwYXJzZUFjY2VwdENoYXJzZXQiLCJpc1F1YWxpdHkiLCJjb21wYXJlU3BlY3MiLCJnZXRGdWxsQ2hhcnNldCIsInByaW9yaXRpZXMiLCJwcmlvcml0eSIsImdldENoYXJzZXRQcmlvcml0eSIsInNpbXBsZUVuY29kaW5nUmVnRXhwIiwicGFyc2VFbmNvZGluZyIsImhhc0lkZW50aXR5IiwibWluUXVhbGl0eSIsInBhcnNlQWNjZXB0RW5jb2RpbmciLCJnZXRGdWxsRW5jb2RpbmciLCJnZXRFbmNvZGluZ1ByaW9yaXR5Iiwic2ltcGxlTGFuZ3VhZ2VSZWdFeHAiLCJwYXJzZUxhbmd1YWdlIiwiZnVsbCIsInBhcnNlQWNjZXB0TGFuZ3VhZ2UiLCJnZXRGdWxsTGFuZ3VhZ2UiLCJnZXRMYW5ndWFnZVByaW9yaXR5Iiwic2ltcGxlTWVkaWFUeXBlUmVnRXhwIiwicGFyc2VBY2NlcHQiLCJxdW90ZUNvdW50Iiwic3BsaXRNZWRpYVR5cGVzIiwicGFyc2VNZWRpYVR5cGUiLCJrdnBzIiwic3BsaXRQYXJhbWV0ZXJzIiwic3BsaXRLZXlWYWx1ZVBhaXIiLCJwYWlyIiwiZXZlcnkiLCJnZXRGdWxsVHlwZSIsImdldE1lZGlhVHlwZVByaW9yaXR5IiwiY291bnQiLCJUWVBFX1JFR0VYUCIsIkNvbnRlbnRUeXBlIiwiVXJsIiwicGFyc2V1cmwiLCJwYXJzZWQiLCJfcGFyc2VkVXJsIiwiZmFzdHBhcnNlIiwiX3JhdyIsIl9wYXJzZWRPcmlnaW5hbFVybCIsIkNBQ0hFX0NPTlRST0xfTk9fQ0FDSEVfUkVHRVhQIiwicGFyc2VIdHRwRGF0ZSIsInRpbWVzdGFtcCIsIk5hTiIsInJlcUhlYWRlcnMiLCJyZXNIZWFkZXJzIiwibW9kaWZpZWRTaW5jZSIsIm5vbmVNYXRjaCIsImNhY2hlQ29udHJvbCIsImV0YWciLCJldGFnU3RhbGUiLCJtYXRjaGVzIiwicGFyc2VUb2tlbkxpc3QiLCJsYXN0TW9kaWZpZWQiLCJjbyIsIm13IiwiY29udmVydGVkIiwiY3JlYXRlR2VuZXJhdG9yIiwiYmFjayIsImNhbGxlZCIsImdlbiIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsInRocm93IiwidG9Qcm9taXNlIiwiaXNQcm9taXNlIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvciIsInRodW5rVG9Qcm9taXNlIiwiYXJyYXlUb1Byb21pc2UiLCJvYmplY3RUb1Byb21pc2UiLCJhbGwiLCJwcm9taXNlcyIsInByb21pc2UiLCJ3cmFwIiwiY3JlYXRlUHJvbWlzZSIsIl9fZ2VuZXJhdG9yRnVuY3Rpb25fXyIsImxvYWRJbXBsZW1lbnRhdGlvbiIsImltcGxlbWVudGF0aW9uIiwiaW1wbCIsImdsb2JhbCIsInNob3VsZFByZWZlckdsb2JhbFByb21pc2UiLCJsaWIiLCJsaWJzIiwidHJ5QXV0b0RldGVjdCIsInJlZ2lzdGVyZWQiLCJyb290IiwicmVnaXN0ZXJHbG9iYWwiLCJ3ZWJwYWNrRW1wdHlDb250ZXh0IiwiaW8iLCJzZXJ2ZUNsaWVudCIsInJlYWRGaWxlU3luYyIsImV4aXN0cyIsImV4aXN0c1N5bmMiLCJlbmdpbmUiLCJjbGllbnRWZXJzaW9uIiwiQ2xpZW50IiwiUGFyZW50TmFtZXNwYWNlIiwiQWRhcHRlciIsIlNlcnZlciIsImNsaWVudFNvdXJjZSIsImNsaWVudFNvdXJjZU1hcCIsInNydiIsIm5zcHMiLCJwYXJlbnROc3BzIiwiZW5jb2RlciIsIm9yaWdpbnMiLCJvZiIsImF0dGFjaCIsImNoZWNrUmVxdWVzdCIsIl9vcmlnaW5zIiwiZXgiLCJfc2VydmVDbGllbnQiLCJyZXNvbHZlUGF0aCIsImZpbGVwYXRoIiwiX19kaXJuYW1lIiwib2xkU2V0dGluZ3MiLCJhdXRob3JpemVkIiwiY2hlY2tOYW1lc3BhY2UiLCJrZXlzSXRlcmF0b3IiLCJuZXh0Rm4iLCJhbGxvdyIsImNyZWF0ZUNoaWxkIiwiX3BhdGgiLCJfYWRhcHRlciIsImFsbG93UmVxdWVzdCIsImluaXRFbmdpbmUiLCJjb25uZWN0UGFja2V0IiwiZW5jb2RlZFBhY2tldCIsImF0dGFjaFNlcnZlIiwiaHR0cFNlcnZlciIsInVybE1hcCIsImV2cyIsInNlcnZlTWFwIiwic2VydmUiLCJleHBlY3RlZEV0YWciLCJvbmNvbm5lY3Rpb24iLCJwYXJlbnROc3AiLCJvbmNsb3NlIiwiYmFzZTY0aWQiLCJjb29raWVNb2QiLCJjbGllbnRzQ291bnQiLCJ3c0VuZ2luZSIsIkVJT19XU19FTkdJTkUiLCJhbGxvd1VwZ3JhZGVzIiwiY29va2llUGF0aCIsImNvb2tpZUh0dHBPbmx5IiwiY29tcHJlc3Npb24iLCJzZW5kRXJyb3JNZXNzYWdlIiwiZXJyb3JNZXNzYWdlcyIsImVycm9ycyIsIkZPUkJJRERFTiIsIlVOS05PV05fVFJBTlNQT1JUIiwiVU5LTk9XTl9TSUQiLCJCQURfSEFORFNIQUtFX01FVEhPRCIsIkJBRF9SRVFVRVNUIiwiMCIsIjEiLCIyIiwiMyIsIjQiLCJ3c01vZHVsZSIsIndzIiwibm9TZXJ2ZXIiLCJjbGllbnRUcmFja2luZyIsInZhbGlkSGRyQ2hhcnMiLCJjaGVja0ludmFsaWRIZWFkZXJDaGFyIiwicHJlcGFyZSIsInN1Y2Nlc3MiLCJoYW5kc2hha2UiLCJnZW5lcmF0ZUlkIiwidHJhbnNwb3J0TmFtZSIsImI2NCIsInNlcmlhbGl6ZSIsImhhbmRsZVVwZ3JhZGUiLCJ1cGdyYWRlSGVhZCIsIm9uV2ViU29ja2V0IiwiYWJvcnRDb25uZWN0aW9uIiwib25VcGdyYWRlRXJyb3IiLCJoYW5kbGVzVXBncmFkZXMiLCJkZXN0cm95VXBncmFkZVRpbWVvdXQiLCJoYW5kbGVQcmVmbGlnaHRSZXF1ZXN0IiwiZGVzdHJveVVwZ3JhZGUiLCJieXRlc1dyaXR0ZW4iLCJCYXNlNjRJZCIsImdldFJhbmRvbUJ5dGVzIiwiYnl0ZXMiLCJieXRlc0luQnVmZmVyIiwiYnl0ZXNCdWZmZXJJbmRleCIsImJ5dGVzQnVmZmVyIiwiaXNHZW5lcmF0aW5nQnl0ZXMiLCJyYW5kIiwid3JpdGVJbnQzMkJFIiwic2VxdWVuY2VOdW1iZXIiLCJyYW5kb20iLCJieXRlQXJyYXkiLCJieXRlQ291bnQiLCJieXRlSW5kZXgiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJ1Y3MyZGVjb2RlIiwiZXh0cmEiLCJjb3VudGVyIiwiY2hlY2tTY2FsYXJWYWx1ZSIsImNvZGVQb2ludCIsImNyZWF0ZUJ5dGUiLCJlbmNvZGVDb2RlUG9pbnQiLCJzeW1ib2wiLCJyZWFkQ29udGludWF0aW9uQnl0ZSIsImNvbnRpbnVhdGlvbkJ5dGUiLCJkZWNvZGVTeW1ib2wiLCJieXRlMSIsImNvZGVQb2ludHMiLCJieXRlU3RyaW5nIiwidG1wIiwiYXJyYXkiLCJ1Y3MyZW5jb2RlIiwiZXJyX2NiIiwiYmFpbCIsInNldEl0ZW0iLCJnZXRJdGVtIiwibXNBYnMiLCJpc1BsdXJhbCIsImlzRmluaXRlIiwiZm10TG9uZyIsImdldERhdGUiLCJyRG91YmxlU2xhc2hlcyIsInJTbGFzaGVzIiwiZm9vdCIsInNsYXNoZXMiLCJqcyIsIm9wdCIsInBhaXJzIiwicGFpclNwbGl0UmVnRXhwIiwiZGVjIiwiZXFfaWR4IiwiZW5jIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiY3JlYXRlV2ViU29ja2V0U3RyZWFtIiwia0RvbmUiLCJrUnVuIiwicGVuZGluZyIsIkluZmluaXR5Iiwiam9icyIsImpvYiIsIkV2ZW50IiwiTWVzc2FnZUV2ZW50IiwiQ2xvc2VFdmVudCIsIndhc0NsZWFuIiwiT3BlbkV2ZW50IiwiRXJyb3JFdmVudCIsIkV2ZW50VGFyZ2V0Iiwib25NZXNzYWdlIiwiRHVwbGV4IiwiZHVwbGV4T25FbmQiLCJkdXBsZXhPbkVycm9yIiwicmVzdW1lT25SZWNlaXZlckRyYWluIiwiZHVwbGV4IiwiYXV0b0Rlc3Ryb3kiLCJvYmplY3RNb2RlIiwid3JpdGFibGVPYmplY3RNb2RlIiwiX2Rlc3Ryb3kiLCJ0ZXJtaW5hdGUiLCJfZmluYWwiLCJfcmVhZGFibGVTdGF0ZSIsImVuZEVtaXR0ZWQiLCJfcmVhZCIsIm5lZWREcmFpbiIsIl93cml0ZSIsImtleVJlZ2V4Iiwia1VzZWRCeVdlYlNvY2tldFNlcnZlciIsImhhbmRsZVByb3RvY29scyIsInZlcmlmeUNsaWVudCIsImJhY2tsb2ciLCJfc2VydmVyIiwiX3JlbW92ZUxpc3RlbmVycyIsImFkZExpc3RlbmVycyIsImxpc3RlbmluZyIsInNob3VsZEhhbmRsZSIsImluZm8iLCJ2ZXJpZmllZCIsImNvbXBsZXRlVXBncmFkZSIsImRlbGV0ZSIsImRlY29kZXIiLCJzZXR1cCIsImNvbm5lY3RCdWZmZXIiLCJvbmRhdGEiLCJvbmRlY29kZWQiLCJkb0Nvbm5lY3QiLCJkeW5hbWljTnNwIiwiZGlzY29ubmVjdCIsIndyaXRlVG9FbmdpbmUiLCJlbmNvZGVkUGFja2V0cyIsInZvbGF0aWxlIiwicHJlRW5jb2RlZCIsIm9ucGFja2V0IiwibWl4aW4iLCJfY2FsbGJhY2tzIiwib2ZmIiwiY2FsbGJhY2tzIiwiaGFzTGlzdGVuZXJzIiwicGFja2V0RGF0YSIsIl9kZWNvbnN0cnVjdFBhY2tldCIsInBsYWNlaG9sZGVyIiwiX3BsYWNlaG9sZGVyIiwibmV3RGF0YSIsIl9yZWNvbnN0cnVjdFBhY2tldCIsInBlbmRpbmdCbG9icyIsIl9yZW1vdmVCbG9icyIsImN1cktleSIsImNvbnRhaW5pbmdPYmplY3QiLCJmaWxlUmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsInJlYWRBc0FycmF5QnVmZmVyIiwiYWNrcyIsImRpc2Nvbm5lY3RlZCIsImJ1aWxkSGFuZHNoYWtlIiwiX3Jvb21zIiwicmVxdWVzdFF1ZXJ5IiwidGltZSIsInhkb21haW4iLCJpc3N1ZWQiLCJwb3AiLCJleGNlcHQiLCJyb29tIiwiYWRkQWxsIiwibGVhdmUiLCJkZWwiLCJsZWF2ZUFsbCIsImRlbEFsbCIsIm9uZXZlbnQiLCJvbmFjayIsIm9uZGlzY29ubmVjdCIsImFjayIsInNlbnQiLCJjaGlsZHJlbiIsInNpZHMiLCJSb29tIiwicGFja2V0T3B0cyIsImNsaWVudFJvb21zIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJ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RyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQzdDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQzdDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQzdDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQzdDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQzdDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQzdDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQzdDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQzdDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQzdDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQzdDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQzdDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEk7Ozs7QUM5aEIvQyxJQUFJL00sRUFBUyxFQUFRLEdBTWpCa08sRUFBVyxhQVFmQSxFQUFTejBDLFVBQVUwMEMsZUFBaUIsU0FBU0MsR0FFM0MsSUFDSXA5QixFQUFPL0wsS0FJWCxJQUZBbXBDLEVBQVFBLEdBQVMsSUFIQyxLQU1oQixPQUFPcE8sRUFBT3ZlLFlBQVkyc0IsR0FHNUIsSUFBSUMsRUFBZ0I5eEMsU0FURixLQVN1QjZ4QyxHQUNyQ3RvQyxFQUFZdkosU0FBdUIsSUFBZDh4QyxHQUV6QixJQUFLdm9DLEVBQ0gsT0FBT2s2QixFQUFPdmUsWUFBWTJzQixHQWE1QixHQVY2QixNQUF6Qm5wQyxLQUFLcXBDLG1CQUNOcnBDLEtBQUtxcEMsa0JBQW9CLEdBR3hCcnBDLEtBQUtxcEMsa0JBQW9CRCxJQUMzQnBwQyxLQUFLc3BDLFlBQWMsS0FDbkJ0cEMsS0FBS3FwQyxrQkFBb0IsS0FJRyxHQUExQnJwQyxLQUFLcXBDLGtCQUEwQnJwQyxLQUFLcXBDLGlCQUFtQnhvQyxLQUVwRGIsS0FBS3VwQyxvQkFDUnZwQyxLQUFLdXBDLG1CQUFvQixFQUN6QnhPLEVBQU92ZSxZQTlCTyxNQThCa0IsU0FBUzloQixFQUFLeXVDLEdBQzVDcDlCLEVBQUt1OUIsWUFBY0gsRUFDbkJwOUIsRUFBS3M5QixpQkFBbUIsRUFDeEJ0OUIsRUFBS3c5QixtQkFBb0IsT0FLQyxHQUExQnZwQyxLQUFLcXBDLGtCQUNQLE9BQU90TyxFQUFPdmUsWUFBWTJzQixHQUk5QixJQUFJM3RDLEVBQVN3RSxLQUFLc3BDLFlBQVlsckMsTUFBTStxQyxFQUFNbnBDLEtBQUtxcEMsaUJBQWtCRixHQUFPbnBDLEtBQUtxcEMsaUJBQWlCLElBRzlGLE9BRkFycEMsS0FBS3FwQyxtQkFFRTd0QyxHQVNUeXRDLEVBQVN6MEMsVUFBVTJ6QyxXQUFhLFdBQzlCLElBQUlxQixFQUFPdDBDLE9BQU9DLE1BQU0sSUFDeEIsT0FBS3EwQyxFQUFLQyxjQUlWenBDLEtBQUswcEMsZUFBa0IxcEMsS0FBSzBwQyxlQUFpQixFQUFLLEVBQ2xERixFQUFLQyxhQUFhenBDLEtBQUswcEMsZUFBZ0IsSUFDbkMzTyxFQUFPdmUsWUFDVHhjLEtBQUtrcEMsZUFBZSxJQUFJelEsS0FBSytRLEdBRzdCLENBQUMsRUFBRyxFQUFHLEdBQUc5d0MsU0FBUSxTQUFTOUYsR0FDekI0MkMsRUFBS0MsYUFBYTd4QyxLQUFLK3hDLFNBQVcveEMsS0FBS2l0QixJQUFJLEVBQUcsSUFBTSxFQUFHanlCLE1BR3BENDJDLEVBQUtqc0MsU0FBUyxVQUFVaVAsUUFBUSxNQUFPLEtBQUtBLFFBQVEsTUFBTyxNQWJ6RDVVLEtBQUsyVixJQUFJM1YsS0FBSyt4QyxTQUFXL3hDLEtBQUsreEMsU0FBVzE5QixLQUFLb25CLE1BQVEsR0FBRzkxQixXQUM1RDNGLEtBQUsyVixJQUFJM1YsS0FBSyt4QyxTQUFXL3hDLEtBQUsreEMsU0FBVzE5QixLQUFLb25CLE1BQVEsR0FBRzkxQixZQW1CdkQ1SyxFQUFPRCxRQUFVLElBQUl1MkMsRyxnQkNqRy9CLElBQUk5eEIsRUFBVSxFQUFRLElBQ2xCNU0sRUFBTyxFQUFRLEdBY25CLFNBQVNnTSxFQUFLOUwsR0FDWjBNLEVBQVFwa0IsS0FBS2lOLEtBQU15SyxHQVRyQjlYLEVBQU9ELFFBQVU2akIsRUFnQmpCaE0sRUFBSzdCLFNBQVM2TixFQUFLWSxHQVNuQlosRUFBSS9oQixVQUFVcVcsVUFBWSxTQUFVSixHQUNsQyxHQUFJLFlBQWNBLEVBQUk4TSxPQUFRLENBQzVCLElBQUlsSSxFQUFNNUUsRUFBSTRFLElBQ1ZpQixFQUFVdFEsS0FBS3NRLFFBQVE3RixHQUMzQjZGLEVBQVEsZ0NBQWtDLGVBQzFDakIsRUFBSXFJLFVBQVUsSUFBS3BILEdBQ25CakIsRUFBSXNJLFdBRUpSLEVBQVEzaUIsVUFBVXFXLFVBQVU5WCxLQUFLaU4sS0FBTXlLLElBWTNDOEwsRUFBSS9oQixVQUFVOGIsUUFBVSxTQUFVN0YsRUFBSzZGLEdBVXJDLE9BVEFBLEVBQVVBLEdBQVcsR0FFakI3RixFQUFJNkYsUUFBUXlQLFFBQ2R6UCxFQUFRLG9DQUFzQyxPQUM5Q0EsRUFBUSwrQkFBaUM3RixFQUFJNkYsUUFBUXlQLFFBRXJEelAsRUFBUSwrQkFBaUMsSUFHcEM2RyxFQUFRM2lCLFVBQVU4YixRQUFRdmQsS0FBS2lOLEtBQU15SyxFQUFLNkYsSzs7QUNqRW5ELElBeUxJczVCLEVBQ0FDLEVBQ0FDLEVBM0xBQyxFQUFxQi90QyxPQUFPQyxhQUdoQyxTQUFTK3RDLEVBQVc3dEMsR0FNbkIsSUFMQSxJQUdJdEksRUFDQW8yQyxFQUpBcm1DLEVBQVMsR0FDVHNtQyxFQUFVLEVBQ1Z2eUMsRUFBU3dFLEVBQU94RSxPQUdidXlDLEVBQVV2eUMsSUFDaEI5RCxFQUFRc0ksRUFBT0csV0FBVzR0QyxPQUNiLE9BQVVyMkMsR0FBUyxPQUFVcTJDLEVBQVV2eUMsRUFHM0IsUUFBWCxPQURic3lDLEVBQVE5dEMsRUFBT0csV0FBVzR0QyxPQUV6QnRtQyxFQUFPaEwsT0FBZSxLQUFSL0UsSUFBa0IsS0FBZSxLQUFSbzJDLEdBQWlCLFFBSXhEcm1DLEVBQU9oTCxLQUFLL0UsR0FDWnEyQyxLQUdEdG1DLEVBQU9oTCxLQUFLL0UsR0FHZCxPQUFPK1AsRUFxQlIsU0FBU3VtQyxFQUFpQkMsRUFBVzlzQyxHQUNwQyxHQUFJOHNDLEdBQWEsT0FBVUEsR0FBYSxNQUFRLENBQy9DLEdBQUk5c0MsRUFDSCxNQUFNcEYsTUFDTCxvQkFBc0JreUMsRUFBVTdzQyxTQUFTLElBQUk0d0IsY0FDN0MsMEJBR0YsT0FBTyxFQUVSLE9BQU8sRUFJUixTQUFTa2MsRUFBV0QsRUFBVzN1QixHQUM5QixPQUFPc3VCLEVBQXFCSyxHQUFhM3VCLEVBQVMsR0FBUSxLQUczRCxTQUFTNnVCLEVBQWdCRixFQUFXOXNDLEdBQ25DLEdBQWdDLElBQWYsV0FBWjhzQyxHQUNKLE9BQU9MLEVBQW1CSyxHQUUzQixJQUFJRyxFQUFTLEdBaUJiLE9BaEJnQyxJQUFmLFdBQVpILEdBQ0pHLEVBQVNSLEVBQXFCSyxHQUFhLEVBQUssR0FBUSxLQUVwQixJQUFmLFdBQVpBLElBQ0pELEVBQWlCQyxFQUFXOXNDLEtBQ2hDOHNDLEVBQVksT0FFYkcsRUFBU1IsRUFBcUJLLEdBQWEsR0FBTSxHQUFRLEtBQ3pERyxHQUFVRixFQUFXRCxFQUFXLElBRUksSUFBZixXQUFaQSxLQUNURyxFQUFTUixFQUFxQkssR0FBYSxHQUFNLEVBQVEsS0FDekRHLEdBQVVGLEVBQVdELEVBQVcsSUFDaENHLEdBQVVGLEVBQVdELEVBQVcsSUFFakNHLEdBQVVSLEVBQWdDLEdBQVpLLEVBQW9CLEtBc0JuRCxTQUFTSSxJQUNSLEdBQUlWLEdBQWFELEVBQ2hCLE1BQU0zeEMsTUFBTSxzQkFHYixJQUFJdXlDLEVBQTBDLElBQXZCYixFQUFVRSxHQUdqQyxHQUZBQSxJQUVpQyxNQUFULElBQW5CVyxHQUNKLE9BQTBCLEdBQW5CQSxFQUlSLE1BQU12eUMsTUFBTSw2QkFHYixTQUFTd3lDLEVBQWFwdEMsR0FDckIsSUFBSXF0QyxFQUlBUCxFQUVKLEdBQUlOLEVBQVlELEVBQ2YsTUFBTTN4QyxNQUFNLHNCQUdiLEdBQUk0eEMsR0FBYUQsRUFDaEIsT0FBTyxFQVFSLEdBSkFjLEVBQStCLElBQXZCZixFQUFVRSxHQUNsQkEsSUFHc0IsSUFBVCxJQUFSYSxHQUNKLE9BQU9BLEVBSVIsR0FBc0IsTUFBVCxJQUFSQSxHQUF1QixDQUczQixJQURBUCxHQUFzQixHQUFSTyxJQUFpQixFQUR2QkgsTUFFUyxJQUNoQixPQUFPSixFQUVQLE1BQU1seUMsTUFBTSw2QkFLZCxHQUFzQixNQUFULElBQVJ5eUMsR0FBdUIsQ0FJM0IsSUFEQVAsR0FBc0IsR0FBUk8sSUFBaUIsR0FGdkJILEtBRXVDLEVBRHZDQSxNQUVTLEtBQ2hCLE9BQU9MLEVBQWlCQyxFQUFXOXNDLEdBQVU4c0MsRUFBWSxNQUV6RCxNQUFNbHlDLE1BQU0sNkJBS2QsR0FBc0IsTUFBVCxJQUFSeXlDLEtBSUpQLEdBQXNCLEVBQVJPLElBQWlCLEdBSHZCSCxLQUd5QyxHQUZ6Q0EsS0FHRyxFQUZIQSxNQUdTLE9BQVlKLEdBQWEsUUFDekMsT0FBT0EsRUFJVCxNQUFNbHlDLE1BQU0sMEJBcUJidkYsRUFBT0QsUUFBVSxDQUNoQjJFLFFBQVMsUUFDVGdHLE9BcEhELFNBQW9CbEIsRUFBUTZGLEdBUzNCLElBUEEsSUFBSTFFLEdBQVMsS0FEYjBFLEVBQU9BLEdBQVEsSUFDYTFFLE9BRXhCc3RDLEVBQWFaLEVBQVc3dEMsR0FDeEJ4RSxFQUFTaXpDLEVBQVdqekMsT0FDcEI0VSxHQUFTLEVBRVRzK0IsRUFBYSxLQUNSdCtCLEVBQVE1VSxHQUVoQmt6QyxHQUFjUCxFQURGTSxFQUFXcitCLEdBQ2tCalAsR0FFMUMsT0FBT3V0QyxHQXdHUC9zQyxPQWxCRCxTQUFvQitzQyxFQUFZN29DLEdBRS9CLElBQUkxRSxHQUFTLEtBRGIwRSxFQUFPQSxHQUFRLElBQ2ExRSxPQUU1QnNzQyxFQUFZSSxFQUFXYSxHQUN2QmhCLEVBQVlELEVBQVVqeUMsT0FDdEJteUMsRUFBWSxFQUdaLElBRkEsSUFDSWdCLEVBREFGLEVBQWEsSUFFdUIsS0FBaENFLEVBQU1KLEVBQWFwdEMsS0FDMUJzdEMsRUFBV2h5QyxLQUFLa3lDLEdBRWpCLE9BMUtELFNBQW9CQyxHQUtuQixJQUpBLElBRUlsM0MsRUFGQThELEVBQVNvekMsRUFBTXB6QyxPQUNmNFUsR0FBUyxFQUVUM0ksRUFBUyxLQUNKMkksRUFBUTVVLElBQ2hCOUQsRUFBUWszQyxFQUFNeCtCLElBQ0YsUUFFWDNJLEdBQVVtbUMsR0FEVmwyQyxHQUFTLFNBQzhCLEdBQUssS0FBUSxPQUNwREEsRUFBUSxNQUFpQixLQUFSQSxHQUVsQitQLEdBQVVtbUMsRUFBbUJsMkMsR0FFOUIsT0FBTytQLEVBNEpBb25DLENBQVdKLE0sY0MxTW5CLElBQUlydEMsRUFBVyxHQUFHQSxTQUVsQjVLLEVBQU9ELFFBQVUrSSxNQUFNaUosU0FBVyxTQUFVbE0sR0FDMUMsTUFBNkIsa0JBQXRCK0UsRUFBU3hLLEtBQUt5RixLLGNDd0J2QixTQUFTZ0MsS0EzQlQ3SCxFQUFPRCxRQUVQLFNBQWU2c0MsRUFBT3ZrQyxFQUFVaXdDLEdBQzVCLElBQUlDLEdBQU8sRUFJWCxPQUhBRCxFQUFTQSxHQUFVendDLEVBQ25CeXZCLEVBQU1zVixNQUFRQSxFQUVJLElBQVZBLEVBQWV2a0MsSUFBYWl2QixFQUVwQyxTQUFTQSxFQUFNdnZCLEVBQUtjLEdBQ2hCLEdBQUl5dUIsRUFBTXNWLE9BQVMsRUFDZixNQUFNLElBQUlybkMsTUFBTSxpQ0FFbEIreEIsRUFBTXNWLE1BR0o3a0MsR0FDQXd3QyxHQUFPLEVBQ1Bsd0MsRUFBU04sR0FFVE0sRUFBV2l3QyxHQUNZLElBQWhCaGhCLEVBQU1zVixPQUFnQjJMLEdBQzdCbHdDLEVBQVMsS0FBTVEsTSxjQ2QzQjdJLEVBQU9ELFFBQVVZLE9BQU9tRixNQUFRLFNBQWUrTSxHQUM3QyxJQUFJaE4sRUFBTSxHQUNOd3lCLEVBQU0xM0IsT0FBT2tCLFVBQVVDLGVBRTNCLElBQUssSUFBSTdCLEtBQUs0UyxFQUNSd2xCLEVBQUlqNEIsS0FBS3lTLEVBQUs1UyxJQUNoQjRGLEVBQUlJLEtBQUtoRyxHQUdiLE9BQU80RixJLGdCQ1hUOUYsRUFBUXNhLElBMktSLFlBQWdCWCxHQUdmLE1BQTBCLGlCQUFaWSxTQUNiQSxRQUFRRCxLQUNSQyxRQUFRRCxPQUFPWCxJQS9LakIzWixFQUFRb2EsV0FpSVIsU0FBb0JULEdBUW5CLEdBUEFBLEVBQUssSUFBTXJNLEtBQUttTixVQUFZLEtBQU8sSUFDbENuTixLQUFLNEwsV0FDSjVMLEtBQUttTixVQUFZLE1BQVEsS0FDMUJkLEVBQUssSUFDSnJNLEtBQUttTixVQUFZLE1BQVEsS0FDMUIsSUFBTXhhLEVBQU9ELFFBQVEyYixTQUFTck8sS0FBS21NLE9BRS9Cbk0sS0FBS21OLFVBQ1QsT0FHRCxNQUFNbGEsRUFBSSxVQUFZK00sS0FBS29OLE1BQzNCZixFQUFLUSxPQUFPLEVBQUcsRUFBRzVaLEVBQUcsa0JBS3JCLElBQUlzWixFQUFRLEVBQ1I0ZixFQUFRLEVBQ1o5ZixFQUFLLEdBQUdHLFFBQVEsY0FBZTdFLElBQ2hCLE9BQVZBLElBR0o0RSxJQUNjLE9BQVY1RSxJQUdId2tCLEVBQVE1ZixNQUlWRixFQUFLUSxPQUFPc2YsRUFBTyxFQUFHbDVCLElBaEt2QlAsRUFBUXFiLEtBdUxSLFNBQWNELEdBQ2IsSUFDS0EsRUFDSHBiLEVBQVF1NUIsUUFBUWtmLFFBQVEsUUFBU3I5QixHQUVqQ3BiLEVBQVF1NUIsUUFBUUcsV0FBVyxTQUUzQixNQUFPendCLE1BN0xWakosRUFBUTJtQixLQXlNUixXQUNDLElBQUkzbEIsRUFDSixJQUNDQSxFQUFJaEIsRUFBUXU1QixRQUFRbWYsUUFBUSxTQUMzQixNQUFPenZDLEtBTUpqSSxHQUF3QixvQkFBWjJCLFNBQTJCLFFBQVNBLFVBQ3BEM0IsRUFBSTJCLFFBQVFNLElBQUl1MkIsT0FHakIsT0FBT3g0QixHQXROUmhCLEVBQVF5YSxVQStGUixXQUlDLEdBQXNCLG9CQUFYa2YsUUFBMEJBLE9BQU9oM0IsVUFBb0MsYUFBeEJnM0IsT0FBT2gzQixRQUFRQyxNQUF1QisyQixPQUFPaDNCLFFBQVFHLFFBQzVHLE9BQU8sRUFJUixHQUF5QixvQkFBZDgyQixXQUE2QkEsVUFBVUMsV0FBYUQsVUFBVUMsVUFBVWwwQixjQUFjc1AsTUFBTSx5QkFDdEcsT0FBTyxFQUtSLE1BQTRCLG9CQUFiNmtCLFVBQTRCQSxTQUFTQyxpQkFBbUJELFNBQVNDLGdCQUFnQkMsT0FBU0YsU0FBU0MsZ0JBQWdCQyxNQUFNQyxrQkFFcEgsb0JBQVhOLFFBQTBCQSxPQUFPcGYsVUFBWW9mLE9BQU9wZixRQUFRMmYsU0FBWVAsT0FBT3BmLFFBQVE0ZixXQUFhUixPQUFPcGYsUUFBUTZmLFFBR3JHLG9CQUFkUixXQUE2QkEsVUFBVUMsV0FBYUQsVUFBVUMsVUFBVWwwQixjQUFjc1AsTUFBTSxtQkFBcUJyUSxTQUFTNlcsT0FBTzRlLEdBQUksS0FBTyxJQUU5SCxvQkFBZFQsV0FBNkJBLFVBQVVDLFdBQWFELFVBQVVDLFVBQVVsMEIsY0FBY3NQLE1BQU0sdUJBcEh0R2pWLEVBQVF1NUIsUUFtT1IsV0FDQyxJQUdDLE9BQU9pQixhQUNOLE1BQU92eEIsS0F4T1F3eEIsR0FNbEJ6NkIsRUFBUTRhLE9BQVMsQ0FDaEIsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsV0E0SkQzYSxFQUFPRCxRQUFVLEVBQVEsR0FBUixDQUFvQkEsR0FFckMsTUFBTSxXQUFDaWEsR0FBY2hhLEVBQU9ELFFBTTVCaWEsRUFBV2dLLEVBQUksU0FBVXNRLEdBQ3hCLElBQ0MsT0FBT3BoQixLQUFLQyxVQUFVbWhCLEdBQ3JCLE1BQU90ckIsR0FDUixNQUFPLCtCQUFpQ0EsRUFBTWhELFcsY0NqUWhELElBQUloRSxFQUFJLElBQ0ozQixFQUFJMkIsSUFDSnk0QixFQUFJcDZCLEtBQ0pFLEVBQVEsR0FBSms2QixFQXVKUixTQUFTQyxFQUFPbmhCLEVBQUltL0IsRUFBT2gzQyxFQUFHbEIsR0FDNUIsSUFBSW00QyxFQUFXRCxHQUFhLElBQUpoM0MsRUFDeEIsT0FBT3VELEtBQUs4MUIsTUFBTXhoQixFQUFLN1gsR0FBSyxJQUFNbEIsR0FBUW00QyxFQUFXLElBQU0sSUF2STdEMzRDLEVBQU9ELFFBQVUsU0FBU2thLEVBQUtwTSxHQUM3QkEsRUFBVUEsR0FBVyxHQUNyQixJQUFJbEwsU0FBY3NYLEVBQ2xCLEdBQWEsV0FBVHRYLEdBQXFCc1gsRUFBSWpWLE9BQVMsRUFDcEMsT0FrQkosU0FBZW9FLEdBRWIsSUFEQUEsRUFBTUMsT0FBT0QsSUFDTHBFLE9BQVMsSUFDZixPQUVGLElBQUlnUSxFQUFRLG1JQUFtSUMsS0FDN0k3TCxHQUVGLElBQUs0TCxFQUNILE9BRUYsSUFBSXRULEVBQUltNUIsV0FBVzdsQixFQUFNLElBRXpCLFFBRFlBLEVBQU0sSUFBTSxNQUFNdFAsZUFFNUIsSUFBSyxRQUNMLElBQUssT0FDTCxJQUFLLE1BQ0wsSUFBSyxLQUNMLElBQUssSUFDSCxPQXpERW5GLFNBeURLbUIsRUFDVCxJQUFLLFFBQ0wsSUFBSyxPQUNMLElBQUssSUFDSCxPQTlERW5CLE9BOERLbUIsRUFDVCxJQUFLLE9BQ0wsSUFBSyxNQUNMLElBQUssSUFDSCxPQUFPQSxFQUFJbkIsRUFDYixJQUFLLFFBQ0wsSUFBSyxPQUNMLElBQUssTUFDTCxJQUFLLEtBQ0wsSUFBSyxJQUNILE9BQU9tQixFQUFJKzRCLEVBQ2IsSUFBSyxVQUNMLElBQUssU0FDTCxJQUFLLE9BQ0wsSUFBSyxNQUNMLElBQUssSUFDSCxPQUFPLzRCLEVBQUlyQixFQUNiLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxPQUNMLElBQUssTUFDTCxJQUFLLElBQ0gsT0FBT3FCLEVBQUlNLEVBQ2IsSUFBSyxlQUNMLElBQUssY0FDTCxJQUFLLFFBQ0wsSUFBSyxPQUNMLElBQUssS0FDSCxPQUFPTixFQUNULFFBQ0UsUUF2RUtxUyxDQUFNa0csR0FDUixHQUFhLFdBQVR0WCxHQUFxQmkyQyxTQUFTMytCLEdBQ3ZDLE9BQU9wTSxFQUFRaXRCLEtBMEduQixTQUFpQnZoQixHQUNmLElBQUltL0IsRUFBUXp6QyxLQUFLMlYsSUFBSXJCLEdBQ3JCLEdBQUltL0IsR0FBU240QyxFQUNYLE9BQU9tNkIsRUFBT25oQixFQUFJbS9CLEVBQU9uNEMsRUFBRyxPQUU5QixHQUFJbTRDLEdBQVNqZSxFQUNYLE9BQU9DLEVBQU9uaEIsRUFBSW0vQixFQUFPamUsRUFBRyxRQUU5QixHQUFJaWUsR0FBU3I0QyxFQUNYLE9BQU9xNkIsRUFBT25oQixFQUFJbS9CLEVBQU9yNEMsRUFBRyxVQUU5QixHQUFJcTRDLEdBQVMxMkMsRUFDWCxPQUFPMDRCLEVBQU9uaEIsRUFBSW0vQixFQUFPMTJDLEVBQUcsVUFFOUIsT0FBT3VYLEVBQUssTUF4SFlzL0IsQ0FBUTUrQixHQWlGbEMsU0FBa0JWLEdBQ2hCLElBQUltL0IsRUFBUXp6QyxLQUFLMlYsSUFBSXJCLEdBQ3JCLEdBQUltL0IsR0FBU240QyxFQUNYLE9BQU8wRSxLQUFLODFCLE1BQU14aEIsRUFBS2haLEdBQUssSUFFOUIsR0FBSW00QyxHQUFTamUsRUFDWCxPQUFPeDFCLEtBQUs4MUIsTUFBTXhoQixFQUFLa2hCLEdBQUssSUFFOUIsR0FBSWllLEdBQVNyNEMsRUFDWCxPQUFPNEUsS0FBSzgxQixNQUFNeGhCLEVBQUtsWixHQUFLLElBRTlCLEdBQUlxNEMsR0FBUzEyQyxFQUNYLE9BQU9pRCxLQUFLODFCLE1BQU14aEIsRUFBS3ZYLEdBQUssSUFFOUIsT0FBT3VYLEVBQUssS0EvRjJCeWhCLENBQVMvZ0IsR0FFaEQsTUFBTSxJQUFJMVUsTUFDUix3REFDRTJOLEtBQUtDLFVBQVU4RyxNLGdCQy9CckIsTUFBTWdoQixFQUFNLEVBQVEsR0FDZHJqQixFQUFPLEVBQVEsR0FNckI3WCxFQUFRK2EsS0F1TlIsU0FBY2xKLEdBQ2JBLEVBQU1zcEIsWUFBYyxHQUVwQixNQUFNcDFCLEVBQU9uRixPQUFPbUYsS0FBSy9GLEVBQVFtN0IsYUFDakMsSUFBSyxJQUFJajdCLEVBQUksRUFBR0EsRUFBSTZGLEVBQUtkLE9BQVEvRSxJQUNoQzJSLEVBQU1zcEIsWUFBWXAxQixFQUFLN0YsSUFBTUYsRUFBUW03QixZQUFZcDFCLEVBQUs3RixLQTNOeERGLEVBQVFzYSxJQWdMUixZQUFnQlgsR0FDZixPQUFPaFgsUUFBUXlDLE9BQU9rTCxNQUFNdUgsRUFBS2tDLFVBQVVKLEdBQVEsT0FoTHBEM1osRUFBUW9hLFdBcUpSLFNBQW9CVCxHQUNuQixNQUFPVCxVQUFXelksRUFBSSxVQUFFZ2EsR0FBYW5OLEtBRXJDLEdBQUltTixFQUFXLENBQ2QsTUFBTWxhLEVBQUkrTSxLQUFLb04sTUFDVDBnQixFQUFZLE9BQWM3NkIsRUFBSSxFQUFJQSxFQUFJLE9BQVNBLEdBQy9DbXdCLEVBQVMsS0FBSzBLLE9BQWUzNkIsU0FFbkNrWixFQUFLLEdBQUsrVyxFQUFTL1csRUFBSyxHQUFHMVYsTUFBTSxNQUFNK0gsS0FBSyxLQUFPMGtCLEdBQ25EL1csRUFBS3pULEtBQUtrMUIsRUFBWSxLQUFPbjdCLEVBQU9ELFFBQVEyYixTQUFTck8sS0FBS21NLE1BQVEsYUFFbEVFLEVBQUssR0FJUCxXQUNDLEdBQUkzWixFQUFRbTdCLFlBQVlFLFNBQ3ZCLE1BQU8sR0FFUixPQUFPLElBQUk5aEIsTUFBTytoQixjQUFnQixJQVJ2QnlkLEdBQVl0NEMsRUFBTyxJQUFNa1osRUFBSyxJQS9KMUMzWixFQUFRcWIsS0F3TFIsU0FBY0QsR0FDVEEsRUFDSHpZLFFBQVFNLElBQUl1MkIsTUFBUXBlLFNBSWJ6WSxRQUFRTSxJQUFJdTJCLE9BN0xyQng1QixFQUFRMm1CLEtBd01SLFdBQ0MsT0FBT2hrQixRQUFRTSxJQUFJdTJCLE9BeE1wQng1QixFQUFReWEsVUFzSVIsV0FDQyxNQUFPLFdBQVl6YSxFQUFRbTdCLFlBQzFCamUsUUFBUWxkLEVBQVFtN0IsWUFBWXZnQixRQUM1QnNnQixFQUFJSyxPQUFPNTRCLFFBQVF5QyxPQUFPbzJCLEtBbkk1Qng3QixFQUFRNGEsT0FBUyxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUVqQyxJQUdDLE1BQU03VixFQUFnQixFQUFRLElBRTFCQSxJQUFrQkEsRUFBY0ssUUFBVUwsR0FBZTFCLE9BQVMsSUFDckVyRCxFQUFRNGEsT0FBUyxDQUNoQixHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxNQUdELE1BQU8zUixJQVVUakosRUFBUW03QixZQUFjdjZCLE9BQU9tRixLQUFLcEQsUUFBUU0sS0FBS2tnQixPQUFPMWhCLEdBQzlDLFdBQVcrQyxLQUFLL0MsSUFDckJtVSxPQUFPLENBQUM5QyxFQUFLclIsS0FFZixNQUFNcWQsRUFBT3JkLEVBQ1g4SixVQUFVLEdBQ1Y1RixjQUNBbVUsUUFBUSxZQUFhLENBQUM4WixFQUFHUyxJQUNsQkEsRUFBRW9ILGVBSVgsSUFBSXZoQixFQUFNdlgsUUFBUU0sSUFBSXhCLEdBWXRCLE9BVkN5WSxJQURHLDJCQUEyQjFWLEtBQUswVixLQUV6Qiw2QkFBNkIxVixLQUFLMFYsS0FFMUIsU0FBUkEsRUFDSixLQUVBaFcsT0FBT2dXLElBR2RwSCxFQUFJZ00sR0FBUTVFLEVBQ0xwSCxHQUNMLElBMkZIN1MsRUFBT0QsUUFBVSxFQUFRLEdBQVIsQ0FBb0JBLEdBRXJDLE1BQU0sV0FBQ2lhLEdBQWNoYSxFQUFPRCxRQU01QmlhLEVBQVd0WixFQUFJLFNBQVU0ekIsR0FFeEIsT0FEQWpuQixLQUFLNnRCLFlBQVl2Z0IsT0FBU3ROLEtBQUttTixVQUN4QjVDLEVBQUsrZixRQUFRckQsRUFBR2puQixLQUFLNnRCLGFBQzFCcmhCLFFBQVEsWUFBYSxNQU94QkcsRUFBVzBoQixFQUFJLFNBQVVwSCxHQUV4QixPQURBam5CLEtBQUs2dEIsWUFBWXZnQixPQUFTdE4sS0FBS21OLFVBQ3hCNUMsRUFBSytmLFFBQVFyRCxFQUFHam5CLEtBQUs2dEIsZSxnQkMxUDdCLElBQUkxVyxFQUFVLEVBQVEsSUFDbEJxa0IsRUFBSyxFQUFRLElBQ2JrUSxFQUFpQixTQUNqQkMsRUFBVyxZQUNYcGhDLEVBQU8sRUFBUSxHQWNuQixTQUFTaU0sRUFBTy9MLEdBQ2QwTSxFQUFRcGtCLEtBQUtpTixLQUFNeUssR0FFbkJ6SyxLQUFLNGdCLEtBQU8sV0FBYW5XLEVBQUlpTSxPQUFPQyxHQUFLLElBQUluSyxRQUFRLFVBQVcsSUFBTSxLQUN0RXhNLEtBQUs0ckMsS0FBTyxLQVpkajVDLEVBQU9ELFFBQVU4akIsRUFtQmpCak0sRUFBSzdCLFNBQVM4TixFQUFPVyxHQVNyQlgsRUFBTWhpQixVQUFVNFcsT0FBUyxTQUFVelEsR0FJN0IsaUJBREpBLEVBQU82Z0MsRUFBRzkwQixNQUFNL0wsR0FBTXpILEtBSXBCeUgsRUFBT0EsRUFBSzZSLFFBQVFtL0IsR0FBVSxTQUFVaGtDLEVBQU9ra0MsR0FDN0MsT0FBT0EsRUFBVWxrQyxFQUFRLFFBRTNCd1AsRUFBUTNpQixVQUFVNFcsT0FBT3JZLEtBQUtpTixLQUFNckYsRUFBSzZSLFFBQVFrL0IsRUFBZ0IsVUFVckVsMUIsRUFBTWhpQixVQUFVZ2tCLFFBQVUsU0FBVTdkLEVBQU02RixFQUFTeEYsR0FHakQsSUFBSTh3QyxFQUFLam1DLEtBQUtDLFVBQVVuTCxHQUNyQjZSLFFBQVEsVUFBVyxXQUNuQkEsUUFBUSxVQUFXLFdBR3RCN1IsRUFBT3FGLEtBQUs0Z0IsS0FBT2tyQixFQUFLOXJDLEtBQUs0ckMsS0FFN0J6MEIsRUFBUTNpQixVQUFVZ2tCLFFBQVF6bEIsS0FBS2lOLEtBQU1yRixFQUFNNkYsRUFBU3hGLEssZ0JDcEV0RCxJQUFJd1AsRUFBWSxFQUFRLElBQ3BCRixFQUFTLEVBQVEsSUFDakJDLEVBQU8sRUFBUSxHQUNmaEcsRUFBUSxFQUFRLEVBQVIsQ0FBaUIsYUFlN0IsU0FBUzJZLEVBQVd6UyxHQUNsQkQsRUFBVXpYLEtBQUtpTixLQUFNeUssR0FDckIsSUFBSXNCLEVBQU8vTCxLQUNYQSxLQUFLbVAsT0FBUzFFLEVBQUltTSxVQUNsQjVXLEtBQUttUCxPQUFPcE0sR0FBRyxVQUFXL0MsS0FBS29MLE9BQU9oWCxLQUFLNEwsT0FDM0NBLEtBQUttUCxPQUFPNEwsS0FBSyxRQUFTL2EsS0FBS3FMLFFBQVFqWCxLQUFLNEwsT0FDNUNBLEtBQUttUCxPQUFPcE0sR0FBRyxRQUFTL0MsS0FBS2dMLFFBQVE1VyxLQUFLNEwsT0FDMUNBLEtBQUttUCxPQUFPcE0sR0FBRyxXQUlmLFNBQW9CdU4sR0FDbEJ2RSxFQUFLbEYsS0FBSyxVQUFXeUosTUFKdkJ0USxLQUFLOEosVUFBVyxFQUNoQjlKLEtBQUtvZSxrQkFBb0IsS0FsQjNCenJCLEVBQU9ELFFBQVV3cUIsRUE2QmpCM1MsRUFBSzdCLFNBQVN3VSxFQUFXMVMsR0FRekIwUyxFQUFVMW9CLFVBQVVyQixLQUFPLFlBUTNCK3BCLEVBQVUxb0IsVUFBVW8wQyxpQkFBa0IsRUFRdEMxckIsRUFBVTFvQixVQUFVc25CLGlCQUFrQixFQVN0Q29CLEVBQVUxb0IsVUFBVTRXLE9BQVMsU0FBVXpRLEdBQ3JDNEosRUFBTSxnQkFBaUI1SixHQUN2QjZQLEVBQVVoVyxVQUFVNFcsT0FBT3JZLEtBQUtpTixLQUFNckYsSUFVeEN1aUIsRUFBVTFvQixVQUFVc2pCLEtBQU8sU0FBVTVkLEdBR25DLElBRkEsSUFBSTZSLEVBQU8vTCxLQUVGcE4sRUFBSSxFQUFHQSxFQUFJc0gsRUFBUXZDLE9BQVEvRSxJQUFLLENBQ3ZDLElBQUlrSSxFQUFTWixFQUFRdEgsR0FDckIwWCxFQUFPeE4sYUFBYWhDLEVBQVFpUixFQUFLaFIsZUFBZ0IrYyxHQUduRCxTQUFTQSxFQUFNbmQsR0FDYjRKLEVBQU0sZUFBZ0I1SixHQUd0QixJQUFJcUgsRUFBTyxJQUNQbEgsRUFBTzBGLFVBQ1R3QixFQUFLdVcsU0FBV3pkLEVBQU8wRixRQUFRK1gsVUFHN0J4TSxFQUFLcVMsc0JBQ0csaUJBQW9CempCLEVBQU96RixPQUFPc0gsV0FBVzdCLEdBQVFBLEVBQUtoRCxRQUMxRG9VLEVBQUtxUyxrQkFBa0J2ZCxZQUMvQm1CLEVBQUt1VyxVQUFXLElBSXBCeE0sRUFBS2pDLFVBQVcsRUFDaEJpQyxFQUFLb0QsT0FBTzJJLEtBQUtuZCxFQUFNcUgsRUFBTW1XLEdBRy9CLFNBQVNBLEVBQU96ZCxHQUNkLEdBQUlBLEVBQUssT0FBT3FSLEVBQUtmLFFBQVEsY0FBZXRRLEVBQUlpVCxPQUNoRDVCLEVBQUtqQyxVQUFXLEVBQ2hCaUMsRUFBS2xGLEtBQUssV0FVZHFXLEVBQVUxb0IsVUFBVXVXLFFBQVUsU0FBVUQsR0FDdEN2RyxFQUFNLFdBQ052RSxLQUFLbVAsT0FBTy9VLFFBQ1owUSxHQUFNQSxNOzs7Ozs7R0N0SFJwWSxFQUFRZ1UsTUFrQ1IsU0FBZTNLLEVBQUt5RSxHQUNsQixHQUFtQixpQkFBUnpFLEVBQ1QsTUFBTSxJQUFJNUQsVUFBVSxpQ0FRdEIsSUFMQSxJQUFJcU4sRUFBTSxHQUNOdW1DLEVBQU12ckMsR0FBVyxHQUNqQndyQyxFQUFRandDLEVBQUlwRixNQUFNczFDLEdBQ2xCQyxFQUFNSCxFQUFJanVDLFFBQVVBLEVBRWZsTCxFQUFJLEVBQUdBLEVBQUlvNUMsRUFBTXIwQyxPQUFRL0UsSUFBSyxDQUNyQyxJQUFJdXNDLEVBQU82TSxFQUFNcDVDLEdBQ2J1NUMsRUFBU2hOLEVBQUtsM0IsUUFBUSxLQUcxQixLQUFJa2tDLEVBQVMsR0FBYixDQUlBLElBQUloNEMsRUFBTWdyQyxFQUFLdGhDLE9BQU8sRUFBR3N1QyxHQUFRL2QsT0FDN0J4aEIsRUFBTXV5QixFQUFLdGhDLFNBQVNzdUMsRUFBUWhOLEVBQUt4bkMsUUFBUXkyQixPQUd6QyxLQUFPeGhCLEVBQUksS0FDYkEsRUFBTUEsRUFBSXhPLE1BQU0sR0FBSSxJQUlsQi9ILE1BQWFtUCxFQUFJclIsS0FDbkJxUixFQUFJclIsR0FBTzZKLEVBQVU0TyxFQUFLcy9CLEtBSTlCLE9BQU8xbUMsR0FsRVQ5UyxFQUFRNDFDLFVBcUZSLFNBQW1CbjFDLEVBQU15WixFQUFLcE0sR0FDNUIsSUFBSXVyQyxFQUFNdnJDLEdBQVcsR0FDakI0ckMsRUFBTUwsRUFBSTF1QyxRQUFVQSxFQUV4QixHQUFtQixtQkFBUit1QyxFQUNULE1BQU0sSUFBSWowQyxVQUFVLDRCQUd0QixJQUFLc2hDLEVBQW1CdmlDLEtBQUsvRCxHQUMzQixNQUFNLElBQUlnRixVQUFVLDRCQUd0QixJQUFJdEUsRUFBUXU0QyxFQUFJeC9CLEdBRWhCLEdBQUkvWSxJQUFVNGxDLEVBQW1CdmlDLEtBQUtyRCxHQUNwQyxNQUFNLElBQUlzRSxVQUFVLDJCQUd0QixJQUFJNEQsRUFBTTVJLEVBQU8sSUFBTVUsRUFFdkIsR0FBSSxNQUFRazRDLEVBQUkzWSxPQUFRLENBQ3RCLElBQUlBLEVBQVMyWSxFQUFJM1ksT0FBUyxFQUMxQixHQUFJaDdCLE1BQU1nN0IsR0FBUyxNQUFNLElBQUlsN0IsTUFBTSw2QkFDbkM2RCxHQUFPLGFBQWVuRSxLQUFLMDFCLE1BQU04RixHQUduQyxHQUFJMlksRUFBSWpTLE9BQVEsQ0FDZCxJQUFLTCxFQUFtQnZpQyxLQUFLNjBDLEVBQUlqUyxRQUMvQixNQUFNLElBQUkzaEMsVUFBVSw0QkFHdEI0RCxHQUFPLFlBQWNnd0MsRUFBSWpTLE9BRzNCLEdBQUlpUyxFQUFJM2pDLEtBQU0sQ0FDWixJQUFLcXhCLEVBQW1CdmlDLEtBQUs2MEMsRUFBSTNqQyxNQUMvQixNQUFNLElBQUlqUSxVQUFVLDBCQUd0QjRELEdBQU8sVUFBWWd3QyxFQUFJM2pDLEtBR3pCLEdBQUkyakMsRUFBSWxTLFFBQVMsQ0FDZixHQUF1QyxtQkFBNUJrUyxFQUFJbFMsUUFBUXJsQixZQUNyQixNQUFNLElBQUlyYyxVQUFVLDZCQUd0QjRELEdBQU8sYUFBZWd3QyxFQUFJbFMsUUFBUXJsQixjQUdoQ3UzQixFQUFJcFIsV0FDTjUrQixHQUFPLGNBR0xnd0MsRUFBSTlWLFNBQ05sNkIsR0FBTyxZQUdULEdBQUlnd0MsRUFBSWhTLFNBQVUsQ0FJaEIsT0FIdUMsaUJBQWpCZ1MsRUFBSWhTLFNBQ3RCZ1MsRUFBSWhTLFNBQVMxaEMsY0FBZ0IwekMsRUFBSWhTLFVBR25DLEtBQUssRUFDSGgrQixHQUFPLG9CQUNQLE1BQ0YsSUFBSyxNQUNIQSxHQUFPLGlCQUNQLE1BQ0YsSUFBSyxTQUNIQSxHQUFPLG9CQUNQLE1BQ0YsUUFDRSxNQUFNLElBQUk1RCxVQUFVLCtCQUkxQixPQUFPNEQsR0EzSlQsSUFBSStCLEVBQVN1dUMsbUJBQ1RodkMsRUFBUyswQixtQkFDVDZaLEVBQWtCLE1BVWxCeFMsRUFBcUIsd0NBMEp6QixTQUFTejdCLEVBQVVqQyxFQUFLK0IsR0FDdEIsSUFDRSxPQUFPQSxFQUFPL0IsR0FDZCxNQUFPZ0MsR0FDUCxPQUFPaEMsSyw2QkM5TFgsTUFBTW1oQixFQUFZLEVBQVEsSUFFMUJBLEVBQVVvdkIsc0JBQXdCLEVBQVEsS0FDMUNwdkIsRUFBVTBtQixPQUFTLEVBQVEsS0FDM0IxbUIsRUFBVU4sU0FBVyxFQUFRLElBQzdCTSxFQUFVTCxPQUFTLEVBQVEsSUFFM0JscUIsRUFBT0QsUUFBVXdxQixHLGNDVGpCdnFCLEVBQU9ELFFBQVVrQyxRQUFRLFUsY0NBekJqQyxFQUFPRCxRQUFVa0MsUUFBUSxRLDZCQ0V6QixNQUFNMjNDLEVBQVE1NEMsT0FBTyxTQUNmNjRDLEVBQU83NEMsT0FBTyxRQWtEcEJoQixFQUFPRCxRQTVDUCxNQU9FLFlBQVl1TyxHQUNWakIsS0FBS3VzQyxHQUFTLEtBQ1p2c0MsS0FBS3lzQyxVQUNMenNDLEtBQUt3c0MsTUFFUHhzQyxLQUFLaUIsWUFBY0EsR0FBZXlyQyxJQUNsQzFzQyxLQUFLMnNDLEtBQU8sR0FDWjNzQyxLQUFLeXNDLFFBQVUsRUFRakIsSUFBSUcsR0FDRjVzQyxLQUFLMnNDLEtBQUsvekMsS0FBS2cwQyxHQUNmNXNDLEtBQUt3c0MsS0FRUCxDQUFDQSxLQUNDLEdBQUl4c0MsS0FBS3lzQyxVQUFZenNDLEtBQUtpQixhQUV0QmpCLEtBQUsyc0MsS0FBS2gxQyxPQUFRLENBQ3BCLE1BQU1pMUMsRUFBTTVzQyxLQUFLMnNDLEtBQUtseEIsUUFFdEJ6YixLQUFLeXNDLFVBQ0xHLEVBQUk1c0MsS0FBS3VzQyxRLDZCQ3pDZixNQUFNTSxFQU9KLFlBQVl2M0MsRUFBTWlPLEdBQ2hCdkQsS0FBS3VELE9BQVNBLEVBQ2R2RCxLQUFLMUssS0FBT0EsR0FVaEIsTUFBTXczQyxVQUFxQkQsRUFPekIsWUFBWWx5QyxFQUFNNEksR0FDaEI4WixNQUFNLFVBQVc5WixHQUVqQnZELEtBQUtyRixLQUFPQSxHQVVoQixNQUFNb3lDLFVBQW1CRixFQVF2QixZQUFZNTBDLEVBQU15akIsRUFBUW5ZLEdBQ3hCOFosTUFBTSxRQUFTOVosR0FFZnZELEtBQUtndEMsU0FBV3pwQyxFQUFPaWEscUJBQXVCamEsRUFBT2thLGdCQUNyRHpkLEtBQUswYixPQUFTQSxFQUNkMWIsS0FBSy9ILEtBQU9BLEdBVWhCLE1BQU1nMUMsVUFBa0JKLEVBTXRCLFlBQVl0cEMsR0FDVjhaLE1BQU0sT0FBUTlaLElBVWxCLE1BQU0ycEMsVUFBbUJMLEVBT3ZCLFlBQVlseEMsRUFBTzRILEdBQ2pCOFosTUFBTSxRQUFTOVosR0FFZnZELEtBQUtySCxRQUFVZ0QsRUFBTWhELFFBQ3JCcUgsS0FBS3JFLE1BQVFBLEdBVWpCLE1BQU13eEMsRUFBYyxDQVFsQixpQkFBaUI1MUIsRUFBUWpKLEdBR3ZCLFNBQVM4K0IsRUFBVXp5QyxHQUNqQjJULEVBQVN2YixLQUFLaU4sS0FBTSxJQUFJOHNDLEVBQWFueUMsRUFBTXFGLE9BRzdDLFNBQVNxTCxFQUFRcFQsRUFBTVUsR0FDckIyVixFQUFTdmIsS0FBS2lOLEtBQU0sSUFBSStzQyxFQUFXOTBDLEVBQU1VLEVBQVNxSCxPQUdwRCxTQUFTZ0wsRUFBUXJQLEdBQ2YyUyxFQUFTdmIsS0FBS2lOLEtBQU0sSUFBSWt0QyxFQUFXdnhDLEVBQU9xRSxPQUc1QyxTQUFTc2EsSUFDUGhNLEVBQVN2YixLQUFLaU4sS0FBTSxJQUFJaXRDLEVBQVVqdEMsT0FmWixtQkFBYnNPLElBa0JJLFlBQVhpSixHQUNGNjFCLEVBQVVycUIsVUFBWXpVLEVBQ3RCdE8sS0FBSytDLEdBQUd3VSxFQUFRNjFCLElBQ0ksVUFBWDcxQixHQUNUbE0sRUFBUTBYLFVBQVl6VSxFQUNwQnRPLEtBQUsrQyxHQUFHd1UsRUFBUWxNLElBQ0ksVUFBWGtNLEdBQ1R2TSxFQUFRK1gsVUFBWXpVLEVBQ3BCdE8sS0FBSytDLEdBQUd3VSxFQUFRdk0sSUFDSSxTQUFYdU0sR0FDVCtDLEVBQU95SSxVQUFZelUsRUFDbkJ0TyxLQUFLK0MsR0FBR3dVLEVBQVErQyxJQUVoQnRhLEtBQUsrQyxHQUFHd1UsRUFBUWpKLEtBV3BCLG9CQUFvQmlKLEVBQVFqSixHQUMxQixNQUFNckQsRUFBWWpMLEtBQUtpTCxVQUFVc00sR0FFakMsSUFBSyxJQUFJM2tCLEVBQUksRUFBR0EsRUFBSXFZLEVBQVV0VCxPQUFRL0UsSUFDaENxWSxFQUFVclksS0FBTzBiLEdBQVlyRCxFQUFVclksR0FBR213QixZQUFjelUsR0FDMUR0TyxLQUFLSSxlQUFlbVgsRUFBUXRNLEVBQVVyWSxNQU05Q0QsRUFBT0QsUUFBVXk2QyxHLDZCQ3ZLakIsTUFBTSxPQUFFRSxHQUFXLEVBQVEsR0FRM0IsU0FBUzdzQixFQUFVMXFCLEdBQ2pCQSxFQUFPK1EsS0FBSyxTQVFkLFNBQVN5bUMsS0FDRnR0QyxLQUFLdW1CLFdBQWF2bUIsS0FBSzRpQixlQUFlN1QsVUFDekMvTyxLQUFLZ0gsVUFTVCxTQUFTdW1DLEVBQWM3eUMsR0FDckJzRixLQUFLSSxlQUFlLFFBQVNtdEMsR0FDN0J2dEMsS0FBS2dILFVBQytCLElBQWhDaEgsS0FBS21WLGNBQWMsVUFFckJuVixLQUFLNkcsS0FBSyxRQUFTbk0sR0FnSXZCL0gsRUFBT0QsUUFwSFAsU0FBK0JpMUMsRUFBSW5uQyxHQUNqQyxJQUFJZ3RDLEdBQXdCLEVBRTVCLFNBQVMvckIsSUFDSCtyQixHQUF1QjdGLEVBQUczdEIsUUFBUXlJLFNBR3BDa2xCLEVBQUdqOUIsYUFBZWk5QixFQUFHcnFCLFdBQ3ZCcXFCLEVBQUc1c0IsS0FBSyxRQUFRLFdBQ2Q0c0IsRUFBRzdwQixVQUFVcUUsbUJBQW1CLFNBQ2hDd2xCLEVBQUc3cEIsVUFBVS9hLEdBQUcsUUFBUzBlLE9BRzNCa21CLEVBQUc3cEIsVUFBVXFFLG1CQUFtQixTQUNoQ3dsQixFQUFHN3BCLFVBQVUvYSxHQUFHLFFBQVMwZSxJQUczQixNQUFNZ3NCLEVBQVMsSUFBSUosRUFBTyxJQUNyQjdzQyxFQUNIa3RDLGFBQWEsRUFDYmx0QixXQUFXLEVBQ1htdEIsWUFBWSxFQUNaQyxvQkFBb0IsSUEyRnRCLE9BeEZBakcsRUFBRzVrQyxHQUFHLFdBQVcsU0FBaUJuSCxHQUMzQjZ4QyxFQUFPNzBDLEtBQUtnRCxLQUNmNHhDLEdBQXdCLEVBQ3hCN0YsRUFBRzN0QixRQUFROEksWUFJZjZrQixFQUFHNXNCLEtBQUssU0FBUyxTQUFlcmdCLEdBQzFCK3lDLEVBQU9sbkIsV0FFWGtuQixFQUFPem1DLFFBQVF0TSxNQUdqQml0QyxFQUFHNXNCLEtBQUssU0FBUyxXQUNYMHlCLEVBQU9sbkIsV0FFWGtuQixFQUFPNzBDLEtBQUssU0FHZDYwQyxFQUFPSSxTQUFXLFNBQVNuekMsRUFBS00sR0FDOUIsR0FBSTJzQyxFQUFHajlCLGFBQWVpOUIsRUFBR3htQixPQUd2QixPQUZBbm1CLEVBQVNOLFFBQ1RyRixRQUFRc2EsU0FBUzZRLEVBQVdpdEIsR0FJOUIsSUFBSXJNLEdBQVMsRUFFYnVHLEVBQUc1c0IsS0FBSyxTQUFTLFNBQWVyZ0IsR0FDOUIwbUMsR0FBUyxFQUNUcG1DLEVBQVNOLE1BR1hpdEMsRUFBRzVzQixLQUFLLFNBQVMsV0FDVnFtQixHQUFRcG1DLEVBQVNOLEdBQ3RCckYsUUFBUXNhLFNBQVM2USxFQUFXaXRCLE1BRTlCOUYsRUFBR21HLGFBR0xMLEVBQU9NLE9BQVMsU0FBUy95QyxHQUNuQjJzQyxFQUFHajlCLGFBQWVpOUIsRUFBR3JxQixXQVdOLE9BQWZxcUIsRUFBRzN0QixVQUVIMnRCLEVBQUczdEIsUUFBUTRJLGVBQWU3VCxVQUN4QjArQixFQUFPTyxlQUFlQyxZQUFZUixFQUFPem1DLFVBQzdDaE0sTUFFQTJzQyxFQUFHM3RCLFFBQVFlLEtBQUssVUFBVSxXQUl4Qi9mLE9BRUYyc0MsRUFBR3Z0QyxVQXRCSHV0QyxFQUFHNXNCLEtBQUssUUFBUSxXQUNkMHlCLEVBQU9NLE9BQU8veUMsT0F5QnBCeXlDLEVBQU9TLE1BQVEsV0FDVHZHLEVBQUdqOUIsYUFBZWk5QixFQUFHdm1CLE1BQVNvc0IsSUFDaENBLEdBQXdCLEVBQ25CN0YsRUFBRzdwQixVQUFVOEUsZUFBZXVyQixXQUFXeEcsRUFBRzN0QixRQUFReUksV0FJM0RnckIsRUFBT1csT0FBUyxTQUFTcnVDLEVBQU8rVixFQUFVOWEsR0FDcEMyc0MsRUFBR2o5QixhQUFlaTlCLEVBQUdycUIsV0FPekJxcUIsRUFBRzd2QixLQUFLL1gsRUFBTy9FLEdBTmIyc0MsRUFBRzVzQixLQUFLLFFBQVEsV0FDZDB5QixFQUFPVyxPQUFPcnVDLEVBQU8rVixFQUFVOWEsT0FRckN5eUMsRUFBTzFxQyxHQUFHLE1BQU91cUMsR0FDakJHLEVBQU8xcUMsR0FBRyxRQUFTd3FDLEdBQ1pFLEksNkJDOUpULE1BQU1wakMsRUFBZSxFQUFRLElBQ3ZCLFdBQUVvUyxHQUFlLEVBQVEsSUFDekIsYUFBRStOLEVBQVksYUFBRWx5QixHQUFpQixFQUFRLEdBRXpDcWtCLEVBQW9CLEVBQVEsSUFDNUJPLEVBQVksRUFBUSxLQUNwQixPQUFFelEsRUFBTSxNQUFFL0YsR0FBVSxFQUFRLEtBQzVCLEtBQUU1UixHQUFTLEVBQVEsR0FFbkJ1NUMsRUFBVyx3QkFDWEMsRUFBeUIzNkMsT0FBTywwQkE2VnRDLFNBQVM2c0IsRUFBVWpILEdBQ2pCQSxFQUFPMVMsS0FBSyxTQVFkLFNBQVNxYixJQUNQbGlCLEtBQUtnSCxVQVlQLFNBQVNxWixFQUFlbFIsRUFBUWxYLEVBQU1VLEVBQVMyWCxHQUN6Q25CLEVBQU9yRixXQUNUblIsRUFBVUEsR0FBV0wsRUFBYUwsR0FDbENxWSxFQUFVLENBQ1JtUCxXQUFZLFFBQ1osZUFBZ0IsWUFDaEIsaUJBQWtCdnFCLE9BQU9zSCxXQUFXN0QsTUFDakMyWCxHQUdMbkIsRUFBT25NLE1BQ0wsWUFBWS9LLEtBQVFLLEVBQWFMLFNBQy9CM0UsT0FBT21GLEtBQUs2WCxHQUNUbFYsSUFBS2d5QixHQUFNLEdBQUdBLE1BQU05YyxFQUFROGMsTUFDNUIxdUIsS0FBSyxRQUNSLFdBQ0EvRixJQUlOd1csRUFBTy9PLGVBQWUsUUFBUzhoQixHQUMvQi9TLEVBQU9uSSxVQXRFVHJVLEVBQU9ELFFBM1RQLGNBQThCMlgsRUFxQjVCLFlBQVk3SixFQUFTeEYsR0FrQm5CLEdBakJBcWlCLFFBaUJvQixPQWZwQjdjLEVBQVUsQ0FDUkUsV0FBWSxVQUNaMGQsbUJBQW1CLEVBQ25CbXdCLGdCQUFpQixLQUNqQjFHLGdCQUFnQixFQUNoQjJHLGFBQWMsS0FDZDVHLFVBQVUsRUFDVjZHLFFBQVMsS0FDVGwxQixPQUFRLEtBQ1JxRixLQUFNLEtBQ054VyxLQUFNLEtBQ055VyxLQUFNLFFBQ0hyZSxJQUdPcWUsT0FBaUJyZSxFQUFRK1ksU0FBVy9ZLEVBQVFvbkMsU0FDdEQsTUFBTSxJQUFJenZDLFVBQ1Isd0VBSUosR0FBb0IsTUFBaEJxSSxFQUFRcWUsS0FDVjdlLEtBQUswdUMsUUFBVWxrQixFQUFhLENBQUMvZixFQUFLNEUsS0FDaEMsTUFBTW9hLEVBQU9ueEIsRUFBYSxLQUUxQitXLEVBQUlxSSxVQUFVLElBQUssQ0FDakIsaUJBQWtCK1IsRUFBSzl4QixPQUN2QixlQUFnQixlQUVsQjBYLEVBQUlzSSxJQUFJOFIsS0FFVnpwQixLQUFLMHVDLFFBQVFobEIsT0FDWGxwQixFQUFRcWUsS0FDUnJlLEVBQVFvZSxLQUNScGUsRUFBUWl1QyxRQUNSenpDLFFBRUcsR0FBSXdGLEVBQVErWSxPQUFRLENBQ3pCLEdBQUkvWSxFQUFRK1ksT0FBTyswQixHQUNqQixNQUFNLElBQUlwMkMsTUFDUix1RUFJSnNJLEVBQVErWSxPQUFPKzBCLElBQTBCLEVBQ3pDdHVDLEtBQUswdUMsUUFBVWx1QyxFQUFRK1ksT0FHckJ2WixLQUFLMHVDLFVBQ1AxdUMsS0FBSzJ1QyxpQkE2UFgsU0FBc0JwMUIsRUFBUW5lLEdBQzVCLElBQUssTUFBTXF6QixLQUFTbjdCLE9BQU9tRixLQUFLMkMsR0FBTW1lLEVBQU94VyxHQUFHMHJCLEVBQU9yekIsRUFBSXF6QixJQUUzRCxPQUFPLFdBQ0wsSUFBSyxNQUFNQSxLQUFTbjdCLE9BQU9tRixLQUFLMkMsR0FDOUJtZSxFQUFPblosZUFBZXF1QixFQUFPcnpCLEVBQUlxekIsS0FsUVRtZ0IsQ0FBYTV1QyxLQUFLMHVDLFFBQVMsQ0FDakRHLFVBQVc3dUMsS0FBSzZHLEtBQUt6UyxLQUFLNEwsS0FBTSxhQUNoQ3JFLE1BQU9xRSxLQUFLNkcsS0FBS3pTLEtBQUs0TCxLQUFNLFNBQzVCekYsUUFBUyxDQUFDa1EsRUFBSzBFLEVBQVF5UixLQUNyQjVnQixLQUFLdW9DLGNBQWM5OUIsRUFBSzBFLEVBQVF5UixFQUFPK21CLElBQ3JDM25DLEtBQUs2RyxLQUFLLGFBQWM4Z0MsRUFBSWw5QixVQU1GLElBQTlCakssRUFBUTRkLG9CQUE0QjVkLEVBQVE0ZCxrQkFBb0IsSUFDaEU1ZCxFQUFRcW5DLGlCQUFnQjduQyxLQUFLcXBCLFFBQVUsSUFBSXFLLEtBQy9DMXpCLEtBQUtRLFFBQVVBLEVBWWpCLFVBQ0UsR0FBSVIsS0FBS1EsUUFBUW9uQyxTQUNmLE1BQU0sSUFBSTF2QyxNQUFNLDhDQUdsQixPQUFLOEgsS0FBSzB1QyxRQUNIMXVDLEtBQUswdUMsUUFBUXZ4QixVQURNLEtBVTVCLE1BQU1pRixHQU1KLEdBTElBLEdBQUlwaUIsS0FBSythLEtBQUssUUFBU3FILEdBS3ZCcGlCLEtBQUtxcEIsUUFDUCxJQUFLLE1BQU1SLEtBQVU3b0IsS0FBS3FwQixRQUFTUixFQUFPaWxCLFlBRzVDLE1BQU12MEIsRUFBU3ZaLEtBQUswdUMsUUFFcEIsR0FBSW4xQixFQUFRLENBT1YsR0FOQXZaLEtBQUsydUMsbUJBQ0wzdUMsS0FBSzJ1QyxpQkFBbUIzdUMsS0FBSzB1QyxRQUFVLEtBS2QsTUFBckIxdUMsS0FBS1EsUUFBUXFlLEtBRWYsWUFEQXRGLEVBQU9uZixNQUFNLElBQU00RixLQUFLNkcsS0FBSyxpQkFJeEIwUyxFQUFPKzBCLEdBR2hCajVDLFFBQVFzYSxTQUFTNlEsRUFBV3hnQixNQVU5QixhQUFheUssR0FDWCxHQUFJekssS0FBS1EsUUFBUTRILEtBQU0sQ0FDckIsTUFBTW1FLEVBQVE5QixFQUFJdVUsSUFBSS9XLFFBQVEsS0FHOUIsS0FGNEIsSUFBWHNFLEVBQWU5QixFQUFJdVUsSUFBSTVnQixNQUFNLEVBQUdtTyxHQUFTOUIsRUFBSXVVLE9BRTdDaGYsS0FBS1EsUUFBUTRILEtBQU0sT0FBTyxFQUc3QyxPQUFPLEVBWVQsY0FBY3FDLEVBQUswRSxFQUFReVIsRUFBTXdCLEdBQy9CalQsRUFBT3BNLEdBQUcsUUFBU21mLEdBRW5CLE1BQU0vdEIsT0FDaUNrQyxJQUFyQ29VLEVBQUk2RixRQUFRLHNCQUNSN0YsRUFBSTZGLFFBQVEscUJBQXFCOGQsT0FFakMvMkIsR0FBV29ULEVBQUk2RixRQUFRLHlCQUN2QmxKLEVBQWEsR0FFbkIsR0FDaUIsUUFBZnFELEVBQUk4TSxRQUNrQyxjQUF0QzlNLEVBQUk2RixRQUFRL1YsUUFBUWxDLGdCQUNuQmxFLElBQ0FrNkMsRUFBU24zQyxLQUFLL0MsSUFDRixJQUFaa0QsR0FBNkIsS0FBWkEsSUFDakIySSxLQUFLOHVDLGFBQWFya0MsR0FFbkIsT0FBTzRWLEVBQWVsUixFQUFRLEtBR2hDLEdBQUluUCxLQUFLUSxRQUFRNGQsa0JBQW1CLENBQ2xDLE1BQU1BLEVBQW9CLElBQUl6QixFQUM1QjNjLEtBQUtRLFFBQVE0ZCxtQkFDYixFQUNBcGUsS0FBS1EsUUFBUUUsWUFHZixJQUNFLE1BQU1xQixFQUFTMkUsRUFBTStELEVBQUk2RixRQUFRLDZCQUU3QnZPLEVBQU80YSxFQUFrQmtELGlCQUMzQnpCLEVBQWtCMUksT0FBTzNULEVBQU80YSxFQUFrQmtELGdCQUNsRHpZLEVBQVd1VixFQUFrQmtELGVBQWlCekIsR0FFaEQsTUFBTzFqQixHQUNQLE9BQU8ybEIsRUFBZWxSLEVBQVEsTUFPbEMsR0FBSW5QLEtBQUtRLFFBQVFndUMsYUFBYyxDQUM3QixNQUFNTyxFQUFPLENBQ1hodkIsT0FDRXRWLEVBQUk2RixRQUFRLEdBQWUsSUFBWmpaLEVBQWdCLHVCQUF5QixZQUMxRDQrQixVQUFXeHJCLEVBQUk0TixXQUFXeXNCLGFBQWNyNkIsRUFBSTROLFdBQVdtaUIsV0FDdkQvdkIsT0FHRixHQUF5QyxJQUFyQ3pLLEtBQUtRLFFBQVFndUMsYUFBYTcyQyxPQVE1QixZQVBBcUksS0FBS1EsUUFBUWd1QyxhQUFhTyxFQUFNLENBQUNDLEVBQVUvMkMsRUFBTVUsRUFBUzJYLEtBQ3hELElBQUswK0IsRUFDSCxPQUFPM3VCLEVBQWVsUixFQUFRbFgsR0FBUSxJQUFLVSxFQUFTMlgsR0FHdER0USxLQUFLaXZDLGdCQUFnQjk2QyxFQUFLaVQsRUFBWXFELEVBQUswRSxFQUFReVIsRUFBTXdCLEtBSzdELElBQUtwaUIsS0FBS1EsUUFBUWd1QyxhQUFhTyxHQUFPLE9BQU8xdUIsRUFBZWxSLEVBQVEsS0FHdEVuUCxLQUFLaXZDLGdCQUFnQjk2QyxFQUFLaVQsRUFBWXFELEVBQUswRSxFQUFReVIsRUFBTXdCLEdBYzNELGdCQUFnQmp1QixFQUFLaVQsRUFBWXFELEVBQUswRSxFQUFReVIsRUFBTXdCLEdBSWxELElBQUtqVCxFQUFPVyxXQUFhWCxFQUFPckYsU0FBVSxPQUFPcUYsRUFBT25JLFVBRXhELE1BSU1zSixFQUFVLENBQ2QsbUNBQ0EscUJBQ0Esc0JBQ0EseUJBUmFtTSxFQUFXLFFBQ3ZCcUUsT0FBTzNzQixFQUFNVyxHQUNiK3JCLE9BQU8sYUFTSjhtQixFQUFLLElBQUl6cUIsRUFBVSxNQUN6QixJQUFJampCLEVBQVd3USxFQUFJNkYsUUFBUSwwQkFvQjNCLEdBbEJJclcsSUFDRkEsRUFBV0EsRUFBU20wQixPQUFPejNCLE1BQU0sU0FNL0JzRCxFQURFK0YsS0FBS1EsUUFBUSt0QyxnQkFDSnZ1QyxLQUFLUSxRQUFRK3RDLGdCQUFnQnQwQyxFQUFVd1EsR0FFdkN4USxFQUFTLEdBR2xCQSxJQUNGcVcsRUFBUTFYLEtBQUssMkJBQTJCcUIsS0FDeEMwdEMsRUFBRzF0QyxTQUFXQSxJQUlkbU4sRUFBV3VWLEVBQWtCa0QsZUFBZ0IsQ0FDL0MsTUFBTTdlLEVBQVNvRyxFQUFXdVYsRUFBa0JrRCxlQUFlN2UsT0FDckRuTixFQUFRNFksRUFBTyxDQUNuQixDQUFDa1EsRUFBa0JrRCxlQUFnQixDQUFDN2UsS0FFdENzUCxFQUFRMVgsS0FBSyw2QkFBNkIvRSxLQUMxQzh6QyxFQUFHOXBCLFlBQWN6VyxFQU1uQnBILEtBQUs2RyxLQUFLLFVBQVd5SixFQUFTN0YsR0FFOUIwRSxFQUFPbk0sTUFBTXNOLEVBQVExVixPQUFPLFFBQVE4RCxLQUFLLFNBQ3pDeVEsRUFBTy9PLGVBQWUsUUFBUzhoQixHQUUvQnlsQixFQUFHem1CLFVBQVUvUixFQUFReVIsRUFBTTVnQixLQUFLUSxRQUFRRSxZQUVwQ1YsS0FBS3FwQixVQUNQcnBCLEtBQUtxcEIsUUFBUTltQixJQUFJb2xDLEdBQ2pCQSxFQUFHNWtDLEdBQUcsUUFBUyxJQUFNL0MsS0FBS3FwQixRQUFRNmxCLE9BQU92SCxLQUczQ3ZsQixFQUFHdWxCLE0sbW9HQ3JVUCxJQUFJcjlCLEVBQVMsRUFBUSxJQUNqQi9GLEVBQVEsRUFBUSxHQUFSLENBQWlCLG9CQUN6QnlhLEVBQU0sRUFBUSxHQWdCbEIsU0FBU3lrQixFQUFPbHFCLEVBQVF3UCxHQUN0Qi9vQixLQUFLdVosT0FBU0EsRUFDZHZaLEtBQUsrb0IsS0FBT0EsRUFDWi9vQixLQUFLa2tDLFFBQVUzcUIsRUFBTzJxQixRQUN0QmxrQyxLQUFLbXZDLFFBQVUsSUFBSTUxQixFQUFPalAsT0FBT2pGLFFBQ2pDckYsS0FBSzJGLEdBQUtvakIsRUFBS3BqQixHQUNmM0YsS0FBSytaLFFBQVVnUCxFQUFLaFAsUUFDcEIvWixLQUFLb3ZDLFFBQ0xwdkMsS0FBS2dvQixRQUFVLEdBQ2Zob0IsS0FBS2drQyxLQUFPLEdBQ1poa0MsS0FBS3F2QyxjQUFnQixHQXBCdkIxOEMsRUFBT0QsUUFBVSt3QyxFQTZCakJBLEVBQU9qdkMsVUFBVTQ2QyxNQUFRLFdBQ3ZCcHZDLEtBQUttbUMsUUFBVW5tQyxLQUFLbW1DLFFBQVEveEMsS0FBSzRMLE1BQ2pDQSxLQUFLc3ZDLE9BQVN0dkMsS0FBS3N2QyxPQUFPbDdDLEtBQUs0TCxNQUMvQkEsS0FBSzBxQixRQUFVMXFCLEtBQUswcUIsUUFBUXQyQixLQUFLNEwsTUFDakNBLEtBQUt1dkMsVUFBWXZ2QyxLQUFLdXZDLFVBQVVuN0MsS0FBSzRMLE1BRXJDQSxLQUFLbXZDLFFBQVFwc0MsR0FBRyxVQUFXL0MsS0FBS3V2QyxXQUNoQ3Z2QyxLQUFLK29CLEtBQUtobUIsR0FBRyxPQUFRL0MsS0FBS3N2QyxRQUMxQnR2QyxLQUFLK29CLEtBQUtobUIsR0FBRyxRQUFTL0MsS0FBSzBxQixTQUMzQjFxQixLQUFLK29CLEtBQUtobUIsR0FBRyxRQUFTL0MsS0FBS21tQyxVQVc3QjFDLEVBQU9qdkMsVUFBVTh0QixRQUFVLFNBQVNudkIsRUFBTTIxQixHQUN4QyxHQUFJOW9CLEtBQUt1WixPQUFPeXFCLEtBQUs3d0MsR0FFbkIsT0FEQW9SLEVBQU0sNkJBQThCcFIsR0FDN0I2TSxLQUFLd3ZDLFVBQVVyOEMsRUFBTTIxQixHQUc5QjlvQixLQUFLdVosT0FBT3dyQixlQUFlNXhDLEVBQU0yMUIsRUFBUTJtQixJQUNuQ0EsR0FDRmxyQyxFQUFNLG1DQUFvQ2tyQyxFQUFXdDhDLE1BQ3JENk0sS0FBS3d2QyxVQUFVcjhDLEVBQU0yMUIsS0FFckJ2a0IsRUFBTSxzQ0FBdUNwUixHQUM3QzZNLEtBQUtsRixPQUFPLENBQUV4RixLQUFNZ1YsRUFBT3BGLE1BQU9RLElBQUt2UyxFQUFNd0gsS0FBTSwwQkFhekQ4b0MsRUFBT2p2QyxVQUFVZzdDLFVBQVksU0FBU3I4QyxFQUFNMjFCLEdBQzFDLElBQUlwakIsRUFBTTFGLEtBQUt1WixPQUFPNnFCLEdBQUdqeEMsR0FFekIsR0FBSSxLQUFPQSxHQUFTNk0sS0FBS2drQyxLQUFLLEtBSzlCLElBQUlqNEIsRUFBTy9MLEtBQ1BtUCxFQUFTekosRUFBSW5ELElBQUl2QyxLQUFNOG9CLEdBQU8sV0FDaEMvYyxFQUFLaWMsUUFBUTdZLEVBQU94SixJQUFNd0osRUFDMUJwRCxFQUFLaTRCLEtBQUt0K0IsRUFBSXZTLE1BQVFnYyxFQUVsQixLQUFPekosRUFBSXZTLE1BQVE0WSxFQUFLc2pDLGNBQWMxM0MsT0FBUyxJQUNqRG9VLEVBQUtzakMsY0FBYzMyQyxRQUFRcVQsRUFBS3VXLFFBQVN2VyxHQUN6Q0EsRUFBS3NqQyxjQUFnQixZQVh2QnJ2QyxLQUFLcXZDLGNBQWN6MkMsS0FBS3pGLElBc0I1QnN3QyxFQUFPanZDLFVBQVVrN0MsV0FBYSxXQUM1QixJQUFLLElBQUkvcEMsS0FBTTNGLEtBQUtnb0IsUUFDZGhvQixLQUFLZ29CLFFBQVF2ekIsZUFBZWtSLElBQzlCM0YsS0FBS2dvQixRQUFRcmlCLEdBQUkrcEMsYUFHckIxdkMsS0FBS2dvQixRQUFVLEdBQ2Zob0IsS0FBSzVGLFNBU1BxcEMsRUFBT2p2QyxVQUFVeTBCLE9BQVMsU0FBUzlaLEdBQ2pDLEdBQUluUCxLQUFLZ29CLFFBQVF2ekIsZUFBZTBhLEVBQU94SixJQUFLLENBQzFDLElBQUlELEVBQU0xRixLQUFLZ29CLFFBQVE3WSxFQUFPeEosSUFBSUQsSUFBSXZTLFlBQy9CNk0sS0FBS2dvQixRQUFRN1ksRUFBT3hKLFdBQ3BCM0YsS0FBS2drQyxLQUFLdCtCLFFBRWpCbkIsRUFBTSx5QkFBMEI0SyxFQUFPeEosS0FVM0M4OUIsRUFBT2p2QyxVQUFVNEYsTUFBUSxXQUNuQixRQUFVNEYsS0FBSytvQixLQUFLcmUsYUFDdEJuRyxFQUFNLDJCQUNOdkUsS0FBSytvQixLQUFLM3VCLFFBQ1Y0RixLQUFLbW1DLFFBQVEseUJBWWpCMUMsRUFBT2p2QyxVQUFVc0csT0FBUyxTQUFTQSxFQUFRa0gsR0FDekNBLEVBQU9BLEdBQVEsR0FDZixJQUFJK0osRUFBTy9MLEtBR1gsU0FBUzJ2QyxFQUFjQyxHQUNyQixJQUFJNXRDLEVBQUs2dEMsVUFBYTlqQyxFQUFLZ2QsS0FBS3ZQLFVBQVUxUCxTQUMxQyxJQUFLLElBQUlsWCxFQUFJLEVBQUdBLEVBQUlnOUMsRUFBZWo0QyxPQUFRL0UsSUFDekNtWixFQUFLZ2QsS0FBSy9sQixNQUFNNHNDLEVBQWVoOUMsR0FBSSxDQUFFMmxCLFNBQVV2VyxFQUFLdVcsV0FJcEQsUUFBVXZZLEtBQUsrb0IsS0FBS3JlLFlBQ3RCbkcsRUFBTSxvQkFBcUJ6SixHQUN0QmtILEVBQUs4dEMsV0FHUkgsRUFBYzcwQyxHQUZka0YsS0FBS2trQyxRQUFRN21DLE9BQU92QyxFQUFRNjBDLElBSzlCcHJDLEVBQU0sMkJBQTRCekosSUFVdEMyb0MsRUFBT2p2QyxVQUFVODZDLE9BQVMsU0FBUzMwQyxHQUVqQyxJQUNFcUYsS0FBS212QyxRQUFRNXNDLElBQUk1SCxHQUNqQixNQUFNb0QsR0FDTmlDLEtBQUswcUIsUUFBUTNzQixLQVVqQjBsQyxFQUFPanZDLFVBQVUrNkMsVUFBWSxTQUFTejBDLEdBQ3BDLEdBQUl3UCxFQUFPeEYsU0FBV2hLLEVBQU94RixLQUMzQjBLLEtBQUtzaUIsUUFBUXRELEVBQUl0WSxNQUFNNUwsRUFBTzRLLEtBQUt5WixTQUFVSCxFQUFJdFksTUFBTTVMLEVBQU80SyxLQUFLLEdBQU1vakIsV0FDcEUsQ0FDTCxJQUFJM1osRUFBU25QLEtBQUtna0MsS0FBS2xwQyxFQUFPNEssS0FDMUJ5SixFQUNGOVosUUFBUXNhLFVBQVMsV0FDZlIsRUFBTzRnQyxTQUFTajFDLE1BR2xCeUosRUFBTSw2QkFBOEJ6SixFQUFPNEssT0FZakQrOUIsRUFBT2p2QyxVQUFVazJCLFFBQVUsU0FBU2h3QixHQUNsQyxJQUFLLElBQUlpTCxLQUFNM0YsS0FBS2dvQixRQUNkaG9CLEtBQUtnb0IsUUFBUXZ6QixlQUFla1IsSUFDOUIzRixLQUFLZ29CLFFBQVFyaUIsR0FBSStrQixRQUFRaHdCLEdBRzdCc0YsS0FBSytvQixLQUFLM3VCLFNBVVpxcEMsRUFBT2p2QyxVQUFVMnhDLFFBQVUsU0FBU3pxQixHQU9sQyxJQUFLLElBQUkvVixLQU5UcEIsRUFBTSw4QkFBK0JtWCxHQUdyQzFiLEtBQUtnSCxVQUdVaEgsS0FBS2dvQixRQUNkaG9CLEtBQUtnb0IsUUFBUXZ6QixlQUFla1IsSUFDOUIzRixLQUFLZ29CLFFBQVFyaUIsR0FBSXdnQyxRQUFRenFCLEdBRzdCMWIsS0FBS2dvQixRQUFVLEdBRWZob0IsS0FBS212QyxRQUFRbm9DLFdBU2Z5OEIsRUFBT2p2QyxVQUFVd1MsUUFBVSxXQUN6QmhILEtBQUsrb0IsS0FBSzNvQixlQUFlLE9BQVFKLEtBQUtzdkMsUUFDdEN0dkMsS0FBSytvQixLQUFLM29CLGVBQWUsUUFBU0osS0FBSzBxQixTQUN2QzFxQixLQUFLK29CLEtBQUszb0IsZUFBZSxRQUFTSixLQUFLbW1DLFNBQ3ZDbm1DLEtBQUttdkMsUUFBUS91QyxlQUFlLFVBQVdKLEtBQUt1dkMsYSxnQkMxUXZCLG9CQUFabDZDLFNBQTRDLGFBQWpCQSxRQUFRQyxPQUEyQyxJQUFwQkQsUUFBUUUsU0FBb0JGLFFBQVFHLE9BQ3hHN0MsRUFBT0QsUUFBVSxFQUFRLEtBRXpCQyxFQUFPRCxRQUFVLEVBQVEsTSxnQkNGMUJBLEVBQVFzYSxJQTJLUixZQUFnQlgsR0FHZixNQUEwQixpQkFBWlksU0FDYkEsUUFBUUQsS0FDUkMsUUFBUUQsT0FBT1gsSUEvS2pCM1osRUFBUW9hLFdBaUlSLFNBQW9CVCxHQVFuQixHQVBBQSxFQUFLLElBQU1yTSxLQUFLbU4sVUFBWSxLQUFPLElBQ2xDbk4sS0FBSzRMLFdBQ0o1TCxLQUFLbU4sVUFBWSxNQUFRLEtBQzFCZCxFQUFLLElBQ0pyTSxLQUFLbU4sVUFBWSxNQUFRLEtBQzFCLElBQU14YSxFQUFPRCxRQUFRMmIsU0FBU3JPLEtBQUttTSxPQUUvQm5NLEtBQUttTixVQUNULE9BR0QsTUFBTWxhLEVBQUksVUFBWStNLEtBQUtvTixNQUMzQmYsRUFBS1EsT0FBTyxFQUFHLEVBQUc1WixFQUFHLGtCQUtyQixJQUFJc1osRUFBUSxFQUNSNGYsRUFBUSxFQUNaOWYsRUFBSyxHQUFHRyxRQUFRLGNBQWU3RSxJQUNoQixPQUFWQSxJQUdKNEUsSUFDYyxPQUFWNUUsSUFHSHdrQixFQUFRNWYsTUFJVkYsRUFBS1EsT0FBT3NmLEVBQU8sRUFBR2w1QixJQWhLdkJQLEVBQVFxYixLQXVMUixTQUFjRCxHQUNiLElBQ0tBLEVBQ0hwYixFQUFRdTVCLFFBQVFrZixRQUFRLFFBQVNyOUIsR0FFakNwYixFQUFRdTVCLFFBQVFHLFdBQVcsU0FFM0IsTUFBT3p3QixNQTdMVmpKLEVBQVEybUIsS0F5TVIsV0FDQyxJQUFJM2xCLEVBQ0osSUFDQ0EsRUFBSWhCLEVBQVF1NUIsUUFBUW1mLFFBQVEsU0FDM0IsTUFBT3p2QyxLQU1KakksR0FBd0Isb0JBQVoyQixTQUEyQixRQUFTQSxVQUNwRDNCLEVBQUkyQixRQUFRTSxJQUFJdTJCLE9BR2pCLE9BQU94NEIsR0F0TlJoQixFQUFReWEsVUErRlIsV0FJQyxHQUFzQixvQkFBWGtmLFFBQTBCQSxPQUFPaDNCLFVBQW9DLGFBQXhCZzNCLE9BQU9oM0IsUUFBUUMsTUFBdUIrMkIsT0FBT2gzQixRQUFRRyxRQUM1RyxPQUFPLEVBSVIsR0FBeUIsb0JBQWQ4MkIsV0FBNkJBLFVBQVVDLFdBQWFELFVBQVVDLFVBQVVsMEIsY0FBY3NQLE1BQU0seUJBQ3RHLE9BQU8sRUFLUixNQUE0QixvQkFBYjZrQixVQUE0QkEsU0FBU0MsaUJBQW1CRCxTQUFTQyxnQkFBZ0JDLE9BQVNGLFNBQVNDLGdCQUFnQkMsTUFBTUMsa0JBRXBILG9CQUFYTixRQUEwQkEsT0FBT3BmLFVBQVlvZixPQUFPcGYsUUFBUTJmLFNBQVlQLE9BQU9wZixRQUFRNGYsV0FBYVIsT0FBT3BmLFFBQVE2ZixRQUdyRyxvQkFBZFIsV0FBNkJBLFVBQVVDLFdBQWFELFVBQVVDLFVBQVVsMEIsY0FBY3NQLE1BQU0sbUJBQXFCclEsU0FBUzZXLE9BQU80ZSxHQUFJLEtBQU8sSUFFOUgsb0JBQWRULFdBQTZCQSxVQUFVQyxXQUFhRCxVQUFVQyxVQUFVbDBCLGNBQWNzUCxNQUFNLHVCQXBIdEdqVixFQUFRdTVCLFFBbU9SLFdBQ0MsSUFHQyxPQUFPaUIsYUFDTixNQUFPdnhCLEtBeE9Rd3hCLEdBTWxCejZCLEVBQVE0YSxPQUFTLENBQ2hCLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFdBNEpEM2EsRUFBT0QsUUFBVSxFQUFRLEdBQVIsQ0FBb0JBLEdBRXJDLE1BQU0sV0FBQ2lhLEdBQWNoYSxFQUFPRCxRQU01QmlhLEVBQVdnSyxFQUFJLFNBQVVzUSxHQUN4QixJQUNDLE9BQU9waEIsS0FBS0MsVUFBVW1oQixHQUNyQixNQUFPdHJCLEdBQ1IsTUFBTywrQkFBaUNBLEVBQU1oRCxXLGNDalFoRCxJQUFJaEUsRUFBSSxJQUNKM0IsRUFBSTJCLElBQ0p5NEIsRUFBSXA2QixLQUNKRSxFQUFRLEdBQUprNkIsRUF1SlIsU0FBU0MsRUFBT25oQixFQUFJbS9CLEVBQU9oM0MsRUFBR2xCLEdBQzVCLElBQUltNEMsRUFBV0QsR0FBYSxJQUFKaDNDLEVBQ3hCLE9BQU91RCxLQUFLODFCLE1BQU14aEIsRUFBSzdYLEdBQUssSUFBTWxCLEdBQVFtNEMsRUFBVyxJQUFNLElBdkk3RDM0QyxFQUFPRCxRQUFVLFNBQVNrYSxFQUFLcE0sR0FDN0JBLEVBQVVBLEdBQVcsR0FDckIsSUFBSWxMLFNBQWNzWCxFQUNsQixHQUFhLFdBQVR0WCxHQUFxQnNYLEVBQUlqVixPQUFTLEVBQ3BDLE9Ba0JKLFNBQWVvRSxHQUViLElBREFBLEVBQU1DLE9BQU9ELElBQ0xwRSxPQUFTLElBQ2YsT0FFRixJQUFJZ1EsRUFBUSxtSUFBbUlDLEtBQzdJN0wsR0FFRixJQUFLNEwsRUFDSCxPQUVGLElBQUl0VCxFQUFJbTVCLFdBQVc3bEIsRUFBTSxJQUV6QixRQURZQSxFQUFNLElBQU0sTUFBTXRQLGVBRTVCLElBQUssUUFDTCxJQUFLLE9BQ0wsSUFBSyxNQUNMLElBQUssS0FDTCxJQUFLLElBQ0gsT0F6REVuRixTQXlES21CLEVBQ1QsSUFBSyxRQUNMLElBQUssT0FDTCxJQUFLLElBQ0gsT0E5REVuQixPQThES21CLEVBQ1QsSUFBSyxPQUNMLElBQUssTUFDTCxJQUFLLElBQ0gsT0FBT0EsRUFBSW5CLEVBQ2IsSUFBSyxRQUNMLElBQUssT0FDTCxJQUFLLE1BQ0wsSUFBSyxLQUNMLElBQUssSUFDSCxPQUFPbUIsRUFBSSs0QixFQUNiLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxPQUNMLElBQUssTUFDTCxJQUFLLElBQ0gsT0FBTy80QixFQUFJckIsRUFDYixJQUFLLFVBQ0wsSUFBSyxTQUNMLElBQUssT0FDTCxJQUFLLE1BQ0wsSUFBSyxJQUNILE9BQU9xQixFQUFJTSxFQUNiLElBQUssZUFDTCxJQUFLLGNBQ0wsSUFBSyxRQUNMLElBQUssT0FDTCxJQUFLLEtBQ0gsT0FBT04sRUFDVCxRQUNFLFFBdkVLcVMsQ0FBTWtHLEdBQ1IsR0FBYSxXQUFUdFgsR0FBcUJpMkMsU0FBUzMrQixHQUN2QyxPQUFPcE0sRUFBUWl0QixLQTBHbkIsU0FBaUJ2aEIsR0FDZixJQUFJbS9CLEVBQVF6ekMsS0FBSzJWLElBQUlyQixHQUNyQixHQUFJbS9CLEdBQVNuNEMsRUFDWCxPQUFPbTZCLEVBQU9uaEIsRUFBSW0vQixFQUFPbjRDLEVBQUcsT0FFOUIsR0FBSW00QyxHQUFTamUsRUFDWCxPQUFPQyxFQUFPbmhCLEVBQUltL0IsRUFBT2plLEVBQUcsUUFFOUIsR0FBSWllLEdBQVNyNEMsRUFDWCxPQUFPcTZCLEVBQU9uaEIsRUFBSW0vQixFQUFPcjRDLEVBQUcsVUFFOUIsR0FBSXE0QyxHQUFTMTJDLEVBQ1gsT0FBTzA0QixFQUFPbmhCLEVBQUltL0IsRUFBTzEyQyxFQUFHLFVBRTlCLE9BQU91WCxFQUFLLE1BeEhZcy9CLENBQVE1K0IsR0FpRmxDLFNBQWtCVixHQUNoQixJQUFJbS9CLEVBQVF6ekMsS0FBSzJWLElBQUlyQixHQUNyQixHQUFJbS9CLEdBQVNuNEMsRUFDWCxPQUFPMEUsS0FBSzgxQixNQUFNeGhCLEVBQUtoWixHQUFLLElBRTlCLEdBQUltNEMsR0FBU2plLEVBQ1gsT0FBT3gxQixLQUFLODFCLE1BQU14aEIsRUFBS2toQixHQUFLLElBRTlCLEdBQUlpZSxHQUFTcjRDLEVBQ1gsT0FBTzRFLEtBQUs4MUIsTUFBTXhoQixFQUFLbFosR0FBSyxJQUU5QixHQUFJcTRDLEdBQVMxMkMsRUFDWCxPQUFPaUQsS0FBSzgxQixNQUFNeGhCLEVBQUt2WCxHQUFLLElBRTlCLE9BQU91WCxFQUFLLEtBL0YyQnloQixDQUFTL2dCLEdBRWhELE1BQU0sSUFBSTFVLE1BQ1Isd0RBQ0UyTixLQUFLQyxVQUFVOEcsTSxnQkMvQnJCLE1BQU1naEIsRUFBTSxFQUFRLEdBQ2RyakIsRUFBTyxFQUFRLEdBTXJCN1gsRUFBUSthLEtBdU5SLFNBQWNsSixHQUNiQSxFQUFNc3BCLFlBQWMsR0FFcEIsTUFBTXAxQixFQUFPbkYsT0FBT21GLEtBQUsvRixFQUFRbTdCLGFBQ2pDLElBQUssSUFBSWo3QixFQUFJLEVBQUdBLEVBQUk2RixFQUFLZCxPQUFRL0UsSUFDaEMyUixFQUFNc3BCLFlBQVlwMUIsRUFBSzdGLElBQU1GLEVBQVFtN0IsWUFBWXAxQixFQUFLN0YsS0EzTnhERixFQUFRc2EsSUFnTFIsWUFBZ0JYLEdBQ2YsT0FBT2hYLFFBQVF5QyxPQUFPa0wsTUFBTXVILEVBQUtrQyxVQUFVSixHQUFRLE9BaExwRDNaLEVBQVFvYSxXQXFKUixTQUFvQlQsR0FDbkIsTUFBT1QsVUFBV3pZLEVBQUksVUFBRWdhLEdBQWFuTixLQUVyQyxHQUFJbU4sRUFBVyxDQUNkLE1BQU1sYSxFQUFJK00sS0FBS29OLE1BQ1QwZ0IsRUFBWSxPQUFjNzZCLEVBQUksRUFBSUEsRUFBSSxPQUFTQSxHQUMvQ213QixFQUFTLEtBQUswSyxPQUFlMzZCLFNBRW5Da1osRUFBSyxHQUFLK1csRUFBUy9XLEVBQUssR0FBRzFWLE1BQU0sTUFBTStILEtBQUssS0FBTzBrQixHQUNuRC9XLEVBQUt6VCxLQUFLazFCLEVBQVksS0FBT243QixFQUFPRCxRQUFRMmIsU0FBU3JPLEtBQUttTSxNQUFRLGFBRWxFRSxFQUFLLEdBSVAsV0FDQyxHQUFJM1osRUFBUW03QixZQUFZRSxTQUN2QixNQUFPLEdBRVIsT0FBTyxJQUFJOWhCLE1BQU8raEIsY0FBZ0IsSUFSdkJ5ZCxHQUFZdDRDLEVBQU8sSUFBTWtaLEVBQUssSUEvSjFDM1osRUFBUXFiLEtBd0xSLFNBQWNELEdBQ1RBLEVBQ0h6WSxRQUFRTSxJQUFJdTJCLE1BQVFwZSxTQUlielksUUFBUU0sSUFBSXUyQixPQTdMckJ4NUIsRUFBUTJtQixLQXdNUixXQUNDLE9BQU9oa0IsUUFBUU0sSUFBSXUyQixPQXhNcEJ4NUIsRUFBUXlhLFVBc0lSLFdBQ0MsTUFBTyxXQUFZemEsRUFBUW03QixZQUMxQmplLFFBQVFsZCxFQUFRbTdCLFlBQVl2Z0IsUUFDNUJzZ0IsRUFBSUssT0FBTzU0QixRQUFReUMsT0FBT28yQixLQW5JNUJ4N0IsRUFBUTRhLE9BQVMsQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FFakMsSUFHQyxNQUFNN1YsRUFBZ0IsRUFBUSxJQUUxQkEsSUFBa0JBLEVBQWNLLFFBQVVMLEdBQWUxQixPQUFTLElBQ3JFckQsRUFBUTRhLE9BQVMsQ0FDaEIsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsTUFHRCxNQUFPM1IsSUFVVGpKLEVBQVFtN0IsWUFBY3Y2QixPQUFPbUYsS0FBS3BELFFBQVFNLEtBQUtrZ0IsT0FBTzFoQixHQUM5QyxXQUFXK0MsS0FBSy9DLElBQ3JCbVUsT0FBTyxDQUFDOUMsRUFBS3JSLEtBRWYsTUFBTXFkLEVBQU9yZCxFQUNYOEosVUFBVSxHQUNWNUYsY0FDQW1VLFFBQVEsWUFBYSxDQUFDOFosRUFBR1MsSUFDbEJBLEVBQUVvSCxlQUlYLElBQUl2aEIsRUFBTXZYLFFBQVFNLElBQUl4QixHQVl0QixPQVZDeVksSUFERywyQkFBMkIxVixLQUFLMFYsS0FFekIsNkJBQTZCMVYsS0FBSzBWLEtBRTFCLFNBQVJBLEVBQ0osS0FFQWhXLE9BQU9nVyxJQUdkcEgsRUFBSWdNLEdBQVE1RSxFQUNMcEgsR0FDTCxJQTJGSDdTLEVBQU9ELFFBQVUsRUFBUSxHQUFSLENBQW9CQSxHQUVyQyxNQUFNLFdBQUNpYSxHQUFjaGEsRUFBT0QsUUFNNUJpYSxFQUFXdFosRUFBSSxTQUFVNHpCLEdBRXhCLE9BREFqbkIsS0FBSzZ0QixZQUFZdmdCLE9BQVN0TixLQUFLbU4sVUFDeEI1QyxFQUFLK2YsUUFBUXJELEVBQUdqbkIsS0FBSzZ0QixhQUMxQnJoQixRQUFRLFlBQWEsTUFPeEJHLEVBQVcwaEIsRUFBSSxTQUFVcEgsR0FFeEIsT0FEQWpuQixLQUFLNnRCLFlBQVl2Z0IsT0FBU3ROLEtBQUttTixVQUN4QjVDLEVBQUsrZixRQUFRckQsRUFBR2puQixLQUFLNnRCLGUsZ0JDaFA3QixTQUFTcnBCLEVBQVFnQixHQUNmLEdBQUlBLEVBQUssT0FXWCxTQUFlQSxHQUNiLElBQUssSUFBSXJSLEtBQU9xUSxFQUFRaFEsVUFDdEJnUixFQUFJclIsR0FBT3FRLEVBQVFoUSxVQUFVTCxHQUUvQixPQUFPcVIsRUFmU3dxQyxDQUFNeHFDLEdBVnRCN1MsRUFBT0QsUUFBVThSLEVBcUNuQkEsRUFBUWhRLFVBQVV1TyxHQUNsQnlCLEVBQVFoUSxVQUFVc29CLGlCQUFtQixTQUFTMlIsRUFBTzNqQixHQUluRCxPQUhBOUssS0FBS2l3QyxXQUFhandDLEtBQUtpd0MsWUFBYyxJQUNwQ2p3QyxLQUFLaXdDLFdBQVcsSUFBTXhoQixHQUFTenVCLEtBQUtpd0MsV0FBVyxJQUFNeGhCLElBQVUsSUFDN0Q3MUIsS0FBS2tTLEdBQ0Q5SyxNQWFUd0UsRUFBUWhRLFVBQVV1bUIsS0FBTyxTQUFTMFQsRUFBTzNqQixHQUN2QyxTQUFTL0gsSUFDUC9DLEtBQUtrd0MsSUFBSXpoQixFQUFPMXJCLEdBQ2hCK0gsRUFBR29DLE1BQU1sTixLQUFNb0osV0FLakIsT0FGQXJHLEVBQUcrSCxHQUFLQSxFQUNSOUssS0FBSytDLEdBQUcwckIsRUFBTzFyQixHQUNSL0MsTUFhVHdFLEVBQVFoUSxVQUFVMDdDLElBQ2xCMXJDLEVBQVFoUSxVQUFVNEwsZUFDbEJvRSxFQUFRaFEsVUFBVTJ0QixtQkFDbEIzZCxFQUFRaFEsVUFBVXVvQixvQkFBc0IsU0FBUzBSLEVBQU8zakIsR0FJdEQsR0FIQTlLLEtBQUtpd0MsV0FBYWp3QyxLQUFLaXdDLFlBQWMsR0FHakMsR0FBSzdtQyxVQUFVelIsT0FFakIsT0FEQXFJLEtBQUtpd0MsV0FBYSxHQUNYandDLEtBSVQsSUFVSW9pQixFQVZBK3RCLEVBQVlud0MsS0FBS2l3QyxXQUFXLElBQU14aEIsR0FDdEMsSUFBSzBoQixFQUFXLE9BQU9ud0MsS0FHdkIsR0FBSSxHQUFLb0osVUFBVXpSLE9BRWpCLGNBRE9xSSxLQUFLaXdDLFdBQVcsSUFBTXhoQixHQUN0Qnp1QixLQUtULElBQUssSUFBSXBOLEVBQUksRUFBR0EsRUFBSXU5QyxFQUFVeDRDLE9BQVEvRSxJQUVwQyxJQURBd3ZCLEVBQUsrdEIsRUFBVXY5QyxNQUNKa1ksR0FBTXNYLEVBQUd0WCxLQUFPQSxFQUFJLENBQzdCcWxDLEVBQVV0akMsT0FBT2phLEVBQUcsR0FDcEIsTUFHSixPQUFPb04sTUFXVHdFLEVBQVFoUSxVQUFVcVMsS0FBTyxTQUFTNG5CLEdBQ2hDenVCLEtBQUtpd0MsV0FBYWp3QyxLQUFLaXdDLFlBQWMsR0FDckMsSUFBSTVqQyxFQUFPLEdBQUdqTyxNQUFNckwsS0FBS3FXLFVBQVcsR0FDaEMrbUMsRUFBWW53QyxLQUFLaXdDLFdBQVcsSUFBTXhoQixHQUV0QyxHQUFJMGhCLEVBRUYsSUFBSyxJQUFJdjlDLEVBQUksRUFBR3NiLEdBRGhCaWlDLEVBQVlBLEVBQVUveEMsTUFBTSxJQUNJekcsT0FBUS9FLEVBQUlzYixJQUFPdGIsRUFDakR1OUMsRUFBVXY5QyxHQUFHc2EsTUFBTWxOLEtBQU1xTSxHQUk3QixPQUFPck0sTUFXVHdFLEVBQVFoUSxVQUFVeVcsVUFBWSxTQUFTd2pCLEdBRXJDLE9BREF6dUIsS0FBS2l3QyxXQUFhandDLEtBQUtpd0MsWUFBYyxHQUM5Qmp3QyxLQUFLaXdDLFdBQVcsSUFBTXhoQixJQUFVLElBV3pDanFCLEVBQVFoUSxVQUFVNDdDLGFBQWUsU0FBUzNoQixHQUN4QyxRQUFVenVCLEtBQUtpTCxVQUFVd2pCLEdBQU85MkIsUyxnQkMzSmxDLElBQUkrTSxFQUFVLEVBQVEsSUFDbEJDLEVBQVEsRUFBUSxJQUNoQnBILEVBQVdqSyxPQUFPa0IsVUFBVStJLFNBQzVCK04sRUFBaUMsbUJBQVRDLE1BQXdDLG9CQUFUQSxNQUFnRCw2QkFBeEJoTyxFQUFTeEssS0FBS3dZLE1BQzdGQyxFQUFpQyxtQkFBVEMsTUFBd0Msb0JBQVRBLE1BQWdELDZCQUF4QmxPLEVBQVN4SyxLQUFLMFksTUFZakcvWSxFQUFRNFQsa0JBQW9CLFNBQVN4TCxHQUNuQyxJQUFJaUUsRUFBVSxHQUNWc3hDLEVBQWF2MUMsRUFBT0gsS0FDcEI0TCxFQUFPekwsRUFHWCxPQUZBeUwsRUFBSzVMLEtBS1AsU0FBUzIxQyxFQUFtQjMxQyxFQUFNb0UsR0FDaEMsSUFBS3BFLEVBQU0sT0FBT0EsRUFFbEIsR0FBSWdLLEVBQU1oSyxHQUFPLENBQ2YsSUFBSTQxQyxFQUFjLENBQUVDLGNBQWMsRUFBTXB1QyxJQUFLckQsRUFBUXBILFFBRXJELE9BREFvSCxFQUFRbkcsS0FBSytCLEdBQ040MUMsRUFDRixHQUFJN3JDLEVBQVEvSixHQUFPLENBRXhCLElBREEsSUFBSTgxQyxFQUFVLElBQUloMUMsTUFBTWQsRUFBS2hELFFBQ3BCL0UsRUFBSSxFQUFHQSxFQUFJK0gsRUFBS2hELE9BQVEvRSxJQUMvQjY5QyxFQUFRNzlDLEdBQUswOUMsRUFBbUIzMUMsRUFBSy9ILEdBQUltTSxHQUUzQyxPQUFPMHhDLEVBQ0YsR0FBb0IsaUJBQVQ5MUMsS0FBdUJBLGFBQWdCc1IsTUFBTyxDQUMxRHdrQyxFQUFVLEdBQ2QsSUFBSyxJQUFJdDhDLEtBQU93RyxFQUNkODFDLEVBQVF0OEMsR0FBT204QyxFQUFtQjMxQyxFQUFLeEcsR0FBTTRLLEdBRS9DLE9BQU8weEMsRUFFVCxPQUFPOTFDLEVBekJLMjFDLENBQW1CRCxFQUFZdHhDLEdBQzNDd0gsRUFBS2QsWUFBYzFHLEVBQVFwSCxPQUNwQixDQUFDbUQsT0FBUXlMLEVBQU14SCxRQUFTQSxJQW1DakNyTSxFQUFReVUsa0JBQW9CLFNBQVNyTSxFQUFRaUUsR0FHM0MsT0FGQWpFLEVBQU9ILEtBS1QsU0FBUysxQyxFQUFtQi8xQyxFQUFNb0UsR0FDaEMsSUFBS3BFLEVBQU0sT0FBT0EsRUFFbEIsR0FBSUEsR0FBUUEsRUFBSzYxQyxhQUNmLE9BQU96eEMsRUFBUXBFLEVBQUt5SCxLQUNmLEdBQUlzQyxFQUFRL0osR0FDakIsSUFBSyxJQUFJL0gsRUFBSSxFQUFHQSxFQUFJK0gsRUFBS2hELE9BQVEvRSxJQUMvQitILEVBQUsvSCxHQUFLODlDLEVBQW1CLzFDLEVBQUsvSCxHQUFJbU0sUUFFbkMsR0FBb0IsaUJBQVRwRSxFQUNoQixJQUFLLElBQUl4RyxLQUFPd0csRUFDZEEsRUFBS3hHLEdBQU91OEMsRUFBbUIvMUMsRUFBS3hHLEdBQU00SyxHQUk5QyxPQUFPcEUsRUFwQk8rMUMsQ0FBbUI1MUMsRUFBT0gsS0FBTW9FLEdBQzlDakUsRUFBTzJLLGlCQUFjcFAsRUFDZHlFLEdBK0JUcEksRUFBUXlULFlBQWMsU0FBU3hMLEVBQU1LLEdBcUNuQyxJQUFJMjFDLEVBQWUsRUFDZnZxQyxFQUFlekwsR0FyQ25CLFNBQVNpMkMsRUFBYXByQyxFQUFLcXJDLEVBQVFDLEdBQ2pDLElBQUt0ckMsRUFBSyxPQUFPQSxFQUdqQixHQUFLOEYsR0FBa0I5RixhQUFlK0YsTUFDakNDLEdBQWtCaEcsYUFBZWlHLEtBQU8sQ0FDM0NrbEMsSUFHQSxJQUFJSSxFQUFhLElBQUlDLFdBQ3JCRCxFQUFXRSxPQUFTLFdBQ2RILEVBQ0ZBLEVBQWlCRCxHQUFVN3dDLEtBQUt4RSxPQUdoQzRLLEVBQWVwRyxLQUFLeEUsU0FJZm0xQyxHQUNMMzFDLEVBQVNvTCxJQUliMnFDLEVBQVdHLGtCQUFrQjFyQyxRQUN4QixHQUFJZCxFQUFRYyxHQUNqQixJQUFLLElBQUk1UyxFQUFJLEVBQUdBLEVBQUk0UyxFQUFJN04sT0FBUS9FLElBQzlCZytDLEVBQWFwckMsRUFBSTVTLEdBQUlBLEVBQUc0UyxRQUVyQixHQUFtQixpQkFBUkEsSUFBcUJiLEVBQU1hLEdBQzNDLElBQUssSUFBSXJSLEtBQU9xUixFQUNkb3JDLEVBQWFwckMsRUFBSXJSLEdBQU1BLEVBQUtxUixHQU9sQ29yQyxDQUFheHFDLEdBQ1J1cUMsR0FDSDMxQyxFQUFTb0wsSyxnQkNwSWIxVCxFQUFRc2EsSUEyS1IsWUFBZ0JYLEdBR2YsTUFBMEIsaUJBQVpZLFNBQ2JBLFFBQVFELEtBQ1JDLFFBQVFELE9BQU9YLElBL0tqQjNaLEVBQVFvYSxXQWlJUixTQUFvQlQsR0FRbkIsR0FQQUEsRUFBSyxJQUFNck0sS0FBS21OLFVBQVksS0FBTyxJQUNsQ25OLEtBQUs0TCxXQUNKNUwsS0FBS21OLFVBQVksTUFBUSxLQUMxQmQsRUFBSyxJQUNKck0sS0FBS21OLFVBQVksTUFBUSxLQUMxQixJQUFNeGEsRUFBT0QsUUFBUTJiLFNBQVNyTyxLQUFLbU0sT0FFL0JuTSxLQUFLbU4sVUFDVCxPQUdELE1BQU1sYSxFQUFJLFVBQVkrTSxLQUFLb04sTUFDM0JmLEVBQUtRLE9BQU8sRUFBRyxFQUFHNVosRUFBRyxrQkFLckIsSUFBSXNaLEVBQVEsRUFDUjRmLEVBQVEsRUFDWjlmLEVBQUssR0FBR0csUUFBUSxjQUFlN0UsSUFDaEIsT0FBVkEsSUFHSjRFLElBQ2MsT0FBVjVFLElBR0h3a0IsRUFBUTVmLE1BSVZGLEVBQUtRLE9BQU9zZixFQUFPLEVBQUdsNUIsSUFoS3ZCUCxFQUFRcWIsS0F1TFIsU0FBY0QsR0FDYixJQUNLQSxFQUNIcGIsRUFBUXU1QixRQUFRa2YsUUFBUSxRQUFTcjlCLEdBRWpDcGIsRUFBUXU1QixRQUFRRyxXQUFXLFNBRTNCLE1BQU96d0IsTUE3TFZqSixFQUFRMm1CLEtBeU1SLFdBQ0MsSUFBSTNsQixFQUNKLElBQ0NBLEVBQUloQixFQUFRdTVCLFFBQVFtZixRQUFRLFNBQzNCLE1BQU96dkMsS0FNSmpJLEdBQXdCLG9CQUFaMkIsU0FBMkIsUUFBU0EsVUFDcEQzQixFQUFJMkIsUUFBUU0sSUFBSXUyQixPQUdqQixPQUFPeDRCLEdBdE5SaEIsRUFBUXlhLFVBK0ZSLFdBSUMsR0FBc0Isb0JBQVhrZixRQUEwQkEsT0FBT2gzQixVQUFvQyxhQUF4QmczQixPQUFPaDNCLFFBQVFDLE1BQXVCKzJCLE9BQU9oM0IsUUFBUUcsUUFDNUcsT0FBTyxFQUlSLEdBQXlCLG9CQUFkODJCLFdBQTZCQSxVQUFVQyxXQUFhRCxVQUFVQyxVQUFVbDBCLGNBQWNzUCxNQUFNLHlCQUN0RyxPQUFPLEVBS1IsTUFBNEIsb0JBQWI2a0IsVUFBNEJBLFNBQVNDLGlCQUFtQkQsU0FBU0MsZ0JBQWdCQyxPQUFTRixTQUFTQyxnQkFBZ0JDLE1BQU1DLGtCQUVwSCxvQkFBWE4sUUFBMEJBLE9BQU9wZixVQUFZb2YsT0FBT3BmLFFBQVEyZixTQUFZUCxPQUFPcGYsUUFBUTRmLFdBQWFSLE9BQU9wZixRQUFRNmYsUUFHckcsb0JBQWRSLFdBQTZCQSxVQUFVQyxXQUFhRCxVQUFVQyxVQUFVbDBCLGNBQWNzUCxNQUFNLG1CQUFxQnJRLFNBQVM2VyxPQUFPNGUsR0FBSSxLQUFPLElBRTlILG9CQUFkVCxXQUE2QkEsVUFBVUMsV0FBYUQsVUFBVUMsVUFBVWwwQixjQUFjc1AsTUFBTSx1QkFwSHRHalYsRUFBUXU1QixRQW1PUixXQUNDLElBR0MsT0FBT2lCLGFBQ04sTUFBT3Z4QixLQXhPUXd4QixHQU1sQno2QixFQUFRNGEsT0FBUyxDQUNoQixVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxXQTRKRDNhLEVBQU9ELFFBQVUsRUFBUSxHQUFSLENBQW9CQSxHQUVyQyxNQUFNLFdBQUNpYSxHQUFjaGEsRUFBT0QsUUFNNUJpYSxFQUFXZ0ssRUFBSSxTQUFVc1EsR0FDeEIsSUFDQyxPQUFPcGhCLEtBQUtDLFVBQVVtaEIsR0FDckIsTUFBT3RyQixHQUNSLE1BQU8sK0JBQWlDQSxFQUFNaEQsVyxjQ2pRaEQsSUFBSWhFLEVBQUksSUFDSjNCLEVBQUkyQixJQUNKeTRCLEVBQUlwNkIsS0FDSkUsRUFBUSxHQUFKazZCLEVBdUpSLFNBQVNDLEVBQU9uaEIsRUFBSW0vQixFQUFPaDNDLEVBQUdsQixHQUM1QixJQUFJbTRDLEVBQVdELEdBQWEsSUFBSmgzQyxFQUN4QixPQUFPdUQsS0FBSzgxQixNQUFNeGhCLEVBQUs3WCxHQUFLLElBQU1sQixHQUFRbTRDLEVBQVcsSUFBTSxJQXZJN0QzNEMsRUFBT0QsUUFBVSxTQUFTa2EsRUFBS3BNLEdBQzdCQSxFQUFVQSxHQUFXLEdBQ3JCLElBQUlsTCxTQUFjc1gsRUFDbEIsR0FBYSxXQUFUdFgsR0FBcUJzWCxFQUFJalYsT0FBUyxFQUNwQyxPQWtCSixTQUFlb0UsR0FFYixJQURBQSxFQUFNQyxPQUFPRCxJQUNMcEUsT0FBUyxJQUNmLE9BRUYsSUFBSWdRLEVBQVEsbUlBQW1JQyxLQUM3STdMLEdBRUYsSUFBSzRMLEVBQ0gsT0FFRixJQUFJdFQsRUFBSW01QixXQUFXN2xCLEVBQU0sSUFFekIsUUFEWUEsRUFBTSxJQUFNLE1BQU10UCxlQUU1QixJQUFLLFFBQ0wsSUFBSyxPQUNMLElBQUssTUFDTCxJQUFLLEtBQ0wsSUFBSyxJQUNILE9BekRFbkYsU0F5REttQixFQUNULElBQUssUUFDTCxJQUFLLE9BQ0wsSUFBSyxJQUNILE9BOURFbkIsT0E4REttQixFQUNULElBQUssT0FDTCxJQUFLLE1BQ0wsSUFBSyxJQUNILE9BQU9BLEVBQUluQixFQUNiLElBQUssUUFDTCxJQUFLLE9BQ0wsSUFBSyxNQUNMLElBQUssS0FDTCxJQUFLLElBQ0gsT0FBT21CLEVBQUkrNEIsRUFDYixJQUFLLFVBQ0wsSUFBSyxTQUNMLElBQUssT0FDTCxJQUFLLE1BQ0wsSUFBSyxJQUNILE9BQU8vNEIsRUFBSXJCLEVBQ2IsSUFBSyxVQUNMLElBQUssU0FDTCxJQUFLLE9BQ0wsSUFBSyxNQUNMLElBQUssSUFDSCxPQUFPcUIsRUFBSU0sRUFDYixJQUFLLGVBQ0wsSUFBSyxjQUNMLElBQUssUUFDTCxJQUFLLE9BQ0wsSUFBSyxLQUNILE9BQU9OLEVBQ1QsUUFDRSxRQXZFS3FTLENBQU1rRyxHQUNSLEdBQWEsV0FBVHRYLEdBQXFCaTJDLFNBQVMzK0IsR0FDdkMsT0FBT3BNLEVBQVFpdEIsS0EwR25CLFNBQWlCdmhCLEdBQ2YsSUFBSW0vQixFQUFRenpDLEtBQUsyVixJQUFJckIsR0FDckIsR0FBSW0vQixHQUFTbjRDLEVBQ1gsT0FBT202QixFQUFPbmhCLEVBQUltL0IsRUFBT240QyxFQUFHLE9BRTlCLEdBQUltNEMsR0FBU2plLEVBQ1gsT0FBT0MsRUFBT25oQixFQUFJbS9CLEVBQU9qZSxFQUFHLFFBRTlCLEdBQUlpZSxHQUFTcjRDLEVBQ1gsT0FBT3E2QixFQUFPbmhCLEVBQUltL0IsRUFBT3I0QyxFQUFHLFVBRTlCLEdBQUlxNEMsR0FBUzEyQyxFQUNYLE9BQU8wNEIsRUFBT25oQixFQUFJbS9CLEVBQU8xMkMsRUFBRyxVQUU5QixPQUFPdVgsRUFBSyxNQXhIWXMvQixDQUFRNStCLEdBaUZsQyxTQUFrQlYsR0FDaEIsSUFBSW0vQixFQUFRenpDLEtBQUsyVixJQUFJckIsR0FDckIsR0FBSW0vQixHQUFTbjRDLEVBQ1gsT0FBTzBFLEtBQUs4MUIsTUFBTXhoQixFQUFLaFosR0FBSyxJQUU5QixHQUFJbTRDLEdBQVNqZSxFQUNYLE9BQU94MUIsS0FBSzgxQixNQUFNeGhCLEVBQUtraEIsR0FBSyxJQUU5QixHQUFJaWUsR0FBU3I0QyxFQUNYLE9BQU80RSxLQUFLODFCLE1BQU14aEIsRUFBS2xaLEdBQUssSUFFOUIsR0FBSXE0QyxHQUFTMTJDLEVBQ1gsT0FBT2lELEtBQUs4MUIsTUFBTXhoQixFQUFLdlgsR0FBSyxJQUU5QixPQUFPdVgsRUFBSyxLQS9GMkJ5aEIsQ0FBUy9nQixHQUVoRCxNQUFNLElBQUkxVSxNQUNSLHdEQUNFMk4sS0FBS0MsVUFBVThHLE0sZ0JDL0JyQixNQUFNZ2hCLEVBQU0sRUFBUSxHQUNkcmpCLEVBQU8sRUFBUSxHQU1yQjdYLEVBQVErYSxLQXVOUixTQUFjbEosR0FDYkEsRUFBTXNwQixZQUFjLEdBRXBCLE1BQU1wMUIsRUFBT25GLE9BQU9tRixLQUFLL0YsRUFBUW03QixhQUNqQyxJQUFLLElBQUlqN0IsRUFBSSxFQUFHQSxFQUFJNkYsRUFBS2QsT0FBUS9FLElBQ2hDMlIsRUFBTXNwQixZQUFZcDFCLEVBQUs3RixJQUFNRixFQUFRbTdCLFlBQVlwMUIsRUFBSzdGLEtBM054REYsRUFBUXNhLElBZ0xSLFlBQWdCWCxHQUNmLE9BQU9oWCxRQUFReUMsT0FBT2tMLE1BQU11SCxFQUFLa0MsVUFBVUosR0FBUSxPQWhMcEQzWixFQUFRb2EsV0FxSlIsU0FBb0JULEdBQ25CLE1BQU9ULFVBQVd6WSxFQUFJLFVBQUVnYSxHQUFhbk4sS0FFckMsR0FBSW1OLEVBQVcsQ0FDZCxNQUFNbGEsRUFBSStNLEtBQUtvTixNQUNUMGdCLEVBQVksT0FBYzc2QixFQUFJLEVBQUlBLEVBQUksT0FBU0EsR0FDL0Ntd0IsRUFBUyxLQUFLMEssT0FBZTM2QixTQUVuQ2taLEVBQUssR0FBSytXLEVBQVMvVyxFQUFLLEdBQUcxVixNQUFNLE1BQU0rSCxLQUFLLEtBQU8wa0IsR0FDbkQvVyxFQUFLelQsS0FBS2sxQixFQUFZLEtBQU9uN0IsRUFBT0QsUUFBUTJiLFNBQVNyTyxLQUFLbU0sTUFBUSxhQUVsRUUsRUFBSyxHQUlQLFdBQ0MsR0FBSTNaLEVBQVFtN0IsWUFBWUUsU0FDdkIsTUFBTyxHQUVSLE9BQU8sSUFBSTloQixNQUFPK2hCLGNBQWdCLElBUnZCeWQsR0FBWXQ0QyxFQUFPLElBQU1rWixFQUFLLElBL0oxQzNaLEVBQVFxYixLQXdMUixTQUFjRCxHQUNUQSxFQUNIelksUUFBUU0sSUFBSXUyQixNQUFRcGUsU0FJYnpZLFFBQVFNLElBQUl1MkIsT0E3THJCeDVCLEVBQVEybUIsS0F3TVIsV0FDQyxPQUFPaGtCLFFBQVFNLElBQUl1MkIsT0F4TXBCeDVCLEVBQVF5YSxVQXNJUixXQUNDLE1BQU8sV0FBWXphLEVBQVFtN0IsWUFDMUJqZSxRQUFRbGQsRUFBUW03QixZQUFZdmdCLFFBQzVCc2dCLEVBQUlLLE9BQU81NEIsUUFBUXlDLE9BQU9vMkIsS0FuSTVCeDdCLEVBQVE0YSxPQUFTLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBRWpDLElBR0MsTUFBTTdWLEVBQWdCLEVBQVEsSUFFMUJBLElBQWtCQSxFQUFjSyxRQUFVTCxHQUFlMUIsT0FBUyxJQUNyRXJELEVBQVE0YSxPQUFTLENBQ2hCLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLE1BR0QsTUFBTzNSLElBVVRqSixFQUFRbTdCLFlBQWN2NkIsT0FBT21GLEtBQUtwRCxRQUFRTSxLQUFLa2dCLE9BQU8xaEIsR0FDOUMsV0FBVytDLEtBQUsvQyxJQUNyQm1VLE9BQU8sQ0FBQzlDLEVBQUtyUixLQUVmLE1BQU1xZCxFQUFPcmQsRUFDWDhKLFVBQVUsR0FDVjVGLGNBQ0FtVSxRQUFRLFlBQWEsQ0FBQzhaLEVBQUdTLElBQ2xCQSxFQUFFb0gsZUFJWCxJQUFJdmhCLEVBQU12WCxRQUFRTSxJQUFJeEIsR0FZdEIsT0FWQ3lZLElBREcsMkJBQTJCMVYsS0FBSzBWLEtBRXpCLDZCQUE2QjFWLEtBQUswVixLQUUxQixTQUFSQSxFQUNKLEtBRUFoVyxPQUFPZ1csSUFHZHBILEVBQUlnTSxHQUFRNUUsRUFDTHBILEdBQ0wsSUEyRkg3UyxFQUFPRCxRQUFVLEVBQVEsR0FBUixDQUFvQkEsR0FFckMsTUFBTSxXQUFDaWEsR0FBY2hhLEVBQU9ELFFBTTVCaWEsRUFBV3RaLEVBQUksU0FBVTR6QixHQUV4QixPQURBam5CLEtBQUs2dEIsWUFBWXZnQixPQUFTdE4sS0FBS21OLFVBQ3hCNUMsRUFBSytmLFFBQVFyRCxFQUFHam5CLEtBQUs2dEIsYUFDMUJyaEIsUUFBUSxZQUFhLE1BT3hCRyxFQUFXMGhCLEVBQUksU0FBVXBILEdBRXhCLE9BREFqbkIsS0FBSzZ0QixZQUFZdmdCLE9BQVN0TixLQUFLbU4sVUFDeEI1QyxFQUFLK2YsUUFBUXJELEVBQUdqbkIsS0FBSzZ0QixlLGdCQzFQN0IsSUFBSXJwQixFQUFVLEVBQVEsR0FBVTZGLGFBQzVCQyxFQUFTLEVBQVEsSUFDakJzZCxFQUFTLEVBQVEsSUFDakI1SSxFQUFNLEVBQVEsR0FDZHphLEVBQVEsRUFBUSxHQUFSLENBQWlCLG9CQU03QjVSLEVBQU9ELFFBQVVBLEVBQVU0bUIsRUFRM0I1bUIsRUFBUW8xQixPQUFTLENBQ2YsUUFDQSxVQUNBLGFBQ0EsZ0JBQ0EsY0FDQSxrQkFTRixJQVdJamhCLEVBQU9yQyxFQUFRaFEsVUFBVXFTLEtBVTdCLFNBQVN5UyxFQUFPNVQsRUFBS21qQixFQUFRQyxHQUMzQjlvQixLQUFLMEYsSUFBTUEsRUFDWDFGLEtBQUt1WixPQUFTN1QsRUFBSTZULE9BQ2xCdlosS0FBS3dvQixRQUFVeG9CLEtBQUswRixJQUFJOGlCLFFBQ3hCeG9CLEtBQUsyRixHQUFrQixNQUFiRCxFQUFJdlMsS0FBZXVTLEVBQUl2UyxLQUFPLElBQU0wMUIsRUFBT2xqQixHQUFLa2pCLEVBQU9sakIsR0FDakUzRixLQUFLNm9CLE9BQVNBLEVBQ2Q3b0IsS0FBSytvQixLQUFPRixFQUFPRSxLQUNuQi9vQixLQUFLb29CLE1BQVEsR0FDYnBvQixLQUFLbXhDLEtBQU8sR0FDWm54QyxLQUFLaW9CLFdBQVksRUFDakJqb0IsS0FBS294QyxjQUFlLEVBQ3BCcHhDLEtBQUtrb0MsVUFBWWxvQyxLQUFLcXhDLGVBQWV2b0IsR0FDckM5b0IsS0FBS2tvQixJQUFNLEdBQ1hsb0IsS0FBSytuQixNQUFRLEdBQ2IvbkIsS0FBS3N4QyxPQUFTLEdBT2hCaDRCLEVBQU85a0IsVUFBVTh6QixVQUFZOWpCLEVBQVFoUSxVQTFDekIsQ0FDVixPQUNBLFdBQ0EsWUFDQSxTQTRDSWtFLFNBQVEsU0FBUzZ2QixHQUNyQmoxQixPQUFPQyxlQUFlK2xCLEVBQU85a0IsVUFBVyt6QixFQUFNLENBQzVDOTBCLElBQUssV0FFSCxPQURBdU0sS0FBSytuQixNQUFNUSxJQUFRLEVBQ1p2b0IsV0FXYjFNLE9BQU9DLGVBQWUrbEIsRUFBTzlrQixVQUFXLFVBQVcsQ0FDakRmLElBQUssV0FDSCxPQUFPdU0sS0FBSytvQixLQUFLaFAsV0FVckJULEVBQU85a0IsVUFBVTY4QyxlQUFpQixTQUFTdm9CLEdBQ3pDLElBRU15b0IsRUFGRnhsQyxFQUFPL0wsS0FNWCxNQUFPLENBQ0xzUSxRQUFTdFEsS0FBSytaLFFBQVF6SixRQUN0QmtoQyxLQUFNLElBQUt2bEMsS0FBUSxHQUNuQmtSLFFBQVNuZCxLQUFLK29CLEtBQUs5TyxjQUNuQnczQixVQUFXenhDLEtBQUsrWixRQUFRekosUUFBUXlQLE9BQ2hDa1csU0FBVWoyQixLQUFLK1osUUFBUTFCLFdBQVdtaUIsVUFDbENrWCxRQUFTLElBQUt6bEMsS0FDZCtTLElBQUtoZixLQUFLK1osUUFBUWlGLElBQ2xCOEosT0FaSXlvQixFQUFldnlCLEVBQUl0WSxNQUFNcUYsRUFBS2dPLFFBQVFpRixLQUFLLEdBQU04SixNQUU5Q3gxQixPQUFPNjFCLE9BQU8sR0FBSUwsRUFBT3lvQixNQXFCcENqNEIsRUFBTzlrQixVQUFVcVMsS0FBTyxTQUFTcWlCLEdBQy9CLElBQUt4MkIsRUFBUW8xQixPQUFPN2YsUUFBUWloQixHQUUxQixPQURBcmlCLEVBQUtxRyxNQUFNbE4sS0FBTW9KLFdBQ1ZwSixLQUdULElBQUlxTSxFQUFPNVEsTUFBTWpILFVBQVU0SixNQUFNckwsS0FBS3FXLFdBQ2xDdE8sRUFBUyxDQUNYeEYsV0FBNkJlLElBQXRCMkosS0FBSytuQixNQUFNdGpCLE9BQXVCekUsS0FBSytuQixNQUFNdGpCLE9BQVNtakIsRUFBT3ZiLElBQVMvQixFQUFPbkYsYUFBZW1GLEVBQU90RixNQUMxR3JLLEtBQU0wUixHQUlSLEdBQXFDLG1CQUExQkEsRUFBS0EsRUFBSzFVLE9BQVMsR0FBbUIsQ0FDL0MsR0FBSXFJLEtBQUtzeEMsT0FBTzM1QyxRQUFVcUksS0FBSytuQixNQUFNcUIsVUFDbkMsTUFBTSxJQUFJbHhCLE1BQU0saURBR2xCcU0sRUFBTSxpQ0FBa0N2RSxLQUFLMEYsSUFBSXlpQixLQUNqRG5vQixLQUFLbXhDLEtBQUtueEMsS0FBSzBGLElBQUl5aUIsS0FBTzliLEVBQUtzbEMsTUFDL0I3MkMsRUFBTzZLLEdBQUszRixLQUFLMEYsSUFBSXlpQixNQUd2QixJQUFJQyxFQUFRcG9CLEtBQUtzeEMsT0FBT2x6QyxNQUFNLEdBQzFCMnBCLEVBQVF6MEIsT0FBTzYxQixPQUFPLEdBQUlucEIsS0FBSytuQixPQWdCbkMsT0FiQS9uQixLQUFLc3hDLE9BQVMsR0FDZHR4QyxLQUFLK25CLE1BQVEsR0FFVEssRUFBTXp3QixRQUFVb3dCLEVBQU1xQixVQUN4QnBwQixLQUFLd29CLFFBQVFZLFVBQVV0dUIsRUFBUSxDQUM3QjgyQyxPQUFRLENBQUM1eEMsS0FBSzJGLElBQ2R5aUIsTUFBT0EsRUFDUEwsTUFBT0EsSUFJVC9uQixLQUFLbEYsT0FBT0EsRUFBUWl0QixHQUVmL25CLE1BV1RzWixFQUFPOWtCLFVBQVU2VCxHQUNqQmlSLEVBQU85a0IsVUFBVW8wQixHQUFLLFNBQVN6MUIsR0FFN0IsT0FETTZNLEtBQUtzeEMsT0FBT3JwQyxRQUFROVUsSUFBTzZNLEtBQUtzeEMsT0FBTzE0QyxLQUFLekYsR0FDM0M2TSxNQVVUc1osRUFBTzlrQixVQUFVc2pCLEtBQ2pCd0IsRUFBTzlrQixVQUFVd08sTUFBUSxXQUN2QixJQUFJcUosRUFBTzVRLE1BQU1qSCxVQUFVNEosTUFBTXJMLEtBQUtxVyxXQUd0QyxPQUZBaUQsRUFBSzdGLFFBQVEsV0FDYnhHLEtBQUs2RyxLQUFLcUcsTUFBTWxOLEtBQU1xTSxHQUNmck0sTUFXVHNaLEVBQU85a0IsVUFBVXNHLE9BQVMsU0FBU0EsRUFBUWtILEdBQ3pDbEgsRUFBTzRLLElBQU0xRixLQUFLMEYsSUFBSXZTLE1BQ3RCNk8sRUFBT0EsR0FBUSxJQUNWdVcsVUFBVyxJQUFVdlcsRUFBS3VXLFNBQy9CdlksS0FBSzZvQixPQUFPL3RCLE9BQU9BLEVBQVFrSCxJQVk3QnNYLEVBQU85a0IsVUFBVWtLLEtBQU8sU0FBUzBwQixFQUFPdGQsR0FDdEN2RyxFQUFNLGtCQUFtQjZqQixHQUN6QixJQUFJcmMsRUFBTy9MLEtBT1gsT0FOS3ZFLE1BQU1pSixRQUFRMGpCLEtBQ2pCQSxFQUFRLENBQUNBLEtBRVhBLEVBQVFBLEVBQU12UyxRQUFPLFNBQVVnOEIsR0FDN0IsT0FBUTlsQyxFQUFLcWMsTUFBTTN6QixlQUFlbzlDLE9BRXpCbDZDLFFBSVhxSSxLQUFLd29CLFFBQVFzcEIsT0FBTzl4QyxLQUFLMkYsR0FBSXlpQixHQUFPLFNBQVMxdEIsR0FDM0MsR0FBSUEsRUFBSyxPQUFPb1EsR0FBTUEsRUFBR3BRLEdBQ3pCNkosRUFBTSxpQkFBa0I2akIsR0FDeEJBLEVBQU0xdkIsU0FBUSxTQUFVbTVDLEdBQ3RCOWxDLEVBQUtxYyxNQUFNeXBCLEdBQVFBLEtBRXJCL21DLEdBQU1BLEVBQUcsU0FFSjlLLE9BWEw4SyxHQUFNQSxFQUFHLE1BQ0Y5SyxPQXNCWHNaLEVBQU85a0IsVUFBVXU5QyxNQUFRLFNBQVNGLEVBQU0vbUMsR0FDdEN2RyxFQUFNLGdCQUFpQnN0QyxHQUN2QixJQUFJOWxDLEVBQU8vTCxLQU9YLE9BTkFBLEtBQUt3b0IsUUFBUXdwQixJQUFJaHlDLEtBQUsyRixHQUFJa3NDLEdBQU0sU0FBU24zQyxHQUN2QyxHQUFJQSxFQUFLLE9BQU9vUSxHQUFNQSxFQUFHcFEsR0FDekI2SixFQUFNLGVBQWdCc3RDLFVBQ2Y5bEMsRUFBS3FjLE1BQU15cEIsR0FDbEIvbUMsR0FBTUEsRUFBRyxTQUVKOUssTUFTVHNaLEVBQU85a0IsVUFBVXk5QyxTQUFXLFdBQzFCanlDLEtBQUt3b0IsUUFBUTBwQixPQUFPbHlDLEtBQUsyRixJQUN6QjNGLEtBQUtvb0IsTUFBUSxJQVlmOU8sRUFBTzlrQixVQUFVdzBCLFVBQVksV0FDM0J6a0IsRUFBTSxxQ0FDTnZFLEtBQUswRixJQUFJdWlCLFVBQVVqb0IsS0FBSzJGLElBQU0zRixLQUM5QkEsS0FBS3RCLEtBQUtzQixLQUFLMkYsSUFDYyxNQUFsQjNGLEtBQUswRixJQUFJdlMsTUFBd0MsSUFBeEI2TSxLQUFLMEYsSUFBSXdpQixJQUFJdndCLE9BRS9DNE0sRUFBTSw0Q0FFTnZFLEtBQUtsRixPQUFPLENBQUV4RixLQUFNZ1YsRUFBT3hGLFdBVy9Cd1UsRUFBTzlrQixVQUFVdTdDLFNBQVcsU0FBU2oxQyxHQUVuQyxPQURBeUosRUFBTSxnQkFBaUJ6SixHQUNmQSxFQUFPeEYsTUFDYixLQUFLZ1YsRUFBT3RGLE1BSVosS0FBS3NGLEVBQU9uRixhQUNWbkYsS0FBS215QyxRQUFRcjNDLEdBQ2IsTUFFRixLQUFLd1AsRUFBT3JGLElBSVosS0FBS3FGLEVBQU9sRixXQUNWcEYsS0FBS295QyxNQUFNdDNDLEdBQ1gsTUFFRixLQUFLd1AsRUFBT3ZGLFdBQ1YvRSxLQUFLcXlDLGVBQ0wsTUFFRixLQUFLL25DLEVBQU9wRixNQUNWbEYsS0FBSzBxQixRQUFRLElBQUl4eUIsTUFBTTRDLEVBQU9ILFNBV3BDMmUsRUFBTzlrQixVQUFVMjlDLFFBQVUsU0FBU3IzQyxHQUNsQyxJQUFJdVIsRUFBT3ZSLEVBQU9ILE1BQVEsR0FDMUI0SixFQUFNLG9CQUFxQjhILEdBRXZCLE1BQVF2UixFQUFPNkssS0FDakJwQixFQUFNLG1DQUNOOEgsRUFBS3pULEtBQUtvSCxLQUFLc3lDLElBQUl4M0MsRUFBTzZLLE1BRzVCM0YsS0FBS3FtQixTQUFTaGEsSUFVaEJpTixFQUFPOWtCLFVBQVU4OUMsSUFBTSxTQUFTM3NDLEdBQzlCLElBQUlvRyxFQUFPL0wsS0FDUHV5QyxHQUFPLEVBQ1gsT0FBTyxXQUVMLElBQUlBLEVBQUosQ0FDQSxJQUFJbG1DLEVBQU81USxNQUFNakgsVUFBVTRKLE1BQU1yTCxLQUFLcVcsV0FDdEM3RSxFQUFNLGlCQUFrQjhILEdBRXhCTixFQUFLalIsT0FBTyxDQUNWNkssR0FBSUEsRUFDSnJRLEtBQU1zeUIsRUFBT3ZiLEdBQVEvQixFQUFPbEYsV0FBYWtGLEVBQU9yRixJQUNoRHRLLEtBQU0wUixJQUdSa21DLEdBQU8sS0FVWGo1QixFQUFPOWtCLFVBQVU0OUMsTUFBUSxTQUFTdDNDLEdBQ2hDLElBQUl3M0MsRUFBTXR5QyxLQUFLbXhDLEtBQUtyMkMsRUFBTzZLLElBQ3ZCLG1CQUFxQjJzQyxHQUN2Qi90QyxFQUFNLHlCQUEwQnpKLEVBQU82SyxHQUFJN0ssRUFBT0gsTUFDbEQyM0MsRUFBSXBsQyxNQUFNbE4sS0FBTWxGLEVBQU9ILGFBQ2hCcUYsS0FBS214QyxLQUFLcjJDLEVBQU82SyxLQUV4QnBCLEVBQU0sYUFBY3pKLEVBQU82SyxLQVUvQjJULEVBQU85a0IsVUFBVTY5QyxhQUFlLFdBQzlCOXRDLEVBQU0seUJBQ052RSxLQUFLbW1DLFFBQVEsZ0NBU2Y3c0IsRUFBTzlrQixVQUFVazJCLFFBQVUsU0FBU2h3QixHQUM5QnNGLEtBQUtpTCxVQUFVLFNBQVN0VCxPQUMxQnFJLEtBQUs2RyxLQUFLLFFBQVNuTSxJQUVuQnVTLFFBQVF0UixNQUFNLHNDQUNkc1IsUUFBUXRSLE1BQU1qQixFQUFJaVQsU0FZdEIyTCxFQUFPOWtCLFVBQVUyeEMsUUFBVSxTQUFTenFCLEdBQ2xDLElBQUsxYixLQUFLaW9CLFVBQVcsT0FBT2pvQixLQUM1QnVFLEVBQU0sNkJBQThCbVgsR0FDcEMxYixLQUFLNkcsS0FBSyxnQkFBaUI2VSxHQUMzQjFiLEtBQUtpeUMsV0FDTGp5QyxLQUFLMEYsSUFBSXVqQixPQUFPanBCLE1BQ2hCQSxLQUFLNm9CLE9BQU9JLE9BQU9qcEIsTUFDbkJBLEtBQUtpb0IsV0FBWSxFQUNqQmpvQixLQUFLb3hDLGNBQWUsU0FDYnB4QyxLQUFLMEYsSUFBSXVpQixVQUFVam9CLEtBQUsyRixJQUMvQjNGLEtBQUs2RyxLQUFLLGFBQWM2VSxJQVUxQnBDLEVBQU85a0IsVUFBVW1ILE1BQVEsU0FBU2pCLEdBQ2hDc0YsS0FBS2xGLE9BQU8sQ0FBRXhGLEtBQU1nVixFQUFPcEYsTUFBT3ZLLEtBQU1ELEtBVzFDNGUsRUFBTzlrQixVQUFVazdDLFdBQWEsU0FBU3QxQyxHQUNyQyxPQUFLNEYsS0FBS2lvQixXQUNON3RCLEVBQ0Y0RixLQUFLNm9CLE9BQU82bUIsY0FFWjF2QyxLQUFLbEYsT0FBTyxDQUFFeEYsS0FBTWdWLEVBQU92RixhQUMzQi9FLEtBQUttbUMsUUFBUSxnQ0FFUm5tQyxNQVBxQkEsTUFrQjlCc1osRUFBTzlrQixVQUFVK2pCLFNBQVcsU0FBU0EsR0FFbkMsT0FEQXZZLEtBQUsrbkIsTUFBTXhQLFNBQVdBLEVBQ2Z2WSxNQVdSc1osRUFBTzlrQixVQUFVaVEsT0FBUyxTQUFVQSxHQUVsQyxPQURBekUsS0FBSytuQixNQUFNdGpCLE9BQVNBLEVBQ2J6RSxNQVVWc1osRUFBTzlrQixVQUFVNnhCLFNBQVcsU0FBU29JLEdBQ25DbHFCLEVBQU0sMEJBQTJCa3FCLEdBQ2pDLElBQUkxaUIsRUFBTy9MLEtBU1hBLEtBQUsyb0IsSUFBSThGLEdBUlQsU0FBd0IvekIsR0FDdEJyRixRQUFRc2EsVUFBUyxXQUNmLEdBQUlqVixFQUNGLE9BQU9xUixFQUFLcFEsTUFBTWpCLEVBQUlDLE1BQVFELEVBQUkvQixTQUVwQ2tPLEVBQUtxRyxNQUFNbkIsRUFBTTBpQixVQWN2Qm5WLEVBQU85a0IsVUFBVWkwQixJQUFNLFNBQVMzZCxHQUU5QixPQURBOUssS0FBS2tvQixJQUFJdHZCLEtBQUtrUyxHQUNQOUssTUFVVHNaLEVBQU85a0IsVUFBVW0wQixJQUFNLFNBQVM4RixFQUFPM2pCLEdBQ3JDLElBQUlvZCxFQUFNbG9CLEtBQUtrb0IsSUFBSTlwQixNQUFNLEdBQ3pCLElBQUs4cEIsRUFBSXZ3QixPQUFRLE9BQU9tVCxFQUFHLE9BRTNCLFNBQVM2ZCxFQUFJLzFCLEdBQ1hzMUIsRUFBSXQxQixHQUFHNjdCLEdBQU8sU0FBUy96QixHQUVyQixPQUFJQSxFQUFZb1EsRUFBR3BRLEdBR2R3dEIsRUFBSXQxQixFQUFJLFFBR2IrMUIsRUFBSS8xQixFQUFJLEdBSGdCa1ksRUFBRyxTQU8vQjZkLENBQUksSyw2QkN4akJOLE1BQU1kLEVBQVksRUFBUSxJQUUxQixJQUFJMFgsRUFBUSxFQWtDWjVzQyxFQUFPRCxRQWhDUCxjQUE4Qm0xQixFQUU1QixZQUFZdE8sR0FDVjhELE1BQU05RCxFQUFRLEtBQVFnbUIsS0FDdEJ2L0IsS0FBS3d5QyxTQUFXLElBQUk5ZSxJQUd0QixlQUVBLE9BQ0UsTUFBTXJuQixFQUFPNVEsTUFBTWpILFVBQVU0SixNQUFNckwsS0FBS3FXLFdBRXhDcEosS0FBS3d5QyxTQUFTOTVDLFFBQVFnTixJQUNwQkEsRUFBSTBpQixNQUFRcG9CLEtBQUtvb0IsTUFDakIxaUIsRUFBSXFpQixNQUFRL25CLEtBQUsrbkIsTUFDakJyaUIsRUFBSW1CLEtBQUtxRyxNQUFNeEgsRUFBSzJHLEtBRXRCck0sS0FBS29vQixNQUFRLEdBQ2Jwb0IsS0FBSytuQixNQUFRLEdBR2YsWUFBWTUwQixHQUNWLE1BQU15WSxFQUFZLElBQUlpYyxFQUFVN25CLEtBQUt1WixPQUFRcG1CLEdBTTdDLE9BTEF5WSxFQUFVc2MsSUFBTWxvQixLQUFLa29CLElBQUk5cEIsTUFBTSxHQUMvQjRCLEtBQUtpTCxVQUFVLFdBQVd2UyxRQUFRNFYsR0FBWTFDLEVBQVU3SSxHQUFHLFVBQVd1TCxJQUN0RXRPLEtBQUtpTCxVQUFVLGNBQWN2UyxRQUFRNFYsR0FBWTFDLEVBQVU3SSxHQUFHLGFBQWN1TCxJQUM1RXRPLEtBQUt3eUMsU0FBU2p3QyxJQUFJcUosR0FDbEI1TCxLQUFLdVosT0FBT3lxQixLQUFLN3dDLEdBQVF5WSxFQUNsQkEsSyxnQkM3QlgsSUFBSXBILEVBQVUsRUFBUSxHQUFVNkYsYUFlaEMsU0FBU3M1QixFQUFRaitCLEdBQ2YxRixLQUFLMEYsSUFBTUEsRUFDWDFGLEtBQUtvb0IsTUFBUSxHQUNicG9CLEtBQUt5eUMsS0FBTyxHQUNaenlDLEtBQUtra0MsUUFBVXgrQixFQUFJNlQsT0FBTzJxQixRQThNNUIsU0FBU3dPLElBQ1AsS0FBTTF5QyxnQkFBZ0IweUMsR0FBTyxPQUFPLElBQUlBLEVBQ3hDMXlDLEtBQUtnb0IsUUFBVSxHQUNmaG9CLEtBQUtySSxPQUFTLEVBOU5oQmhGLEVBQU9ELFFBQVVpeEMsRUFvQmpCQSxFQUFRbnZDLFVBQVU4ekIsVUFBWTlqQixFQUFRaFEsVUFXdENtdkMsRUFBUW52QyxVQUFVK04sSUFBTSxTQUFTb0QsRUFBSWtzQyxFQUFNL21DLEdBQ3pDLE9BQU85SyxLQUFLOHhDLE9BQU9uc0MsRUFBSSxDQUFFa3NDLEdBQVEvbUMsSUFZbkM2NEIsRUFBUW52QyxVQUFVczlDLE9BQVMsU0FBU25zQyxFQUFJeWlCLEVBQU90ZCxHQUM3QyxJQUFLLElBQUlsWSxFQUFJLEVBQUdBLEVBQUl3MUIsRUFBTXp3QixPQUFRL0UsSUFBSyxDQUNyQyxJQUFJaS9DLEVBQU96cEIsRUFBTXgxQixHQUNqQm9OLEtBQUt5eUMsS0FBSzlzQyxHQUFNM0YsS0FBS3l5QyxLQUFLOXNDLElBQU8sR0FDakMzRixLQUFLeXlDLEtBQUs5c0MsR0FBSWtzQyxJQUFRLEVBQ3RCN3hDLEtBQUtvb0IsTUFBTXlwQixHQUFRN3hDLEtBQUtvb0IsTUFBTXlwQixJQUFTYSxJQUN2QzF5QyxLQUFLb29CLE1BQU15cEIsR0FBTXR2QyxJQUFJb0QsR0FFbkJtRixHQUFJelYsUUFBUXNhLFNBQVM3RSxFQUFHMVcsS0FBSyxLQUFNLFFBWXpDdXZDLEVBQVFudkMsVUFBVXc5QyxJQUFNLFNBQVNyc0MsRUFBSWtzQyxFQUFNL21DLEdBQ3JDOUssS0FBS3l5QyxLQUFLOXNDLFdBQVkzRixLQUFLeXlDLEtBQUs5c0MsR0FBSWtzQyxHQUVwQzd4QyxLQUFLb29CLE1BQU0zekIsZUFBZW85QyxLQUM1Qjd4QyxLQUFLb29CLE1BQU15cEIsR0FBTUcsSUFBSXJzQyxHQUNXLElBQTVCM0YsS0FBS29vQixNQUFNeXBCLEdBQU1sNkMsZUFBcUJxSSxLQUFLb29CLE1BQU15cEIsSUFHbkQvbUMsR0FBSXpWLFFBQVFzYSxTQUFTN0UsRUFBRzFXLEtBQUssS0FBTSxRQVd6Q3V2QyxFQUFRbnZDLFVBQVUwOUMsT0FBUyxTQUFTdnNDLEVBQUltRixHQUN0QyxJQUFJc2QsRUFBUXBvQixLQUFLeXlDLEtBQUs5c0MsR0FDdEIsR0FBSXlpQixFQUNGLElBQUssSUFBSXlwQixLQUFRenBCLEVBQ1hwb0IsS0FBS29vQixNQUFNM3pCLGVBQWVvOUMsS0FDNUI3eEMsS0FBS29vQixNQUFNeXBCLEdBQU1HLElBQUlyc0MsR0FDVyxJQUE1QjNGLEtBQUtvb0IsTUFBTXlwQixHQUFNbDZDLGVBQXFCcUksS0FBS29vQixNQUFNeXBCLFdBSXBEN3hDLEtBQUt5eUMsS0FBSzlzQyxHQUVibUYsR0FBSXpWLFFBQVFzYSxTQUFTN0UsRUFBRzFXLEtBQUssS0FBTSxRQWV6Q3V2QyxFQUFRbnZDLFVBQVU0MEIsVUFBWSxTQUFTdHVCLEVBQVFrSCxHQUM3QyxJQVVJbU4sRUFWQWlaLEVBQVFwbUIsRUFBS29tQixPQUFTLEdBQ3RCd3BCLEVBQVM1dkMsRUFBSzR2QyxRQUFVLEdBQ3hCN3BCLEVBQVEvbEIsRUFBSytsQixPQUFTLEdBQ3RCNHFCLEVBQWEsQ0FDZjdDLFlBQVksRUFDWkQsU0FBVTluQixFQUFNOG5CLFNBQ2hCdDNCLFNBQVV3UCxFQUFNeFAsVUFFZDRQLEVBQU0sR0FDTnBjLEVBQU8vTCxLQUdYbEYsRUFBTzRLLElBQU0xRixLQUFLMEYsSUFBSXZTLEtBQ3RCNk0sS0FBS2trQyxRQUFRN21DLE9BQU92QyxHQUFRLFNBQVM4MEMsR0FDbkMsR0FBSXhuQixFQUFNendCLE9BQ1IsSUFBSyxJQUFJL0UsRUFBSSxFQUFHQSxFQUFJdzFCLEVBQU16d0IsT0FBUS9FLElBQUssQ0FDckMsSUFBSWkvQyxFQUFPOWxDLEVBQUtxYyxNQUFNQSxFQUFNeDFCLElBQzVCLEdBQUtpL0MsRUFBTCxDQUNBLElBQUk3cEIsRUFBVTZwQixFQUFLN3BCLFFBQ25CLElBQUssSUFBSXJpQixLQUFNcWlCLEVBQ2IsR0FBSUEsRUFBUXZ6QixlQUFla1IsR0FBSyxDQUM5QixHQUFJd2lCLEVBQUl4aUIsS0FBUWlzQyxFQUFPM3BDLFFBQVF0QyxHQUFLLFVBQ3BDd0osRUFBU3BELEVBQUtyRyxJQUFJdWlCLFVBQVV0aUIsTUFFMUJ3SixFQUFPclUsT0FBTzgwQyxFQUFnQitDLEdBQzlCeHFCLEVBQUl4aUIsSUFBTSxVQU1sQixJQUFLLElBQUlBLEtBQU1vRyxFQUFLMG1DLEtBQ2xCLEdBQUkxbUMsRUFBSzBtQyxLQUFLaCtDLGVBQWVrUixHQUFLLENBQ2hDLElBQUtpc0MsRUFBTzNwQyxRQUFRdEMsR0FBSyxVQUN6QndKLEVBQVNwRCxFQUFLckcsSUFBSXVpQixVQUFVdGlCLEtBQ2hCd0osRUFBT3JVLE9BQU84MEMsRUFBZ0IrQyxRQWVwRGhQLEVBQVFudkMsVUFBVTYwQixRQUFVLFNBQVNqQixFQUFPdGQsR0FDdEMsbUJBQXFCc2QsSUFDdkJ0ZCxFQUFLc2QsRUFDTEEsRUFBUSxNQUtWLElBQUlELEVBQU0sR0FDTnNxQixFQUFPLEdBR1gsSUFOQXJxQixFQUFRQSxHQUFTLElBTVB6d0IsT0FDUixJQUFLLElBQUkvRSxFQUFJLEVBQUdBLEVBQUl3MUIsRUFBTXp3QixPQUFRL0UsSUFBSyxDQUNyQyxJQUFJaS9DLEVBQU83eEMsS0FBS29vQixNQUFNQSxFQUFNeDFCLElBQzVCLEdBQUtpL0MsRUFBTCxDQUNBLElBQUk3cEIsRUFBVTZwQixFQUFLN3BCLFFBQ25CLElBQUssSUFBSXJpQixLQUFNcWlCLEVBQ2IsR0FBSUEsRUFBUXZ6QixlQUFla1IsR0FBSyxDQUM5QixHQUFJd2lCLEVBQUl4aUIsR0FBSyxTQUNKM0YsS0FBSzBGLElBQUl1aUIsVUFBVXRpQixLQUUxQjhzQyxFQUFLNzVDLEtBQUsrTSxHQUNWd2lCLEVBQUl4aUIsSUFBTSxVQU1sQixJQUFLLElBQUlBLEtBQU0zRixLQUFLeXlDLEtBQ2R6eUMsS0FBS3l5QyxLQUFLaCtDLGVBQWVrUixJQUNsQjNGLEtBQUswRixJQUFJdWlCLFVBQVV0aUIsSUFDaEI4c0MsRUFBSzc1QyxLQUFLK00sR0FLeEJtRixHQUFJelYsUUFBUXNhLFNBQVM3RSxFQUFHMVcsS0FBSyxLQUFNLEtBQU1xK0MsS0FVL0M5TyxFQUFRbnZDLFVBQVVvK0MsWUFBYyxTQUFTanRDLEVBQUltRixHQUMzQyxJQUFJc2QsRUFBUXBvQixLQUFLeXlDLEtBQUs5c0MsR0FDbEJtRixHQUFJelYsUUFBUXNhLFNBQVM3RSxFQUFHMVcsS0FBSyxLQUFNLEtBQU1nMEIsRUFBUTkwQixPQUFPbUYsS0FBSzJ2QixHQUFTLFFBc0I1RXNxQixFQUFLbCtDLFVBQVUrTixJQUFNLFNBQVNvRCxHQUN2QjNGLEtBQUtnb0IsUUFBUXZ6QixlQUFla1IsS0FDL0IzRixLQUFLZ29CLFFBQVFyaUIsSUFBTSxFQUNuQjNGLEtBQUtySSxXQVdUKzZDLEVBQUtsK0MsVUFBVXc5QyxJQUFNLFNBQVNyc0MsR0FDeEIzRixLQUFLZ29CLFFBQVF2ekIsZUFBZWtSLFlBQ3ZCM0YsS0FBS2dvQixRQUFRcmlCLEdBQ3BCM0YsS0FBS3JJLFksY0NwUVQsU0FBU3NyQyxFQUFvQng0QixHQUM1QixJQUFJMU0sRUFBSSxJQUFJN0YsTUFBTSx1QkFBeUJ1UyxFQUFNLEtBRWpELE1BREExTSxFQUFFOUYsS0FBTyxtQkFDSDhGLEVBRVBrbEMsRUFBb0J4cUMsS0FBTyxXQUFhLE1BQU8sSUFDL0N3cUMsRUFBb0J2TixRQUFVdU4sRUFDOUJ0d0MsRUFBT0QsUUFBVXV3QyxFQUNqQkEsRUFBb0J0OUIsR0FBSyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNDYpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidXRpbFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJldmVudHNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidXJsXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImh0dHBcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicGF0aFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJzdHJlYW1cIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY3J5cHRvXCIpOyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEJJTkFSWV9UWVBFUzogWydub2RlYnVmZmVyJywgJ2FycmF5YnVmZmVyJywgJ2ZyYWdtZW50cyddLFxuICBHVUlEOiAnMjU4RUFGQTUtRTkxNC00N0RBLTk1Q0EtQzVBQjBEQzg1QjExJyxcbiAga1N0YXR1c0NvZGU6IFN5bWJvbCgnc3RhdHVzLWNvZGUnKSxcbiAga1dlYlNvY2tldDogU3ltYm9sKCd3ZWJzb2NrZXQnKSxcbiAgRU1QVFlfQlVGRkVSOiBCdWZmZXIuYWxsb2MoMCksXG4gIE5PT1A6ICgpID0+IHt9XG59O1xuIiwiLyoqXG4gKiBEZXRlY3QgRWxlY3Ryb24gcmVuZGVyZXIgLyBud2pzIHByb2Nlc3MsIHdoaWNoIGlzIG5vZGUsIGJ1dCB3ZSBzaG91bGRcbiAqIHRyZWF0IGFzIGEgYnJvd3Nlci5cbiAqL1xuXG5pZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnIHx8IHByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJyB8fCBwcm9jZXNzLmJyb3dzZXIgPT09IHRydWUgfHwgcHJvY2Vzcy5fX253anMpIHtcblx0bW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Jyb3dzZXIuanMnKTtcbn0gZWxzZSB7XG5cdG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9ub2RlLmpzJyk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ0dHlcIik7IiwiJ3VzZSBzdHJpY3QnO1xuY29uc3Qgb3MgPSByZXF1aXJlKCdvcycpO1xuY29uc3QgaGFzRmxhZyA9IHJlcXVpcmUoJ2hhcy1mbGFnJyk7XG5cbmNvbnN0IHtlbnZ9ID0gcHJvY2VzcztcblxubGV0IGZvcmNlQ29sb3I7XG5pZiAoaGFzRmxhZygnbm8tY29sb3InKSB8fFxuXHRoYXNGbGFnKCduby1jb2xvcnMnKSB8fFxuXHRoYXNGbGFnKCdjb2xvcj1mYWxzZScpIHx8XG5cdGhhc0ZsYWcoJ2NvbG9yPW5ldmVyJykpIHtcblx0Zm9yY2VDb2xvciA9IDA7XG59IGVsc2UgaWYgKGhhc0ZsYWcoJ2NvbG9yJykgfHxcblx0aGFzRmxhZygnY29sb3JzJykgfHxcblx0aGFzRmxhZygnY29sb3I9dHJ1ZScpIHx8XG5cdGhhc0ZsYWcoJ2NvbG9yPWFsd2F5cycpKSB7XG5cdGZvcmNlQ29sb3IgPSAxO1xufVxuaWYgKCdGT1JDRV9DT0xPUicgaW4gZW52KSB7XG5cdGlmIChlbnYuRk9SQ0VfQ09MT1IgPT09IHRydWUgfHwgZW52LkZPUkNFX0NPTE9SID09PSAndHJ1ZScpIHtcblx0XHRmb3JjZUNvbG9yID0gMTtcblx0fSBlbHNlIGlmIChlbnYuRk9SQ0VfQ09MT1IgPT09IGZhbHNlIHx8IGVudi5GT1JDRV9DT0xPUiA9PT0gJ2ZhbHNlJykge1xuXHRcdGZvcmNlQ29sb3IgPSAwO1xuXHR9IGVsc2Uge1xuXHRcdGZvcmNlQ29sb3IgPSBlbnYuRk9SQ0VfQ09MT1IubGVuZ3RoID09PSAwID8gMSA6IE1hdGgubWluKHBhcnNlSW50KGVudi5GT1JDRV9DT0xPUiwgMTApLCAzKTtcblx0fVxufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVMZXZlbChsZXZlbCkge1xuXHRpZiAobGV2ZWwgPT09IDApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGxldmVsLFxuXHRcdGhhc0Jhc2ljOiB0cnVlLFxuXHRcdGhhczI1NjogbGV2ZWwgPj0gMixcblx0XHRoYXMxNm06IGxldmVsID49IDNcblx0fTtcbn1cblxuZnVuY3Rpb24gc3VwcG9ydHNDb2xvcihzdHJlYW0pIHtcblx0aWYgKGZvcmNlQ29sb3IgPT09IDApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGlmIChoYXNGbGFnKCdjb2xvcj0xNm0nKSB8fFxuXHRcdGhhc0ZsYWcoJ2NvbG9yPWZ1bGwnKSB8fFxuXHRcdGhhc0ZsYWcoJ2NvbG9yPXRydWVjb2xvcicpKSB7XG5cdFx0cmV0dXJuIDM7XG5cdH1cblxuXHRpZiAoaGFzRmxhZygnY29sb3I9MjU2JykpIHtcblx0XHRyZXR1cm4gMjtcblx0fVxuXG5cdGlmIChzdHJlYW0gJiYgIXN0cmVhbS5pc1RUWSAmJiBmb3JjZUNvbG9yID09PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGNvbnN0IG1pbiA9IGZvcmNlQ29sb3IgfHwgMDtcblxuXHRpZiAoZW52LlRFUk0gPT09ICdkdW1iJykge1xuXHRcdHJldHVybiBtaW47XG5cdH1cblxuXHRpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuXHRcdC8vIE5vZGUuanMgNy41LjAgaXMgdGhlIGZpcnN0IHZlcnNpb24gb2YgTm9kZS5qcyB0byBpbmNsdWRlIGEgcGF0Y2ggdG9cblx0XHQvLyBsaWJ1diB0aGF0IGVuYWJsZXMgMjU2IGNvbG9yIG91dHB1dCBvbiBXaW5kb3dzLiBBbnl0aGluZyBlYXJsaWVyIGFuZCBpdFxuXHRcdC8vIHdvbid0IHdvcmsuIEhvd2V2ZXIsIGhlcmUgd2UgdGFyZ2V0IE5vZGUuanMgOCBhdCBtaW5pbXVtIGFzIGl0IGlzIGFuIExUU1xuXHRcdC8vIHJlbGVhc2UsIGFuZCBOb2RlLmpzIDcgaXMgbm90LiBXaW5kb3dzIDEwIGJ1aWxkIDEwNTg2IGlzIHRoZSBmaXJzdCBXaW5kb3dzXG5cdFx0Ly8gcmVsZWFzZSB0aGF0IHN1cHBvcnRzIDI1NiBjb2xvcnMuIFdpbmRvd3MgMTAgYnVpbGQgMTQ5MzEgaXMgdGhlIGZpcnN0IHJlbGVhc2Vcblx0XHQvLyB0aGF0IHN1cHBvcnRzIDE2bS9UcnVlQ29sb3IuXG5cdFx0Y29uc3Qgb3NSZWxlYXNlID0gb3MucmVsZWFzZSgpLnNwbGl0KCcuJyk7XG5cdFx0aWYgKFxuXHRcdFx0TnVtYmVyKHByb2Nlc3MudmVyc2lvbnMubm9kZS5zcGxpdCgnLicpWzBdKSA+PSA4ICYmXG5cdFx0XHROdW1iZXIob3NSZWxlYXNlWzBdKSA+PSAxMCAmJlxuXHRcdFx0TnVtYmVyKG9zUmVsZWFzZVsyXSkgPj0gMTA1ODZcblx0XHQpIHtcblx0XHRcdHJldHVybiBOdW1iZXIob3NSZWxlYXNlWzJdKSA+PSAxNDkzMSA/IDMgOiAyO1xuXHRcdH1cblxuXHRcdHJldHVybiAxO1xuXHR9XG5cblx0aWYgKCdDSScgaW4gZW52KSB7XG5cdFx0aWYgKFsnVFJBVklTJywgJ0NJUkNMRUNJJywgJ0FQUFZFWU9SJywgJ0dJVExBQl9DSSddLnNvbWUoc2lnbiA9PiBzaWduIGluIGVudikgfHwgZW52LkNJX05BTUUgPT09ICdjb2Rlc2hpcCcpIHtcblx0XHRcdHJldHVybiAxO1xuXHRcdH1cblxuXHRcdHJldHVybiBtaW47XG5cdH1cblxuXHRpZiAoJ1RFQU1DSVRZX1ZFUlNJT04nIGluIGVudikge1xuXHRcdHJldHVybiAvXig5XFwuKDAqWzEtOV1cXGQqKVxcLnxcXGR7Mix9XFwuKS8udGVzdChlbnYuVEVBTUNJVFlfVkVSU0lPTikgPyAxIDogMDtcblx0fVxuXG5cdGlmIChlbnYuQ09MT1JURVJNID09PSAndHJ1ZWNvbG9yJykge1xuXHRcdHJldHVybiAzO1xuXHR9XG5cblx0aWYgKCdURVJNX1BST0dSQU0nIGluIGVudikge1xuXHRcdGNvbnN0IHZlcnNpb24gPSBwYXJzZUludCgoZW52LlRFUk1fUFJPR1JBTV9WRVJTSU9OIHx8ICcnKS5zcGxpdCgnLicpWzBdLCAxMCk7XG5cblx0XHRzd2l0Y2ggKGVudi5URVJNX1BST0dSQU0pIHtcblx0XHRcdGNhc2UgJ2lUZXJtLmFwcCc6XG5cdFx0XHRcdHJldHVybiB2ZXJzaW9uID49IDMgPyAzIDogMjtcblx0XHRcdGNhc2UgJ0FwcGxlX1Rlcm1pbmFsJzpcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHQvLyBObyBkZWZhdWx0XG5cdFx0fVxuXHR9XG5cblx0aWYgKC8tMjU2KGNvbG9yKT8kL2kudGVzdChlbnYuVEVSTSkpIHtcblx0XHRyZXR1cm4gMjtcblx0fVxuXG5cdGlmICgvXnNjcmVlbnxeeHRlcm18XnZ0MTAwfF52dDIyMHxecnh2dHxjb2xvcnxhbnNpfGN5Z3dpbnxsaW51eC9pLnRlc3QoZW52LlRFUk0pKSB7XG5cdFx0cmV0dXJuIDE7XG5cdH1cblxuXHRpZiAoJ0NPTE9SVEVSTScgaW4gZW52KSB7XG5cdFx0cmV0dXJuIDE7XG5cdH1cblxuXHRyZXR1cm4gbWluO1xufVxuXG5mdW5jdGlvbiBnZXRTdXBwb3J0TGV2ZWwoc3RyZWFtKSB7XG5cdGNvbnN0IGxldmVsID0gc3VwcG9ydHNDb2xvcihzdHJlYW0pO1xuXHRyZXR1cm4gdHJhbnNsYXRlTGV2ZWwobGV2ZWwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0c3VwcG9ydHNDb2xvcjogZ2V0U3VwcG9ydExldmVsLFxuXHRzdGRvdXQ6IGdldFN1cHBvcnRMZXZlbChwcm9jZXNzLnN0ZG91dCksXG5cdHN0ZGVycjogZ2V0U3VwcG9ydExldmVsKHByb2Nlc3Muc3RkZXJyKVxufTtcbiIsIi8qIVxuICogc3RhdHVzZXNcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogQ29weXJpZ2h0KGMpIDIwMTYgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBjb2RlcyA9IHJlcXVpcmUoJy4vY29kZXMuanNvbicpXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBzdGF0dXNcblxuLy8gc3RhdHVzIGNvZGUgdG8gbWVzc2FnZSBtYXBcbnN0YXR1cy5TVEFUVVNfQ09ERVMgPSBjb2Rlc1xuXG4vLyBhcnJheSBvZiBzdGF0dXMgY29kZXNcbnN0YXR1cy5jb2RlcyA9IHBvcHVsYXRlU3RhdHVzZXNNYXAoc3RhdHVzLCBjb2RlcylcblxuLy8gc3RhdHVzIGNvZGVzIGZvciByZWRpcmVjdHNcbnN0YXR1cy5yZWRpcmVjdCA9IHtcbiAgMzAwOiB0cnVlLFxuICAzMDE6IHRydWUsXG4gIDMwMjogdHJ1ZSxcbiAgMzAzOiB0cnVlLFxuICAzMDU6IHRydWUsXG4gIDMwNzogdHJ1ZSxcbiAgMzA4OiB0cnVlXG59XG5cbi8vIHN0YXR1cyBjb2RlcyBmb3IgZW1wdHkgYm9kaWVzXG5zdGF0dXMuZW1wdHkgPSB7XG4gIDIwNDogdHJ1ZSxcbiAgMjA1OiB0cnVlLFxuICAzMDQ6IHRydWVcbn1cblxuLy8gc3RhdHVzIGNvZGVzIGZvciB3aGVuIHlvdSBzaG91bGQgcmV0cnkgdGhlIHJlcXVlc3RcbnN0YXR1cy5yZXRyeSA9IHtcbiAgNTAyOiB0cnVlLFxuICA1MDM6IHRydWUsXG4gIDUwNDogdHJ1ZVxufVxuXG4vKipcbiAqIFBvcHVsYXRlIHRoZSBzdGF0dXNlcyBtYXAgZm9yIGdpdmVuIGNvZGVzLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwb3B1bGF0ZVN0YXR1c2VzTWFwIChzdGF0dXNlcywgY29kZXMpIHtcbiAgdmFyIGFyciA9IFtdXG5cbiAgT2JqZWN0LmtleXMoY29kZXMpLmZvckVhY2goZnVuY3Rpb24gZm9yRWFjaENvZGUgKGNvZGUpIHtcbiAgICB2YXIgbWVzc2FnZSA9IGNvZGVzW2NvZGVdXG4gICAgdmFyIHN0YXR1cyA9IE51bWJlcihjb2RlKVxuXG4gICAgLy8gUG9wdWxhdGUgcHJvcGVydGllc1xuICAgIHN0YXR1c2VzW3N0YXR1c10gPSBtZXNzYWdlXG4gICAgc3RhdHVzZXNbbWVzc2FnZV0gPSBzdGF0dXNcbiAgICBzdGF0dXNlc1ttZXNzYWdlLnRvTG93ZXJDYXNlKCldID0gc3RhdHVzXG5cbiAgICAvLyBBZGQgdG8gYXJyYXlcbiAgICBhcnIucHVzaChzdGF0dXMpXG4gIH0pXG5cbiAgcmV0dXJuIGFyclxufVxuXG4vKipcbiAqIEdldCB0aGUgc3RhdHVzIGNvZGUuXG4gKlxuICogR2l2ZW4gYSBudW1iZXIsIHRoaXMgd2lsbCB0aHJvdyBpZiBpdCBpcyBub3QgYSBrbm93biBzdGF0dXNcbiAqIGNvZGUsIG90aGVyd2lzZSB0aGUgY29kZSB3aWxsIGJlIHJldHVybmVkLiBHaXZlbiBhIHN0cmluZyxcbiAqIHRoZSBzdHJpbmcgd2lsbCBiZSBwYXJzZWQgZm9yIGEgbnVtYmVyIGFuZCByZXR1cm4gdGhlIGNvZGVcbiAqIGlmIHZhbGlkLCBvdGhlcndpc2Ugd2lsbCBsb29rdXAgdGhlIGNvZGUgYXNzdW1pbmcgdGhpcyBpc1xuICogdGhlIHN0YXR1cyBtZXNzYWdlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gY29kZVxuICogQHJldHVybnMge251bWJlcn1cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBzdGF0dXMgKGNvZGUpIHtcbiAgaWYgKHR5cGVvZiBjb2RlID09PSAnbnVtYmVyJykge1xuICAgIGlmICghc3RhdHVzW2NvZGVdKSB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgc3RhdHVzIGNvZGU6ICcgKyBjb2RlKVxuICAgIHJldHVybiBjb2RlXG4gIH1cblxuICBpZiAodHlwZW9mIGNvZGUgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY29kZSBtdXN0IGJlIGEgbnVtYmVyIG9yIHN0cmluZycpXG4gIH1cblxuICAvLyAnNDAzJ1xuICB2YXIgbiA9IHBhcnNlSW50KGNvZGUsIDEwKVxuICBpZiAoIWlzTmFOKG4pKSB7XG4gICAgaWYgKCFzdGF0dXNbbl0pIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzdGF0dXMgY29kZTogJyArIG4pXG4gICAgcmV0dXJuIG5cbiAgfVxuXG4gIG4gPSBzdGF0dXNbY29kZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIW4pIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzdGF0dXMgbWVzc2FnZTogXCInICsgY29kZSArICdcIicpXG4gIHJldHVybiBuXG59XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHV0ZjggPSByZXF1aXJlKCcuL3V0ZjgnKTtcbnZhciBoYXNCaW5hcnkgPSByZXF1aXJlKCdoYXMtYmluYXJ5MicpO1xudmFyIGFmdGVyID0gcmVxdWlyZSgnYWZ0ZXInKTtcbnZhciBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogQ3VycmVudCBwcm90b2NvbCB2ZXJzaW9uLlxuICovXG5leHBvcnRzLnByb3RvY29sID0gMztcblxuLyoqXG4gKiBQYWNrZXQgdHlwZXMuXG4gKi9cblxudmFyIHBhY2tldHMgPSBleHBvcnRzLnBhY2tldHMgPSB7XG4gICAgb3BlbjogICAgIDAgICAgLy8gbm9uLXdzXG4gICwgY2xvc2U6ICAgIDEgICAgLy8gbm9uLXdzXG4gICwgcGluZzogICAgIDJcbiAgLCBwb25nOiAgICAgM1xuICAsIG1lc3NhZ2U6ICA0XG4gICwgdXBncmFkZTogIDVcbiAgLCBub29wOiAgICAgNlxufTtcblxudmFyIHBhY2tldHNsaXN0ID0ga2V5cyhwYWNrZXRzKTtcblxuLyoqXG4gKiBQcmVtYWRlIGVycm9yIHBhY2tldC5cbiAqL1xuXG52YXIgZXJyID0geyB0eXBlOiAnZXJyb3InLCBkYXRhOiAncGFyc2VyIGVycm9yJyB9O1xuXG5jb25zdCBFTVBUWV9CVUZGRVIgPSBCdWZmZXIuY29uY2F0KFtdKTtcblxuLyoqXG4gKiBFbmNvZGVzIGEgcGFja2V0LlxuICpcbiAqICAgICA8cGFja2V0IHR5cGUgaWQ+IFsgPGRhdGE+IF1cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICA1aGVsbG8gd29ybGRcbiAqICAgICAzXG4gKiAgICAgNFxuICpcbiAqIEJpbmFyeSBpcyBlbmNvZGVkIGluIGFuIGlkZW50aWNhbCBwcmluY2lwbGVcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCB1dGY4ZW5jb2RlLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIHN1cHBvcnRzQmluYXJ5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBzdXBwb3J0c0JpbmFyeTtcbiAgICBzdXBwb3J0c0JpbmFyeSA9IG51bGw7XG4gIH1cblxuICBpZiAodHlwZW9mIHV0ZjhlbmNvZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHV0ZjhlbmNvZGU7XG4gICAgdXRmOGVuY29kZSA9IG51bGw7XG4gIH1cblxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHBhY2tldC5kYXRhKSkge1xuICAgIHJldHVybiBlbmNvZGVCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKHBhY2tldC5kYXRhICYmIChwYWNrZXQuZGF0YS5idWZmZXIgfHwgcGFja2V0LmRhdGEpIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZW5jb2RlQnVmZmVyKHsgdHlwZTogcGFja2V0LnR5cGUsIGRhdGE6IGFycmF5QnVmZmVyVG9CdWZmZXIocGFja2V0LmRhdGEpIH0sIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH1cblxuICAvLyBTZW5kaW5nIGRhdGEgYXMgYSB1dGYtOCBzdHJpbmdcbiAgdmFyIGVuY29kZWQgPSBwYWNrZXRzW3BhY2tldC50eXBlXTtcblxuICAvLyBkYXRhIGZyYWdtZW50IGlzIG9wdGlvbmFsXG4gIGlmICh1bmRlZmluZWQgIT09IHBhY2tldC5kYXRhKSB7XG4gICAgZW5jb2RlZCArPSB1dGY4ZW5jb2RlID8gdXRmOC5lbmNvZGUoU3RyaW5nKHBhY2tldC5kYXRhKSwgeyBzdHJpY3Q6IGZhbHNlIH0pIDogU3RyaW5nKHBhY2tldC5kYXRhKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsYmFjaygnJyArIGVuY29kZWQpO1xufTtcblxuLyoqXG4gKiBFbmNvZGUgQnVmZmVyIGRhdGFcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgIHJldHVybiBleHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcGFja2V0LmRhdGE7XG4gIHZhciB0eXBlQnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEpO1xuICB0eXBlQnVmZmVyWzBdID0gcGFja2V0c1twYWNrZXQudHlwZV07XG4gIHJldHVybiBjYWxsYmFjayhCdWZmZXIuY29uY2F0KFt0eXBlQnVmZmVyLCBkYXRhXSkpO1xufVxuXG4vKipcbiAqIEVuY29kZXMgYSBwYWNrZXQgd2l0aCBiaW5hcnkgZGF0YSBpbiBhIGJhc2U2NCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0LCBoYXMgYHR5cGVgIGFuZCBgZGF0YWBcbiAqIEByZXR1cm4ge1N0cmluZ30gYmFzZTY0IGVuY29kZWQgbWVzc2FnZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0LCBjYWxsYmFjayl7XG4gIHZhciBkYXRhID0gQnVmZmVyLmlzQnVmZmVyKHBhY2tldC5kYXRhKSA/IHBhY2tldC5kYXRhIDogYXJyYXlCdWZmZXJUb0J1ZmZlcihwYWNrZXQuZGF0YSk7XG4gIHZhciBtZXNzYWdlID0gJ2InICsgcGFja2V0c1twYWNrZXQudHlwZV07XG4gIG1lc3NhZ2UgKz0gZGF0YS50b1N0cmluZygnYmFzZTY0Jyk7XG4gIHJldHVybiBjYWxsYmFjayhtZXNzYWdlKTtcbn07XG5cbi8qKlxuICogRGVjb2RlcyBhIHBhY2tldC4gRGF0YSBhbHNvIGF2YWlsYWJsZSBhcyBhbiBBcnJheUJ1ZmZlciBpZiByZXF1ZXN0ZWQuXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGB0eXBlYCBhbmQgYGRhdGFgIChpZiBhbnkpXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmRlY29kZVBhY2tldCA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCB1dGY4ZGVjb2RlKSB7XG4gIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZXJyO1xuICB9XG5cbiAgdmFyIHR5cGU7XG5cbiAgLy8gU3RyaW5nIGRhdGFcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuXG4gICAgdHlwZSA9IGRhdGEuY2hhckF0KDApO1xuXG4gICAgaWYgKHR5cGUgPT09ICdiJykge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZGVjb2RlQmFzZTY0UGFja2V0KGRhdGEuc3Vic3RyKDEpLCBiaW5hcnlUeXBlKTtcbiAgICB9XG5cbiAgICBpZiAodXRmOGRlY29kZSkge1xuICAgICAgZGF0YSA9IHRyeURlY29kZShkYXRhKTtcbiAgICAgIGlmIChkYXRhID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZXJyO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChOdW1iZXIodHlwZSkgIT0gdHlwZSB8fCAhcGFja2V0c2xpc3RbdHlwZV0pIHtcbiAgICAgIHJldHVybiBlcnI7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0sIGRhdGE6IGRhdGEuc3Vic3RyaW5nKDEpIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdIH07XG4gICAgfVxuICB9XG5cbiAgLy8gQmluYXJ5IGRhdGFcbiAgaWYgKGJpbmFyeVR5cGUgPT09ICdhcnJheWJ1ZmZlcicpIHtcbiAgICAvLyB3cmFwIEJ1ZmZlci9BcnJheUJ1ZmZlciBkYXRhIGludG8gYW4gVWludDhBcnJheVxuICAgIHZhciBpbnRBcnJheSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICAgIHR5cGUgPSBpbnRBcnJheVswXTtcbiAgICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSwgZGF0YTogaW50QXJyYXkuYnVmZmVyLnNsaWNlKDEpIH07XG4gIH1cblxuICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgZGF0YSA9IGFycmF5QnVmZmVyVG9CdWZmZXIoZGF0YSk7XG4gIH1cbiAgdHlwZSA9IGRhdGFbMF07XG4gIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdLCBkYXRhOiBkYXRhLnNsaWNlKDEpIH07XG59O1xuXG5mdW5jdGlvbiB0cnlEZWNvZGUoZGF0YSkge1xuICB0cnkge1xuICAgIGRhdGEgPSB1dGY4LmRlY29kZShkYXRhLCB7IHN0cmljdDogZmFsc2UgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogRGVjb2RlcyBhIHBhY2tldCBlbmNvZGVkIGluIGEgYmFzZTY0IHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYmFzZTY0IGVuY29kZWQgbWVzc2FnZVxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGB0eXBlYCBhbmQgYGRhdGFgIChpZiBhbnkpXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVCYXNlNjRQYWNrZXQgPSBmdW5jdGlvbihtc2csIGJpbmFyeVR5cGUpIHtcbiAgdmFyIHR5cGUgPSBwYWNrZXRzbGlzdFttc2cuY2hhckF0KDApXTtcbiAgdmFyIGRhdGEgPSBCdWZmZXIuZnJvbShtc2cuc3Vic3RyKDEpLCAnYmFzZTY0Jyk7XG4gIGlmIChiaW5hcnlUeXBlID09PSAnYXJyYXlidWZmZXInKSB7XG4gICAgdmFyIGFidiA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFidi5sZW5ndGg7IGkrKyl7XG4gICAgICBhYnZbaV0gPSBkYXRhW2ldO1xuICAgIH1cbiAgICBkYXRhID0gYWJ2LmJ1ZmZlcjtcbiAgfVxuICByZXR1cm4geyB0eXBlOiB0eXBlLCBkYXRhOiBkYXRhIH07XG59O1xuXG4vKipcbiAqIEVuY29kZXMgbXVsdGlwbGUgbWVzc2FnZXMgKHBheWxvYWQpLlxuICpcbiAqICAgICA8bGVuZ3RoPjpkYXRhXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgMTE6aGVsbG8gd29ybGQyOmhpXG4gKlxuICogSWYgYW55IGNvbnRlbnRzIGFyZSBiaW5hcnksIHRoZXkgd2lsbCBiZSBlbmNvZGVkIGFzIGJhc2U2NCBzdHJpbmdzLiBCYXNlNjRcbiAqIGVuY29kZWQgc3RyaW5ncyBhcmUgbWFya2VkIHdpdGggYSBiIGJlZm9yZSB0aGUgbGVuZ3RoIHNwZWNpZmllclxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGF5bG9hZCA9IGZ1bmN0aW9uIChwYWNrZXRzLCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBzdXBwb3J0c0JpbmFyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gc3VwcG9ydHNCaW5hcnk7XG4gICAgc3VwcG9ydHNCaW5hcnkgPSBudWxsO1xuICB9XG5cbiAgaWYgKHN1cHBvcnRzQmluYXJ5ICYmIGhhc0JpbmFyeShwYWNrZXRzKSkge1xuICAgIHJldHVybiBleHBvcnRzLmVuY29kZVBheWxvYWRBc0JpbmFyeShwYWNrZXRzLCBjYWxsYmFjayk7XG4gIH1cblxuICBpZiAoIXBhY2tldHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCcwOicpO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgZmFsc2UsIGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgIGRvbmVDYWxsYmFjayhudWxsLCBzZXRMZW5ndGhIZWFkZXIobWVzc2FnZSkpO1xuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdHMuam9pbignJykpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIHNldExlbmd0aEhlYWRlcihtZXNzYWdlKSB7XG4gIHJldHVybiBtZXNzYWdlLmxlbmd0aCArICc6JyArIG1lc3NhZ2U7XG59XG5cbi8qKlxuICogQXN5bmMgYXJyYXkgbWFwIHVzaW5nIGFmdGVyXG4gKi9cblxuZnVuY3Rpb24gbWFwKGFyeSwgZWFjaCwgZG9uZSkge1xuICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KGFyeS5sZW5ndGgpO1xuICB2YXIgbmV4dCA9IGFmdGVyKGFyeS5sZW5ndGgsIGRvbmUpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgZWFjaChhcnlbaV0sIGZ1bmN0aW9uKGVycm9yLCBtc2cpIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1zZztcbiAgICAgIG5leHQoZXJyb3IsIHJlc3VsdCk7XG4gICAgfSk7XG4gIH1cbn1cblxuLypcbiAqIERlY29kZXMgZGF0YSB3aGVuIGEgcGF5bG9hZCBpcyBtYXliZSBleHBlY3RlZC4gUG9zc2libGUgYmluYXJ5IGNvbnRlbnRzIGFyZVxuICogZGVjb2RlZCBmcm9tIHRoZWlyIGJhc2U2NCByZXByZXNlbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLCBjYWxsYmFjayBtZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYXlsb2FkID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5kZWNvZGVQYXlsb2FkQXNCaW5hcnkoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBiaW5hcnlUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBiaW5hcnlUeXBlO1xuICAgIGJpbmFyeVR5cGUgPSBudWxsO1xuICB9XG5cbiAgaWYgKGRhdGEgPT09ICcnKSB7XG4gICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICB9XG5cbiAgdmFyIGxlbmd0aCA9ICcnLCBuLCBtc2csIHBhY2tldDtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGRhdGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGNociA9IGRhdGEuY2hhckF0KGkpO1xuXG4gICAgaWYgKGNociAhPT0gJzonKSB7XG4gICAgICBsZW5ndGggKz0gY2hyO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGxlbmd0aCA9PT0gJycgfHwgKGxlbmd0aCAhPSAobiA9IE51bWJlcihsZW5ndGgpKSkpIHtcbiAgICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgIH1cblxuICAgIG1zZyA9IGRhdGEuc3Vic3RyKGkgKyAxLCBuKTtcblxuICAgIGlmIChsZW5ndGggIT0gbXNnLmxlbmd0aCkge1xuICAgICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgfVxuXG4gICAgaWYgKG1zZy5sZW5ndGgpIHtcbiAgICAgIHBhY2tldCA9IGV4cG9ydHMuZGVjb2RlUGFja2V0KG1zZywgYmluYXJ5VHlwZSwgZmFsc2UpO1xuXG4gICAgICBpZiAoZXJyLnR5cGUgPT09IHBhY2tldC50eXBlICYmIGVyci5kYXRhID09PSBwYWNrZXQuZGF0YSkge1xuICAgICAgICAvLyBwYXJzZXIgZXJyb3IgaW4gaW5kaXZpZHVhbCBwYWNrZXQgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbW9yZSA9IGNhbGxiYWNrKHBhY2tldCwgaSArIG4sIGwpO1xuICAgICAgaWYgKGZhbHNlID09PSBtb3JlKSByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYWR2YW5jZSBjdXJzb3JcbiAgICBpICs9IG47XG4gICAgbGVuZ3RoID0gJyc7XG4gIH1cblxuICBpZiAobGVuZ3RoICE9PSAnJykge1xuICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgfVxuXG59O1xuXG4vKipcbiAqXG4gKiBDb252ZXJ0cyBhIGJ1ZmZlciB0byBhIHV0ZjguanMgZW5jb2RlZCBzdHJpbmdcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBidWZmZXJUb1N0cmluZyhidWZmZXIpIHtcbiAgdmFyIHN0ciA9ICcnO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGJ1ZmZlci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZmZXJbaV0pO1xuICB9XG4gIHJldHVybiBzdHI7XG59XG5cbi8qKlxuICpcbiAqIENvbnZlcnRzIGEgdXRmOC5qcyBlbmNvZGVkIHN0cmluZyB0byBhIGJ1ZmZlclxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHN0cmluZ1RvQnVmZmVyKHN0cmluZykge1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKHN0cmluZy5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHN0cmluZy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBidWYud3JpdGVVSW50OChzdHJpbmcuY2hhckNvZGVBdChpKSwgaSk7XG4gIH1cbiAgcmV0dXJuIGJ1Zjtcbn1cblxuLyoqXG4gKlxuICogQ29udmVydHMgYW4gQXJyYXlCdWZmZXIgdG8gYSBCdWZmZXJcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBhcnJheUJ1ZmZlclRvQnVmZmVyKGRhdGEpIHtcbiAgLy8gZGF0YSBpcyBlaXRoZXIgYW4gQXJyYXlCdWZmZXIgb3IgQXJyYXlCdWZmZXJWaWV3LlxuICB2YXIgbGVuZ3RoID0gZGF0YS5ieXRlTGVuZ3RoIHx8IGRhdGEubGVuZ3RoO1xuICB2YXIgb2Zmc2V0ID0gZGF0YS5ieXRlT2Zmc2V0IHx8IDA7XG5cbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGRhdGEuYnVmZmVyIHx8IGRhdGEsIG9mZnNldCwgbGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBFbmNvZGVzIG11bHRpcGxlIG1lc3NhZ2VzIChwYXlsb2FkKSBhcyBiaW5hcnkuXG4gKlxuICogPDEgPSBiaW5hcnksIDAgPSBzdHJpbmc+PG51bWJlciBmcm9tIDAtOT48bnVtYmVyIGZyb20gMC05PlsuLi5dPG51bWJlclxuICogMjU1PjxkYXRhPlxuICpcbiAqIEV4YW1wbGU6XG4gKiAxIDMgMjU1IDEgMiAzLCBpZiB0aGUgYmluYXJ5IGNvbnRlbnRzIGFyZSBpbnRlcnByZXRlZCBhcyA4IGJpdCBpbnRlZ2Vyc1xuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAqIEByZXR1cm4ge0J1ZmZlcn0gZW5jb2RlZCBwYXlsb2FkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWRBc0JpbmFyeSA9IGZ1bmN0aW9uIChwYWNrZXRzLCBjYWxsYmFjaykge1xuICBpZiAoIXBhY2tldHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKEVNUFRZX0JVRkZFUik7XG4gIH1cblxuICBtYXAocGFja2V0cywgZW5jb2RlT25lQmluYXJ5UGFja2V0LCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soQnVmZmVyLmNvbmNhdChyZXN1bHRzKSk7XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gZW5jb2RlT25lQmluYXJ5UGFja2V0KHAsIGRvbmVDYWxsYmFjaykge1xuXG4gIGZ1bmN0aW9uIG9uQmluYXJ5UGFja2V0RW5jb2RlKHBhY2tldCkge1xuXG4gICAgdmFyIGVuY29kaW5nTGVuZ3RoID0gJycgKyBwYWNrZXQubGVuZ3RoO1xuICAgIHZhciBzaXplQnVmZmVyO1xuXG4gICAgaWYgKHR5cGVvZiBwYWNrZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBzaXplQnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGVuY29kaW5nTGVuZ3RoLmxlbmd0aCArIDIpO1xuICAgICAgc2l6ZUJ1ZmZlclswXSA9IDA7IC8vIGlzIGEgc3RyaW5nIChub3QgdHJ1ZSBiaW5hcnkgPSAwKVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGluZ0xlbmd0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICBzaXplQnVmZmVyW2kgKyAxXSA9IHBhcnNlSW50KGVuY29kaW5nTGVuZ3RoW2ldLCAxMCk7XG4gICAgICB9XG4gICAgICBzaXplQnVmZmVyW3NpemVCdWZmZXIubGVuZ3RoIC0gMV0gPSAyNTU7XG4gICAgICByZXR1cm4gZG9uZUNhbGxiYWNrKG51bGwsIEJ1ZmZlci5jb25jYXQoW3NpemVCdWZmZXIsIHN0cmluZ1RvQnVmZmVyKHBhY2tldCldKSk7XG4gICAgfVxuXG4gICAgc2l6ZUJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShlbmNvZGluZ0xlbmd0aC5sZW5ndGggKyAyKTtcbiAgICBzaXplQnVmZmVyWzBdID0gMTsgLy8gaXMgYmluYXJ5ICh0cnVlIGJpbmFyeSA9IDEpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGluZ0xlbmd0aC5sZW5ndGg7IGkrKykge1xuICAgICAgc2l6ZUJ1ZmZlcltpICsgMV0gPSBwYXJzZUludChlbmNvZGluZ0xlbmd0aFtpXSwgMTApO1xuICAgIH1cbiAgICBzaXplQnVmZmVyW3NpemVCdWZmZXIubGVuZ3RoIC0gMV0gPSAyNTU7XG5cbiAgICBkb25lQ2FsbGJhY2sobnVsbCwgQnVmZmVyLmNvbmNhdChbc2l6ZUJ1ZmZlciwgcGFja2V0XSkpO1xuICB9XG5cbiAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocCwgdHJ1ZSwgdHJ1ZSwgb25CaW5hcnlQYWNrZXRFbmNvZGUpO1xuXG59XG5cblxuLypcbiAqIERlY29kZXMgZGF0YSB3aGVuIGEgcGF5bG9hZCBpcyBtYXliZSBleHBlY3RlZC4gU3RyaW5ncyBhcmUgZGVjb2RlZCBieVxuICogaW50ZXJwcmV0aW5nIGVhY2ggYnl0ZSBhcyBhIGtleSBjb2RlIGZvciBlbnRyaWVzIG1hcmtlZCB0byBzdGFydCB3aXRoIDAuIFNlZVxuICogZGVzY3JpcHRpb24gb2YgZW5jb2RlUGF5bG9hZEFzQmluYXJ5XG5cbiAqIEBwYXJhbSB7QnVmZmVyfSBkYXRhLCBjYWxsYmFjayBtZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYXlsb2FkQXNCaW5hcnkgPSBmdW5jdGlvbiAoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBiaW5hcnlUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBiaW5hcnlUeXBlO1xuICAgIGJpbmFyeVR5cGUgPSBudWxsO1xuICB9XG5cbiAgdmFyIGJ1ZmZlclRhaWwgPSBkYXRhO1xuICB2YXIgYnVmZmVycyA9IFtdO1xuICB2YXIgaTtcblxuICB3aGlsZSAoYnVmZmVyVGFpbC5sZW5ndGggPiAwKSB7XG4gICAgdmFyIHN0ckxlbiA9ICcnO1xuICAgIHZhciBpc1N0cmluZyA9IGJ1ZmZlclRhaWxbMF0gPT09IDA7XG4gICAgZm9yIChpID0gMTsgOyBpKyspIHtcbiAgICAgIGlmIChidWZmZXJUYWlsW2ldID09PSAyNTUpICBicmVhaztcbiAgICAgIC8vIDMxMCA9IGNoYXIgbGVuZ3RoIG9mIE51bWJlci5NQVhfVkFMVUVcbiAgICAgIGlmIChzdHJMZW4ubGVuZ3RoID4gMzEwKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgICAgfVxuICAgICAgc3RyTGVuICs9ICcnICsgYnVmZmVyVGFpbFtpXTtcbiAgICB9XG4gICAgYnVmZmVyVGFpbCA9IGJ1ZmZlclRhaWwuc2xpY2Uoc3RyTGVuLmxlbmd0aCArIDEpO1xuXG4gICAgdmFyIG1zZ0xlbmd0aCA9IHBhcnNlSW50KHN0ckxlbiwgMTApO1xuXG4gICAgdmFyIG1zZyA9IGJ1ZmZlclRhaWwuc2xpY2UoMSwgbXNnTGVuZ3RoICsgMSk7XG4gICAgaWYgKGlzU3RyaW5nKSBtc2cgPSBidWZmZXJUb1N0cmluZyhtc2cpO1xuICAgIGJ1ZmZlcnMucHVzaChtc2cpO1xuICAgIGJ1ZmZlclRhaWwgPSBidWZmZXJUYWlsLnNsaWNlKG1zZ0xlbmd0aCArIDEpO1xuICB9XG5cbiAgdmFyIHRvdGFsID0gYnVmZmVycy5sZW5ndGg7XG4gIGZvciAoaSA9IDA7IGkgPCB0b3RhbDsgaSsrKSB7XG4gICAgdmFyIGJ1ZmZlciA9IGJ1ZmZlcnNbaV07XG4gICAgY2FsbGJhY2soZXhwb3J0cy5kZWNvZGVQYWNrZXQoYnVmZmVyLCBiaW5hcnlUeXBlLCB0cnVlKSwgaSwgdG90YWwpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB6bGliID0gcmVxdWlyZSgnemxpYicpO1xuXG5jb25zdCBidWZmZXJVdGlsID0gcmVxdWlyZSgnLi9idWZmZXItdXRpbCcpO1xuY29uc3QgTGltaXRlciA9IHJlcXVpcmUoJy4vbGltaXRlcicpO1xuY29uc3QgeyBrU3RhdHVzQ29kZSwgTk9PUCB9ID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcblxuY29uc3QgVFJBSUxFUiA9IEJ1ZmZlci5mcm9tKFsweDAwLCAweDAwLCAweGZmLCAweGZmXSk7XG5jb25zdCBrUGVyTWVzc2FnZURlZmxhdGUgPSBTeW1ib2woJ3Blcm1lc3NhZ2UtZGVmbGF0ZScpO1xuY29uc3Qga1RvdGFsTGVuZ3RoID0gU3ltYm9sKCd0b3RhbC1sZW5ndGgnKTtcbmNvbnN0IGtDYWxsYmFjayA9IFN5bWJvbCgnY2FsbGJhY2snKTtcbmNvbnN0IGtCdWZmZXJzID0gU3ltYm9sKCdidWZmZXJzJyk7XG5jb25zdCBrRXJyb3IgPSBTeW1ib2woJ2Vycm9yJyk7XG5cbi8vXG4vLyBXZSBsaW1pdCB6bGliIGNvbmN1cnJlbmN5LCB3aGljaCBwcmV2ZW50cyBzZXZlcmUgbWVtb3J5IGZyYWdtZW50YXRpb25cbi8vIGFzIGRvY3VtZW50ZWQgaW4gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2lzc3Vlcy84ODcxI2lzc3VlY29tbWVudC0yNTA5MTU5MTNcbi8vIGFuZCBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9pc3N1ZXMvMTIwMlxuLy9cbi8vIEludGVudGlvbmFsbHkgZ2xvYmFsOyBpdCdzIHRoZSBnbG9iYWwgdGhyZWFkIHBvb2wgdGhhdCdzIGFuIGlzc3VlLlxuLy9cbmxldCB6bGliTGltaXRlcjtcblxuLyoqXG4gKiBwZXJtZXNzYWdlLWRlZmxhdGUgaW1wbGVtZW50YXRpb24uXG4gKi9cbmNsYXNzIFBlck1lc3NhZ2VEZWZsYXRlIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBQZXJNZXNzYWdlRGVmbGF0ZSBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQ29uZmlndXJhdGlvbiBvcHRpb25zXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5zZXJ2ZXJOb0NvbnRleHRUYWtlb3ZlciBSZXF1ZXN0L2FjY2VwdCBkaXNhYmxpbmdcbiAgICogICAgIG9mIHNlcnZlciBjb250ZXh0IHRha2VvdmVyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5jbGllbnROb0NvbnRleHRUYWtlb3ZlciBBZHZlcnRpc2UvYWNrbm93bGVkZ2VcbiAgICogICAgIGRpc2FibGluZyBvZiBjbGllbnQgY29udGV4dCB0YWtlb3ZlclxuICAgKiBAcGFyYW0geyhCb29sZWFufE51bWJlcil9IG9wdGlvbnMuc2VydmVyTWF4V2luZG93Qml0cyBSZXF1ZXN0L2NvbmZpcm0gdGhlXG4gICAqICAgICB1c2Ugb2YgYSBjdXN0b20gc2VydmVyIHdpbmRvdyBzaXplXG4gICAqIEBwYXJhbSB7KEJvb2xlYW58TnVtYmVyKX0gb3B0aW9ucy5jbGllbnRNYXhXaW5kb3dCaXRzIEFkdmVydGlzZSBzdXBwb3J0XG4gICAqICAgICBmb3IsIG9yIHJlcXVlc3QsIGEgY3VzdG9tIGNsaWVudCB3aW5kb3cgc2l6ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy56bGliRGVmbGF0ZU9wdGlvbnMgT3B0aW9ucyB0byBwYXNzIHRvIHpsaWIgb24gZGVmbGF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy56bGliSW5mbGF0ZU9wdGlvbnMgT3B0aW9ucyB0byBwYXNzIHRvIHpsaWIgb24gaW5mbGF0ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy50aHJlc2hvbGQgU2l6ZSAoaW4gYnl0ZXMpIGJlbG93IHdoaWNoIG1lc3NhZ2VzXG4gICAqICAgICBzaG91bGQgbm90IGJlIGNvbXByZXNzZWRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMuY29uY3VycmVuY3lMaW1pdCBUaGUgbnVtYmVyIG9mIGNvbmN1cnJlbnQgY2FsbHMgdG9cbiAgICogICAgIHpsaWJcbiAgICogQHBhcmFtIHtCb29sZWFufSBpc1NlcnZlciBDcmVhdGUgdGhlIGluc3RhbmNlIGluIGVpdGhlciBzZXJ2ZXIgb3IgY2xpZW50XG4gICAqICAgICBtb2RlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBtYXhQYXlsb2FkIFRoZSBtYXhpbXVtIGFsbG93ZWQgbWVzc2FnZSBsZW5ndGhcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMsIGlzU2VydmVyLCBtYXhQYXlsb2FkKSB7XG4gICAgdGhpcy5fbWF4UGF5bG9hZCA9IG1heFBheWxvYWQgfCAwO1xuICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHRoaXMuX3RocmVzaG9sZCA9XG4gICAgICB0aGlzLl9vcHRpb25zLnRocmVzaG9sZCAhPT0gdW5kZWZpbmVkID8gdGhpcy5fb3B0aW9ucy50aHJlc2hvbGQgOiAxMDI0O1xuICAgIHRoaXMuX2lzU2VydmVyID0gISFpc1NlcnZlcjtcbiAgICB0aGlzLl9kZWZsYXRlID0gbnVsbDtcbiAgICB0aGlzLl9pbmZsYXRlID0gbnVsbDtcblxuICAgIHRoaXMucGFyYW1zID0gbnVsbDtcblxuICAgIGlmICghemxpYkxpbWl0ZXIpIHtcbiAgICAgIGNvbnN0IGNvbmN1cnJlbmN5ID1cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5jb25jdXJyZW5jeUxpbWl0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuY29uY3VycmVuY3lMaW1pdFxuICAgICAgICAgIDogMTA7XG4gICAgICB6bGliTGltaXRlciA9IG5ldyBMaW1pdGVyKGNvbmN1cnJlbmN5KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBnZXQgZXh0ZW5zaW9uTmFtZSgpIHtcbiAgICByZXR1cm4gJ3Blcm1lc3NhZ2UtZGVmbGF0ZSc7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGV4dGVuc2lvbiBuZWdvdGlhdGlvbiBvZmZlci5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fSBFeHRlbnNpb24gcGFyYW1ldGVyc1xuICAgKiBAcHVibGljXG4gICAqL1xuICBvZmZlcigpIHtcbiAgICBjb25zdCBwYXJhbXMgPSB7fTtcblxuICAgIGlmICh0aGlzLl9vcHRpb25zLnNlcnZlck5vQ29udGV4dFRha2VvdmVyKSB7XG4gICAgICBwYXJhbXMuc2VydmVyX25vX2NvbnRleHRfdGFrZW92ZXIgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fb3B0aW9ucy5jbGllbnROb0NvbnRleHRUYWtlb3Zlcikge1xuICAgICAgcGFyYW1zLmNsaWVudF9ub19jb250ZXh0X3Rha2VvdmVyID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX29wdGlvbnMuc2VydmVyTWF4V2luZG93Qml0cykge1xuICAgICAgcGFyYW1zLnNlcnZlcl9tYXhfd2luZG93X2JpdHMgPSB0aGlzLl9vcHRpb25zLnNlcnZlck1heFdpbmRvd0JpdHM7XG4gICAgfVxuICAgIGlmICh0aGlzLl9vcHRpb25zLmNsaWVudE1heFdpbmRvd0JpdHMpIHtcbiAgICAgIHBhcmFtcy5jbGllbnRfbWF4X3dpbmRvd19iaXRzID0gdGhpcy5fb3B0aW9ucy5jbGllbnRNYXhXaW5kb3dCaXRzO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fb3B0aW9ucy5jbGllbnRNYXhXaW5kb3dCaXRzID09IG51bGwpIHtcbiAgICAgIHBhcmFtcy5jbGllbnRfbWF4X3dpbmRvd19iaXRzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG5cbiAgLyoqXG4gICAqIEFjY2VwdCBhbiBleHRlbnNpb24gbmVnb3RpYXRpb24gb2ZmZXIvcmVzcG9uc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNvbmZpZ3VyYXRpb25zIFRoZSBleHRlbnNpb24gbmVnb3RpYXRpb24gb2ZmZXJzL3JlcG9uc2VcbiAgICogQHJldHVybiB7T2JqZWN0fSBBY2NlcHRlZCBjb25maWd1cmF0aW9uXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGFjY2VwdChjb25maWd1cmF0aW9ucykge1xuICAgIGNvbmZpZ3VyYXRpb25zID0gdGhpcy5ub3JtYWxpemVQYXJhbXMoY29uZmlndXJhdGlvbnMpO1xuXG4gICAgdGhpcy5wYXJhbXMgPSB0aGlzLl9pc1NlcnZlclxuICAgICAgPyB0aGlzLmFjY2VwdEFzU2VydmVyKGNvbmZpZ3VyYXRpb25zKVxuICAgICAgOiB0aGlzLmFjY2VwdEFzQ2xpZW50KGNvbmZpZ3VyYXRpb25zKTtcblxuICAgIHJldHVybiB0aGlzLnBhcmFtcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyBhbGwgcmVzb3VyY2VzIHVzZWQgYnkgdGhlIGV4dGVuc2lvbi5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgY2xlYW51cCgpIHtcbiAgICBpZiAodGhpcy5faW5mbGF0ZSkge1xuICAgICAgdGhpcy5faW5mbGF0ZS5jbG9zZSgpO1xuICAgICAgdGhpcy5faW5mbGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2RlZmxhdGUpIHtcbiAgICAgIGNvbnN0IGNhbGxiYWNrID0gdGhpcy5fZGVmbGF0ZVtrQ2FsbGJhY2tdO1xuXG4gICAgICB0aGlzLl9kZWZsYXRlLmNsb3NlKCk7XG4gICAgICB0aGlzLl9kZWZsYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKFxuICAgICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICAgICdUaGUgZGVmbGF0ZSBzdHJlYW0gd2FzIGNsb3NlZCB3aGlsZSBkYXRhIHdhcyBiZWluZyBwcm9jZXNzZWQnXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiAgQWNjZXB0IGFuIGV4dGVuc2lvbiBuZWdvdGlhdGlvbiBvZmZlci5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gb2ZmZXJzIFRoZSBleHRlbnNpb24gbmVnb3RpYXRpb24gb2ZmZXJzXG4gICAqIEByZXR1cm4ge09iamVjdH0gQWNjZXB0ZWQgY29uZmlndXJhdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYWNjZXB0QXNTZXJ2ZXIob2ZmZXJzKSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMuX29wdGlvbnM7XG4gICAgY29uc3QgYWNjZXB0ZWQgPSBvZmZlcnMuZmluZCgocGFyYW1zKSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIChvcHRzLnNlcnZlck5vQ29udGV4dFRha2VvdmVyID09PSBmYWxzZSAmJlxuICAgICAgICAgIHBhcmFtcy5zZXJ2ZXJfbm9fY29udGV4dF90YWtlb3ZlcikgfHxcbiAgICAgICAgKHBhcmFtcy5zZXJ2ZXJfbWF4X3dpbmRvd19iaXRzICYmXG4gICAgICAgICAgKG9wdHMuc2VydmVyTWF4V2luZG93Qml0cyA9PT0gZmFsc2UgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygb3B0cy5zZXJ2ZXJNYXhXaW5kb3dCaXRzID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAgICAgICBvcHRzLnNlcnZlck1heFdpbmRvd0JpdHMgPiBwYXJhbXMuc2VydmVyX21heF93aW5kb3dfYml0cykpKSB8fFxuICAgICAgICAodHlwZW9mIG9wdHMuY2xpZW50TWF4V2luZG93Qml0cyA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgICAhcGFyYW1zLmNsaWVudF9tYXhfd2luZG93X2JpdHMpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcblxuICAgIGlmICghYWNjZXB0ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm9uZSBvZiB0aGUgZXh0ZW5zaW9uIG9mZmVycyBjYW4gYmUgYWNjZXB0ZWQnKTtcbiAgICB9XG5cbiAgICBpZiAob3B0cy5zZXJ2ZXJOb0NvbnRleHRUYWtlb3Zlcikge1xuICAgICAgYWNjZXB0ZWQuc2VydmVyX25vX2NvbnRleHRfdGFrZW92ZXIgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAob3B0cy5jbGllbnROb0NvbnRleHRUYWtlb3Zlcikge1xuICAgICAgYWNjZXB0ZWQuY2xpZW50X25vX2NvbnRleHRfdGFrZW92ZXIgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdHMuc2VydmVyTWF4V2luZG93Qml0cyA9PT0gJ251bWJlcicpIHtcbiAgICAgIGFjY2VwdGVkLnNlcnZlcl9tYXhfd2luZG93X2JpdHMgPSBvcHRzLnNlcnZlck1heFdpbmRvd0JpdHM7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0cy5jbGllbnRNYXhXaW5kb3dCaXRzID09PSAnbnVtYmVyJykge1xuICAgICAgYWNjZXB0ZWQuY2xpZW50X21heF93aW5kb3dfYml0cyA9IG9wdHMuY2xpZW50TWF4V2luZG93Qml0cztcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgYWNjZXB0ZWQuY2xpZW50X21heF93aW5kb3dfYml0cyA9PT0gdHJ1ZSB8fFxuICAgICAgb3B0cy5jbGllbnRNYXhXaW5kb3dCaXRzID09PSBmYWxzZVxuICAgICkge1xuICAgICAgZGVsZXRlIGFjY2VwdGVkLmNsaWVudF9tYXhfd2luZG93X2JpdHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjY2VwdGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEFjY2VwdCB0aGUgZXh0ZW5zaW9uIG5lZ290aWF0aW9uIHJlc3BvbnNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSByZXNwb25zZSBUaGUgZXh0ZW5zaW9uIG5lZ290aWF0aW9uIHJlc3BvbnNlXG4gICAqIEByZXR1cm4ge09iamVjdH0gQWNjZXB0ZWQgY29uZmlndXJhdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYWNjZXB0QXNDbGllbnQocmVzcG9uc2UpIHtcbiAgICBjb25zdCBwYXJhbXMgPSByZXNwb25zZVswXTtcblxuICAgIGlmIChcbiAgICAgIHRoaXMuX29wdGlvbnMuY2xpZW50Tm9Db250ZXh0VGFrZW92ZXIgPT09IGZhbHNlICYmXG4gICAgICBwYXJhbXMuY2xpZW50X25vX2NvbnRleHRfdGFrZW92ZXJcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBwYXJhbWV0ZXIgXCJjbGllbnRfbm9fY29udGV4dF90YWtlb3ZlclwiJyk7XG4gICAgfVxuXG4gICAgaWYgKCFwYXJhbXMuY2xpZW50X21heF93aW5kb3dfYml0cykge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vcHRpb25zLmNsaWVudE1heFdpbmRvd0JpdHMgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHBhcmFtcy5jbGllbnRfbWF4X3dpbmRvd19iaXRzID0gdGhpcy5fb3B0aW9ucy5jbGllbnRNYXhXaW5kb3dCaXRzO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0aGlzLl9vcHRpb25zLmNsaWVudE1heFdpbmRvd0JpdHMgPT09IGZhbHNlIHx8XG4gICAgICAodHlwZW9mIHRoaXMuX29wdGlvbnMuY2xpZW50TWF4V2luZG93Qml0cyA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgcGFyYW1zLmNsaWVudF9tYXhfd2luZG93X2JpdHMgPiB0aGlzLl9vcHRpb25zLmNsaWVudE1heFdpbmRvd0JpdHMpXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdVbmV4cGVjdGVkIG9yIGludmFsaWQgcGFyYW1ldGVyIFwiY2xpZW50X21heF93aW5kb3dfYml0c1wiJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG5cbiAgLyoqXG4gICAqIE5vcm1hbGl6ZSBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBjb25maWd1cmF0aW9ucyBUaGUgZXh0ZW5zaW9uIG5lZ290aWF0aW9uIG9mZmVycy9yZXBvbnNlXG4gICAqIEByZXR1cm4ge0FycmF5fSBUaGUgb2ZmZXJzL3Jlc3BvbnNlIHdpdGggbm9ybWFsaXplZCBwYXJhbWV0ZXJzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBub3JtYWxpemVQYXJhbXMoY29uZmlndXJhdGlvbnMpIHtcbiAgICBjb25maWd1cmF0aW9ucy5mb3JFYWNoKChwYXJhbXMpID0+IHtcbiAgICAgIE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGxldCB2YWx1ZSA9IHBhcmFtc1trZXldO1xuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQYXJhbWV0ZXIgXCIke2tleX1cIiBtdXN0IGhhdmUgb25seSBhIHNpbmdsZSB2YWx1ZWApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWUgPSB2YWx1ZVswXTtcblxuICAgICAgICBpZiAoa2V5ID09PSAnY2xpZW50X21heF93aW5kb3dfYml0cycpIHtcbiAgICAgICAgICBpZiAodmFsdWUgIT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnN0IG51bSA9ICt2YWx1ZTtcbiAgICAgICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihudW0pIHx8IG51bSA8IDggfHwgbnVtID4gMTUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICAgICBgSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyIFwiJHtrZXl9XCI6ICR7dmFsdWV9YFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsdWUgPSBudW07XG4gICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5faXNTZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICAgIGBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgXCIke2tleX1cIjogJHt2YWx1ZX1gXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdzZXJ2ZXJfbWF4X3dpbmRvd19iaXRzJykge1xuICAgICAgICAgIGNvbnN0IG51bSA9ICt2YWx1ZTtcbiAgICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIobnVtKSB8fCBudW0gPCA4IHx8IG51bSA+IDE1KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgICBgSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyIFwiJHtrZXl9XCI6ICR7dmFsdWV9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWUgPSBudW07XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAga2V5ID09PSAnY2xpZW50X25vX2NvbnRleHRfdGFrZW92ZXInIHx8XG4gICAgICAgICAga2V5ID09PSAnc2VydmVyX25vX2NvbnRleHRfdGFrZW92ZXInXG4gICAgICAgICkge1xuICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICAgYEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciBcIiR7a2V5fVwiOiAke3ZhbHVlfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBwYXJhbWV0ZXIgXCIke2tleX1cImApO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvbmZpZ3VyYXRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIERlY29tcHJlc3MgZGF0YS4gQ29uY3VycmVuY3kgbGltaXRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGRhdGEgQ29tcHJlc3NlZCBkYXRhXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gZmluIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGlzIHRoZSBsYXN0IGZyYWdtZW50XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGRlY29tcHJlc3MoZGF0YSwgZmluLCBjYWxsYmFjaykge1xuICAgIHpsaWJMaW1pdGVyLmFkZCgoZG9uZSkgPT4ge1xuICAgICAgdGhpcy5fZGVjb21wcmVzcyhkYXRhLCBmaW4sIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICBkb25lKCk7XG4gICAgICAgIGNhbGxiYWNrKGVyciwgcmVzdWx0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXByZXNzIGRhdGEuIENvbmN1cnJlbmN5IGxpbWl0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBkYXRhIERhdGEgdG8gY29tcHJlc3NcbiAgICogQHBhcmFtIHtCb29sZWFufSBmaW4gU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRoaXMgaXMgdGhlIGxhc3QgZnJhZ21lbnRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2tcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgY29tcHJlc3MoZGF0YSwgZmluLCBjYWxsYmFjaykge1xuICAgIHpsaWJMaW1pdGVyLmFkZCgoZG9uZSkgPT4ge1xuICAgICAgdGhpcy5fY29tcHJlc3MoZGF0YSwgZmluLCAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvbXByZXNzIGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBkYXRhIENvbXByZXNzZWQgZGF0YVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGZpbiBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdGhpcyBpcyB0aGUgbGFzdCBmcmFnbWVudFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFja1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2RlY29tcHJlc3MoZGF0YSwgZmluLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGVuZHBvaW50ID0gdGhpcy5faXNTZXJ2ZXIgPyAnY2xpZW50JyA6ICdzZXJ2ZXInO1xuXG4gICAgaWYgKCF0aGlzLl9pbmZsYXRlKSB7XG4gICAgICBjb25zdCBrZXkgPSBgJHtlbmRwb2ludH1fbWF4X3dpbmRvd19iaXRzYDtcbiAgICAgIGNvbnN0IHdpbmRvd0JpdHMgPVxuICAgICAgICB0eXBlb2YgdGhpcy5wYXJhbXNba2V5XSAhPT0gJ251bWJlcidcbiAgICAgICAgICA/IHpsaWIuWl9ERUZBVUxUX1dJTkRPV0JJVFNcbiAgICAgICAgICA6IHRoaXMucGFyYW1zW2tleV07XG5cbiAgICAgIHRoaXMuX2luZmxhdGUgPSB6bGliLmNyZWF0ZUluZmxhdGVSYXcoe1xuICAgICAgICAuLi50aGlzLl9vcHRpb25zLnpsaWJJbmZsYXRlT3B0aW9ucyxcbiAgICAgICAgd2luZG93Qml0c1xuICAgICAgfSk7XG4gICAgICB0aGlzLl9pbmZsYXRlW2tQZXJNZXNzYWdlRGVmbGF0ZV0gPSB0aGlzO1xuICAgICAgdGhpcy5faW5mbGF0ZVtrVG90YWxMZW5ndGhdID0gMDtcbiAgICAgIHRoaXMuX2luZmxhdGVba0J1ZmZlcnNdID0gW107XG4gICAgICB0aGlzLl9pbmZsYXRlLm9uKCdlcnJvcicsIGluZmxhdGVPbkVycm9yKTtcbiAgICAgIHRoaXMuX2luZmxhdGUub24oJ2RhdGEnLCBpbmZsYXRlT25EYXRhKTtcbiAgICB9XG5cbiAgICB0aGlzLl9pbmZsYXRlW2tDYWxsYmFja10gPSBjYWxsYmFjaztcblxuICAgIHRoaXMuX2luZmxhdGUud3JpdGUoZGF0YSk7XG4gICAgaWYgKGZpbikgdGhpcy5faW5mbGF0ZS53cml0ZShUUkFJTEVSKTtcblxuICAgIHRoaXMuX2luZmxhdGUuZmx1c2goKCkgPT4ge1xuICAgICAgY29uc3QgZXJyID0gdGhpcy5faW5mbGF0ZVtrRXJyb3JdO1xuXG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHRoaXMuX2luZmxhdGUuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5faW5mbGF0ZSA9IG51bGw7XG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGF0YSA9IGJ1ZmZlclV0aWwuY29uY2F0KFxuICAgICAgICB0aGlzLl9pbmZsYXRlW2tCdWZmZXJzXSxcbiAgICAgICAgdGhpcy5faW5mbGF0ZVtrVG90YWxMZW5ndGhdXG4gICAgICApO1xuXG4gICAgICBpZiAoZmluICYmIHRoaXMucGFyYW1zW2Ake2VuZHBvaW50fV9ub19jb250ZXh0X3Rha2VvdmVyYF0pIHtcbiAgICAgICAgdGhpcy5faW5mbGF0ZS5jbG9zZSgpO1xuICAgICAgICB0aGlzLl9pbmZsYXRlID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2luZmxhdGVba1RvdGFsTGVuZ3RoXSA9IDA7XG4gICAgICAgIHRoaXMuX2luZmxhdGVba0J1ZmZlcnNdID0gW107XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXByZXNzIGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBkYXRhIERhdGEgdG8gY29tcHJlc3NcbiAgICogQHBhcmFtIHtCb29sZWFufSBmaW4gU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRoaXMgaXMgdGhlIGxhc3QgZnJhZ21lbnRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2tcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jb21wcmVzcyhkYXRhLCBmaW4sIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSB0aGlzLl9pc1NlcnZlciA/ICdzZXJ2ZXInIDogJ2NsaWVudCc7XG5cbiAgICBpZiAoIXRoaXMuX2RlZmxhdGUpIHtcbiAgICAgIGNvbnN0IGtleSA9IGAke2VuZHBvaW50fV9tYXhfd2luZG93X2JpdHNgO1xuICAgICAgY29uc3Qgd2luZG93Qml0cyA9XG4gICAgICAgIHR5cGVvZiB0aGlzLnBhcmFtc1trZXldICE9PSAnbnVtYmVyJ1xuICAgICAgICAgID8gemxpYi5aX0RFRkFVTFRfV0lORE9XQklUU1xuICAgICAgICAgIDogdGhpcy5wYXJhbXNba2V5XTtcblxuICAgICAgdGhpcy5fZGVmbGF0ZSA9IHpsaWIuY3JlYXRlRGVmbGF0ZVJhdyh7XG4gICAgICAgIC4uLnRoaXMuX29wdGlvbnMuemxpYkRlZmxhdGVPcHRpb25zLFxuICAgICAgICB3aW5kb3dCaXRzXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fZGVmbGF0ZVtrVG90YWxMZW5ndGhdID0gMDtcbiAgICAgIHRoaXMuX2RlZmxhdGVba0J1ZmZlcnNdID0gW107XG5cbiAgICAgIC8vXG4gICAgICAvLyBBbiBgJ2Vycm9yJ2AgZXZlbnQgaXMgZW1pdHRlZCwgb25seSBvbiBOb2RlLmpzIDwgMTAuMC4wLCBpZiB0aGVcbiAgICAgIC8vIGB6bGliLkRlZmxhdGVSYXdgIGluc3RhbmNlIGlzIGNsb3NlZCB3aGlsZSBkYXRhIGlzIGJlaW5nIHByb2Nlc3NlZC5cbiAgICAgIC8vIFRoaXMgY2FuIGhhcHBlbiBpZiBgUGVyTWVzc2FnZURlZmxhdGUjY2xlYW51cCgpYCBpcyBjYWxsZWQgYXQgdGhlIHdyb25nXG4gICAgICAvLyB0aW1lIGR1ZSB0byBhbiBhYm5vcm1hbCBXZWJTb2NrZXQgY2xvc3VyZS5cbiAgICAgIC8vXG4gICAgICB0aGlzLl9kZWZsYXRlLm9uKCdlcnJvcicsIE5PT1ApO1xuICAgICAgdGhpcy5fZGVmbGF0ZS5vbignZGF0YScsIGRlZmxhdGVPbkRhdGEpO1xuICAgIH1cblxuICAgIHRoaXMuX2RlZmxhdGVba0NhbGxiYWNrXSA9IGNhbGxiYWNrO1xuXG4gICAgdGhpcy5fZGVmbGF0ZS53cml0ZShkYXRhKTtcbiAgICB0aGlzLl9kZWZsYXRlLmZsdXNoKHpsaWIuWl9TWU5DX0ZMVVNILCAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuX2RlZmxhdGUpIHtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhlIGRlZmxhdGUgc3RyZWFtIHdhcyBjbG9zZWQgd2hpbGUgZGF0YSB3YXMgYmVpbmcgcHJvY2Vzc2VkLlxuICAgICAgICAvL1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBkYXRhID0gYnVmZmVyVXRpbC5jb25jYXQoXG4gICAgICAgIHRoaXMuX2RlZmxhdGVba0J1ZmZlcnNdLFxuICAgICAgICB0aGlzLl9kZWZsYXRlW2tUb3RhbExlbmd0aF1cbiAgICAgICk7XG5cbiAgICAgIGlmIChmaW4pIGRhdGEgPSBkYXRhLnNsaWNlKDAsIGRhdGEubGVuZ3RoIC0gNCk7XG5cbiAgICAgIC8vXG4gICAgICAvLyBFbnN1cmUgdGhhdCB0aGUgY2FsbGJhY2sgd2lsbCBub3QgYmUgY2FsbGVkIGFnYWluIGluXG4gICAgICAvLyBgUGVyTWVzc2FnZURlZmxhdGUjY2xlYW51cCgpYC5cbiAgICAgIC8vXG4gICAgICB0aGlzLl9kZWZsYXRlW2tDYWxsYmFja10gPSBudWxsO1xuXG4gICAgICBpZiAoZmluICYmIHRoaXMucGFyYW1zW2Ake2VuZHBvaW50fV9ub19jb250ZXh0X3Rha2VvdmVyYF0pIHtcbiAgICAgICAgdGhpcy5fZGVmbGF0ZS5jbG9zZSgpO1xuICAgICAgICB0aGlzLl9kZWZsYXRlID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2RlZmxhdGVba1RvdGFsTGVuZ3RoXSA9IDA7XG4gICAgICAgIHRoaXMuX2RlZmxhdGVba0J1ZmZlcnNdID0gW107XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGVyTWVzc2FnZURlZmxhdGU7XG5cbi8qKlxuICogVGhlIGxpc3RlbmVyIG9mIHRoZSBgemxpYi5EZWZsYXRlUmF3YCBzdHJlYW0gYCdkYXRhJ2AgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGNodW5rIEEgY2h1bmsgb2YgZGF0YVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZGVmbGF0ZU9uRGF0YShjaHVuaykge1xuICB0aGlzW2tCdWZmZXJzXS5wdXNoKGNodW5rKTtcbiAgdGhpc1trVG90YWxMZW5ndGhdICs9IGNodW5rLmxlbmd0aDtcbn1cblxuLyoqXG4gKiBUaGUgbGlzdGVuZXIgb2YgdGhlIGB6bGliLkluZmxhdGVSYXdgIHN0cmVhbSBgJ2RhdGEnYCBldmVudC5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcn0gY2h1bmsgQSBjaHVuayBvZiBkYXRhXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpbmZsYXRlT25EYXRhKGNodW5rKSB7XG4gIHRoaXNba1RvdGFsTGVuZ3RoXSArPSBjaHVuay5sZW5ndGg7XG5cbiAgaWYgKFxuICAgIHRoaXNba1Blck1lc3NhZ2VEZWZsYXRlXS5fbWF4UGF5bG9hZCA8IDEgfHxcbiAgICB0aGlzW2tUb3RhbExlbmd0aF0gPD0gdGhpc1trUGVyTWVzc2FnZURlZmxhdGVdLl9tYXhQYXlsb2FkXG4gICkge1xuICAgIHRoaXNba0J1ZmZlcnNdLnB1c2goY2h1bmspO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXNba0Vycm9yXSA9IG5ldyBSYW5nZUVycm9yKCdNYXggcGF5bG9hZCBzaXplIGV4Y2VlZGVkJyk7XG4gIHRoaXNba0Vycm9yXVtrU3RhdHVzQ29kZV0gPSAxMDA5O1xuICB0aGlzLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgaW5mbGF0ZU9uRGF0YSk7XG4gIHRoaXMucmVzZXQoKTtcbn1cblxuLyoqXG4gKiBUaGUgbGlzdGVuZXIgb2YgdGhlIGB6bGliLkluZmxhdGVSYXdgIHN0cmVhbSBgJ2Vycm9yJ2AgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyIFRoZSBlbWl0dGVkIGVycm9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpbmZsYXRlT25FcnJvcihlcnIpIHtcbiAgLy9cbiAgLy8gVGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIGBabGliI2Nsb3NlKClgIGFzIHRoZSBoYW5kbGUgaXMgYXV0b21hdGljYWxseVxuICAvLyBjbG9zZWQgd2hlbiBhbiBlcnJvciBpcyBlbWl0dGVkLlxuICAvL1xuICB0aGlzW2tQZXJNZXNzYWdlRGVmbGF0ZV0uX2luZmxhdGUgPSBudWxsO1xuICBlcnJba1N0YXR1c0NvZGVdID0gMTAwNztcbiAgdGhpc1trQ2FsbGJhY2tdKGVycik7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHsgRU1QVFlfQlVGRkVSIH0gPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuXG4vKipcbiAqIE1lcmdlcyBhbiBhcnJheSBvZiBidWZmZXJzIGludG8gYSBuZXcgYnVmZmVyLlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyW119IGxpc3QgVGhlIGFycmF5IG9mIGJ1ZmZlcnMgdG8gY29uY2F0XG4gKiBAcGFyYW0ge051bWJlcn0gdG90YWxMZW5ndGggVGhlIHRvdGFsIGxlbmd0aCBvZiBidWZmZXJzIGluIHRoZSBsaXN0XG4gKiBAcmV0dXJuIHtCdWZmZXJ9IFRoZSByZXN1bHRpbmcgYnVmZmVyXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGNvbmNhdChsaXN0LCB0b3RhbExlbmd0aCkge1xuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHJldHVybiBFTVBUWV9CVUZGRVI7XG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkgcmV0dXJuIGxpc3RbMF07XG5cbiAgY29uc3QgdGFyZ2V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKHRvdGFsTGVuZ3RoKTtcbiAgbGV0IG9mZnNldCA9IDA7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYnVmID0gbGlzdFtpXTtcbiAgICB0YXJnZXQuc2V0KGJ1Ziwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gYnVmLmxlbmd0aDtcbiAgfVxuXG4gIGlmIChvZmZzZXQgPCB0b3RhbExlbmd0aCkgcmV0dXJuIHRhcmdldC5zbGljZSgwLCBvZmZzZXQpO1xuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogTWFza3MgYSBidWZmZXIgdXNpbmcgdGhlIGdpdmVuIG1hc2suXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IHNvdXJjZSBUaGUgYnVmZmVyIHRvIG1hc2tcbiAqIEBwYXJhbSB7QnVmZmVyfSBtYXNrIFRoZSBtYXNrIHRvIHVzZVxuICogQHBhcmFtIHtCdWZmZXJ9IG91dHB1dCBUaGUgYnVmZmVyIHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgVGhlIG9mZnNldCBhdCB3aGljaCB0byBzdGFydCB3cml0aW5nXG4gKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIFRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gbWFzay5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gX21hc2soc291cmNlLCBtYXNrLCBvdXRwdXQsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBvdXRwdXRbb2Zmc2V0ICsgaV0gPSBzb3VyY2VbaV0gXiBtYXNrW2kgJiAzXTtcbiAgfVxufVxuXG4vKipcbiAqIFVubWFza3MgYSBidWZmZXIgdXNpbmcgdGhlIGdpdmVuIG1hc2suXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIHVubWFza1xuICogQHBhcmFtIHtCdWZmZXJ9IG1hc2sgVGhlIG1hc2sgdG8gdXNlXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIF91bm1hc2soYnVmZmVyLCBtYXNrKSB7XG4gIC8vIFJlcXVpcmVkIHVudGlsIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvOTAwNiBpcyByZXNvbHZlZC5cbiAgY29uc3QgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGJ1ZmZlcltpXSBePSBtYXNrW2kgJiAzXTtcbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgYnVmZmVyIHRvIGFuIGBBcnJheUJ1ZmZlcmAuXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZiBUaGUgYnVmZmVyIHRvIGNvbnZlcnRcbiAqIEByZXR1cm4ge0FycmF5QnVmZmVyfSBDb252ZXJ0ZWQgYnVmZmVyXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXlCdWZmZXIoYnVmKSB7XG4gIGlmIChidWYuYnl0ZUxlbmd0aCA9PT0gYnVmLmJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJ1Zi5idWZmZXI7XG4gIH1cblxuICByZXR1cm4gYnVmLmJ1ZmZlci5zbGljZShidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVPZmZzZXQgKyBidWYuYnl0ZUxlbmd0aCk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYGRhdGFgIHRvIGEgYEJ1ZmZlcmAuXG4gKlxuICogQHBhcmFtIHsqfSBkYXRhIFRoZSBkYXRhIHRvIGNvbnZlcnRcbiAqIEByZXR1cm4ge0J1ZmZlcn0gVGhlIGJ1ZmZlclxuICogQHRocm93cyB7VHlwZUVycm9yfVxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB0b0J1ZmZlcihkYXRhKSB7XG4gIHRvQnVmZmVyLnJlYWRPbmx5ID0gdHJ1ZTtcblxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSByZXR1cm4gZGF0YTtcblxuICBsZXQgYnVmO1xuXG4gIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICBidWYgPSBCdWZmZXIuZnJvbShkYXRhKTtcbiAgfSBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoZGF0YSkpIHtcbiAgICBidWYgPSB2aWV3VG9CdWZmZXIoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgYnVmID0gQnVmZmVyLmZyb20oZGF0YSk7XG4gICAgdG9CdWZmZXIucmVhZE9ubHkgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBidWY7XG59XG5cbi8qKlxuICogQ29udmVydHMgYW4gYEFycmF5QnVmZmVyYCB2aWV3IGludG8gYSBidWZmZXIuXG4gKlxuICogQHBhcmFtIHsoRGF0YVZpZXd8VHlwZWRBcnJheSl9IHZpZXcgVGhlIHZpZXcgdG8gY29udmVydFxuICogQHJldHVybiB7QnVmZmVyfSBDb252ZXJ0ZWQgdmlld1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdmlld1RvQnVmZmVyKHZpZXcpIHtcbiAgY29uc3QgYnVmID0gQnVmZmVyLmZyb20odmlldy5idWZmZXIpO1xuXG4gIGlmICh2aWV3LmJ5dGVMZW5ndGggIT09IHZpZXcuYnVmZmVyLmJ5dGVMZW5ndGgpIHtcbiAgICByZXR1cm4gYnVmLnNsaWNlKHZpZXcuYnl0ZU9mZnNldCwgdmlldy5ieXRlT2Zmc2V0ICsgdmlldy5ieXRlTGVuZ3RoKTtcbiAgfVxuXG4gIHJldHVybiBidWY7XG59XG5cbnRyeSB7XG4gIGNvbnN0IGJ1ZmZlclV0aWwgPSByZXF1aXJlKCdidWZmZXJ1dGlsJyk7XG4gIGNvbnN0IGJ1ID0gYnVmZmVyVXRpbC5CdWZmZXJVdGlsIHx8IGJ1ZmZlclV0aWw7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgY29uY2F0LFxuICAgIG1hc2soc291cmNlLCBtYXNrLCBvdXRwdXQsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICBpZiAobGVuZ3RoIDwgNDgpIF9tYXNrKHNvdXJjZSwgbWFzaywgb3V0cHV0LCBvZmZzZXQsIGxlbmd0aCk7XG4gICAgICBlbHNlIGJ1Lm1hc2soc291cmNlLCBtYXNrLCBvdXRwdXQsIG9mZnNldCwgbGVuZ3RoKTtcbiAgICB9LFxuICAgIHRvQXJyYXlCdWZmZXIsXG4gICAgdG9CdWZmZXIsXG4gICAgdW5tYXNrKGJ1ZmZlciwgbWFzaykge1xuICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPCAzMikgX3VubWFzayhidWZmZXIsIG1hc2spO1xuICAgICAgZWxzZSBidS51bm1hc2soYnVmZmVyLCBtYXNrKTtcbiAgICB9XG4gIH07XG59IGNhdGNoIChlKSAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGNvbmNhdCxcbiAgICBtYXNrOiBfbWFzayxcbiAgICB0b0FycmF5QnVmZmVyLFxuICAgIHRvQnVmZmVyLFxuICAgIHVubWFzazogX3VubWFza1xuICB9O1xufVxuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIGJpbmFyeSA9IHJlcXVpcmUoJy4vYmluYXJ5Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbnZhciBpc0J1ZiA9IHJlcXVpcmUoJy4vaXMtYnVmZmVyJyk7XG5cbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMucHJvdG9jb2wgPSA0O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlcy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMudHlwZXMgPSBbXG4gICdDT05ORUNUJyxcbiAgJ0RJU0NPTk5FQ1QnLFxuICAnRVZFTlQnLFxuICAnQUNLJyxcbiAgJ0VSUk9SJyxcbiAgJ0JJTkFSWV9FVkVOVCcsXG4gICdCSU5BUllfQUNLJ1xuXTtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgY29ubmVjdGAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkNPTk5FQ1QgPSAwO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBkaXNjb25uZWN0YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRElTQ09OTkVDVCA9IDE7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGV2ZW50YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRVZFTlQgPSAyO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBhY2tgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5BQ0sgPSAzO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBlcnJvcmAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkVSUk9SID0gNDtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSAnYmluYXJ5IGV2ZW50J1xuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5CSU5BUllfRVZFTlQgPSA1O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBiaW5hcnkgYWNrYC4gRm9yIGFja3Mgd2l0aCBiaW5hcnkgYXJndW1lbnRzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5CSU5BUllfQUNLID0gNjtcblxuLyoqXG4gKiBFbmNvZGVyIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5FbmNvZGVyID0gRW5jb2RlcjtcblxuLyoqXG4gKiBEZWNvZGVyIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5EZWNvZGVyID0gRGVjb2RlcjtcblxuLyoqXG4gKiBBIHNvY2tldC5pbyBFbmNvZGVyIGluc3RhbmNlXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBFbmNvZGVyKCkge31cblxudmFyIEVSUk9SX1BBQ0tFVCA9IGV4cG9ydHMuRVJST1IgKyAnXCJlbmNvZGUgZXJyb3JcIic7XG5cbi8qKlxuICogRW5jb2RlIGEgcGFja2V0IGFzIGEgc2luZ2xlIHN0cmluZyBpZiBub24tYmluYXJ5LCBvciBhcyBhXG4gKiBidWZmZXIgc2VxdWVuY2UsIGRlcGVuZGluZyBvbiBwYWNrZXQgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gcGFja2V0IG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBoYW5kbGUgZW5jb2RpbmdzIChsaWtlbHkgZW5naW5lLndyaXRlKVxuICogQHJldHVybiBDYWxscyBjYWxsYmFjayB3aXRoIEFycmF5IG9mIGVuY29kaW5nc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbihvYmosIGNhbGxiYWNrKXtcbiAgZGVidWcoJ2VuY29kaW5nIHBhY2tldCAlaicsIG9iaik7XG5cbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBvYmoudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IG9iai50eXBlKSB7XG4gICAgZW5jb2RlQXNCaW5hcnkob2JqLCBjYWxsYmFjayk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVuY29kaW5nID0gZW5jb2RlQXNTdHJpbmcob2JqKTtcbiAgICBjYWxsYmFjayhbZW5jb2RpbmddKTtcbiAgfVxufTtcblxuLyoqXG4gKiBFbmNvZGUgcGFja2V0IGFzIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAcmV0dXJuIHtTdHJpbmd9IGVuY29kZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGVuY29kZUFzU3RyaW5nKG9iaikge1xuXG4gIC8vIGZpcnN0IGlzIHR5cGVcbiAgdmFyIHN0ciA9ICcnICsgb2JqLnR5cGU7XG5cbiAgLy8gYXR0YWNobWVudHMgaWYgd2UgaGF2ZSB0aGVtXG4gIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gb2JqLnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBvYmoudHlwZSkge1xuICAgIHN0ciArPSBvYmouYXR0YWNobWVudHMgKyAnLSc7XG4gIH1cblxuICAvLyBpZiB3ZSBoYXZlIGEgbmFtZXNwYWNlIG90aGVyIHRoYW4gYC9gXG4gIC8vIHdlIGFwcGVuZCBpdCBmb2xsb3dlZCBieSBhIGNvbW1hIGAsYFxuICBpZiAob2JqLm5zcCAmJiAnLycgIT09IG9iai5uc3ApIHtcbiAgICBzdHIgKz0gb2JqLm5zcCArICcsJztcbiAgfVxuXG4gIC8vIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IHRoZSBpZFxuICBpZiAobnVsbCAhPSBvYmouaWQpIHtcbiAgICBzdHIgKz0gb2JqLmlkO1xuICB9XG5cbiAgLy8ganNvbiBkYXRhXG4gIGlmIChudWxsICE9IG9iai5kYXRhKSB7XG4gICAgdmFyIHBheWxvYWQgPSB0cnlTdHJpbmdpZnkob2JqLmRhdGEpO1xuICAgIGlmIChwYXlsb2FkICE9PSBmYWxzZSkge1xuICAgICAgc3RyICs9IHBheWxvYWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBFUlJPUl9QQUNLRVQ7XG4gICAgfVxuICB9XG5cbiAgZGVidWcoJ2VuY29kZWQgJWogYXMgJXMnLCBvYmosIHN0cik7XG4gIHJldHVybiBzdHI7XG59XG5cbmZ1bmN0aW9uIHRyeVN0cmluZ2lmeShzdHIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3RyKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBFbmNvZGUgcGFja2V0IGFzICdidWZmZXIgc2VxdWVuY2UnIGJ5IHJlbW92aW5nIGJsb2JzLCBhbmRcbiAqIGRlY29uc3RydWN0aW5nIHBhY2tldCBpbnRvIG9iamVjdCB3aXRoIHBsYWNlaG9sZGVycyBhbmRcbiAqIGEgbGlzdCBvZiBidWZmZXJzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge0J1ZmZlcn0gZW5jb2RlZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXNCaW5hcnkob2JqLCBjYWxsYmFjaykge1xuXG4gIGZ1bmN0aW9uIHdyaXRlRW5jb2RpbmcoYmxvYmxlc3NEYXRhKSB7XG4gICAgdmFyIGRlY29uc3RydWN0aW9uID0gYmluYXJ5LmRlY29uc3RydWN0UGFja2V0KGJsb2JsZXNzRGF0YSk7XG4gICAgdmFyIHBhY2sgPSBlbmNvZGVBc1N0cmluZyhkZWNvbnN0cnVjdGlvbi5wYWNrZXQpO1xuICAgIHZhciBidWZmZXJzID0gZGVjb25zdHJ1Y3Rpb24uYnVmZmVycztcblxuICAgIGJ1ZmZlcnMudW5zaGlmdChwYWNrKTsgLy8gYWRkIHBhY2tldCBpbmZvIHRvIGJlZ2lubmluZyBvZiBkYXRhIGxpc3RcbiAgICBjYWxsYmFjayhidWZmZXJzKTsgLy8gd3JpdGUgYWxsIHRoZSBidWZmZXJzXG4gIH1cblxuICBiaW5hcnkucmVtb3ZlQmxvYnMob2JqLCB3cml0ZUVuY29kaW5nKTtcbn1cblxuLyoqXG4gKiBBIHNvY2tldC5pbyBEZWNvZGVyIGluc3RhbmNlXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSBkZWNvZGVyXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIERlY29kZXIoKSB7XG4gIHRoaXMucmVjb25zdHJ1Y3RvciA9IG51bGw7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYCB3aXRoIERlY29kZXIuXG4gKi9cblxuRW1pdHRlcihEZWNvZGVyLnByb3RvdHlwZSk7XG5cbi8qKlxuICogRGVjb2RlcyBhbiBlbmNvZGVkIHBhY2tldCBzdHJpbmcgaW50byBwYWNrZXQgSlNPTi5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gb2JqIC0gZW5jb2RlZCBwYWNrZXRcbiAqIEByZXR1cm4ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkRlY29kZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKG9iaikge1xuICB2YXIgcGFja2V0O1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICBwYWNrZXQgPSBkZWNvZGVTdHJpbmcob2JqKTtcbiAgICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IHBhY2tldC50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gcGFja2V0LnR5cGUpIHsgLy8gYmluYXJ5IHBhY2tldCdzIGpzb25cbiAgICAgIHRoaXMucmVjb25zdHJ1Y3RvciA9IG5ldyBCaW5hcnlSZWNvbnN0cnVjdG9yKHBhY2tldCk7XG5cbiAgICAgIC8vIG5vIGF0dGFjaG1lbnRzLCBsYWJlbGVkIGJpbmFyeSBidXQgbm8gYmluYXJ5IGRhdGEgdG8gZm9sbG93XG4gICAgICBpZiAodGhpcy5yZWNvbnN0cnVjdG9yLnJlY29uUGFjay5hdHRhY2htZW50cyA9PT0gMCkge1xuICAgICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7IC8vIG5vbi1iaW5hcnkgZnVsbCBwYWNrZXRcbiAgICAgIHRoaXMuZW1pdCgnZGVjb2RlZCcsIHBhY2tldCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQnVmKG9iaikgfHwgb2JqLmJhc2U2NCkgeyAvLyByYXcgYmluYXJ5IGRhdGFcbiAgICBpZiAoIXRoaXMucmVjb25zdHJ1Y3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdnb3QgYmluYXJ5IGRhdGEgd2hlbiBub3QgcmVjb25zdHJ1Y3RpbmcgYSBwYWNrZXQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFja2V0ID0gdGhpcy5yZWNvbnN0cnVjdG9yLnRha2VCaW5hcnlEYXRhKG9iaik7XG4gICAgICBpZiAocGFja2V0KSB7IC8vIHJlY2VpdmVkIGZpbmFsIGJ1ZmZlclxuICAgICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBudWxsO1xuICAgICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdHlwZTogJyArIG9iaik7XG4gIH1cbn07XG5cbi8qKlxuICogRGVjb2RlIGEgcGFja2V0IFN0cmluZyAoSlNPTiBkYXRhKVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBkZWNvZGVTdHJpbmcoc3RyKSB7XG4gIHZhciBpID0gMDtcbiAgLy8gbG9vayB1cCB0eXBlXG4gIHZhciBwID0ge1xuICAgIHR5cGU6IE51bWJlcihzdHIuY2hhckF0KDApKVxuICB9O1xuXG4gIGlmIChudWxsID09IGV4cG9ydHMudHlwZXNbcC50eXBlXSkge1xuICAgIHJldHVybiBlcnJvcigndW5rbm93biBwYWNrZXQgdHlwZSAnICsgcC50eXBlKTtcbiAgfVxuXG4gIC8vIGxvb2sgdXAgYXR0YWNobWVudHMgaWYgdHlwZSBiaW5hcnlcbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBwLnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBwLnR5cGUpIHtcbiAgICB2YXIgYnVmID0gJyc7XG4gICAgd2hpbGUgKHN0ci5jaGFyQXQoKytpKSAhPT0gJy0nKSB7XG4gICAgICBidWYgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmIChpID09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoYnVmICE9IE51bWJlcihidWYpIHx8IHN0ci5jaGFyQXQoaSkgIT09ICctJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIGF0dGFjaG1lbnRzJyk7XG4gICAgfVxuICAgIHAuYXR0YWNobWVudHMgPSBOdW1iZXIoYnVmKTtcbiAgfVxuXG4gIC8vIGxvb2sgdXAgbmFtZXNwYWNlIChpZiBhbnkpXG4gIGlmICgnLycgPT09IHN0ci5jaGFyQXQoaSArIDEpKSB7XG4gICAgcC5uc3AgPSAnJztcbiAgICB3aGlsZSAoKytpKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAoJywnID09PSBjKSBicmVhaztcbiAgICAgIHAubnNwICs9IGM7XG4gICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aCkgYnJlYWs7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHAubnNwID0gJy8nO1xuICB9XG5cbiAgLy8gbG9vayB1cCBpZFxuICB2YXIgbmV4dCA9IHN0ci5jaGFyQXQoaSArIDEpO1xuICBpZiAoJycgIT09IG5leHQgJiYgTnVtYmVyKG5leHQpID09IG5leHQpIHtcbiAgICBwLmlkID0gJyc7XG4gICAgd2hpbGUgKCsraSkge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKG51bGwgPT0gYyB8fCBOdW1iZXIoYykgIT0gYykge1xuICAgICAgICAtLWk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcC5pZCArPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgIH1cbiAgICBwLmlkID0gTnVtYmVyKHAuaWQpO1xuICB9XG5cbiAgLy8gbG9vayB1cCBqc29uIGRhdGFcbiAgaWYgKHN0ci5jaGFyQXQoKytpKSkge1xuICAgIHZhciBwYXlsb2FkID0gdHJ5UGFyc2Uoc3RyLnN1YnN0cihpKSk7XG4gICAgdmFyIGlzUGF5bG9hZFZhbGlkID0gcGF5bG9hZCAhPT0gZmFsc2UgJiYgKHAudHlwZSA9PT0gZXhwb3J0cy5FUlJPUiB8fCBpc0FycmF5KHBheWxvYWQpKTtcbiAgICBpZiAoaXNQYXlsb2FkVmFsaWQpIHtcbiAgICAgIHAuZGF0YSA9IHBheWxvYWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlcnJvcignaW52YWxpZCBwYXlsb2FkJyk7XG4gICAgfVxuICB9XG5cbiAgZGVidWcoJ2RlY29kZWQgJXMgYXMgJWonLCBzdHIsIHApO1xuICByZXR1cm4gcDtcbn1cblxuZnVuY3Rpb24gdHJ5UGFyc2Uoc3RyKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWFsbG9jYXRlcyBhIHBhcnNlcidzIHJlc291cmNlc1xuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRGVjb2Rlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgdGhpcy5yZWNvbnN0cnVjdG9yLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKTtcbiAgfVxufTtcblxuLyoqXG4gKiBBIG1hbmFnZXIgb2YgYSBiaW5hcnkgZXZlbnQncyAnYnVmZmVyIHNlcXVlbmNlJy4gU2hvdWxkXG4gKiBiZSBjb25zdHJ1Y3RlZCB3aGVuZXZlciBhIHBhY2tldCBvZiB0eXBlIEJJTkFSWV9FVkVOVCBpc1xuICogZGVjb2RlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAcmV0dXJuIHtCaW5hcnlSZWNvbnN0cnVjdG9yfSBpbml0aWFsaXplZCByZWNvbnN0cnVjdG9yXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBCaW5hcnlSZWNvbnN0cnVjdG9yKHBhY2tldCkge1xuICB0aGlzLnJlY29uUGFjayA9IHBhY2tldDtcbiAgdGhpcy5idWZmZXJzID0gW107XG59XG5cbi8qKlxuICogTWV0aG9kIHRvIGJlIGNhbGxlZCB3aGVuIGJpbmFyeSBkYXRhIHJlY2VpdmVkIGZyb20gY29ubmVjdGlvblxuICogYWZ0ZXIgYSBCSU5BUllfRVZFTlQgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyIHwgQXJyYXlCdWZmZXJ9IGJpbkRhdGEgLSB0aGUgcmF3IGJpbmFyeSBkYXRhIHJlY2VpdmVkXG4gKiBAcmV0dXJuIHtudWxsIHwgT2JqZWN0fSByZXR1cm5zIG51bGwgaWYgbW9yZSBiaW5hcnkgZGF0YSBpcyBleHBlY3RlZCBvclxuICogICBhIHJlY29uc3RydWN0ZWQgcGFja2V0IG9iamVjdCBpZiBhbGwgYnVmZmVycyBoYXZlIGJlZW4gcmVjZWl2ZWQuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5CaW5hcnlSZWNvbnN0cnVjdG9yLnByb3RvdHlwZS50YWtlQmluYXJ5RGF0YSA9IGZ1bmN0aW9uKGJpbkRhdGEpIHtcbiAgdGhpcy5idWZmZXJzLnB1c2goYmluRGF0YSk7XG4gIGlmICh0aGlzLmJ1ZmZlcnMubGVuZ3RoID09PSB0aGlzLnJlY29uUGFjay5hdHRhY2htZW50cykgeyAvLyBkb25lIHdpdGggYnVmZmVyIGxpc3RcbiAgICB2YXIgcGFja2V0ID0gYmluYXJ5LnJlY29uc3RydWN0UGFja2V0KHRoaXMucmVjb25QYWNrLCB0aGlzLmJ1ZmZlcnMpO1xuICAgIHRoaXMuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpO1xuICAgIHJldHVybiBwYWNrZXQ7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIENsZWFucyB1cCBiaW5hcnkgcGFja2V0IHJlY29uc3RydWN0aW9uIHZhcmlhYmxlcy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5CaW5hcnlSZWNvbnN0cnVjdG9yLnByb3RvdHlwZS5maW5pc2hlZFJlY29uc3RydWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucmVjb25QYWNrID0gbnVsbDtcbiAgdGhpcy5idWZmZXJzID0gW107XG59O1xuXG5mdW5jdGlvbiBlcnJvcihtc2cpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBleHBvcnRzLkVSUk9SLFxuICAgIGRhdGE6ICdwYXJzZXIgZXJyb3I6ICcgKyBtc2dcbiAgfTtcbn1cbiIsIi8qKlxuICogRGV0ZWN0IEVsZWN0cm9uIHJlbmRlcmVyIC8gbndqcyBwcm9jZXNzLCB3aGljaCBpcyBub2RlLCBidXQgd2Ugc2hvdWxkXG4gKiB0cmVhdCBhcyBhIGJyb3dzZXIuXG4gKi9cblxuaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJyB8fCBwcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgcHJvY2Vzcy5icm93c2VyID09PSB0cnVlIHx8IHByb2Nlc3MuX19ud2pzKSB7XG5cdG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9icm93c2VyLmpzJyk7XG59IGVsc2Uge1xuXHRtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbm9kZS5qcycpO1xufVxuIiwiLyohXG4gKiBtaW1lLXR5cGVzXG4gKiBDb3B5cmlnaHQoYykgMjAxNCBKb25hdGhhbiBPbmdcbiAqIENvcHlyaWdodChjKSAyMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgZGIgPSByZXF1aXJlKCdtaW1lLWRiJylcbnZhciBleHRuYW1lID0gcmVxdWlyZSgncGF0aCcpLmV4dG5hbWVcblxuLyoqXG4gKiBNb2R1bGUgdmFyaWFibGVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgRVhUUkFDVF9UWVBFX1JFR0VYUCA9IC9eXFxzKihbXjtcXHNdKikoPzo7fFxcc3wkKS9cbnZhciBURVhUX1RZUEVfUkVHRVhQID0gL150ZXh0XFwvL2lcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmNoYXJzZXQgPSBjaGFyc2V0XG5leHBvcnRzLmNoYXJzZXRzID0geyBsb29rdXA6IGNoYXJzZXQgfVxuZXhwb3J0cy5jb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlXG5leHBvcnRzLmV4dGVuc2lvbiA9IGV4dGVuc2lvblxuZXhwb3J0cy5leHRlbnNpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuZXhwb3J0cy5sb29rdXAgPSBsb29rdXBcbmV4cG9ydHMudHlwZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpXG5cbi8vIFBvcHVsYXRlIHRoZSBleHRlbnNpb25zL3R5cGVzIG1hcHNcbnBvcHVsYXRlTWFwcyhleHBvcnRzLmV4dGVuc2lvbnMsIGV4cG9ydHMudHlwZXMpXG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IGNoYXJzZXQgZm9yIGEgTUlNRSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcmV0dXJuIHtib29sZWFufHN0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBjaGFyc2V0ICh0eXBlKSB7XG4gIGlmICghdHlwZSB8fCB0eXBlb2YgdHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIFRPRE86IHVzZSBtZWRpYS10eXBlclxuICB2YXIgbWF0Y2ggPSBFWFRSQUNUX1RZUEVfUkVHRVhQLmV4ZWModHlwZSlcbiAgdmFyIG1pbWUgPSBtYXRjaCAmJiBkYlttYXRjaFsxXS50b0xvd2VyQ2FzZSgpXVxuXG4gIGlmIChtaW1lICYmIG1pbWUuY2hhcnNldCkge1xuICAgIHJldHVybiBtaW1lLmNoYXJzZXRcbiAgfVxuXG4gIC8vIGRlZmF1bHQgdGV4dC8qIHRvIHV0Zi04XG4gIGlmIChtYXRjaCAmJiBURVhUX1RZUEVfUkVHRVhQLnRlc3QobWF0Y2hbMV0pKSB7XG4gICAgcmV0dXJuICdVVEYtOCdcbiAgfVxuXG4gIHJldHVybiBmYWxzZVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGZ1bGwgQ29udGVudC1UeXBlIGhlYWRlciBnaXZlbiBhIE1JTUUgdHlwZSBvciBleHRlbnNpb24uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7Ym9vbGVhbnxzdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gY29udGVudFR5cGUgKHN0cikge1xuICAvLyBUT0RPOiBzaG91bGQgdGhpcyBldmVuIGJlIGluIHRoaXMgbW9kdWxlP1xuICBpZiAoIXN0ciB8fCB0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgdmFyIG1pbWUgPSBzdHIuaW5kZXhPZignLycpID09PSAtMVxuICAgID8gZXhwb3J0cy5sb29rdXAoc3RyKVxuICAgIDogc3RyXG5cbiAgaWYgKCFtaW1lKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBUT0RPOiB1c2UgY29udGVudC10eXBlIG9yIG90aGVyIG1vZHVsZVxuICBpZiAobWltZS5pbmRleE9mKCdjaGFyc2V0JykgPT09IC0xKSB7XG4gICAgdmFyIGNoYXJzZXQgPSBleHBvcnRzLmNoYXJzZXQobWltZSlcbiAgICBpZiAoY2hhcnNldCkgbWltZSArPSAnOyBjaGFyc2V0PScgKyBjaGFyc2V0LnRvTG93ZXJDYXNlKClcbiAgfVxuXG4gIHJldHVybiBtaW1lXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IGV4dGVuc2lvbiBmb3IgYSBNSU1FIHR5cGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEByZXR1cm4ge2Jvb2xlYW58c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGV4dGVuc2lvbiAodHlwZSkge1xuICBpZiAoIXR5cGUgfHwgdHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBUT0RPOiB1c2UgbWVkaWEtdHlwZXJcbiAgdmFyIG1hdGNoID0gRVhUUkFDVF9UWVBFX1JFR0VYUC5leGVjKHR5cGUpXG5cbiAgLy8gZ2V0IGV4dGVuc2lvbnNcbiAgdmFyIGV4dHMgPSBtYXRjaCAmJiBleHBvcnRzLmV4dGVuc2lvbnNbbWF0Y2hbMV0udG9Mb3dlckNhc2UoKV1cblxuICBpZiAoIWV4dHMgfHwgIWV4dHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gZXh0c1swXVxufVxuXG4vKipcbiAqIExvb2t1cCB0aGUgTUlNRSB0eXBlIGZvciBhIGZpbGUgcGF0aC9leHRlbnNpb24uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAqIEByZXR1cm4ge2Jvb2xlYW58c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGxvb2t1cCAocGF0aCkge1xuICBpZiAoIXBhdGggfHwgdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBnZXQgdGhlIGV4dGVuc2lvbiAoXCJleHRcIiBvciBcIi5leHRcIiBvciBmdWxsIHBhdGgpXG4gIHZhciBleHRlbnNpb24gPSBleHRuYW1lKCd4LicgKyBwYXRoKVxuICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgLnN1YnN0cigxKVxuXG4gIGlmICghZXh0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy50eXBlc1tleHRlbnNpb25dIHx8IGZhbHNlXG59XG5cbi8qKlxuICogUG9wdWxhdGUgdGhlIGV4dGVuc2lvbnMgYW5kIHR5cGVzIG1hcHMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBvcHVsYXRlTWFwcyAoZXh0ZW5zaW9ucywgdHlwZXMpIHtcbiAgLy8gc291cmNlIHByZWZlcmVuY2UgKGxlYXN0IC0+IG1vc3QpXG4gIHZhciBwcmVmZXJlbmNlID0gWyduZ2lueCcsICdhcGFjaGUnLCB1bmRlZmluZWQsICdpYW5hJ11cblxuICBPYmplY3Qua2V5cyhkYikuZm9yRWFjaChmdW5jdGlvbiBmb3JFYWNoTWltZVR5cGUgKHR5cGUpIHtcbiAgICB2YXIgbWltZSA9IGRiW3R5cGVdXG4gICAgdmFyIGV4dHMgPSBtaW1lLmV4dGVuc2lvbnNcblxuICAgIGlmICghZXh0cyB8fCAhZXh0cy5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIG1pbWUgLT4gZXh0ZW5zaW9uc1xuICAgIGV4dGVuc2lvbnNbdHlwZV0gPSBleHRzXG5cbiAgICAvLyBleHRlbnNpb24gLT4gbWltZVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXh0cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGV4dGVuc2lvbiA9IGV4dHNbaV1cblxuICAgICAgaWYgKHR5cGVzW2V4dGVuc2lvbl0pIHtcbiAgICAgICAgdmFyIGZyb20gPSBwcmVmZXJlbmNlLmluZGV4T2YoZGJbdHlwZXNbZXh0ZW5zaW9uXV0uc291cmNlKVxuICAgICAgICB2YXIgdG8gPSBwcmVmZXJlbmNlLmluZGV4T2YobWltZS5zb3VyY2UpXG5cbiAgICAgICAgaWYgKHR5cGVzW2V4dGVuc2lvbl0gIT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nICYmXG4gICAgICAgICAgKGZyb20gPiB0byB8fCAoZnJvbSA9PT0gdG8gJiYgdHlwZXNbZXh0ZW5zaW9uXS5zdWJzdHIoMCwgMTIpID09PSAnYXBwbGljYXRpb24vJykpKSB7XG4gICAgICAgICAgLy8gc2tpcCB0aGUgcmVtYXBwaW5nXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBzZXQgdGhlIGV4dGVuc2lvbiAtPiBtaW1lXG4gICAgICB0eXBlc1tleHRlbnNpb25dID0gdHlwZVxuICAgIH1cbiAgfSlcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImZzXCIpOyIsIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmosIGtleXMpe1xuICBvYmogPSBvYmogfHwge307XG4gIGlmICgnc3RyaW5nJyA9PSB0eXBlb2Yga2V5cykga2V5cyA9IGtleXMuc3BsaXQoLyArLyk7XG4gIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbihyZXQsIGtleSl7XG4gICAgaWYgKG51bGwgPT0gb2JqW2tleV0pIHJldHVybiByZXQ7XG4gICAgcmV0W2tleV0gPSBvYmpba2V5XTtcbiAgICByZXR1cm4gcmV0O1xuICB9LCB7fSk7XG59O1xuIiwiLyohXG4gKiBodHRwLWVycm9yc1xuICogQ29weXJpZ2h0KGMpIDIwMTQgSm9uYXRoYW4gT25nXG4gKiBDb3B5cmlnaHQoYykgMjAxNiBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGRlcHJlY2F0ZSA9IHJlcXVpcmUoJ2RlcGQnKSgnaHR0cC1lcnJvcnMnKVxudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnc2V0cHJvdG90eXBlb2YnKVxudmFyIHN0YXR1c2VzID0gcmVxdWlyZSgnc3RhdHVzZXMnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIHRvSWRlbnRpZmllciA9IHJlcXVpcmUoJ3RvaWRlbnRpZmllcicpXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVFcnJvclxubW9kdWxlLmV4cG9ydHMuSHR0cEVycm9yID0gY3JlYXRlSHR0cEVycm9yQ29uc3RydWN0b3IoKVxuXG4vLyBQb3B1bGF0ZSBleHBvcnRzIGZvciBhbGwgY29uc3RydWN0b3JzXG5wb3B1bGF0ZUNvbnN0cnVjdG9yRXhwb3J0cyhtb2R1bGUuZXhwb3J0cywgc3RhdHVzZXMuY29kZXMsIG1vZHVsZS5leHBvcnRzLkh0dHBFcnJvcilcblxuLyoqXG4gKiBHZXQgdGhlIGNvZGUgY2xhc3Mgb2YgYSBzdGF0dXMgY29kZS5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29kZUNsYXNzIChzdGF0dXMpIHtcbiAgcmV0dXJuIE51bWJlcihTdHJpbmcoc3RhdHVzKS5jaGFyQXQoMCkgKyAnMDAnKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBIVFRQIEVycm9yLlxuICpcbiAqIEByZXR1cm5zIHtFcnJvcn1cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFcnJvciAoKSB7XG4gIC8vIHNvIG11Y2ggYXJpdHkgZ29pbmcgb24gfl9+XG4gIHZhciBlcnJcbiAgdmFyIG1zZ1xuICB2YXIgc3RhdHVzID0gNTAwXG4gIHZhciBwcm9wcyA9IHt9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3VtZW50c1tpXVxuICAgIGlmIChhcmcgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgZXJyID0gYXJnXG4gICAgICBzdGF0dXMgPSBlcnIuc3RhdHVzIHx8IGVyci5zdGF0dXNDb2RlIHx8IHN0YXR1c1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgc3dpdGNoICh0eXBlb2YgYXJnKSB7XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBtc2cgPSBhcmdcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgIHN0YXR1cyA9IGFyZ1xuICAgICAgICBpZiAoaSAhPT0gMCkge1xuICAgICAgICAgIGRlcHJlY2F0ZSgnbm9uLWZpcnN0LWFyZ3VtZW50IHN0YXR1cyBjb2RlOyByZXBsYWNlIHdpdGggY3JlYXRlRXJyb3IoJyArIGFyZyArICcsIC4uLiknKVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICBwcm9wcyA9IGFyZ1xuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3RhdHVzID09PSAnbnVtYmVyJyAmJiAoc3RhdHVzIDwgNDAwIHx8IHN0YXR1cyA+PSA2MDApKSB7XG4gICAgZGVwcmVjYXRlKCdub24tZXJyb3Igc3RhdHVzIGNvZGU7IHVzZSBvbmx5IDR4eCBvciA1eHggc3RhdHVzIGNvZGVzJylcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3RhdHVzICE9PSAnbnVtYmVyJyB8fFxuICAgICghc3RhdHVzZXNbc3RhdHVzXSAmJiAoc3RhdHVzIDwgNDAwIHx8IHN0YXR1cyA+PSA2MDApKSkge1xuICAgIHN0YXR1cyA9IDUwMFxuICB9XG5cbiAgLy8gY29uc3RydWN0b3JcbiAgdmFyIEh0dHBFcnJvciA9IGNyZWF0ZUVycm9yW3N0YXR1c10gfHwgY3JlYXRlRXJyb3JbY29kZUNsYXNzKHN0YXR1cyldXG5cbiAgaWYgKCFlcnIpIHtcbiAgICAvLyBjcmVhdGUgZXJyb3JcbiAgICBlcnIgPSBIdHRwRXJyb3JcbiAgICAgID8gbmV3IEh0dHBFcnJvcihtc2cpXG4gICAgICA6IG5ldyBFcnJvcihtc2cgfHwgc3RhdHVzZXNbc3RhdHVzXSlcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShlcnIsIGNyZWF0ZUVycm9yKVxuICB9XG5cbiAgaWYgKCFIdHRwRXJyb3IgfHwgIShlcnIgaW5zdGFuY2VvZiBIdHRwRXJyb3IpIHx8IGVyci5zdGF0dXMgIT09IHN0YXR1cykge1xuICAgIC8vIGFkZCBwcm9wZXJ0aWVzIHRvIGdlbmVyaWMgZXJyb3JcbiAgICBlcnIuZXhwb3NlID0gc3RhdHVzIDwgNTAwXG4gICAgZXJyLnN0YXR1cyA9IGVyci5zdGF0dXNDb2RlID0gc3RhdHVzXG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBpZiAoa2V5ICE9PSAnc3RhdHVzJyAmJiBrZXkgIT09ICdzdGF0dXNDb2RlJykge1xuICAgICAgZXJyW2tleV0gPSBwcm9wc1trZXldXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVyclxufVxuXG4vKipcbiAqIENyZWF0ZSBIVFRQIGVycm9yIGFic3RyYWN0IGJhc2UgY2xhc3MuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUh0dHBFcnJvckNvbnN0cnVjdG9yICgpIHtcbiAgZnVuY3Rpb24gSHR0cEVycm9yICgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYW5ub3QgY29uc3RydWN0IGFic3RyYWN0IGNsYXNzJylcbiAgfVxuXG4gIGluaGVyaXRzKEh0dHBFcnJvciwgRXJyb3IpXG5cbiAgcmV0dXJuIEh0dHBFcnJvclxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNvbnN0cnVjdG9yIGZvciBhIGNsaWVudCBlcnJvci5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlQ2xpZW50RXJyb3JDb25zdHJ1Y3RvciAoSHR0cEVycm9yLCBuYW1lLCBjb2RlKSB7XG4gIHZhciBjbGFzc05hbWUgPSBuYW1lLm1hdGNoKC9FcnJvciQvKSA/IG5hbWUgOiBuYW1lICsgJ0Vycm9yJ1xuXG4gIGZ1bmN0aW9uIENsaWVudEVycm9yIChtZXNzYWdlKSB7XG4gICAgLy8gY3JlYXRlIHRoZSBlcnJvciBvYmplY3RcbiAgICB2YXIgbXNnID0gbWVzc2FnZSAhPSBudWxsID8gbWVzc2FnZSA6IHN0YXR1c2VzW2NvZGVdXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihtc2cpXG5cbiAgICAvLyBjYXB0dXJlIGEgc3RhY2sgdHJhY2UgdG8gdGhlIGNvbnN0cnVjdGlvbiBwb2ludFxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGVyciwgQ2xpZW50RXJyb3IpXG5cbiAgICAvLyBhZGp1c3QgdGhlIFtbUHJvdG90eXBlXV1cbiAgICBzZXRQcm90b3R5cGVPZihlcnIsIENsaWVudEVycm9yLnByb3RvdHlwZSlcblxuICAgIC8vIHJlZGVmaW5lIHRoZSBlcnJvciBtZXNzYWdlXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVyciwgJ21lc3NhZ2UnLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IG1zZyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSlcblxuICAgIC8vIHJlZGVmaW5lIHRoZSBlcnJvciBuYW1lXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVyciwgJ25hbWUnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBjbGFzc05hbWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pXG5cbiAgICByZXR1cm4gZXJyXG4gIH1cblxuICBpbmhlcml0cyhDbGllbnRFcnJvciwgSHR0cEVycm9yKVxuICBuYW1lRnVuYyhDbGllbnRFcnJvciwgY2xhc3NOYW1lKVxuXG4gIENsaWVudEVycm9yLnByb3RvdHlwZS5zdGF0dXMgPSBjb2RlXG4gIENsaWVudEVycm9yLnByb3RvdHlwZS5zdGF0dXNDb2RlID0gY29kZVxuICBDbGllbnRFcnJvci5wcm90b3R5cGUuZXhwb3NlID0gdHJ1ZVxuXG4gIHJldHVybiBDbGllbnRFcnJvclxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNvbnN0cnVjdG9yIGZvciBhIHNlcnZlciBlcnJvci5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU2VydmVyRXJyb3JDb25zdHJ1Y3RvciAoSHR0cEVycm9yLCBuYW1lLCBjb2RlKSB7XG4gIHZhciBjbGFzc05hbWUgPSBuYW1lLm1hdGNoKC9FcnJvciQvKSA/IG5hbWUgOiBuYW1lICsgJ0Vycm9yJ1xuXG4gIGZ1bmN0aW9uIFNlcnZlckVycm9yIChtZXNzYWdlKSB7XG4gICAgLy8gY3JlYXRlIHRoZSBlcnJvciBvYmplY3RcbiAgICB2YXIgbXNnID0gbWVzc2FnZSAhPSBudWxsID8gbWVzc2FnZSA6IHN0YXR1c2VzW2NvZGVdXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihtc2cpXG5cbiAgICAvLyBjYXB0dXJlIGEgc3RhY2sgdHJhY2UgdG8gdGhlIGNvbnN0cnVjdGlvbiBwb2ludFxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGVyciwgU2VydmVyRXJyb3IpXG5cbiAgICAvLyBhZGp1c3QgdGhlIFtbUHJvdG90eXBlXV1cbiAgICBzZXRQcm90b3R5cGVPZihlcnIsIFNlcnZlckVycm9yLnByb3RvdHlwZSlcblxuICAgIC8vIHJlZGVmaW5lIHRoZSBlcnJvciBtZXNzYWdlXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVyciwgJ21lc3NhZ2UnLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IG1zZyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSlcblxuICAgIC8vIHJlZGVmaW5lIHRoZSBlcnJvciBuYW1lXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVyciwgJ25hbWUnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBjbGFzc05hbWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pXG5cbiAgICByZXR1cm4gZXJyXG4gIH1cblxuICBpbmhlcml0cyhTZXJ2ZXJFcnJvciwgSHR0cEVycm9yKVxuICBuYW1lRnVuYyhTZXJ2ZXJFcnJvciwgY2xhc3NOYW1lKVxuXG4gIFNlcnZlckVycm9yLnByb3RvdHlwZS5zdGF0dXMgPSBjb2RlXG4gIFNlcnZlckVycm9yLnByb3RvdHlwZS5zdGF0dXNDb2RlID0gY29kZVxuICBTZXJ2ZXJFcnJvci5wcm90b3R5cGUuZXhwb3NlID0gZmFsc2VcblxuICByZXR1cm4gU2VydmVyRXJyb3Jcbn1cblxuLyoqXG4gKiBTZXQgdGhlIG5hbWUgb2YgYSBmdW5jdGlvbiwgaWYgcG9zc2libGUuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG5hbWVGdW5jIChmdW5jLCBuYW1lKSB7XG4gIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihmdW5jLCAnbmFtZScpXG5cbiAgaWYgKGRlc2MgJiYgZGVzYy5jb25maWd1cmFibGUpIHtcbiAgICBkZXNjLnZhbHVlID0gbmFtZVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmdW5jLCAnbmFtZScsIGRlc2MpXG4gIH1cbn1cblxuLyoqXG4gKiBQb3B1bGF0ZSB0aGUgZXhwb3J0cyBvYmplY3Qgd2l0aCBjb25zdHJ1Y3RvcnMgZm9yIGV2ZXJ5IGVycm9yIGNsYXNzLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwb3B1bGF0ZUNvbnN0cnVjdG9yRXhwb3J0cyAoZXhwb3J0cywgY29kZXMsIEh0dHBFcnJvcikge1xuICBjb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIGZvckVhY2hDb2RlIChjb2RlKSB7XG4gICAgdmFyIENvZGVFcnJvclxuICAgIHZhciBuYW1lID0gdG9JZGVudGlmaWVyKHN0YXR1c2VzW2NvZGVdKVxuXG4gICAgc3dpdGNoIChjb2RlQ2xhc3MoY29kZSkpIHtcbiAgICAgIGNhc2UgNDAwOlxuICAgICAgICBDb2RlRXJyb3IgPSBjcmVhdGVDbGllbnRFcnJvckNvbnN0cnVjdG9yKEh0dHBFcnJvciwgbmFtZSwgY29kZSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgNTAwOlxuICAgICAgICBDb2RlRXJyb3IgPSBjcmVhdGVTZXJ2ZXJFcnJvckNvbnN0cnVjdG9yKEh0dHBFcnJvciwgbmFtZSwgY29kZSlcbiAgICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBpZiAoQ29kZUVycm9yKSB7XG4gICAgICAvLyBleHBvcnQgdGhlIGNvbnN0cnVjdG9yXG4gICAgICBleHBvcnRzW2NvZGVdID0gQ29kZUVycm9yXG4gICAgICBleHBvcnRzW25hbWVdID0gQ29kZUVycm9yXG4gICAgfVxuICB9KVxuXG4gIC8vIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5XG4gIGV4cG9ydHNbXCJJJ21hdGVhcG90XCJdID0gZGVwcmVjYXRlLmZ1bmN0aW9uKGV4cG9ydHMuSW1BVGVhcG90LFxuICAgICdcIklcXCdtYXRlYXBvdFwiOyB1c2UgXCJJbUFUZWFwb3RcIiBpbnN0ZWFkJylcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInF1ZXJ5c3RyaW5nXCIpOyIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmU6dHJhbnNwb3J0Jyk7XG5cbi8qKlxuICogRXhwb3NlIHRoZSBjb25zdHJ1Y3Rvci5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zcG9ydDtcblxuLyoqXG4gKiBOb29wIGZ1bmN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG5vb3AgKCkge31cblxuLyoqXG4gKiBUcmFuc3BvcnQgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtodHRwLkluY29taW5nTWVzc2FnZX0gcmVxdWVzdFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBUcmFuc3BvcnQgKHJlcSkge1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIHRoaXMuZGlzY2FyZGVkID0gZmFsc2U7XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBFdmVudEVtaXR0ZXIuXG4gKi9cblxudXRpbC5pbmhlcml0cyhUcmFuc3BvcnQsIEV2ZW50RW1pdHRlcik7XG5cbi8qKlxuICogRmxhZ3MgdGhlIHRyYW5zcG9ydCBhcyBkaXNjYXJkZWQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5kaXNjYXJkID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmRpc2NhcmRlZCA9IHRydWU7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIGFuIGluY29taW5nIEhUVFAgcmVxdWVzdC5cbiAqXG4gKiBAcGFyYW0ge2h0dHAuSW5jb21pbmdNZXNzYWdlfSByZXF1ZXN0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uUmVxdWVzdCA9IGZ1bmN0aW9uIChyZXEpIHtcbiAgZGVidWcoJ3NldHRpbmcgcmVxdWVzdCcpO1xuICB0aGlzLnJlcSA9IHJlcTtcbn07XG5cbi8qKlxuICogQ2xvc2VzIHRoZSB0cmFuc3BvcnQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChmbikge1xuICBpZiAoJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSkgcmV0dXJuO1xuXG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zaW5nJztcbiAgdGhpcy5kb0Nsb3NlKGZuIHx8IG5vb3ApO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBhIHRyYW5zcG9ydCBlcnJvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBlcnJvclxuICogQHBhcmFtIHtPYmplY3R9IGVycm9yIGRlc2NyaXB0aW9uXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAobXNnLCBkZXNjKSB7XG4gIGlmICh0aGlzLmxpc3RlbmVycygnZXJyb3InKS5sZW5ndGgpIHtcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKG1zZyk7XG4gICAgZXJyLnR5cGUgPSAnVHJhbnNwb3J0RXJyb3InO1xuICAgIGVyci5kZXNjcmlwdGlvbiA9IGRlc2M7XG4gICAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIH0gZWxzZSB7XG4gICAgZGVidWcoJ2lnbm9yZWQgdHJhbnNwb3J0IGVycm9yICVzICglcyknLCBtc2csIGRlc2MpO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIHBhcnNlZCBvdXQgYSBwYWNrZXRzIGZyb20gdGhlIGRhdGEgc3RyZWFtLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25QYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdpdGggdGhlIGVuY29kZWQgcGFja2V0IGRhdGEuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGFcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5vblBhY2tldChwYXJzZXIuZGVjb2RlUGFja2V0KGRhdGEpKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IGNsb3NlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMuZW1pdCgnY2xvc2UnKTtcbn07XG4iLCIvKiBnbG9iYWwgQmxvYiBGaWxlICovXG5cbi8qXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEJsb2IpID09PSAnW29iamVjdCBCbG9iQ29uc3RydWN0b3JdJztcbnZhciB3aXRoTmF0aXZlRmlsZSA9IHR5cGVvZiBGaWxlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgRmlsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChGaWxlKSA9PT0gJ1tvYmplY3QgRmlsZUNvbnN0cnVjdG9yXSc7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNCaW5hcnk7XG5cbi8qKlxuICogQ2hlY2tzIGZvciBiaW5hcnkgZGF0YS5cbiAqXG4gKiBTdXBwb3J0cyBCdWZmZXIsIEFycmF5QnVmZmVyLCBCbG9iIGFuZCBGaWxlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbnl0aGluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBoYXNCaW5hcnkgKG9iaikge1xuICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChoYXNCaW5hcnkob2JqW2ldKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCh0eXBlb2YgQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIEJ1ZmZlci5pc0J1ZmZlciAmJiBCdWZmZXIuaXNCdWZmZXIob2JqKSkgfHxcbiAgICAodHlwZW9mIEFycmF5QnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fFxuICAgICh3aXRoTmF0aXZlQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fFxuICAgICh3aXRoTmF0aXZlRmlsZSAmJiBvYmogaW5zdGFuY2VvZiBGaWxlKVxuICApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvaGFzLWJpbmFyeS9wdWxsLzRcbiAgaWYgKG9iai50b0pTT04gJiYgdHlwZW9mIG9iai50b0pTT04gPT09ICdmdW5jdGlvbicgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBoYXNCaW5hcnkob2JqLnRvSlNPTigpLCB0cnVlKTtcbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSAmJiBoYXNCaW5hcnkob2JqW2tleV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Z1snZGVmYXVsdCddID0gY3JlYXRlRGVidWc7XG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuLyoqXG4gKiBBY3RpdmUgYGRlYnVnYCBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydHMuaW5zdGFuY2VzID0gW107XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG4gKi9cblxuZXhwb3J0cy5uYW1lcyA9IFtdO1xuZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4vKipcbiAqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cbiAqXG4gKiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cbi8qKlxuICogU2VsZWN0IGEgY29sb3IuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcbiAgdmFyIGhhc2ggPSAwLCBpO1xuXG4gIGZvciAoaSBpbiBuYW1lc3BhY2UpIHtcbiAgICBoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGV4cG9ydHMuY29sb3JzLmxlbmd0aF07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXG4gIHZhciBwcmV2VGltZTtcblxuICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAvLyBkaXNhYmxlZD9cbiAgICBpZiAoIWRlYnVnLmVuYWJsZWQpIHJldHVybjtcblxuICAgIHZhciBzZWxmID0gZGVidWc7XG5cbiAgICAvLyBzZXQgYGRpZmZgIHRpbWVzdGFtcFxuICAgIHZhciBjdXJyID0gK25ldyBEYXRlKCk7XG4gICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICBzZWxmLmRpZmYgPSBtcztcbiAgICBzZWxmLnByZXYgPSBwcmV2VGltZTtcbiAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgIHByZXZUaW1lID0gY3VycjtcblxuICAgIC8vIHR1cm4gdGhlIGBhcmd1bWVudHNgIGludG8gYSBwcm9wZXIgQXJyYXlcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgYXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cbiAgICAgIGFyZ3MudW5zaGlmdCgnJU8nKTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykgcmV0dXJuIG1hdGNoO1xuICAgICAgaW5kZXgrKztcbiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm9ybWF0dGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcbiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgLy8gYXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcbiAgICBleHBvcnRzLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuICAgIHZhciBsb2dGbiA9IGRlYnVnLmxvZyB8fCBleHBvcnRzLmxvZyB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xuICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG5cbiAgZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICBkZWJ1Zy5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gIGRlYnVnLnVzZUNvbG9ycyA9IGV4cG9ydHMudXNlQ29sb3JzKCk7XG4gIGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcbiAgZGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cbiAgLy8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmluaXQpIHtcbiAgICBleHBvcnRzLmluaXQoZGVidWcpO1xuICB9XG5cbiAgZXhwb3J0cy5pbnN0YW5jZXMucHVzaChkZWJ1Zyk7XG5cbiAgcmV0dXJuIGRlYnVnO1xufVxuXG5mdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgdmFyIGluZGV4ID0gZXhwb3J0cy5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIGV4cG9ydHMuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgZXhwb3J0cy5uYW1lcyA9IFtdO1xuICBleHBvcnRzLnNraXBzID0gW107XG5cbiAgdmFyIGk7XG4gIHZhciBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKCFzcGxpdFtpXSkgY29udGludWU7IC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG4gICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgZXhwb3J0cy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBleHBvcnRzLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpbnN0YW5jZSA9IGV4cG9ydHMuaW5zdGFuY2VzW2ldO1xuICAgIGluc3RhbmNlLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgZXhwb3J0cy5lbmFibGUoJycpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gIGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpLCBsZW47XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENvZXJjZSBgdmFsYC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG4gIHJldHVybiB2YWw7XG59XG4iLCIvKiFcbiAqIG9uLWZpbmlzaGVkXG4gKiBDb3B5cmlnaHQoYykgMjAxMyBKb25hdGhhbiBPbmdcbiAqIENvcHlyaWdodChjKSAyMDE0IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9uRmluaXNoZWRcbm1vZHVsZS5leHBvcnRzLmlzRmluaXNoZWQgPSBpc0ZpbmlzaGVkXG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGZpcnN0ID0gcmVxdWlyZSgnZWUtZmlyc3QnKVxuXG4vKipcbiAqIFZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnZhciBkZWZlciA9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbidcbiAgPyBzZXRJbW1lZGlhdGVcbiAgOiBmdW5jdGlvbihmbil7IHByb2Nlc3MubmV4dFRpY2soZm4uYmluZC5hcHBseShmbiwgYXJndW1lbnRzKSkgfVxuXG4vKipcbiAqIEludm9rZSBjYWxsYmFjayB3aGVuIHRoZSByZXNwb25zZSBoYXMgZmluaXNoZWQsIHVzZWZ1bCBmb3JcbiAqIGNsZWFuaW5nIHVwIHJlc291cmNlcyBhZnRlcndhcmRzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBtc2dcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gb25GaW5pc2hlZChtc2csIGxpc3RlbmVyKSB7XG4gIGlmIChpc0ZpbmlzaGVkKG1zZykgIT09IGZhbHNlKSB7XG4gICAgZGVmZXIobGlzdGVuZXIsIG51bGwsIG1zZylcbiAgICByZXR1cm4gbXNnXG4gIH1cblxuICAvLyBhdHRhY2ggdGhlIGxpc3RlbmVyIHRvIHRoZSBtZXNzYWdlXG4gIGF0dGFjaExpc3RlbmVyKG1zZywgbGlzdGVuZXIpXG5cbiAgcmV0dXJuIG1zZ1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBtZXNzYWdlIGlzIGFscmVhZHkgZmluaXNoZWQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG1zZ1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBpc0ZpbmlzaGVkKG1zZykge1xuICB2YXIgc29ja2V0ID0gbXNnLnNvY2tldFxuXG4gIGlmICh0eXBlb2YgbXNnLmZpbmlzaGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAvLyBPdXRnb2luZ01lc3NhZ2VcbiAgICByZXR1cm4gQm9vbGVhbihtc2cuZmluaXNoZWQgfHwgKHNvY2tldCAmJiAhc29ja2V0LndyaXRhYmxlKSlcbiAgfVxuXG4gIGlmICh0eXBlb2YgbXNnLmNvbXBsZXRlID09PSAnYm9vbGVhbicpIHtcbiAgICAvLyBJbmNvbWluZ01lc3NhZ2VcbiAgICByZXR1cm4gQm9vbGVhbihtc2cudXBncmFkZSB8fCAhc29ja2V0IHx8ICFzb2NrZXQucmVhZGFibGUgfHwgKG1zZy5jb21wbGV0ZSAmJiAhbXNnLnJlYWRhYmxlKSlcbiAgfVxuXG4gIC8vIGRvbid0IGtub3dcbiAgcmV0dXJuIHVuZGVmaW5lZFxufVxuXG4vKipcbiAqIEF0dGFjaCBhIGZpbmlzaGVkIGxpc3RlbmVyIHRvIHRoZSBtZXNzYWdlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBtc2dcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGF0dGFjaEZpbmlzaGVkTGlzdGVuZXIobXNnLCBjYWxsYmFjaykge1xuICB2YXIgZWVNc2dcbiAgdmFyIGVlU29ja2V0XG4gIHZhciBmaW5pc2hlZCA9IGZhbHNlXG5cbiAgZnVuY3Rpb24gb25GaW5pc2goZXJyb3IpIHtcbiAgICBlZU1zZy5jYW5jZWwoKVxuICAgIGVlU29ja2V0LmNhbmNlbCgpXG5cbiAgICBmaW5pc2hlZCA9IHRydWVcbiAgICBjYWxsYmFjayhlcnJvcilcbiAgfVxuXG4gIC8vIGZpbmlzaGVkIG9uIGZpcnN0IG1lc3NhZ2UgZXZlbnRcbiAgZWVNc2cgPSBlZVNvY2tldCA9IGZpcnN0KFtbbXNnLCAnZW5kJywgJ2ZpbmlzaCddXSwgb25GaW5pc2gpXG5cbiAgZnVuY3Rpb24gb25Tb2NrZXQoc29ja2V0KSB7XG4gICAgLy8gcmVtb3ZlIGxpc3RlbmVyXG4gICAgbXNnLnJlbW92ZUxpc3RlbmVyKCdzb2NrZXQnLCBvblNvY2tldClcblxuICAgIGlmIChmaW5pc2hlZCkgcmV0dXJuXG4gICAgaWYgKGVlTXNnICE9PSBlZVNvY2tldCkgcmV0dXJuXG5cbiAgICAvLyBmaW5pc2hlZCBvbiBmaXJzdCBzb2NrZXQgZXZlbnRcbiAgICBlZVNvY2tldCA9IGZpcnN0KFtbc29ja2V0LCAnZXJyb3InLCAnY2xvc2UnXV0sIG9uRmluaXNoKVxuICB9XG5cbiAgaWYgKG1zZy5zb2NrZXQpIHtcbiAgICAvLyBzb2NrZXQgYWxyZWFkeSBhc3NpZ25lZFxuICAgIG9uU29ja2V0KG1zZy5zb2NrZXQpXG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyB3YWl0IGZvciBzb2NrZXQgdG8gYmUgYXNzaWduZWRcbiAgbXNnLm9uKCdzb2NrZXQnLCBvblNvY2tldClcblxuICBpZiAobXNnLnNvY2tldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gbm9kZS5qcyAwLjggcGF0Y2hcbiAgICBwYXRjaEFzc2lnblNvY2tldChtc2csIG9uU29ja2V0KVxuICB9XG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBsaXN0ZW5lciB0byB0aGUgbWVzc2FnZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbXNnXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gYXR0YWNoTGlzdGVuZXIobXNnLCBsaXN0ZW5lcikge1xuICB2YXIgYXR0YWNoZWQgPSBtc2cuX19vbkZpbmlzaGVkXG5cbiAgLy8gY3JlYXRlIGEgcHJpdmF0ZSBzaW5nbGUgbGlzdGVuZXIgd2l0aCBxdWV1ZVxuICBpZiAoIWF0dGFjaGVkIHx8ICFhdHRhY2hlZC5xdWV1ZSkge1xuICAgIGF0dGFjaGVkID0gbXNnLl9fb25GaW5pc2hlZCA9IGNyZWF0ZUxpc3RlbmVyKG1zZylcbiAgICBhdHRhY2hGaW5pc2hlZExpc3RlbmVyKG1zZywgYXR0YWNoZWQpXG4gIH1cblxuICBhdHRhY2hlZC5xdWV1ZS5wdXNoKGxpc3RlbmVyKVxufVxuXG4vKipcbiAqIENyZWF0ZSBsaXN0ZW5lciBvbiBtZXNzYWdlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBtc2dcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lcihtc2cpIHtcbiAgZnVuY3Rpb24gbGlzdGVuZXIoZXJyKSB7XG4gICAgaWYgKG1zZy5fX29uRmluaXNoZWQgPT09IGxpc3RlbmVyKSBtc2cuX19vbkZpbmlzaGVkID0gbnVsbFxuICAgIGlmICghbGlzdGVuZXIucXVldWUpIHJldHVyblxuXG4gICAgdmFyIHF1ZXVlID0gbGlzdGVuZXIucXVldWVcbiAgICBsaXN0ZW5lci5xdWV1ZSA9IG51bGxcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHF1ZXVlW2ldKGVyciwgbXNnKVxuICAgIH1cbiAgfVxuXG4gIGxpc3RlbmVyLnF1ZXVlID0gW11cblxuICByZXR1cm4gbGlzdGVuZXJcbn1cblxuLyoqXG4gKiBQYXRjaCBTZXJ2ZXJSZXNwb25zZS5wcm90b3R5cGUuYXNzaWduU29ja2V0IGZvciBub2RlLmpzIDAuOC5cbiAqXG4gKiBAcGFyYW0ge1NlcnZlclJlc3BvbnNlfSByZXNcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhdGNoQXNzaWduU29ja2V0KHJlcywgY2FsbGJhY2spIHtcbiAgdmFyIGFzc2lnblNvY2tldCA9IHJlcy5hc3NpZ25Tb2NrZXRcblxuICBpZiAodHlwZW9mIGFzc2lnblNvY2tldCAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuXG5cbiAgLy8gcmVzLm9uKCdzb2NrZXQnLCBjYWxsYmFjaykgaXMgYnJva2VuIGluIDAuOFxuICByZXMuYXNzaWduU29ja2V0ID0gZnVuY3Rpb24gX2Fzc2lnblNvY2tldChzb2NrZXQpIHtcbiAgICBhc3NpZ25Tb2NrZXQuY2FsbCh0aGlzLCBzb2NrZXQpXG4gICAgY2FsbGJhY2soc29ja2V0KVxuICB9XG59XG4iLCIvKiFcbiAqIHR5cGUtaXNcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIHR5cGVyID0gcmVxdWlyZSgnbWVkaWEtdHlwZXInKVxudmFyIG1pbWUgPSByZXF1aXJlKCdtaW1lLXR5cGVzJylcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZnJlcXVlc3Rcbm1vZHVsZS5leHBvcnRzLmlzID0gdHlwZWlzXG5tb2R1bGUuZXhwb3J0cy5oYXNCb2R5ID0gaGFzYm9keVxubW9kdWxlLmV4cG9ydHMubm9ybWFsaXplID0gbm9ybWFsaXplXG5tb2R1bGUuZXhwb3J0cy5tYXRjaCA9IG1pbWVNYXRjaFxuXG4vKipcbiAqIENvbXBhcmUgYSBgdmFsdWVgIGNvbnRlbnQtdHlwZSB3aXRoIGB0eXBlc2AuXG4gKiBFYWNoIGB0eXBlYCBjYW4gYmUgYW4gZXh0ZW5zaW9uIGxpa2UgYGh0bWxgLFxuICogYSBzcGVjaWFsIHNob3J0Y3V0IGxpa2UgYG11bHRpcGFydGAgb3IgYHVybGVuY29kZWRgLFxuICogb3IgYSBtaW1lIHR5cGUuXG4gKlxuICogSWYgbm8gdHlwZXMgbWF0Y2gsIGBmYWxzZWAgaXMgcmV0dXJuZWQuXG4gKiBPdGhlcndpc2UsIHRoZSBmaXJzdCBgdHlwZWAgdGhhdCBtYXRjaGVzIGlzIHJldHVybmVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtBcnJheX0gdHlwZXNcbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiB0eXBlaXMgKHZhbHVlLCB0eXBlc18pIHtcbiAgdmFyIGlcbiAgdmFyIHR5cGVzID0gdHlwZXNfXG5cbiAgLy8gcmVtb3ZlIHBhcmFtZXRlcnMgYW5kIG5vcm1hbGl6ZVxuICB2YXIgdmFsID0gdHJ5Tm9ybWFsaXplVHlwZSh2YWx1ZSlcblxuICAvLyBubyB0eXBlIG9yIGludmFsaWRcbiAgaWYgKCF2YWwpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIHN1cHBvcnQgZmxhdHRlbmVkIGFyZ3VtZW50c1xuICBpZiAodHlwZXMgJiYgIUFycmF5LmlzQXJyYXkodHlwZXMpKSB7XG4gICAgdHlwZXMgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpXG4gICAgZm9yIChpID0gMDsgaSA8IHR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0eXBlc1tpXSA9IGFyZ3VtZW50c1tpICsgMV1cbiAgICB9XG4gIH1cblxuICAvLyBubyB0eXBlcywgcmV0dXJuIHRoZSBjb250ZW50IHR5cGVcbiAgaWYgKCF0eXBlcyB8fCAhdHlwZXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHZhbFxuICB9XG5cbiAgdmFyIHR5cGVcbiAgZm9yIChpID0gMDsgaSA8IHR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKG1pbWVNYXRjaChub3JtYWxpemUodHlwZSA9IHR5cGVzW2ldKSwgdmFsKSkge1xuICAgICAgcmV0dXJuIHR5cGVbMF0gPT09ICcrJyB8fCB0eXBlLmluZGV4T2YoJyonKSAhPT0gLTFcbiAgICAgICAgPyB2YWxcbiAgICAgICAgOiB0eXBlXG4gICAgfVxuICB9XG5cbiAgLy8gbm8gbWF0Y2hlc1xuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHJlcXVlc3QgaGFzIGEgcmVxdWVzdCBib2R5LlxuICogQSByZXF1ZXN0IHdpdGggYSBib2R5IF9fbXVzdF9fIGVpdGhlciBoYXZlIGB0cmFuc2Zlci1lbmNvZGluZ2BcbiAqIG9yIGBjb250ZW50LWxlbmd0aGAgaGVhZGVycyBzZXQuXG4gKiBodHRwOi8vd3d3LnczLm9yZy9Qcm90b2NvbHMvcmZjMjYxNi9yZmMyNjE2LXNlYzQuaHRtbCNzZWM0LjNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVxdWVzdFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBoYXNib2R5IChyZXEpIHtcbiAgcmV0dXJuIHJlcS5oZWFkZXJzWyd0cmFuc2Zlci1lbmNvZGluZyddICE9PSB1bmRlZmluZWQgfHxcbiAgICAhaXNOYU4ocmVxLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10pXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGluY29taW5nIHJlcXVlc3QgY29udGFpbnMgdGhlIFwiQ29udGVudC1UeXBlXCJcbiAqIGhlYWRlciBmaWVsZCwgYW5kIGl0IGNvbnRhaW5zIGFueSBvZiB0aGUgZ2l2ZSBtaW1lIGB0eXBlYHMuXG4gKiBJZiB0aGVyZSBpcyBubyByZXF1ZXN0IGJvZHksIGBudWxsYCBpcyByZXR1cm5lZC5cbiAqIElmIHRoZXJlIGlzIG5vIGNvbnRlbnQgdHlwZSwgYGZhbHNlYCBpcyByZXR1cm5lZC5cbiAqIE90aGVyd2lzZSwgaXQgcmV0dXJucyB0aGUgZmlyc3QgYHR5cGVgIHRoYXQgbWF0Y2hlcy5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICAgLy8gV2l0aCBDb250ZW50LVR5cGU6IHRleHQvaHRtbDsgY2hhcnNldD11dGYtOFxuICogICAgIHRoaXMuaXMoJ2h0bWwnKTsgLy8gPT4gJ2h0bWwnXG4gKiAgICAgdGhpcy5pcygndGV4dC9odG1sJyk7IC8vID0+ICd0ZXh0L2h0bWwnXG4gKiAgICAgdGhpcy5pcygndGV4dC8qJywgJ2FwcGxpY2F0aW9uL2pzb24nKTsgLy8gPT4gJ3RleHQvaHRtbCdcbiAqXG4gKiAgICAgLy8gV2hlbiBDb250ZW50LVR5cGUgaXMgYXBwbGljYXRpb24vanNvblxuICogICAgIHRoaXMuaXMoJ2pzb24nLCAndXJsZW5jb2RlZCcpOyAvLyA9PiAnanNvbidcbiAqICAgICB0aGlzLmlzKCdhcHBsaWNhdGlvbi9qc29uJyk7IC8vID0+ICdhcHBsaWNhdGlvbi9qc29uJ1xuICogICAgIHRoaXMuaXMoJ2h0bWwnLCAnYXBwbGljYXRpb24vKicpOyAvLyA9PiAnYXBwbGljYXRpb24vanNvbidcbiAqXG4gKiAgICAgdGhpcy5pcygnaHRtbCcpOyAvLyA9PiBmYWxzZVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSB0eXBlcy4uLlxuICogQHJldHVybiB7U3RyaW5nfGZhbHNlfG51bGx9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gdHlwZW9mcmVxdWVzdCAocmVxLCB0eXBlc18pIHtcbiAgdmFyIHR5cGVzID0gdHlwZXNfXG5cbiAgLy8gbm8gYm9keVxuICBpZiAoIWhhc2JvZHkocmVxKSkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvLyBzdXBwb3J0IGZsYXR0ZW5lZCBhcmd1bWVudHNcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG4gICAgdHlwZXMgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdHlwZXNbaV0gPSBhcmd1bWVudHNbaSArIDFdXG4gICAgfVxuICB9XG5cbiAgLy8gcmVxdWVzdCBjb250ZW50IHR5cGVcbiAgdmFyIHZhbHVlID0gcmVxLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddXG5cbiAgcmV0dXJuIHR5cGVpcyh2YWx1ZSwgdHlwZXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgbWltZSB0eXBlLlxuICogSWYgaXQncyBhIHNob3J0aGFuZCwgZXhwYW5kIGl0IHRvIGEgdmFsaWQgbWltZSB0eXBlLlxuICpcbiAqIEluIGdlbmVyYWwsIHlvdSBwcm9iYWJseSB3YW50OlxuICpcbiAqICAgdmFyIHR5cGUgPSBpcyhyZXEsIFsndXJsZW5jb2RlZCcsICdqc29uJywgJ211bHRpcGFydCddKTtcbiAqXG4gKiBUaGVuIHVzZSB0aGUgYXBwcm9wcmlhdGUgYm9keSBwYXJzZXJzLlxuICogVGhlc2UgdGhyZWUgYXJlIHRoZSBtb3N0IGNvbW1vbiByZXF1ZXN0IGJvZHkgdHlwZXNcbiAqIGFuZCBhcmUgdGh1cyBlbnN1cmVkIHRvIHdvcmsuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplICh0eXBlKSB7XG4gIGlmICh0eXBlb2YgdHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBpbnZhbGlkIHR5cGVcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3VybGVuY29kZWQnOlxuICAgICAgcmV0dXJuICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG4gICAgY2FzZSAnbXVsdGlwYXJ0JzpcbiAgICAgIHJldHVybiAnbXVsdGlwYXJ0LyonXG4gIH1cblxuICBpZiAodHlwZVswXSA9PT0gJysnKSB7XG4gICAgLy8gXCIranNvblwiIC0+IFwiKi8qK2pzb25cIiBleHBhbmRvXG4gICAgcmV0dXJuICcqLyonICsgdHlwZVxuICB9XG5cbiAgcmV0dXJuIHR5cGUuaW5kZXhPZignLycpID09PSAtMVxuICAgID8gbWltZS5sb29rdXAodHlwZSlcbiAgICA6IHR5cGVcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBgZXhwZWN0ZWRgIG1pbWUgdHlwZVxuICogbWF0Y2hlcyBgYWN0dWFsYCBtaW1lIHR5cGUgd2l0aFxuICogd2lsZGNhcmQgYW5kICtzdWZmaXggc3VwcG9ydC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXhwZWN0ZWRcbiAqIEBwYXJhbSB7U3RyaW5nfSBhY3R1YWxcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG1pbWVNYXRjaCAoZXhwZWN0ZWQsIGFjdHVhbCkge1xuICAvLyBpbnZhbGlkIHR5cGVcbiAgaWYgKGV4cGVjdGVkID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gc3BsaXQgdHlwZXNcbiAgdmFyIGFjdHVhbFBhcnRzID0gYWN0dWFsLnNwbGl0KCcvJylcbiAgdmFyIGV4cGVjdGVkUGFydHMgPSBleHBlY3RlZC5zcGxpdCgnLycpXG5cbiAgLy8gaW52YWxpZCBmb3JtYXRcbiAgaWYgKGFjdHVhbFBhcnRzLmxlbmd0aCAhPT0gMiB8fCBleHBlY3RlZFBhcnRzLmxlbmd0aCAhPT0gMikge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gdmFsaWRhdGUgdHlwZVxuICBpZiAoZXhwZWN0ZWRQYXJ0c1swXSAhPT0gJyonICYmIGV4cGVjdGVkUGFydHNbMF0gIT09IGFjdHVhbFBhcnRzWzBdKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyB2YWxpZGF0ZSBzdWZmaXggd2lsZGNhcmRcbiAgaWYgKGV4cGVjdGVkUGFydHNbMV0uc3Vic3RyKDAsIDIpID09PSAnKisnKSB7XG4gICAgcmV0dXJuIGV4cGVjdGVkUGFydHNbMV0ubGVuZ3RoIDw9IGFjdHVhbFBhcnRzWzFdLmxlbmd0aCArIDEgJiZcbiAgICAgIGV4cGVjdGVkUGFydHNbMV0uc3Vic3RyKDEpID09PSBhY3R1YWxQYXJ0c1sxXS5zdWJzdHIoMSAtIGV4cGVjdGVkUGFydHNbMV0ubGVuZ3RoKVxuICB9XG5cbiAgLy8gdmFsaWRhdGUgc3VidHlwZVxuICBpZiAoZXhwZWN0ZWRQYXJ0c1sxXSAhPT0gJyonICYmIGV4cGVjdGVkUGFydHNbMV0gIT09IGFjdHVhbFBhcnRzWzFdKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHR5cGUgYW5kIHJlbW92ZSBwYXJhbWV0ZXJzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVUeXBlICh2YWx1ZSkge1xuICAvLyBwYXJzZSB0aGUgdHlwZVxuICB2YXIgdHlwZSA9IHR5cGVyLnBhcnNlKHZhbHVlKVxuXG4gIC8vIHJlbW92ZSB0aGUgcGFyYW1ldGVyc1xuICB0eXBlLnBhcmFtZXRlcnMgPSB1bmRlZmluZWRcblxuICAvLyByZWZvcm1hdCBpdFxuICByZXR1cm4gdHlwZXIuZm9ybWF0KHR5cGUpXG59XG5cbi8qKlxuICogVHJ5IHRvIG5vcm1hbGl6ZSBhIHR5cGUgYW5kIHJlbW92ZSBwYXJhbWV0ZXJzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiB0cnlOb3JtYWxpemVUeXBlICh2YWx1ZSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZVR5cGUodmFsdWUpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cbiIsIi8qIVxuICogZGVwZFxuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNyBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBjYWxsU2l0ZVRvU3RyaW5nID0gcmVxdWlyZSgnLi9saWIvY29tcGF0JykuY2FsbFNpdGVUb1N0cmluZ1xudmFyIGV2ZW50TGlzdGVuZXJDb3VudCA9IHJlcXVpcmUoJy4vbGliL2NvbXBhdCcpLmV2ZW50TGlzdGVuZXJDb3VudFxudmFyIHJlbGF0aXZlID0gcmVxdWlyZSgncGF0aCcpLnJlbGF0aXZlXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBkZXBkXG5cbi8qKlxuICogR2V0IHRoZSBwYXRoIHRvIGJhc2UgZmlsZXMgb24uXG4gKi9cblxudmFyIGJhc2VQYXRoID0gcHJvY2Vzcy5jd2QoKVxuXG4vKipcbiAqIERldGVybWluZSBpZiBuYW1lc3BhY2UgaXMgY29udGFpbmVkIGluIHRoZSBzdHJpbmcuXG4gKi9cblxuZnVuY3Rpb24gY29udGFpbnNOYW1lc3BhY2UgKHN0ciwgbmFtZXNwYWNlKSB7XG4gIHZhciB2YWxzID0gc3RyLnNwbGl0KC9bICxdKy8pXG4gIHZhciBucyA9IFN0cmluZyhuYW1lc3BhY2UpLnRvTG93ZXJDYXNlKClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdmFsID0gdmFsc1tpXVxuXG4gICAgLy8gbmFtZXNwYWNlIGNvbnRhaW5lZFxuICAgIGlmICh2YWwgJiYgKHZhbCA9PT0gJyonIHx8IHZhbC50b0xvd2VyQ2FzZSgpID09PSBucykpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qKlxuICogQ29udmVydCBhIGRhdGEgZGVzY3JpcHRvciB0byBhY2Nlc3NvciBkZXNjcmlwdG9yLlxuICovXG5cbmZ1bmN0aW9uIGNvbnZlcnREYXRhRGVzY3JpcHRvclRvQWNjZXNzb3IgKG9iaiwgcHJvcCwgbWVzc2FnZSkge1xuICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBwcm9wKVxuICB2YXIgdmFsdWUgPSBkZXNjcmlwdG9yLnZhbHVlXG5cbiAgZGVzY3JpcHRvci5nZXQgPSBmdW5jdGlvbiBnZXR0ZXIgKCkgeyByZXR1cm4gdmFsdWUgfVxuXG4gIGlmIChkZXNjcmlwdG9yLndyaXRhYmxlKSB7XG4gICAgZGVzY3JpcHRvci5zZXQgPSBmdW5jdGlvbiBzZXR0ZXIgKHZhbCkgeyByZXR1cm4gKHZhbHVlID0gdmFsKSB9XG4gIH1cblxuICBkZWxldGUgZGVzY3JpcHRvci52YWx1ZVxuICBkZWxldGUgZGVzY3JpcHRvci53cml0YWJsZVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIGRlc2NyaXB0b3IpXG5cbiAgcmV0dXJuIGRlc2NyaXB0b3Jcbn1cblxuLyoqXG4gKiBDcmVhdGUgYXJndW1lbnRzIHN0cmluZyB0byBrZWVwIGFyaXR5LlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUFyZ3VtZW50c1N0cmluZyAoYXJpdHkpIHtcbiAgdmFyIHN0ciA9ICcnXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcml0eTsgaSsrKSB7XG4gICAgc3RyICs9ICcsIGFyZycgKyBpXG4gIH1cblxuICByZXR1cm4gc3RyLnN1YnN0cigyKVxufVxuXG4vKipcbiAqIENyZWF0ZSBzdGFjayBzdHJpbmcgZnJvbSBzdGFjay5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdGFja1N0cmluZyAoc3RhY2spIHtcbiAgdmFyIHN0ciA9IHRoaXMubmFtZSArICc6ICcgKyB0aGlzLm5hbWVzcGFjZVxuXG4gIGlmICh0aGlzLm1lc3NhZ2UpIHtcbiAgICBzdHIgKz0gJyBkZXByZWNhdGVkICcgKyB0aGlzLm1lc3NhZ2VcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcbiAgICBzdHIgKz0gJ1xcbiAgICBhdCAnICsgY2FsbFNpdGVUb1N0cmluZyhzdGFja1tpXSlcbiAgfVxuXG4gIHJldHVybiBzdHJcbn1cblxuLyoqXG4gKiBDcmVhdGUgZGVwcmVjYXRlIGZvciBuYW1lc3BhY2UgaW4gY2FsbGVyLlxuICovXG5cbmZ1bmN0aW9uIGRlcGQgKG5hbWVzcGFjZSkge1xuICBpZiAoIW5hbWVzcGFjZSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG5hbWVzcGFjZSBpcyByZXF1aXJlZCcpXG4gIH1cblxuICB2YXIgc3RhY2sgPSBnZXRTdGFjaygpXG4gIHZhciBzaXRlID0gY2FsbFNpdGVMb2NhdGlvbihzdGFja1sxXSlcbiAgdmFyIGZpbGUgPSBzaXRlWzBdXG5cbiAgZnVuY3Rpb24gZGVwcmVjYXRlIChtZXNzYWdlKSB7XG4gICAgLy8gY2FsbCB0byBzZWxmIGFzIGxvZ1xuICAgIGxvZy5jYWxsKGRlcHJlY2F0ZSwgbWVzc2FnZSlcbiAgfVxuXG4gIGRlcHJlY2F0ZS5fZmlsZSA9IGZpbGVcbiAgZGVwcmVjYXRlLl9pZ25vcmVkID0gaXNpZ25vcmVkKG5hbWVzcGFjZSlcbiAgZGVwcmVjYXRlLl9uYW1lc3BhY2UgPSBuYW1lc3BhY2VcbiAgZGVwcmVjYXRlLl90cmFjZWQgPSBpc3RyYWNlZChuYW1lc3BhY2UpXG4gIGRlcHJlY2F0ZS5fd2FybmVkID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXG4gIGRlcHJlY2F0ZS5mdW5jdGlvbiA9IHdyYXBmdW5jdGlvblxuICBkZXByZWNhdGUucHJvcGVydHkgPSB3cmFwcHJvcGVydHlcblxuICByZXR1cm4gZGVwcmVjYXRlXG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIG5hbWVzcGFjZSBpcyBpZ25vcmVkLlxuICovXG5cbmZ1bmN0aW9uIGlzaWdub3JlZCAobmFtZXNwYWNlKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiB0ZXN0ZWQgaW4gYSBjaGlsZCBwcm9jZXNzcyAqL1xuICBpZiAocHJvY2Vzcy5ub0RlcHJlY2F0aW9uKSB7XG4gICAgLy8gLS1uby1kZXByZWNhdGlvbiBzdXBwb3J0XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIHZhciBzdHIgPSBwcm9jZXNzLmVudi5OT19ERVBSRUNBVElPTiB8fCAnJ1xuXG4gIC8vIG5hbWVzcGFjZSBpZ25vcmVkXG4gIHJldHVybiBjb250YWluc05hbWVzcGFjZShzdHIsIG5hbWVzcGFjZSlcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgbmFtZXNwYWNlIGlzIHRyYWNlZC5cbiAqL1xuXG5mdW5jdGlvbiBpc3RyYWNlZCAobmFtZXNwYWNlKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiB0ZXN0ZWQgaW4gYSBjaGlsZCBwcm9jZXNzcyAqL1xuICBpZiAocHJvY2Vzcy50cmFjZURlcHJlY2F0aW9uKSB7XG4gICAgLy8gLS10cmFjZS1kZXByZWNhdGlvbiBzdXBwb3J0XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIHZhciBzdHIgPSBwcm9jZXNzLmVudi5UUkFDRV9ERVBSRUNBVElPTiB8fCAnJ1xuXG4gIC8vIG5hbWVzcGFjZSB0cmFjZWRcbiAgcmV0dXJuIGNvbnRhaW5zTmFtZXNwYWNlKHN0ciwgbmFtZXNwYWNlKVxufVxuXG4vKipcbiAqIERpc3BsYXkgZGVwcmVjYXRpb24gbWVzc2FnZS5cbiAqL1xuXG5mdW5jdGlvbiBsb2cgKG1lc3NhZ2UsIHNpdGUpIHtcbiAgdmFyIGhhc2xpc3RlbmVycyA9IGV2ZW50TGlzdGVuZXJDb3VudChwcm9jZXNzLCAnZGVwcmVjYXRpb24nKSAhPT0gMFxuXG4gIC8vIGFib3J0IGVhcmx5IGlmIG5vIGRlc3RpbmF0aW9uXG4gIGlmICghaGFzbGlzdGVuZXJzICYmIHRoaXMuX2lnbm9yZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjYWxsZXJcbiAgdmFyIGNhbGxGaWxlXG4gIHZhciBjYWxsU2l0ZVxuICB2YXIgZGVwU2l0ZVxuICB2YXIgaSA9IDBcbiAgdmFyIHNlZW4gPSBmYWxzZVxuICB2YXIgc3RhY2sgPSBnZXRTdGFjaygpXG4gIHZhciBmaWxlID0gdGhpcy5fZmlsZVxuXG4gIGlmIChzaXRlKSB7XG4gICAgLy8gcHJvdmlkZWQgc2l0ZVxuICAgIGRlcFNpdGUgPSBzaXRlXG4gICAgY2FsbFNpdGUgPSBjYWxsU2l0ZUxvY2F0aW9uKHN0YWNrWzFdKVxuICAgIGNhbGxTaXRlLm5hbWUgPSBkZXBTaXRlLm5hbWVcbiAgICBmaWxlID0gY2FsbFNpdGVbMF1cbiAgfSBlbHNlIHtcbiAgICAvLyBnZXQgY2FsbCBzaXRlXG4gICAgaSA9IDJcbiAgICBkZXBTaXRlID0gY2FsbFNpdGVMb2NhdGlvbihzdGFja1tpXSlcbiAgICBjYWxsU2l0ZSA9IGRlcFNpdGVcbiAgfVxuXG4gIC8vIGdldCBjYWxsZXIgb2YgZGVwcmVjYXRlZCB0aGluZyBpbiByZWxhdGlvbiB0byBmaWxlXG4gIGZvciAoOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcbiAgICBjYWxsZXIgPSBjYWxsU2l0ZUxvY2F0aW9uKHN0YWNrW2ldKVxuICAgIGNhbGxGaWxlID0gY2FsbGVyWzBdXG5cbiAgICBpZiAoY2FsbEZpbGUgPT09IGZpbGUpIHtcbiAgICAgIHNlZW4gPSB0cnVlXG4gICAgfSBlbHNlIGlmIChjYWxsRmlsZSA9PT0gdGhpcy5fZmlsZSkge1xuICAgICAgZmlsZSA9IHRoaXMuX2ZpbGVcbiAgICB9IGVsc2UgaWYgKHNlZW4pIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgdmFyIGtleSA9IGNhbGxlclxuICAgID8gZGVwU2l0ZS5qb2luKCc6JykgKyAnX18nICsgY2FsbGVyLmpvaW4oJzonKVxuICAgIDogdW5kZWZpbmVkXG5cbiAgaWYgKGtleSAhPT0gdW5kZWZpbmVkICYmIGtleSBpbiB0aGlzLl93YXJuZWQpIHtcbiAgICAvLyBhbHJlYWR5IHdhcm5lZFxuICAgIHJldHVyblxuICB9XG5cbiAgdGhpcy5fd2FybmVkW2tleV0gPSB0cnVlXG5cbiAgLy8gZ2VuZXJhdGUgYXV0b21hdGljIG1lc3NhZ2UgZnJvbSBjYWxsIHNpdGVcbiAgdmFyIG1zZyA9IG1lc3NhZ2VcbiAgaWYgKCFtc2cpIHtcbiAgICBtc2cgPSBjYWxsU2l0ZSA9PT0gZGVwU2l0ZSB8fCAhY2FsbFNpdGUubmFtZVxuICAgICAgPyBkZWZhdWx0TWVzc2FnZShkZXBTaXRlKVxuICAgICAgOiBkZWZhdWx0TWVzc2FnZShjYWxsU2l0ZSlcbiAgfVxuXG4gIC8vIGVtaXQgZGVwcmVjYXRpb24gaWYgbGlzdGVuZXJzIGV4aXN0XG4gIGlmIChoYXNsaXN0ZW5lcnMpIHtcbiAgICB2YXIgZXJyID0gRGVwcmVjYXRpb25FcnJvcih0aGlzLl9uYW1lc3BhY2UsIG1zZywgc3RhY2suc2xpY2UoaSkpXG4gICAgcHJvY2Vzcy5lbWl0KCdkZXByZWNhdGlvbicsIGVycilcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGZvcm1hdCBhbmQgd3JpdGUgbWVzc2FnZVxuICB2YXIgZm9ybWF0ID0gcHJvY2Vzcy5zdGRlcnIuaXNUVFlcbiAgICA/IGZvcm1hdENvbG9yXG4gICAgOiBmb3JtYXRQbGFpblxuICB2YXIgb3V0cHV0ID0gZm9ybWF0LmNhbGwodGhpcywgbXNnLCBjYWxsZXIsIHN0YWNrLnNsaWNlKGkpKVxuICBwcm9jZXNzLnN0ZGVyci53cml0ZShvdXRwdXQgKyAnXFxuJywgJ3V0ZjgnKVxufVxuXG4vKipcbiAqIEdldCBjYWxsIHNpdGUgbG9jYXRpb24gYXMgYXJyYXkuXG4gKi9cblxuZnVuY3Rpb24gY2FsbFNpdGVMb2NhdGlvbiAoY2FsbFNpdGUpIHtcbiAgdmFyIGZpbGUgPSBjYWxsU2l0ZS5nZXRGaWxlTmFtZSgpIHx8ICc8YW5vbnltb3VzPidcbiAgdmFyIGxpbmUgPSBjYWxsU2l0ZS5nZXRMaW5lTnVtYmVyKClcbiAgdmFyIGNvbG0gPSBjYWxsU2l0ZS5nZXRDb2x1bW5OdW1iZXIoKVxuXG4gIGlmIChjYWxsU2l0ZS5pc0V2YWwoKSkge1xuICAgIGZpbGUgPSBjYWxsU2l0ZS5nZXRFdmFsT3JpZ2luKCkgKyAnLCAnICsgZmlsZVxuICB9XG5cbiAgdmFyIHNpdGUgPSBbZmlsZSwgbGluZSwgY29sbV1cblxuICBzaXRlLmNhbGxTaXRlID0gY2FsbFNpdGVcbiAgc2l0ZS5uYW1lID0gY2FsbFNpdGUuZ2V0RnVuY3Rpb25OYW1lKClcblxuICByZXR1cm4gc2l0ZVxufVxuXG4vKipcbiAqIEdlbmVyYXRlIGEgZGVmYXVsdCBtZXNzYWdlIGZyb20gdGhlIHNpdGUuXG4gKi9cblxuZnVuY3Rpb24gZGVmYXVsdE1lc3NhZ2UgKHNpdGUpIHtcbiAgdmFyIGNhbGxTaXRlID0gc2l0ZS5jYWxsU2l0ZVxuICB2YXIgZnVuY05hbWUgPSBzaXRlLm5hbWVcblxuICAvLyBtYWtlIHVzZWZ1bCBhbm9ueW1vdXMgbmFtZVxuICBpZiAoIWZ1bmNOYW1lKSB7XG4gICAgZnVuY05hbWUgPSAnPGFub255bW91c0AnICsgZm9ybWF0TG9jYXRpb24oc2l0ZSkgKyAnPidcbiAgfVxuXG4gIHZhciBjb250ZXh0ID0gY2FsbFNpdGUuZ2V0VGhpcygpXG4gIHZhciB0eXBlTmFtZSA9IGNvbnRleHQgJiYgY2FsbFNpdGUuZ2V0VHlwZU5hbWUoKVxuXG4gIC8vIGlnbm9yZSB1c2VsZXNzIHR5cGUgbmFtZVxuICBpZiAodHlwZU5hbWUgPT09ICdPYmplY3QnKSB7XG4gICAgdHlwZU5hbWUgPSB1bmRlZmluZWRcbiAgfVxuXG4gIC8vIG1ha2UgdXNlZnVsIHR5cGUgbmFtZVxuICBpZiAodHlwZU5hbWUgPT09ICdGdW5jdGlvbicpIHtcbiAgICB0eXBlTmFtZSA9IGNvbnRleHQubmFtZSB8fCB0eXBlTmFtZVxuICB9XG5cbiAgcmV0dXJuIHR5cGVOYW1lICYmIGNhbGxTaXRlLmdldE1ldGhvZE5hbWUoKVxuICAgID8gdHlwZU5hbWUgKyAnLicgKyBmdW5jTmFtZVxuICAgIDogZnVuY05hbWVcbn1cblxuLyoqXG4gKiBGb3JtYXQgZGVwcmVjYXRpb24gbWVzc2FnZSB3aXRob3V0IGNvbG9yLlxuICovXG5cbmZ1bmN0aW9uIGZvcm1hdFBsYWluIChtc2csIGNhbGxlciwgc3RhY2spIHtcbiAgdmFyIHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9VVENTdHJpbmcoKVxuXG4gIHZhciBmb3JtYXR0ZWQgPSB0aW1lc3RhbXAgK1xuICAgICcgJyArIHRoaXMuX25hbWVzcGFjZSArXG4gICAgJyBkZXByZWNhdGVkICcgKyBtc2dcblxuICAvLyBhZGQgc3RhY2sgdHJhY2VcbiAgaWYgKHRoaXMuX3RyYWNlZCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcbiAgICAgIGZvcm1hdHRlZCArPSAnXFxuICAgIGF0ICcgKyBjYWxsU2l0ZVRvU3RyaW5nKHN0YWNrW2ldKVxuICAgIH1cblxuICAgIHJldHVybiBmb3JtYXR0ZWRcbiAgfVxuXG4gIGlmIChjYWxsZXIpIHtcbiAgICBmb3JtYXR0ZWQgKz0gJyBhdCAnICsgZm9ybWF0TG9jYXRpb24oY2FsbGVyKVxuICB9XG5cbiAgcmV0dXJuIGZvcm1hdHRlZFxufVxuXG4vKipcbiAqIEZvcm1hdCBkZXByZWNhdGlvbiBtZXNzYWdlIHdpdGggY29sb3IuXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0Q29sb3IgKG1zZywgY2FsbGVyLCBzdGFjaykge1xuICB2YXIgZm9ybWF0dGVkID0gJ1xceDFiWzM2OzFtJyArIHRoaXMuX25hbWVzcGFjZSArICdcXHgxYlsyMjszOW0nICsgLy8gYm9sZCBjeWFuXG4gICAgJyBcXHgxYlszMzsxbWRlcHJlY2F0ZWRcXHgxYlsyMjszOW0nICsgLy8gYm9sZCB5ZWxsb3dcbiAgICAnIFxceDFiWzBtJyArIG1zZyArICdcXHgxYlszOW0nIC8vIHJlc2V0XG5cbiAgLy8gYWRkIHN0YWNrIHRyYWNlXG4gIGlmICh0aGlzLl90cmFjZWQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3JtYXR0ZWQgKz0gJ1xcbiAgICBcXHgxYlszNm1hdCAnICsgY2FsbFNpdGVUb1N0cmluZyhzdGFja1tpXSkgKyAnXFx4MWJbMzltJyAvLyBjeWFuXG4gICAgfVxuXG4gICAgcmV0dXJuIGZvcm1hdHRlZFxuICB9XG5cbiAgaWYgKGNhbGxlcikge1xuICAgIGZvcm1hdHRlZCArPSAnIFxceDFiWzM2bScgKyBmb3JtYXRMb2NhdGlvbihjYWxsZXIpICsgJ1xceDFiWzM5bScgLy8gY3lhblxuICB9XG5cbiAgcmV0dXJuIGZvcm1hdHRlZFxufVxuXG4vKipcbiAqIEZvcm1hdCBjYWxsIHNpdGUgbG9jYXRpb24uXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0TG9jYXRpb24gKGNhbGxTaXRlKSB7XG4gIHJldHVybiByZWxhdGl2ZShiYXNlUGF0aCwgY2FsbFNpdGVbMF0pICtcbiAgICAnOicgKyBjYWxsU2l0ZVsxXSArXG4gICAgJzonICsgY2FsbFNpdGVbMl1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIHN0YWNrIGFzIGFycmF5IG9mIGNhbGwgc2l0ZXMuXG4gKi9cblxuZnVuY3Rpb24gZ2V0U3RhY2sgKCkge1xuICB2YXIgbGltaXQgPSBFcnJvci5zdGFja1RyYWNlTGltaXRcbiAgdmFyIG9iaiA9IHt9XG4gIHZhciBwcmVwID0gRXJyb3IucHJlcGFyZVN0YWNrVHJhY2VcblxuICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHByZXBhcmVPYmplY3RTdGFja1RyYWNlXG4gIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IE1hdGgubWF4KDEwLCBsaW1pdClcblxuICAvLyBjYXB0dXJlIHRoZSBzdGFja1xuICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShvYmopXG5cbiAgLy8gc2xpY2UgdGhpcyBmdW5jdGlvbiBvZmYgdGhlIHRvcFxuICB2YXIgc3RhY2sgPSBvYmouc3RhY2suc2xpY2UoMSlcblxuICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHByZXBcbiAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gbGltaXRcblxuICByZXR1cm4gc3RhY2tcbn1cblxuLyoqXG4gKiBDYXB0dXJlIGNhbGwgc2l0ZSBzdGFjayBmcm9tIHY4LlxuICovXG5cbmZ1bmN0aW9uIHByZXBhcmVPYmplY3RTdGFja1RyYWNlIChvYmosIHN0YWNrKSB7XG4gIHJldHVybiBzdGFja1xufVxuXG4vKipcbiAqIFJldHVybiBhIHdyYXBwZWQgZnVuY3Rpb24gaW4gYSBkZXByZWNhdGlvbiBtZXNzYWdlLlxuICovXG5cbmZ1bmN0aW9uIHdyYXBmdW5jdGlvbiAoZm4sIG1lc3NhZ2UpIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IGZuIG11c3QgYmUgYSBmdW5jdGlvbicpXG4gIH1cblxuICB2YXIgYXJncyA9IGNyZWF0ZUFyZ3VtZW50c1N0cmluZyhmbi5sZW5ndGgpXG4gIHZhciBkZXByZWNhdGUgPSB0aGlzIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIHN0YWNrID0gZ2V0U3RhY2soKVxuICB2YXIgc2l0ZSA9IGNhbGxTaXRlTG9jYXRpb24oc3RhY2tbMV0pXG5cbiAgc2l0ZS5uYW1lID0gZm4ubmFtZVxuXG4gICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXZhbFxuICB2YXIgZGVwcmVjYXRlZGZuID0gZXZhbCgnKGZ1bmN0aW9uICgnICsgYXJncyArICcpIHtcXG4nICtcbiAgICAnXCJ1c2Ugc3RyaWN0XCJcXG4nICtcbiAgICAnbG9nLmNhbGwoZGVwcmVjYXRlLCBtZXNzYWdlLCBzaXRlKVxcbicgK1xuICAgICdyZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxcbicgK1xuICAgICd9KScpXG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWRmblxufVxuXG4vKipcbiAqIFdyYXAgcHJvcGVydHkgaW4gYSBkZXByZWNhdGlvbiBtZXNzYWdlLlxuICovXG5cbmZ1bmN0aW9uIHdyYXBwcm9wZXJ0eSAob2JqLCBwcm9wLCBtZXNzYWdlKSB7XG4gIGlmICghb2JqIHx8ICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqICE9PSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG9iaiBtdXN0IGJlIG9iamVjdCcpXG4gIH1cblxuICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBwcm9wKVxuXG4gIGlmICghZGVzY3JpcHRvcikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ211c3QgY2FsbCBwcm9wZXJ0eSBvbiBvd25lciBvYmplY3QnKVxuICB9XG5cbiAgaWYgKCFkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Byb3BlcnR5IG11c3QgYmUgY29uZmlndXJhYmxlJylcbiAgfVxuXG4gIHZhciBkZXByZWNhdGUgPSB0aGlzXG4gIHZhciBzdGFjayA9IGdldFN0YWNrKClcbiAgdmFyIHNpdGUgPSBjYWxsU2l0ZUxvY2F0aW9uKHN0YWNrWzFdKVxuXG4gIC8vIHNldCBzaXRlIG5hbWVcbiAgc2l0ZS5uYW1lID0gcHJvcFxuXG4gIC8vIGNvbnZlcnQgZGF0YSBkZXNjcmlwdG9yXG4gIGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIHtcbiAgICBkZXNjcmlwdG9yID0gY29udmVydERhdGFEZXNjcmlwdG9yVG9BY2Nlc3NvcihvYmosIHByb3AsIG1lc3NhZ2UpXG4gIH1cblxuICB2YXIgZ2V0ID0gZGVzY3JpcHRvci5nZXRcbiAgdmFyIHNldCA9IGRlc2NyaXB0b3Iuc2V0XG5cbiAgLy8gd3JhcCBnZXR0ZXJcbiAgaWYgKHR5cGVvZiBnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBkZXNjcmlwdG9yLmdldCA9IGZ1bmN0aW9uIGdldHRlciAoKSB7XG4gICAgICBsb2cuY2FsbChkZXByZWNhdGUsIG1lc3NhZ2UsIHNpdGUpXG4gICAgICByZXR1cm4gZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICB9XG4gIH1cblxuICAvLyB3cmFwIHNldHRlclxuICBpZiAodHlwZW9mIHNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGRlc2NyaXB0b3Iuc2V0ID0gZnVuY3Rpb24gc2V0dGVyICgpIHtcbiAgICAgIGxvZy5jYWxsKGRlcHJlY2F0ZSwgbWVzc2FnZSwgc2l0ZSlcbiAgICAgIHJldHVybiBzZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIGRlc2NyaXB0b3IpXG59XG5cbi8qKlxuICogQ3JlYXRlIERlcHJlY2F0aW9uRXJyb3IgZm9yIGRlcHJlY2F0aW9uXG4gKi9cblxuZnVuY3Rpb24gRGVwcmVjYXRpb25FcnJvciAobmFtZXNwYWNlLCBtZXNzYWdlLCBzdGFjaykge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKVxuICB2YXIgc3RhY2tTdHJpbmdcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXJyb3IsICdjb25zdHJ1Y3RvcicsIHtcbiAgICB2YWx1ZTogRGVwcmVjYXRpb25FcnJvclxuICB9KVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnJvciwgJ21lc3NhZ2UnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBtZXNzYWdlLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVycm9yLCAnbmFtZScsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6ICdEZXByZWNhdGlvbkVycm9yJyxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnJvciwgJ25hbWVzcGFjZScsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IG5hbWVzcGFjZSxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnJvciwgJ3N0YWNrJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzdGFja1N0cmluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBzdGFja1N0cmluZ1xuICAgICAgfVxuXG4gICAgICAvLyBwcmVwYXJlIHN0YWNrIHRyYWNlXG4gICAgICByZXR1cm4gKHN0YWNrU3RyaW5nID0gY3JlYXRlU3RhY2tTdHJpbmcuY2FsbCh0aGlzLCBzdGFjaykpXG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldHRlciAodmFsKSB7XG4gICAgICBzdGFja1N0cmluZyA9IHZhbFxuICAgIH1cbiAgfSlcblxuICByZXR1cm4gZXJyb3Jcbn1cbiIsIi8qIVxuICogZGVwZFxuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbmxhenlQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ2NhbGxTaXRlVG9TdHJpbmcnLCBmdW5jdGlvbiBjYWxsU2l0ZVRvU3RyaW5nICgpIHtcbiAgdmFyIGxpbWl0ID0gRXJyb3Iuc3RhY2tUcmFjZUxpbWl0XG4gIHZhciBvYmogPSB7fVxuICB2YXIgcHJlcCA9IEVycm9yLnByZXBhcmVTdGFja1RyYWNlXG5cbiAgZnVuY3Rpb24gcHJlcGFyZU9iamVjdFN0YWNrVHJhY2UgKG9iaiwgc3RhY2spIHtcbiAgICByZXR1cm4gc3RhY2tcbiAgfVxuXG4gIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gcHJlcGFyZU9iamVjdFN0YWNrVHJhY2VcbiAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gMlxuXG4gIC8vIGNhcHR1cmUgdGhlIHN0YWNrXG4gIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKG9iailcblxuICAvLyBzbGljZSB0aGUgc3RhY2tcbiAgdmFyIHN0YWNrID0gb2JqLnN0YWNrLnNsaWNlKClcblxuICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHByZXBcbiAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gbGltaXRcblxuICByZXR1cm4gc3RhY2tbMF0udG9TdHJpbmcgPyB0b1N0cmluZyA6IHJlcXVpcmUoJy4vY2FsbHNpdGUtdG9zdHJpbmcnKVxufSlcblxubGF6eVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnZXZlbnRMaXN0ZW5lckNvdW50JywgZnVuY3Rpb24gZXZlbnRMaXN0ZW5lckNvdW50ICgpIHtcbiAgcmV0dXJuIEV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50IHx8IHJlcXVpcmUoJy4vZXZlbnQtbGlzdGVuZXItY291bnQnKVxufSlcblxuLyoqXG4gKiBEZWZpbmUgYSBsYXp5IHByb3BlcnR5LlxuICovXG5cbmZ1bmN0aW9uIGxhenlQcm9wZXJ0eSAob2JqLCBwcm9wLCBnZXR0ZXIpIHtcbiAgZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICB2YXIgdmFsID0gZ2V0dGVyKClcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogdmFsXG4gICAgfSlcblxuICAgIHJldHVybiB2YWxcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGdldFxuICB9KVxufVxuXG4vKipcbiAqIENhbGwgdG9TdHJpbmcoKSBvbiB0aGUgb2JqXG4gKi9cblxuZnVuY3Rpb24gdG9TdHJpbmcgKG9iaikge1xuICByZXR1cm4gb2JqLnRvU3RyaW5nKClcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5ldFwiKTsiLCIvKiFcbiAqIGFjY2VwdHNcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogQ29weXJpZ2h0KGMpIDIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBOZWdvdGlhdG9yID0gcmVxdWlyZSgnbmVnb3RpYXRvcicpXG52YXIgbWltZSA9IHJlcXVpcmUoJ21pbWUtdHlwZXMnKVxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQWNjZXB0c1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBBY2NlcHRzIG9iamVjdCBmb3IgdGhlIGdpdmVuIHJlcS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcmVxXG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gQWNjZXB0cyAocmVxKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBBY2NlcHRzKSkge1xuICAgIHJldHVybiBuZXcgQWNjZXB0cyhyZXEpXG4gIH1cblxuICB0aGlzLmhlYWRlcnMgPSByZXEuaGVhZGVyc1xuICB0aGlzLm5lZ290aWF0b3IgPSBuZXcgTmVnb3RpYXRvcihyZXEpXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGB0eXBlKHMpYCBpcyBhY2NlcHRhYmxlLCByZXR1cm5pbmdcbiAqIHRoZSBiZXN0IG1hdGNoIHdoZW4gdHJ1ZSwgb3RoZXJ3aXNlIGB1bmRlZmluZWRgLCBpbiB3aGljaFxuICogY2FzZSB5b3Ugc2hvdWxkIHJlc3BvbmQgd2l0aCA0MDYgXCJOb3QgQWNjZXB0YWJsZVwiLlxuICpcbiAqIFRoZSBgdHlwZWAgdmFsdWUgbWF5IGJlIGEgc2luZ2xlIG1pbWUgdHlwZSBzdHJpbmdcbiAqIHN1Y2ggYXMgXCJhcHBsaWNhdGlvbi9qc29uXCIsIHRoZSBleHRlbnNpb24gbmFtZVxuICogc3VjaCBhcyBcImpzb25cIiBvciBhbiBhcnJheSBgW1wianNvblwiLCBcImh0bWxcIiwgXCJ0ZXh0L3BsYWluXCJdYC4gV2hlbiBhIGxpc3RcbiAqIG9yIGFycmF5IGlzIGdpdmVuIHRoZSBfYmVzdF8gbWF0Y2gsIGlmIGFueSBpcyByZXR1cm5lZC5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICAgLy8gQWNjZXB0OiB0ZXh0L2h0bWxcbiAqICAgICB0aGlzLnR5cGVzKCdodG1sJyk7XG4gKiAgICAgLy8gPT4gXCJodG1sXCJcbiAqXG4gKiAgICAgLy8gQWNjZXB0OiB0ZXh0LyosIGFwcGxpY2F0aW9uL2pzb25cbiAqICAgICB0aGlzLnR5cGVzKCdodG1sJyk7XG4gKiAgICAgLy8gPT4gXCJodG1sXCJcbiAqICAgICB0aGlzLnR5cGVzKCd0ZXh0L2h0bWwnKTtcbiAqICAgICAvLyA9PiBcInRleHQvaHRtbFwiXG4gKiAgICAgdGhpcy50eXBlcygnanNvbicsICd0ZXh0Jyk7XG4gKiAgICAgLy8gPT4gXCJqc29uXCJcbiAqICAgICB0aGlzLnR5cGVzKCdhcHBsaWNhdGlvbi9qc29uJyk7XG4gKiAgICAgLy8gPT4gXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAqXG4gKiAgICAgLy8gQWNjZXB0OiB0ZXh0LyosIGFwcGxpY2F0aW9uL2pzb25cbiAqICAgICB0aGlzLnR5cGVzKCdpbWFnZS9wbmcnKTtcbiAqICAgICB0aGlzLnR5cGVzKCdwbmcnKTtcbiAqICAgICAvLyA9PiB1bmRlZmluZWRcbiAqXG4gKiAgICAgLy8gQWNjZXB0OiB0ZXh0Lyo7cT0uNSwgYXBwbGljYXRpb24vanNvblxuICogICAgIHRoaXMudHlwZXMoWydodG1sJywgJ2pzb24nXSk7XG4gKiAgICAgdGhpcy50eXBlcygnaHRtbCcsICdqc29uJyk7XG4gKiAgICAgLy8gPT4gXCJqc29uXCJcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gdHlwZXMuLi5cbiAqIEByZXR1cm4ge1N0cmluZ3xBcnJheXxCb29sZWFufVxuICogQHB1YmxpY1xuICovXG5cbkFjY2VwdHMucHJvdG90eXBlLnR5cGUgPVxuQWNjZXB0cy5wcm90b3R5cGUudHlwZXMgPSBmdW5jdGlvbiAodHlwZXNfKSB7XG4gIHZhciB0eXBlcyA9IHR5cGVzX1xuXG4gIC8vIHN1cHBvcnQgZmxhdHRlbmVkIGFyZ3VtZW50c1xuICBpZiAodHlwZXMgJiYgIUFycmF5LmlzQXJyYXkodHlwZXMpKSB7XG4gICAgdHlwZXMgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0eXBlc1tpXSA9IGFyZ3VtZW50c1tpXVxuICAgIH1cbiAgfVxuXG4gIC8vIG5vIHR5cGVzLCByZXR1cm4gYWxsIHJlcXVlc3RlZCB0eXBlc1xuICBpZiAoIXR5cGVzIHx8IHR5cGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0aGlzLm5lZ290aWF0b3IubWVkaWFUeXBlcygpXG4gIH1cblxuICAvLyBubyBhY2NlcHQgaGVhZGVyLCByZXR1cm4gZmlyc3QgZ2l2ZW4gdHlwZVxuICBpZiAoIXRoaXMuaGVhZGVycy5hY2NlcHQpIHtcbiAgICByZXR1cm4gdHlwZXNbMF1cbiAgfVxuXG4gIHZhciBtaW1lcyA9IHR5cGVzLm1hcChleHRUb01pbWUpXG4gIHZhciBhY2NlcHRzID0gdGhpcy5uZWdvdGlhdG9yLm1lZGlhVHlwZXMobWltZXMuZmlsdGVyKHZhbGlkTWltZSkpXG4gIHZhciBmaXJzdCA9IGFjY2VwdHNbMF1cblxuICByZXR1cm4gZmlyc3RcbiAgICA/IHR5cGVzW21pbWVzLmluZGV4T2YoZmlyc3QpXVxuICAgIDogZmFsc2Vcbn1cblxuLyoqXG4gKiBSZXR1cm4gYWNjZXB0ZWQgZW5jb2RpbmdzIG9yIGJlc3QgZml0IGJhc2VkIG9uIGBlbmNvZGluZ3NgLlxuICpcbiAqIEdpdmVuIGBBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGVgXG4gKiBhbiBhcnJheSBzb3J0ZWQgYnkgcXVhbGl0eSBpcyByZXR1cm5lZDpcbiAqXG4gKiAgICAgWydnemlwJywgJ2RlZmxhdGUnXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBlbmNvZGluZ3MuLi5cbiAqIEByZXR1cm4ge1N0cmluZ3xBcnJheX1cbiAqIEBwdWJsaWNcbiAqL1xuXG5BY2NlcHRzLnByb3RvdHlwZS5lbmNvZGluZyA9XG5BY2NlcHRzLnByb3RvdHlwZS5lbmNvZGluZ3MgPSBmdW5jdGlvbiAoZW5jb2RpbmdzXykge1xuICB2YXIgZW5jb2RpbmdzID0gZW5jb2RpbmdzX1xuXG4gIC8vIHN1cHBvcnQgZmxhdHRlbmVkIGFyZ3VtZW50c1xuICBpZiAoZW5jb2RpbmdzICYmICFBcnJheS5pc0FycmF5KGVuY29kaW5ncykpIHtcbiAgICBlbmNvZGluZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVuY29kaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgZW5jb2RpbmdzW2ldID0gYXJndW1lbnRzW2ldXG4gICAgfVxuICB9XG5cbiAgLy8gbm8gZW5jb2RpbmdzLCByZXR1cm4gYWxsIHJlcXVlc3RlZCBlbmNvZGluZ3NcbiAgaWYgKCFlbmNvZGluZ3MgfHwgZW5jb2RpbmdzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0aGlzLm5lZ290aWF0b3IuZW5jb2RpbmdzKClcbiAgfVxuXG4gIHJldHVybiB0aGlzLm5lZ290aWF0b3IuZW5jb2RpbmdzKGVuY29kaW5ncylbMF0gfHwgZmFsc2Vcbn1cblxuLyoqXG4gKiBSZXR1cm4gYWNjZXB0ZWQgY2hhcnNldHMgb3IgYmVzdCBmaXQgYmFzZWQgb24gYGNoYXJzZXRzYC5cbiAqXG4gKiBHaXZlbiBgQWNjZXB0LUNoYXJzZXQ6IHV0Zi04LCBpc28tODg1OS0xO3E9MC4yLCB1dGYtNztxPTAuNWBcbiAqIGFuIGFycmF5IHNvcnRlZCBieSBxdWFsaXR5IGlzIHJldHVybmVkOlxuICpcbiAqICAgICBbJ3V0Zi04JywgJ3V0Zi03JywgJ2lzby04ODU5LTEnXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBjaGFyc2V0cy4uLlxuICogQHJldHVybiB7U3RyaW5nfEFycmF5fVxuICogQHB1YmxpY1xuICovXG5cbkFjY2VwdHMucHJvdG90eXBlLmNoYXJzZXQgPVxuQWNjZXB0cy5wcm90b3R5cGUuY2hhcnNldHMgPSBmdW5jdGlvbiAoY2hhcnNldHNfKSB7XG4gIHZhciBjaGFyc2V0cyA9IGNoYXJzZXRzX1xuXG4gIC8vIHN1cHBvcnQgZmxhdHRlbmVkIGFyZ3VtZW50c1xuICBpZiAoY2hhcnNldHMgJiYgIUFycmF5LmlzQXJyYXkoY2hhcnNldHMpKSB7XG4gICAgY2hhcnNldHMgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJzZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGFyc2V0c1tpXSA9IGFyZ3VtZW50c1tpXVxuICAgIH1cbiAgfVxuXG4gIC8vIG5vIGNoYXJzZXRzLCByZXR1cm4gYWxsIHJlcXVlc3RlZCBjaGFyc2V0c1xuICBpZiAoIWNoYXJzZXRzIHx8IGNoYXJzZXRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0aGlzLm5lZ290aWF0b3IuY2hhcnNldHMoKVxuICB9XG5cbiAgcmV0dXJuIHRoaXMubmVnb3RpYXRvci5jaGFyc2V0cyhjaGFyc2V0cylbMF0gfHwgZmFsc2Vcbn1cblxuLyoqXG4gKiBSZXR1cm4gYWNjZXB0ZWQgbGFuZ3VhZ2VzIG9yIGJlc3QgZml0IGJhc2VkIG9uIGBsYW5nc2AuXG4gKlxuICogR2l2ZW4gYEFjY2VwdC1MYW5ndWFnZTogZW47cT0wLjgsIGVzLCBwdGBcbiAqIGFuIGFycmF5IHNvcnRlZCBieSBxdWFsaXR5IGlzIHJldHVybmVkOlxuICpcbiAqICAgICBbJ2VzJywgJ3B0JywgJ2VuJ11cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gbGFuZ3MuLi5cbiAqIEByZXR1cm4ge0FycmF5fFN0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5BY2NlcHRzLnByb3RvdHlwZS5sYW5nID1cbkFjY2VwdHMucHJvdG90eXBlLmxhbmdzID1cbkFjY2VwdHMucHJvdG90eXBlLmxhbmd1YWdlID1cbkFjY2VwdHMucHJvdG90eXBlLmxhbmd1YWdlcyA9IGZ1bmN0aW9uIChsYW5ndWFnZXNfKSB7XG4gIHZhciBsYW5ndWFnZXMgPSBsYW5ndWFnZXNfXG5cbiAgLy8gc3VwcG9ydCBmbGF0dGVuZWQgYXJndW1lbnRzXG4gIGlmIChsYW5ndWFnZXMgJiYgIUFycmF5LmlzQXJyYXkobGFuZ3VhZ2VzKSkge1xuICAgIGxhbmd1YWdlcyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFuZ3VhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsYW5ndWFnZXNbaV0gPSBhcmd1bWVudHNbaV1cbiAgICB9XG4gIH1cblxuICAvLyBubyBsYW5ndWFnZXMsIHJldHVybiBhbGwgcmVxdWVzdGVkIGxhbmd1YWdlc1xuICBpZiAoIWxhbmd1YWdlcyB8fCBsYW5ndWFnZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRoaXMubmVnb3RpYXRvci5sYW5ndWFnZXMoKVxuICB9XG5cbiAgcmV0dXJuIHRoaXMubmVnb3RpYXRvci5sYW5ndWFnZXMobGFuZ3VhZ2VzKVswXSB8fCBmYWxzZVxufVxuXG4vKipcbiAqIENvbnZlcnQgZXh0bmFtZXMgdG8gbWltZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogQHJldHVybiB7U3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBleHRUb01pbWUgKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGUuaW5kZXhPZignLycpID09PSAtMVxuICAgID8gbWltZS5sb29rdXAodHlwZSlcbiAgICA6IHR5cGVcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBtaW1lIGlzIHZhbGlkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHZhbGlkTWltZSAodHlwZSkge1xuICByZXR1cm4gdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnXG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgWEhSID0gcmVxdWlyZSgnLi9wb2xsaW5nLXhocicpO1xudmFyIEpTT05QID0gcmVxdWlyZSgnLi9wb2xsaW5nLWpzb25wJyk7XG5cbi8qKlxuICogRXhwb3J0IHRyYW5zcG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0ge1xuICBwb2xsaW5nOiBwb2xsaW5nLFxuICB3ZWJzb2NrZXQ6IHJlcXVpcmUoJy4vd2Vic29ja2V0Jylcbn07XG5cbi8qKlxuICogRXhwb3J0IHVwZ3JhZGVzIG1hcC5cbiAqL1xuXG5leHBvcnRzLnBvbGxpbmcudXBncmFkZXNUbyA9IFsnd2Vic29ja2V0J107XG5cbi8qKlxuICogUG9sbGluZyBwb2x5bW9ycGhpYyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwb2xsaW5nIChyZXEpIHtcbiAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgcmVxLl9xdWVyeS5qKSB7XG4gICAgcmV0dXJuIG5ldyBKU09OUChyZXEpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgWEhSKHJlcSk7XG4gIH1cbn1cbiIsIlxuLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBUcmFuc3BvcnQgPSByZXF1aXJlKCcuLi90cmFuc3BvcnQnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgemxpYiA9IHJlcXVpcmUoJ3psaWInKTtcbnZhciBhY2NlcHRzID0gcmVxdWlyZSgnYWNjZXB0cycpO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmU6cG9sbGluZycpO1xuXG52YXIgY29tcHJlc3Npb25NZXRob2RzID0ge1xuICBnemlwOiB6bGliLmNyZWF0ZUd6aXAsXG4gIGRlZmxhdGU6IHpsaWIuY3JlYXRlRGVmbGF0ZVxufTtcblxuLyoqXG4gKiBFeHBvcnRzIHRoZSBjb25zdHJ1Y3Rvci5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvbGxpbmc7XG5cbi8qKlxuICogSFRUUCBwb2xsaW5nIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljLlxuICovXG5cbmZ1bmN0aW9uIFBvbGxpbmcgKHJlcSkge1xuICBUcmFuc3BvcnQuY2FsbCh0aGlzLCByZXEpO1xuXG4gIHRoaXMuY2xvc2VUaW1lb3V0ID0gMzAgKiAxMDAwO1xuICB0aGlzLm1heEh0dHBCdWZmZXJTaXplID0gbnVsbDtcbiAgdGhpcy5odHRwQ29tcHJlc3Npb24gPSBudWxsO1xufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gVHJhbnNwb3J0LlxuICpcbiAqIEBhcGkgcHVibGljLlxuICovXG5cbnV0aWwuaW5oZXJpdHMoUG9sbGluZywgVHJhbnNwb3J0KTtcblxuLyoqXG4gKiBUcmFuc3BvcnQgbmFtZVxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUubmFtZSA9ICdwb2xsaW5nJztcblxuLyoqXG4gKiBPdmVycmlkZXMgb25SZXF1ZXN0LlxuICpcbiAqIEBwYXJhbSB7aHR0cC5JbmNvbWluZ01lc3NhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5vblJlcXVlc3QgPSBmdW5jdGlvbiAocmVxKSB7XG4gIHZhciByZXMgPSByZXEucmVzO1xuXG4gIGlmICgnR0VUJyA9PT0gcmVxLm1ldGhvZCkge1xuICAgIHRoaXMub25Qb2xsUmVxdWVzdChyZXEsIHJlcyk7XG4gIH0gZWxzZSBpZiAoJ1BPU1QnID09PSByZXEubWV0aG9kKSB7XG4gICAgdGhpcy5vbkRhdGFSZXF1ZXN0KHJlcSwgcmVzKTtcbiAgfSBlbHNlIHtcbiAgICByZXMud3JpdGVIZWFkKDUwMCk7XG4gICAgcmVzLmVuZCgpO1xuICB9XG59O1xuXG4vKipcbiAqIFRoZSBjbGllbnQgc2VuZHMgYSByZXF1ZXN0IGF3YWl0aW5nIGZvciB1cyB0byBzZW5kIGRhdGEuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUub25Qb2xsUmVxdWVzdCA9IGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICBpZiAodGhpcy5yZXEpIHtcbiAgICBkZWJ1ZygncmVxdWVzdCBvdmVybGFwJyk7XG4gICAgLy8gYXNzZXJ0OiB0aGlzLnJlcywgJy5yZXEgYW5kIC5yZXMgc2hvdWxkIGJlICh1bilzZXQgdG9nZXRoZXInXG4gICAgdGhpcy5vbkVycm9yKCdvdmVybGFwIGZyb20gY2xpZW50Jyk7XG4gICAgcmVzLndyaXRlSGVhZCg1MDApO1xuICAgIHJlcy5lbmQoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBkZWJ1Zygnc2V0dGluZyByZXF1ZXN0Jyk7XG5cbiAgdGhpcy5yZXEgPSByZXE7XG4gIHRoaXMucmVzID0gcmVzO1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICBmdW5jdGlvbiBvbkNsb3NlICgpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ3BvbGwgY29ubmVjdGlvbiBjbG9zZWQgcHJlbWF0dXJlbHknKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFudXAgKCkge1xuICAgIHJlcS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbkNsb3NlKTtcbiAgICBzZWxmLnJlcSA9IHNlbGYucmVzID0gbnVsbDtcbiAgfVxuXG4gIHJlcS5jbGVhbnVwID0gY2xlYW51cDtcbiAgcmVxLm9uKCdjbG9zZScsIG9uQ2xvc2UpO1xuXG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICB0aGlzLmVtaXQoJ2RyYWluJyk7XG5cbiAgLy8gaWYgd2UncmUgc3RpbGwgd3JpdGFibGUgYnV0IGhhZCBhIHBlbmRpbmcgY2xvc2UsIHRyaWdnZXIgYW4gZW1wdHkgc2VuZFxuICBpZiAodGhpcy53cml0YWJsZSAmJiB0aGlzLnNob3VsZENsb3NlKSB7XG4gICAgZGVidWcoJ3RyaWdnZXJpbmcgZW1wdHkgc2VuZCB0byBhcHBlbmQgY2xvc2UgcGFja2V0Jyk7XG4gICAgdGhpcy5zZW5kKFt7IHR5cGU6ICdub29wJyB9XSk7XG4gIH1cbn07XG5cbi8qKlxuICogVGhlIGNsaWVudCBzZW5kcyBhIHJlcXVlc3Qgd2l0aCBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLm9uRGF0YVJlcXVlc3QgPSBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgaWYgKHRoaXMuZGF0YVJlcSkge1xuICAgIC8vIGFzc2VydDogdGhpcy5kYXRhUmVzLCAnLmRhdGFSZXEgYW5kIC5kYXRhUmVzIHNob3VsZCBiZSAodW4pc2V0IHRvZ2V0aGVyJ1xuICAgIHRoaXMub25FcnJvcignZGF0YSByZXF1ZXN0IG92ZXJsYXAgZnJvbSBjbGllbnQnKTtcbiAgICByZXMud3JpdGVIZWFkKDUwMCk7XG4gICAgcmVzLmVuZCgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBpc0JpbmFyeSA9ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nID09PSByZXEuaGVhZGVyc1snY29udGVudC10eXBlJ107XG5cbiAgdGhpcy5kYXRhUmVxID0gcmVxO1xuICB0aGlzLmRhdGFSZXMgPSByZXM7XG5cbiAgdmFyIGNodW5rcyA9IGlzQmluYXJ5ID8gQnVmZmVyLmNvbmNhdChbXSkgOiAnJztcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGNsZWFudXAgKCkge1xuICAgIHJlcS5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uRGF0YSk7XG4gICAgcmVxLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbkVuZCk7XG4gICAgcmVxLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uQ2xvc2UpO1xuICAgIHNlbGYuZGF0YVJlcSA9IHNlbGYuZGF0YVJlcyA9IGNodW5rcyA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNsb3NlICgpIHtcbiAgICBjbGVhbnVwKCk7XG4gICAgc2VsZi5vbkVycm9yKCdkYXRhIHJlcXVlc3QgY29ubmVjdGlvbiBjbG9zZWQgcHJlbWF0dXJlbHknKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRGF0YSAoZGF0YSkge1xuICAgIHZhciBjb250ZW50TGVuZ3RoO1xuICAgIGlmIChpc0JpbmFyeSkge1xuICAgICAgY2h1bmtzID0gQnVmZmVyLmNvbmNhdChbY2h1bmtzLCBkYXRhXSk7XG4gICAgICBjb250ZW50TGVuZ3RoID0gY2h1bmtzLmxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgY2h1bmtzICs9IGRhdGE7XG4gICAgICBjb250ZW50TGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgoY2h1bmtzKTtcbiAgICB9XG5cbiAgICBpZiAoY29udGVudExlbmd0aCA+IHNlbGYubWF4SHR0cEJ1ZmZlclNpemUpIHtcbiAgICAgIGNodW5rcyA9IGlzQmluYXJ5ID8gQnVmZmVyLmNvbmNhdChbXSkgOiAnJztcbiAgICAgIHJlcS5jb25uZWN0aW9uLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkVuZCAoKSB7XG4gICAgc2VsZi5vbkRhdGEoY2h1bmtzKTtcblxuICAgIHZhciBoZWFkZXJzID0ge1xuICAgICAgLy8gdGV4dC9odG1sIGlzIHJlcXVpcmVkIGluc3RlYWQgb2YgdGV4dC9wbGFpbiB0byBhdm9pZCBhblxuICAgICAgLy8gdW53YW50ZWQgZG93bmxvYWQgZGlhbG9nIG9uIGNlcnRhaW4gdXNlci1hZ2VudHMgKEdILTQzKVxuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICd0ZXh0L2h0bWwnLFxuICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogMlxuICAgIH07XG5cbiAgICByZXMud3JpdGVIZWFkKDIwMCwgc2VsZi5oZWFkZXJzKHJlcSwgaGVhZGVycykpO1xuICAgIHJlcy5lbmQoJ29rJyk7XG4gICAgY2xlYW51cCgpO1xuICB9XG5cbiAgcmVxLm9uKCdjbG9zZScsIG9uQ2xvc2UpO1xuICBpZiAoIWlzQmluYXJ5KSByZXEuc2V0RW5jb2RpbmcoJ3V0ZjgnKTtcbiAgcmVxLm9uKCdkYXRhJywgb25EYXRhKTtcbiAgcmVxLm9uKCdlbmQnLCBvbkVuZCk7XG59O1xuXG4vKipcbiAqIFByb2Nlc3NlcyB0aGUgaW5jb21pbmcgZGF0YSBwYXlsb2FkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmNvZGVkIHBheWxvYWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIGRlYnVnKCdyZWNlaXZlZCBcIiVzXCInLCBkYXRhKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgaWYgKCdjbG9zZScgPT09IHBhY2tldC50eXBlKSB7XG4gICAgICBkZWJ1ZygnZ290IHhociBjbG9zZSBwYWNrZXQnKTtcbiAgICAgIHNlbGYub25DbG9zZSgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHNlbGYub25QYWNrZXQocGFja2V0KTtcbiAgfTtcblxuICBwYXJzZXIuZGVjb2RlUGF5bG9hZChkYXRhLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIE92ZXJyaWRlcyBvbkNsb3NlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLndyaXRhYmxlKSB7XG4gICAgLy8gY2xvc2UgcGVuZGluZyBwb2xsIHJlcXVlc3RcbiAgICB0aGlzLnNlbmQoW3sgdHlwZTogJ25vb3AnIH1dKTtcbiAgfVxuICBUcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UuY2FsbCh0aGlzKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0IHBheWxvYWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICBpZiAodGhpcy5zaG91bGRDbG9zZSkge1xuICAgIGRlYnVnKCdhcHBlbmRpbmcgY2xvc2UgcGFja2V0IHRvIHBheWxvYWQnKTtcbiAgICBwYWNrZXRzLnB1c2goeyB0eXBlOiAnY2xvc2UnIH0pO1xuICAgIHRoaXMuc2hvdWxkQ2xvc2UoKTtcbiAgICB0aGlzLnNob3VsZENsb3NlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgcGFyc2VyLmVuY29kZVBheWxvYWQocGFja2V0cywgdGhpcy5zdXBwb3J0c0JpbmFyeSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgY29tcHJlc3MgPSBwYWNrZXRzLnNvbWUoZnVuY3Rpb24gKHBhY2tldCkge1xuICAgICAgcmV0dXJuIHBhY2tldC5vcHRpb25zICYmIHBhY2tldC5vcHRpb25zLmNvbXByZXNzO1xuICAgIH0pO1xuICAgIHNlbGYud3JpdGUoZGF0YSwgeyBjb21wcmVzczogY29tcHJlc3MgfSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBXcml0ZXMgZGF0YSBhcyByZXNwb25zZSB0byBwb2xsIHJlcXVlc3QuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGFcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBvcHRpb25zKSB7XG4gIGRlYnVnKCd3cml0aW5nIFwiJXNcIicsIGRhdGEpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuZG9Xcml0ZShkYXRhLCBvcHRpb25zLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5yZXEuY2xlYW51cCgpO1xuICB9KTtcbn07XG5cbi8qKlxuICogUGVyZm9ybXMgdGhlIHdyaXRlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLmRvV3JpdGUgPSBmdW5jdGlvbiAoZGF0YSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8vIGV4cGxpY2l0IFVURi04IGlzIHJlcXVpcmVkIGZvciBwYWdlcyBub3Qgc2VydmVkIHVuZGVyIHV0ZlxuICB2YXIgaXNTdHJpbmcgPSB0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZyc7XG4gIHZhciBjb250ZW50VHlwZSA9IGlzU3RyaW5nXG4gICAgPyAndGV4dC9wbGFpbjsgY2hhcnNldD1VVEYtOCdcbiAgICA6ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nO1xuXG4gIHZhciBoZWFkZXJzID0ge1xuICAgICdDb250ZW50LVR5cGUnOiBjb250ZW50VHlwZVxuICB9O1xuXG4gIGlmICghdGhpcy5odHRwQ29tcHJlc3Npb24gfHwgIW9wdGlvbnMuY29tcHJlc3MpIHtcbiAgICByZXNwb25kKGRhdGEpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBsZW4gPSBpc1N0cmluZyA/IEJ1ZmZlci5ieXRlTGVuZ3RoKGRhdGEpIDogZGF0YS5sZW5ndGg7XG4gIGlmIChsZW4gPCB0aGlzLmh0dHBDb21wcmVzc2lvbi50aHJlc2hvbGQpIHtcbiAgICByZXNwb25kKGRhdGEpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBlbmNvZGluZyA9IGFjY2VwdHModGhpcy5yZXEpLmVuY29kaW5ncyhbJ2d6aXAnLCAnZGVmbGF0ZSddKTtcbiAgaWYgKCFlbmNvZGluZykge1xuICAgIHJlc3BvbmQoZGF0YSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5jb21wcmVzcyhkYXRhLCBlbmNvZGluZywgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHNlbGYucmVzLndyaXRlSGVhZCg1MDApO1xuICAgICAgc2VsZi5yZXMuZW5kKCk7XG4gICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGhlYWRlcnNbJ0NvbnRlbnQtRW5jb2RpbmcnXSA9IGVuY29kaW5nO1xuICAgIHJlc3BvbmQoZGF0YSk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHJlc3BvbmQgKGRhdGEpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LUxlbmd0aCddID0gJ3N0cmluZycgPT09IHR5cGVvZiBkYXRhID8gQnVmZmVyLmJ5dGVMZW5ndGgoZGF0YSkgOiBkYXRhLmxlbmd0aDtcbiAgICBzZWxmLnJlcy53cml0ZUhlYWQoMjAwLCBzZWxmLmhlYWRlcnMoc2VsZi5yZXEsIGhlYWRlcnMpKTtcbiAgICBzZWxmLnJlcy5lbmQoZGF0YSk7XG4gICAgY2FsbGJhY2soKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDb21wcmVzc2VzIGRhdGEuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUuY29tcHJlc3MgPSBmdW5jdGlvbiAoZGF0YSwgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gIGRlYnVnKCdjb21wcmVzc2luZycpO1xuXG4gIHZhciBidWZmZXJzID0gW107XG4gIHZhciBucmVhZCA9IDA7XG5cbiAgY29tcHJlc3Npb25NZXRob2RzW2VuY29kaW5nXSh0aGlzLmh0dHBDb21wcmVzc2lvbilcbiAgICAub24oJ2Vycm9yJywgY2FsbGJhY2spXG4gICAgLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICBidWZmZXJzLnB1c2goY2h1bmspO1xuICAgICAgbnJlYWQgKz0gY2h1bmsubGVuZ3RoO1xuICAgIH0pXG4gICAgLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsYmFjayhudWxsLCBCdWZmZXIuY29uY2F0KGJ1ZmZlcnMsIG5yZWFkKSk7XG4gICAgfSlcbiAgICAuZW5kKGRhdGEpO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIHRyYW5zcG9ydC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlID0gZnVuY3Rpb24gKGZuKSB7XG4gIGRlYnVnKCdjbG9zaW5nJyk7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgY2xvc2VUaW1lb3V0VGltZXI7XG5cbiAgaWYgKHRoaXMuZGF0YVJlcSkge1xuICAgIGRlYnVnKCdhYm9ydGluZyBvbmdvaW5nIGRhdGEgcmVxdWVzdCcpO1xuICAgIHRoaXMuZGF0YVJlcS5kZXN0cm95KCk7XG4gIH1cblxuICBpZiAodGhpcy53cml0YWJsZSkge1xuICAgIGRlYnVnKCd0cmFuc3BvcnQgd3JpdGFibGUgLSBjbG9zaW5nIHJpZ2h0IGF3YXknKTtcbiAgICB0aGlzLnNlbmQoW3sgdHlwZTogJ2Nsb3NlJyB9XSk7XG4gICAgb25DbG9zZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGlzY2FyZGVkKSB7XG4gICAgZGVidWcoJ3RyYW5zcG9ydCBkaXNjYXJkZWQgLSBjbG9zaW5nIHJpZ2h0IGF3YXknKTtcbiAgICBvbkNsb3NlKCk7XG4gIH0gZWxzZSB7XG4gICAgZGVidWcoJ3RyYW5zcG9ydCBub3Qgd3JpdGFibGUgLSBidWZmZXJpbmcgb3JkZXJseSBjbG9zZScpO1xuICAgIHRoaXMuc2hvdWxkQ2xvc2UgPSBvbkNsb3NlO1xuICAgIGNsb3NlVGltZW91dFRpbWVyID0gc2V0VGltZW91dChvbkNsb3NlLCB0aGlzLmNsb3NlVGltZW91dCk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNsb3NlICgpIHtcbiAgICBjbGVhclRpbWVvdXQoY2xvc2VUaW1lb3V0VGltZXIpO1xuICAgIGZuKCk7XG4gICAgc2VsZi5vbkNsb3NlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBoZWFkZXJzIGZvciBhIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7aHR0cC5JbmNvbWluZ01lc3NhZ2V9IHJlcXVlc3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBleHRyYSBoZWFkZXJzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5oZWFkZXJzID0gZnVuY3Rpb24gKHJlcSwgaGVhZGVycykge1xuICBoZWFkZXJzID0gaGVhZGVycyB8fCB7fTtcblxuICAvLyBwcmV2ZW50IFhTUyB3YXJuaW5ncyBvbiBJRVxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vTGVhcm5Cb29zdC9zb2NrZXQuaW8vcHVsbC8xMzMzXG4gIHZhciB1YSA9IHJlcS5oZWFkZXJzWyd1c2VyLWFnZW50J107XG4gIGlmICh1YSAmJiAofnVhLmluZGV4T2YoJztNU0lFJykgfHwgfnVhLmluZGV4T2YoJ1RyaWRlbnQvJykpKSB7XG4gICAgaGVhZGVyc1snWC1YU1MtUHJvdGVjdGlvbiddID0gJzAnO1xuICB9XG5cbiAgdGhpcy5lbWl0KCdoZWFkZXJzJywgaGVhZGVycyk7XG4gIHJldHVybiBoZWFkZXJzO1xufTtcbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICovXG5cbmZ1bmN0aW9uIHNldHVwKGVudikge1xuXHRjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5kZWZhdWx0ID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmNvZXJjZSA9IGNvZXJjZTtcblx0Y3JlYXRlRGVidWcuZGlzYWJsZSA9IGRpc2FibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZSA9IGVuYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlZCA9IGVuYWJsZWQ7XG5cdGNyZWF0ZURlYnVnLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuXHRPYmplY3Qua2V5cyhlbnYpLmZvckVhY2goa2V5ID0+IHtcblx0XHRjcmVhdGVEZWJ1Z1trZXldID0gZW52W2tleV07XG5cdH0pO1xuXG5cdC8qKlxuXHQqIEFjdGl2ZSBgZGVidWdgIGluc3RhbmNlcy5cblx0Ki9cblx0Y3JlYXRlRGVidWcuaW5zdGFuY2VzID0gW107XG5cblx0LyoqXG5cdCogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG5cdCovXG5cblx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHQvKipcblx0KiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG5cdCpcblx0KiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG5cdCovXG5cdGNyZWF0ZURlYnVnLmZvcm1hdHRlcnMgPSB7fTtcblxuXHQvKipcblx0KiBTZWxlY3RzIGEgY29sb3IgZm9yIGEgZGVidWcgbmFtZXNwYWNlXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIGZvciB0aGUgZGVidWcgaW5zdGFuY2UgdG8gYmUgY29sb3JlZFxuXHQqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IEFuIEFOU0kgY29sb3IgY29kZSBmb3IgdGhlIGdpdmVuIG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcblx0XHRsZXQgaGFzaCA9IDA7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzcGFjZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0aGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG5cdFx0XHRoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuXHRcdH1cblxuXHRcdHJldHVybiBjcmVhdGVEZWJ1Zy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBjcmVhdGVEZWJ1Zy5jb2xvcnMubGVuZ3RoXTtcblx0fVxuXHRjcmVhdGVEZWJ1Zy5zZWxlY3RDb2xvciA9IHNlbGVjdENvbG9yO1xuXG5cdC8qKlxuXHQqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEByZXR1cm4ge0Z1bmN0aW9ufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXHRcdGxldCBwcmV2VGltZTtcblxuXHRcdGZ1bmN0aW9uIGRlYnVnKC4uLmFyZ3MpIHtcblx0XHRcdC8vIERpc2FibGVkP1xuXHRcdFx0aWYgKCFkZWJ1Zy5lbmFibGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3Qgc2VsZiA9IGRlYnVnO1xuXG5cdFx0XHQvLyBTZXQgYGRpZmZgIHRpbWVzdGFtcFxuXHRcdFx0Y29uc3QgY3VyciA9IE51bWJlcihuZXcgRGF0ZSgpKTtcblx0XHRcdGNvbnN0IG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcblx0XHRcdHNlbGYuZGlmZiA9IG1zO1xuXHRcdFx0c2VsZi5wcmV2ID0gcHJldlRpbWU7XG5cdFx0XHRzZWxmLmN1cnIgPSBjdXJyO1xuXHRcdFx0cHJldlRpbWUgPSBjdXJyO1xuXG5cdFx0XHRhcmdzWzBdID0gY3JlYXRlRGVidWcuY29lcmNlKGFyZ3NbMF0pO1xuXG5cdFx0XHRpZiAodHlwZW9mIGFyZ3NbMF0gIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdC8vIEFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG5cdFx0XHRcdGFyZ3MudW5zaGlmdCgnJU8nKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcblx0XHRcdGxldCBpbmRleCA9IDA7XG5cdFx0XHRhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgKG1hdGNoLCBmb3JtYXQpID0+IHtcblx0XHRcdFx0Ly8gSWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuXHRcdFx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0XHRcdH1cblx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0Y29uc3QgZm9ybWF0dGVyID0gY3JlYXRlRGVidWcuZm9ybWF0dGVyc1tmb3JtYXRdO1xuXHRcdFx0XHRpZiAodHlwZW9mIGZvcm1hdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdGNvbnN0IHZhbCA9IGFyZ3NbaW5kZXhdO1xuXHRcdFx0XHRcdG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuXHRcdFx0XHRcdC8vIE5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcblx0XHRcdFx0XHRhcmdzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0aW5kZXgtLTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gQXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcblx0XHRcdGNyZWF0ZURlYnVnLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuXHRcdFx0Y29uc3QgbG9nRm4gPSBzZWxmLmxvZyB8fCBjcmVhdGVEZWJ1Zy5sb2c7XG5cdFx0XHRsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcblx0XHR9XG5cblx0XHRkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG5cdFx0ZGVidWcuZW5hYmxlZCA9IGNyZWF0ZURlYnVnLmVuYWJsZWQobmFtZXNwYWNlKTtcblx0XHRkZWJ1Zy51c2VDb2xvcnMgPSBjcmVhdGVEZWJ1Zy51c2VDb2xvcnMoKTtcblx0XHRkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG5cdFx0ZGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cdFx0ZGVidWcuZXh0ZW5kID0gZXh0ZW5kO1xuXHRcdC8vIERlYnVnLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuXHRcdC8vIGRlYnVnLnJhd0xvZyA9IHJhd0xvZztcblxuXHRcdC8vIGVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG5cdFx0aWYgKHR5cGVvZiBjcmVhdGVEZWJ1Zy5pbml0ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRjcmVhdGVEZWJ1Zy5pbml0KGRlYnVnKTtcblx0XHR9XG5cblx0XHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMucHVzaChkZWJ1Zyk7XG5cblx0XHRyZXR1cm4gZGVidWc7XG5cdH1cblxuXHRmdW5jdGlvbiBkZXN0cm95KCkge1xuXHRcdGNvbnN0IGluZGV4ID0gY3JlYXRlRGVidWcuaW5zdGFuY2VzLmluZGV4T2YodGhpcyk7XG5cdFx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0Y3JlYXRlRGVidWcuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXh0ZW5kKG5hbWVzcGFjZSwgZGVsaW1pdGVyKSB7XG5cdFx0Y29uc3QgbmV3RGVidWcgPSBjcmVhdGVEZWJ1Zyh0aGlzLm5hbWVzcGFjZSArICh0eXBlb2YgZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/ICc6JyA6IGRlbGltaXRlcikgKyBuYW1lc3BhY2UpO1xuXHRcdG5ld0RlYnVnLmxvZyA9IHRoaXMubG9nO1xuXHRcdHJldHVybiBuZXdEZWJ1Zztcblx0fVxuXG5cdC8qKlxuXHQqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcblx0KiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuXHRcdGNyZWF0ZURlYnVnLnNhdmUobmFtZXNwYWNlcyk7XG5cblx0XHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRcdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0XHRsZXQgaTtcblx0XHRjb25zdCBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG5cdFx0Y29uc3QgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoIXNwbGl0W2ldKSB7XG5cdFx0XHRcdC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcblxuXHRcdFx0aWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGNyZWF0ZURlYnVnLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgaW5zdGFuY2UgPSBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXNbaV07XG5cdFx0XHRpbnN0YW5jZS5lbmFibGVkID0gY3JlYXRlRGVidWcuZW5hYmxlZChpbnN0YW5jZS5uYW1lc3BhY2UpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuXHQqXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0XHRjb25zdCBuYW1lc3BhY2VzID0gW1xuXHRcdFx0Li4uY3JlYXRlRGVidWcubmFtZXMubWFwKHRvTmFtZXNwYWNlKSxcblx0XHRcdC4uLmNyZWF0ZURlYnVnLnNraXBzLm1hcCh0b05hbWVzcGFjZSkubWFwKG5hbWVzcGFjZSA9PiAnLScgKyBuYW1lc3BhY2UpXG5cdFx0XS5qb2luKCcsJyk7XG5cdFx0Y3JlYXRlRGVidWcuZW5hYmxlKCcnKTtcblx0XHRyZXR1cm4gbmFtZXNwYWNlcztcblx0fVxuXG5cdC8qKlxuXHQqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG5cdCogQHJldHVybiB7Qm9vbGVhbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcblx0XHRpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09PSAnKicpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGxldCBpO1xuXHRcdGxldCBsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcubmFtZXNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0KiBDb252ZXJ0IHJlZ2V4cCB0byBuYW1lc3BhY2Vcblx0KlxuXHQqIEBwYXJhbSB7UmVnRXhwfSByZWd4ZXBcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiB0b05hbWVzcGFjZShyZWdleHApIHtcblx0XHRyZXR1cm4gcmVnZXhwLnRvU3RyaW5nKClcblx0XHRcdC5zdWJzdHJpbmcoMiwgcmVnZXhwLnRvU3RyaW5nKCkubGVuZ3RoIC0gMilcblx0XHRcdC5yZXBsYWNlKC9cXC5cXCpcXD8kLywgJyonKTtcblx0fVxuXG5cdC8qKlxuXHQqIENvZXJjZSBgdmFsYC5cblx0KlxuXHQqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuXHQqIEByZXR1cm4ge01peGVkfVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBjb2VyY2UodmFsKSB7XG5cdFx0aWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSB7XG5cdFx0XHRyZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0Y3JlYXRlRGVidWcuZW5hYmxlKGNyZWF0ZURlYnVnLmxvYWQoKSk7XG5cblx0cmV0dXJuIGNyZWF0ZURlYnVnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldHVwO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiemxpYlwiKTsiLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lOnNvY2tldCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gU29ja2V0O1xuXG4vKipcbiAqIENsaWVudCBjbGFzcyAoYWJzdHJhY3QpLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIFNvY2tldCAoaWQsIHNlcnZlciwgdHJhbnNwb3J0LCByZXEpIHtcbiAgdGhpcy5pZCA9IGlkO1xuICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgdGhpcy51cGdyYWRpbmcgPSBmYWxzZTtcbiAgdGhpcy51cGdyYWRlZCA9IGZhbHNlO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG4gIHRoaXMud3JpdGVCdWZmZXIgPSBbXTtcbiAgdGhpcy5wYWNrZXRzRm4gPSBbXTtcbiAgdGhpcy5zZW50Q2FsbGJhY2tGbiA9IFtdO1xuICB0aGlzLmNsZWFudXBGbiA9IFtdO1xuICB0aGlzLnJlcXVlc3QgPSByZXE7XG5cbiAgLy8gQ2FjaGUgSVAgc2luY2UgaXQgbWlnaHQgbm90IGJlIGluIHRoZSByZXEgbGF0ZXJcbiAgaWYgKHJlcS53ZWJzb2NrZXQgJiYgcmVxLndlYnNvY2tldC5fc29ja2V0KSB7XG4gICAgdGhpcy5yZW1vdGVBZGRyZXNzID0gcmVxLndlYnNvY2tldC5fc29ja2V0LnJlbW90ZUFkZHJlc3M7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZW1vdGVBZGRyZXNzID0gcmVxLmNvbm5lY3Rpb24ucmVtb3RlQWRkcmVzcztcbiAgfVxuXG4gIHRoaXMuY2hlY2tJbnRlcnZhbFRpbWVyID0gbnVsbDtcbiAgdGhpcy51cGdyYWRlVGltZW91dFRpbWVyID0gbnVsbDtcbiAgdGhpcy5waW5nVGltZW91dFRpbWVyID0gbnVsbDtcblxuICB0aGlzLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICB0aGlzLm9uT3BlbigpO1xufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gRXZlbnRFbWl0dGVyLlxuICovXG5cbnV0aWwuaW5oZXJpdHMoU29ja2V0LCBFdmVudEVtaXR0ZXIpO1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBjb25zaWRlcmVkIG9wZW4uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcblxuICAvLyBzZW5kcyBhbiBgb3BlbmAgcGFja2V0XG4gIHRoaXMudHJhbnNwb3J0LnNpZCA9IHRoaXMuaWQ7XG4gIHRoaXMuc2VuZFBhY2tldCgnb3BlbicsIEpTT04uc3RyaW5naWZ5KHtcbiAgICBzaWQ6IHRoaXMuaWQsXG4gICAgdXBncmFkZXM6IHRoaXMuZ2V0QXZhaWxhYmxlVXBncmFkZXMoKSxcbiAgICBwaW5nSW50ZXJ2YWw6IHRoaXMuc2VydmVyLnBpbmdJbnRlcnZhbCxcbiAgICBwaW5nVGltZW91dDogdGhpcy5zZXJ2ZXIucGluZ1RpbWVvdXRcbiAgfSkpO1xuXG4gIGlmICh0aGlzLnNlcnZlci5pbml0aWFsUGFja2V0KSB7XG4gICAgdGhpcy5zZW5kUGFja2V0KCdtZXNzYWdlJywgdGhpcy5zZXJ2ZXIuaW5pdGlhbFBhY2tldCk7XG4gIH1cblxuICB0aGlzLmVtaXQoJ29wZW4nKTtcbiAgdGhpcy5zZXRQaW5nVGltZW91dCgpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25QYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIGlmICgnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIC8vIGV4cG9ydCBwYWNrZXQgZXZlbnRcbiAgICBkZWJ1ZygncGFja2V0Jyk7XG4gICAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xuXG4gICAgLy8gUmVzZXQgcGluZyB0aW1lb3V0IG9uIGFueSBwYWNrZXQsIGluY29taW5nIGRhdGEgaXMgYSBnb29kIHNpZ24gb2ZcbiAgICAvLyBvdGhlciBzaWRlJ3MgbGl2ZW5lc3NcbiAgICB0aGlzLnNldFBpbmdUaW1lb3V0KCk7XG5cbiAgICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XG4gICAgICBjYXNlICdwaW5nJzpcbiAgICAgICAgZGVidWcoJ2dvdCBwaW5nJyk7XG4gICAgICAgIHRoaXMuc2VuZFBhY2tldCgncG9uZycpO1xuICAgICAgICB0aGlzLmVtaXQoJ2hlYXJ0YmVhdCcpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICB0aGlzLm9uQ2xvc2UoJ3BhcnNlIGVycm9yJyk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdtZXNzYWdlJzpcbiAgICAgICAgdGhpcy5lbWl0KCdkYXRhJywgcGFja2V0LmRhdGEpO1xuICAgICAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCBwYWNrZXQuZGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBkZWJ1ZygncGFja2V0IHJlY2VpdmVkIHdpdGggY2xvc2VkIHNvY2tldCcpO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBlcnJvci5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBvYmplY3RcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ3RyYW5zcG9ydCBlcnJvcicpO1xuICB0aGlzLm9uQ2xvc2UoJ3RyYW5zcG9ydCBlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIFNldHMgYW5kIHJlc2V0cyBwaW5nIHRpbWVvdXQgdGltZXIgYmFzZWQgb24gY2xpZW50IHBpbmdzLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2V0UGluZ1RpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgY2xlYXJUaW1lb3V0KHNlbGYucGluZ1RpbWVvdXRUaW1lcik7XG4gIHNlbGYucGluZ1RpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25DbG9zZSgncGluZyB0aW1lb3V0Jyk7XG4gIH0sIHNlbGYuc2VydmVyLnBpbmdJbnRlcnZhbCArIHNlbGYuc2VydmVyLnBpbmdUaW1lb3V0KTtcbn07XG5cbi8qKlxuICogQXR0YWNoZXMgaGFuZGxlcnMgZm9yIHRoZSBnaXZlbiB0cmFuc3BvcnQuXG4gKlxuICogQHBhcmFtIHtUcmFuc3BvcnR9IHRyYW5zcG9ydFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZXRUcmFuc3BvcnQgPSBmdW5jdGlvbiAodHJhbnNwb3J0KSB7XG4gIHZhciBvbkVycm9yID0gdGhpcy5vbkVycm9yLmJpbmQodGhpcyk7XG4gIHZhciBvblBhY2tldCA9IHRoaXMub25QYWNrZXQuYmluZCh0aGlzKTtcbiAgdmFyIGZsdXNoID0gdGhpcy5mbHVzaC5iaW5kKHRoaXMpO1xuICB2YXIgb25DbG9zZSA9IHRoaXMub25DbG9zZS5iaW5kKHRoaXMsICd0cmFuc3BvcnQgY2xvc2UnKTtcblxuICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcbiAgdGhpcy50cmFuc3BvcnQub25jZSgnZXJyb3InLCBvbkVycm9yKTtcbiAgdGhpcy50cmFuc3BvcnQub24oJ3BhY2tldCcsIG9uUGFja2V0KTtcbiAgdGhpcy50cmFuc3BvcnQub24oJ2RyYWluJywgZmx1c2gpO1xuICB0aGlzLnRyYW5zcG9ydC5vbmNlKCdjbG9zZScsIG9uQ2xvc2UpO1xuICAvLyB0aGlzIGZ1bmN0aW9uIHdpbGwgbWFuYWdlIHBhY2tldCBldmVudHMgKGFsc28gbWVzc2FnZSBjYWxsYmFja3MpXG4gIHRoaXMuc2V0dXBTZW5kQ2FsbGJhY2soKTtcblxuICB0aGlzLmNsZWFudXBGbi5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25FcnJvcik7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdwYWNrZXQnLCBvblBhY2tldCk7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIGZsdXNoKTtcbiAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25DbG9zZSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBVcGdyYWRlcyBzb2NrZXQgdG8gdGhlIGdpdmVuIHRyYW5zcG9ydFxuICpcbiAqIEBwYXJhbSB7VHJhbnNwb3J0fSB0cmFuc3BvcnRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUubWF5YmVVcGdyYWRlID0gZnVuY3Rpb24gKHRyYW5zcG9ydCkge1xuICBkZWJ1ZygnbWlnaHQgdXBncmFkZSBzb2NrZXQgdHJhbnNwb3J0IGZyb20gXCIlc1wiIHRvIFwiJXNcIidcbiAgICAsIHRoaXMudHJhbnNwb3J0Lm5hbWUsIHRyYW5zcG9ydC5uYW1lKTtcblxuICB0aGlzLnVwZ3JhZGluZyA9IHRydWU7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8vIHNldCB0cmFuc3BvcnQgdXBncmFkZSB0aW1lclxuICBzZWxmLnVwZ3JhZGVUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1ZygnY2xpZW50IGRpZCBub3QgY29tcGxldGUgdXBncmFkZSAtIGNsb3NpbmcgdHJhbnNwb3J0Jyk7XG4gICAgY2xlYW51cCgpO1xuICAgIGlmICgnb3BlbicgPT09IHRyYW5zcG9ydC5yZWFkeVN0YXRlKSB7XG4gICAgICB0cmFuc3BvcnQuY2xvc2UoKTtcbiAgICB9XG4gIH0sIHRoaXMuc2VydmVyLnVwZ3JhZGVUaW1lb3V0KTtcblxuICBmdW5jdGlvbiBvblBhY2tldCAocGFja2V0KSB7XG4gICAgaWYgKCdwaW5nJyA9PT0gcGFja2V0LnR5cGUgJiYgJ3Byb2JlJyA9PT0gcGFja2V0LmRhdGEpIHtcbiAgICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICdwb25nJywgZGF0YTogJ3Byb2JlJyB9XSk7XG4gICAgICBzZWxmLmVtaXQoJ3VwZ3JhZGluZycsIHRyYW5zcG9ydCk7XG4gICAgICBjbGVhckludGVydmFsKHNlbGYuY2hlY2tJbnRlcnZhbFRpbWVyKTtcbiAgICAgIHNlbGYuY2hlY2tJbnRlcnZhbFRpbWVyID0gc2V0SW50ZXJ2YWwoY2hlY2ssIDEwMCk7XG4gICAgfSBlbHNlIGlmICgndXBncmFkZScgPT09IHBhY2tldC50eXBlICYmIHNlbGYucmVhZHlTdGF0ZSAhPT0gJ2Nsb3NlZCcpIHtcbiAgICAgIGRlYnVnKCdnb3QgdXBncmFkZSBwYWNrZXQgLSB1cGdyYWRpbmcnKTtcbiAgICAgIGNsZWFudXAoKTtcbiAgICAgIHNlbGYudHJhbnNwb3J0LmRpc2NhcmQoKTtcbiAgICAgIHNlbGYudXBncmFkZWQgPSB0cnVlO1xuICAgICAgc2VsZi5jbGVhclRyYW5zcG9ydCgpO1xuICAgICAgc2VsZi5zZXRUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgICAgIHNlbGYuZW1pdCgndXBncmFkZScsIHRyYW5zcG9ydCk7XG4gICAgICBzZWxmLnNldFBpbmdUaW1lb3V0KCk7XG4gICAgICBzZWxmLmZsdXNoKCk7XG4gICAgICBpZiAoc2VsZi5yZWFkeVN0YXRlID09PSAnY2xvc2luZycpIHtcbiAgICAgICAgdHJhbnNwb3J0LmNsb3NlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLm9uQ2xvc2UoJ2ZvcmNlZCBjbG9zZScpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2xlYW51cCgpO1xuICAgICAgdHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gd2UgZm9yY2UgYSBwb2xsaW5nIGN5Y2xlIHRvIGVuc3VyZSBhIGZhc3QgdXBncmFkZVxuICBmdW5jdGlvbiBjaGVjayAoKSB7XG4gICAgaWYgKCdwb2xsaW5nJyA9PT0gc2VsZi50cmFuc3BvcnQubmFtZSAmJiBzZWxmLnRyYW5zcG9ydC53cml0YWJsZSkge1xuICAgICAgZGVidWcoJ3dyaXRpbmcgYSBub29wIHBhY2tldCB0byBwb2xsaW5nIGZvciBmYXN0IHVwZ3JhZGUnKTtcbiAgICAgIHNlbGYudHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogJ25vb3AnIH1dKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhbnVwICgpIHtcbiAgICBzZWxmLnVwZ3JhZGluZyA9IGZhbHNlO1xuXG4gICAgY2xlYXJJbnRlcnZhbChzZWxmLmNoZWNrSW50ZXJ2YWxUaW1lcik7XG4gICAgc2VsZi5jaGVja0ludGVydmFsVGltZXIgPSBudWxsO1xuXG4gICAgY2xlYXJUaW1lb3V0KHNlbGYudXBncmFkZVRpbWVvdXRUaW1lcik7XG4gICAgc2VsZi51cGdyYWRlVGltZW91dFRpbWVyID0gbnVsbDtcblxuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcigncGFja2V0Jywgb25QYWNrZXQpO1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTtcbiAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25FcnJvcik7XG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbkNsb3NlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRXJyb3IgKGVycikge1xuICAgIGRlYnVnKCdjbGllbnQgZGlkIG5vdCBjb21wbGV0ZSB1cGdyYWRlIC0gJXMnLCBlcnIpO1xuICAgIGNsZWFudXAoKTtcbiAgICB0cmFuc3BvcnQuY2xvc2UoKTtcbiAgICB0cmFuc3BvcnQgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gb25UcmFuc3BvcnRDbG9zZSAoKSB7XG4gICAgb25FcnJvcigndHJhbnNwb3J0IGNsb3NlZCcpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DbG9zZSAoKSB7XG4gICAgb25FcnJvcignc29ja2V0IGNsb3NlZCcpO1xuICB9XG5cbiAgdHJhbnNwb3J0Lm9uKCdwYWNrZXQnLCBvblBhY2tldCk7XG4gIHRyYW5zcG9ydC5vbmNlKCdjbG9zZScsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuICB0cmFuc3BvcnQub25jZSgnZXJyb3InLCBvbkVycm9yKTtcblxuICBzZWxmLm9uY2UoJ2Nsb3NlJywgb25DbG9zZSk7XG59O1xuXG4vKipcbiAqIENsZWFycyBsaXN0ZW5lcnMgYW5kIHRpbWVycyBhc3NvY2lhdGVkIHdpdGggY3VycmVudCB0cmFuc3BvcnQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jbGVhclRyYW5zcG9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNsZWFudXA7XG5cbiAgdmFyIHRvQ2xlYW5VcCA9IHRoaXMuY2xlYW51cEZuLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRvQ2xlYW5VcDsgaSsrKSB7XG4gICAgY2xlYW51cCA9IHRoaXMuY2xlYW51cEZuLnNoaWZ0KCk7XG4gICAgY2xlYW51cCgpO1xuICB9XG5cbiAgLy8gc2lsZW5jZSBmdXJ0aGVyIHRyYW5zcG9ydCBlcnJvcnMgYW5kIHByZXZlbnQgdW5jYXVnaHQgZXhjZXB0aW9uc1xuICB0aGlzLnRyYW5zcG9ydC5vbignZXJyb3InLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ2Vycm9yIHRyaWdnZXJlZCBieSBkaXNjYXJkZWQgdHJhbnNwb3J0Jyk7XG4gIH0pO1xuXG4gIC8vIGVuc3VyZSB0cmFuc3BvcnQgd29uJ3Qgc3RheSBvcGVuXG4gIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7XG5cbiAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBjb25zaWRlcmVkIGNsb3NlZC5cbiAqIFBvc3NpYmxlIHJlYXNvbnM6IGBwaW5nIHRpbWVvdXRgLCBgY2xpZW50IGVycm9yYCwgYHBhcnNlIGVycm9yYCxcbiAqIGB0cmFuc3BvcnQgZXJyb3JgLCBgc2VydmVyIGNsb3NlYCwgYHRyYW5zcG9ydCBjbG9zZWBcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAocmVhc29uLCBkZXNjcmlwdGlvbikge1xuICBpZiAoJ2Nsb3NlZCcgIT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnBpbmdUaW1lb3V0VGltZXIpO1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5jaGVja0ludGVydmFsVGltZXIpO1xuICAgIHRoaXMuY2hlY2tJbnRlcnZhbFRpbWVyID0gbnVsbDtcbiAgICBjbGVhclRpbWVvdXQodGhpcy51cGdyYWRlVGltZW91dFRpbWVyKTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgLy8gY2xlYW4gd3JpdGVCdWZmZXIgaW4gbmV4dCB0aWNrLCBzbyBkZXZlbG9wZXJzIGNhbiBzdGlsbFxuICAgIC8vIGdyYWIgdGhlIHdyaXRlQnVmZmVyIG9uICdjbG9zZScgZXZlbnRcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYud3JpdGVCdWZmZXIgPSBbXTtcbiAgICB9KTtcbiAgICB0aGlzLnBhY2tldHNGbiA9IFtdO1xuICAgIHRoaXMuc2VudENhbGxiYWNrRm4gPSBbXTtcbiAgICB0aGlzLmNsZWFyVHJhbnNwb3J0KCk7XG4gICAgdGhpcy5lbWl0KCdjbG9zZScsIHJlYXNvbiwgZGVzY3JpcHRpb24pO1xuICB9XG59O1xuXG4vKipcbiAqIFNldHVwIGFuZCBtYW5hZ2Ugc2VuZCBjYWxsYmFja1xuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2V0dXBTZW5kQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy50cmFuc3BvcnQub24oJ2RyYWluJywgb25EcmFpbik7XG5cbiAgdGhpcy5jbGVhbnVwRm4ucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi50cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25EcmFpbik7XG4gIH0pO1xuXG4gIC8vIHRoZSBtZXNzYWdlIHdhcyBzZW50IHN1Y2Nlc3NmdWxseSwgZXhlY3V0ZSB0aGUgY2FsbGJhY2tcbiAgZnVuY3Rpb24gb25EcmFpbiAoKSB7XG4gICAgaWYgKHNlbGYuc2VudENhbGxiYWNrRm4ubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIHNlcUZuID0gc2VsZi5zZW50Q2FsbGJhY2tGbi5zcGxpY2UoMCwgMSlbMF07XG4gICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHNlcUZuKSB7XG4gICAgICAgIGRlYnVnKCdleGVjdXRpbmcgc2VuZCBjYWxsYmFjaycpO1xuICAgICAgICBzZXFGbihzZWxmLnRyYW5zcG9ydCk7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoc2VxRm4pKSB7XG4gICAgICAgIGRlYnVnKCdleGVjdXRpbmcgYmF0Y2ggc2VuZCBjYWxsYmFjaycpO1xuICAgICAgICBmb3IgKHZhciBsID0gc2VxRm4ubGVuZ3RoLCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2Ygc2VxRm5baV0pIHtcbiAgICAgICAgICAgIHNlcUZuW2ldKHNlbGYudHJhbnNwb3J0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogU2VuZHMgYSBtZXNzYWdlIHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtTb2NrZXR9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNlbmQgPVxuU29ja2V0LnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICB0aGlzLnNlbmRQYWNrZXQoJ21lc3NhZ2UnLCBkYXRhLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBhIHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGFja2V0IHR5cGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25hbCwgZGF0YVxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2VuZFBhY2tldCA9IGZ1bmN0aW9uICh0eXBlLCBkYXRhLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIG9wdGlvbnMpIHtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgb3B0aW9ucyA9IG51bGw7XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5jb21wcmVzcyA9IGZhbHNlICE9PSBvcHRpb25zLmNvbXByZXNzO1xuXG4gIGlmICgnY2xvc2luZycgIT09IHRoaXMucmVhZHlTdGF0ZSAmJiAnY2xvc2VkJyAhPT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3NlbmRpbmcgcGFja2V0IFwiJXNcIiAoJXMpJywgdHlwZSwgZGF0YSk7XG5cbiAgICB2YXIgcGFja2V0ID0ge1xuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICB9O1xuICAgIGlmIChkYXRhKSBwYWNrZXQuZGF0YSA9IGRhdGE7XG5cbiAgICAvLyBleHBvcnRzIHBhY2tldENyZWF0ZSBldmVudFxuICAgIHRoaXMuZW1pdCgncGFja2V0Q3JlYXRlJywgcGFja2V0KTtcblxuICAgIHRoaXMud3JpdGVCdWZmZXIucHVzaChwYWNrZXQpO1xuXG4gICAgLy8gYWRkIHNlbmQgY2FsbGJhY2sgdG8gb2JqZWN0LCBpZiBkZWZpbmVkXG4gICAgaWYgKGNhbGxiYWNrKSB0aGlzLnBhY2tldHNGbi5wdXNoKGNhbGxiYWNrKTtcblxuICAgIHRoaXMuZmx1c2goKTtcbiAgfVxufTtcblxuLyoqXG4gKiBBdHRlbXB0cyB0byBmbHVzaCB0aGUgcGFja2V0cyBidWZmZXIuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdjbG9zZWQnICE9PSB0aGlzLnJlYWR5U3RhdGUgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC53cml0YWJsZSAmJlxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgZGVidWcoJ2ZsdXNoaW5nIGJ1ZmZlciB0byB0cmFuc3BvcnQnKTtcbiAgICB0aGlzLmVtaXQoJ2ZsdXNoJywgdGhpcy53cml0ZUJ1ZmZlcik7XG4gICAgdGhpcy5zZXJ2ZXIuZW1pdCgnZmx1c2gnLCB0aGlzLCB0aGlzLndyaXRlQnVmZmVyKTtcbiAgICB2YXIgd2J1ZiA9IHRoaXMud3JpdGVCdWZmZXI7XG4gICAgdGhpcy53cml0ZUJ1ZmZlciA9IFtdO1xuICAgIGlmICghdGhpcy50cmFuc3BvcnQuc3VwcG9ydHNGcmFtaW5nKSB7XG4gICAgICB0aGlzLnNlbnRDYWxsYmFja0ZuLnB1c2godGhpcy5wYWNrZXRzRm4pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlbnRDYWxsYmFja0ZuLnB1c2guYXBwbHkodGhpcy5zZW50Q2FsbGJhY2tGbiwgdGhpcy5wYWNrZXRzRm4pO1xuICAgIH1cbiAgICB0aGlzLnBhY2tldHNGbiA9IFtdO1xuICAgIHRoaXMudHJhbnNwb3J0LnNlbmQod2J1Zik7XG4gICAgdGhpcy5lbWl0KCdkcmFpbicpO1xuICAgIHRoaXMuc2VydmVyLmVtaXQoJ2RyYWluJywgdGhpcyk7XG4gIH1cbn07XG5cbi8qKlxuICogR2V0IGF2YWlsYWJsZSB1cGdyYWRlcyBmb3IgdGhpcyBzb2NrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5nZXRBdmFpbGFibGVVcGdyYWRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGF2YWlsYWJsZVVwZ3JhZGVzID0gW107XG4gIHZhciBhbGxVcGdyYWRlcyA9IHRoaXMuc2VydmVyLnVwZ3JhZGVzKHRoaXMudHJhbnNwb3J0Lm5hbWUpO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGFsbFVwZ3JhZGVzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIHZhciB1cGcgPSBhbGxVcGdyYWRlc1tpXTtcbiAgICBpZiAodGhpcy5zZXJ2ZXIudHJhbnNwb3J0cy5pbmRleE9mKHVwZykgIT09IC0xKSB7XG4gICAgICBhdmFpbGFibGVVcGdyYWRlcy5wdXNoKHVwZyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhdmFpbGFibGVVcGdyYWRlcztcbn07XG5cbi8qKlxuICogQ2xvc2VzIHRoZSBzb2NrZXQgYW5kIHVuZGVybHlpbmcgdHJhbnNwb3J0LlxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9uYWwsIGRpc2NhcmRcbiAqIEByZXR1cm4ge1NvY2tldH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoZGlzY2FyZCkge1xuICBpZiAoJ29wZW4nICE9PSB0aGlzLnJlYWR5U3RhdGUpIHJldHVybjtcblxuICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2luZyc7XG5cbiAgaWYgKHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgdGhpcy5vbmNlKCdkcmFpbicsIHRoaXMuY2xvc2VUcmFuc3BvcnQuYmluZCh0aGlzLCBkaXNjYXJkKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5jbG9zZVRyYW5zcG9ydChkaXNjYXJkKTtcbn07XG5cbi8qKlxuICogQ2xvc2VzIHRoZSB1bmRlcmx5aW5nIHRyYW5zcG9ydC5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2NhcmRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuY2xvc2VUcmFuc3BvcnQgPSBmdW5jdGlvbiAoZGlzY2FyZCkge1xuICBpZiAoZGlzY2FyZCkgdGhpcy50cmFuc3BvcnQuZGlzY2FyZCgpO1xuICB0aGlzLnRyYW5zcG9ydC5jbG9zZSh0aGlzLm9uQ2xvc2UuYmluZCh0aGlzLCAnZm9yY2VkIGNsb3NlJykpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5jb25zdCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG5jb25zdCBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xuY29uc3QgbmV0ID0gcmVxdWlyZSgnbmV0Jyk7XG5jb25zdCB0bHMgPSByZXF1aXJlKCd0bHMnKTtcbmNvbnN0IHsgcmFuZG9tQnl0ZXMsIGNyZWF0ZUhhc2ggfSA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuY29uc3QgeyBVUkwgfSA9IHJlcXVpcmUoJ3VybCcpO1xuXG5jb25zdCBQZXJNZXNzYWdlRGVmbGF0ZSA9IHJlcXVpcmUoJy4vcGVybWVzc2FnZS1kZWZsYXRlJyk7XG5jb25zdCBSZWNlaXZlciA9IHJlcXVpcmUoJy4vcmVjZWl2ZXInKTtcbmNvbnN0IFNlbmRlciA9IHJlcXVpcmUoJy4vc2VuZGVyJyk7XG5jb25zdCB7XG4gIEJJTkFSWV9UWVBFUyxcbiAgRU1QVFlfQlVGRkVSLFxuICBHVUlELFxuICBrU3RhdHVzQ29kZSxcbiAga1dlYlNvY2tldCxcbiAgTk9PUFxufSA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJyk7XG5jb25zdCB7IGFkZEV2ZW50TGlzdGVuZXIsIHJlbW92ZUV2ZW50TGlzdGVuZXIgfSA9IHJlcXVpcmUoJy4vZXZlbnQtdGFyZ2V0Jyk7XG5jb25zdCB7IGZvcm1hdCwgcGFyc2UgfSA9IHJlcXVpcmUoJy4vZXh0ZW5zaW9uJyk7XG5jb25zdCB7IHRvQnVmZmVyIH0gPSByZXF1aXJlKCcuL2J1ZmZlci11dGlsJyk7XG5cbmNvbnN0IHJlYWR5U3RhdGVzID0gWydDT05ORUNUSU5HJywgJ09QRU4nLCAnQ0xPU0lORycsICdDTE9TRUQnXTtcbmNvbnN0IHByb3RvY29sVmVyc2lvbnMgPSBbOCwgMTNdO1xuY29uc3QgY2xvc2VUaW1lb3V0ID0gMzAgKiAxMDAwO1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIFdlYlNvY2tldC5cbiAqXG4gKiBAZXh0ZW5kcyBFdmVudEVtaXR0ZXJcbiAqL1xuY2xhc3MgV2ViU29ja2V0IGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBgV2ViU29ja2V0YC5cbiAgICpcbiAgICogQHBhcmFtIHsoU3RyaW5nfHVybC5VUkwpfSBhZGRyZXNzIFRoZSBVUkwgdG8gd2hpY2ggdG8gY29ubmVjdFxuICAgKiBAcGFyYW0geyhTdHJpbmd8U3RyaW5nW10pfSBwcm90b2NvbHMgVGhlIHN1YnByb3RvY29sc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBDb25uZWN0aW9uIG9wdGlvbnNcbiAgICovXG4gIGNvbnN0cnVjdG9yKGFkZHJlc3MsIHByb3RvY29scywgb3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBXZWJTb2NrZXQuQ09OTkVDVElORztcbiAgICB0aGlzLnByb3RvY29sID0gJyc7XG5cbiAgICB0aGlzLl9iaW5hcnlUeXBlID0gQklOQVJZX1RZUEVTWzBdO1xuICAgIHRoaXMuX2Nsb3NlRnJhbWVSZWNlaXZlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2Nsb3NlRnJhbWVTZW50ID0gZmFsc2U7XG4gICAgdGhpcy5fY2xvc2VNZXNzYWdlID0gJyc7XG4gICAgdGhpcy5fY2xvc2VUaW1lciA9IG51bGw7XG4gICAgdGhpcy5fY2xvc2VDb2RlID0gMTAwNjtcbiAgICB0aGlzLl9leHRlbnNpb25zID0ge307XG4gICAgdGhpcy5fcmVjZWl2ZXIgPSBudWxsO1xuICAgIHRoaXMuX3NlbmRlciA9IG51bGw7XG4gICAgdGhpcy5fc29ja2V0ID0gbnVsbDtcblxuICAgIGlmIChhZGRyZXNzICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl9idWZmZXJlZEFtb3VudCA9IDA7XG4gICAgICB0aGlzLl9pc1NlcnZlciA9IGZhbHNlO1xuICAgICAgdGhpcy5fcmVkaXJlY3RzID0gMDtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvdG9jb2xzKSkge1xuICAgICAgICBwcm90b2NvbHMgPSBwcm90b2NvbHMuam9pbignLCAnKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvY29scyA9PT0gJ29iamVjdCcgJiYgcHJvdG9jb2xzICE9PSBudWxsKSB7XG4gICAgICAgIG9wdGlvbnMgPSBwcm90b2NvbHM7XG4gICAgICAgIHByb3RvY29scyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgaW5pdEFzQ2xpZW50KHRoaXMsIGFkZHJlc3MsIHByb3RvY29scywgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2lzU2VydmVyID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBnZXQgQ09OTkVDVElORygpIHtcbiAgICByZXR1cm4gV2ViU29ja2V0LkNPTk5FQ1RJTkc7XG4gIH1cbiAgZ2V0IENMT1NJTkcoKSB7XG4gICAgcmV0dXJuIFdlYlNvY2tldC5DTE9TSU5HO1xuICB9XG4gIGdldCBDTE9TRUQoKSB7XG4gICAgcmV0dXJuIFdlYlNvY2tldC5DTE9TRUQ7XG4gIH1cbiAgZ2V0IE9QRU4oKSB7XG4gICAgcmV0dXJuIFdlYlNvY2tldC5PUEVOO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZGV2aWF0ZXMgZnJvbSB0aGUgV0hBVFdHIGludGVyZmFjZSBzaW5jZSB3cyBkb2Vzbid0IHN1cHBvcnQgdGhlXG4gICAqIHJlcXVpcmVkIGRlZmF1bHQgXCJibG9iXCIgdHlwZSAoaW5zdGVhZCB3ZSBkZWZpbmUgYSBjdXN0b20gXCJub2RlYnVmZmVyXCJcbiAgICogdHlwZSkuXG4gICAqXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBnZXQgYmluYXJ5VHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYmluYXJ5VHlwZTtcbiAgfVxuXG4gIHNldCBiaW5hcnlUeXBlKHR5cGUpIHtcbiAgICBpZiAoIUJJTkFSWV9UWVBFUy5pbmNsdWRlcyh0eXBlKSkgcmV0dXJuO1xuXG4gICAgdGhpcy5fYmluYXJ5VHlwZSA9IHR5cGU7XG5cbiAgICAvL1xuICAgIC8vIEFsbG93IHRvIGNoYW5nZSBgYmluYXJ5VHlwZWAgb24gdGhlIGZseS5cbiAgICAvL1xuICAgIGlmICh0aGlzLl9yZWNlaXZlcikgdGhpcy5fcmVjZWl2ZXIuX2JpbmFyeVR5cGUgPSB0eXBlO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICBnZXQgYnVmZmVyZWRBbW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLl9zb2NrZXQpIHJldHVybiB0aGlzLl9idWZmZXJlZEFtb3VudDtcblxuICAgIC8vXG4gICAgLy8gYHNvY2tldC5idWZmZXJTaXplYCBpcyBgdW5kZWZpbmVkYCBpZiB0aGUgc29ja2V0IGlzIGNsb3NlZC5cbiAgICAvL1xuICAgIHJldHVybiAodGhpcy5fc29ja2V0LmJ1ZmZlclNpemUgfHwgMCkgKyB0aGlzLl9zZW5kZXIuX2J1ZmZlcmVkQnl0ZXM7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIGdldCBleHRlbnNpb25zKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl9leHRlbnNpb25zKS5qb2luKCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHVwIHRoZSBzb2NrZXQgYW5kIHRoZSBpbnRlcm5hbCByZXNvdXJjZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7bmV0LlNvY2tldH0gc29ja2V0IFRoZSBuZXR3b3JrIHNvY2tldCBiZXR3ZWVuIHRoZSBzZXJ2ZXIgYW5kIGNsaWVudFxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gaGVhZCBUaGUgZmlyc3QgcGFja2V0IG9mIHRoZSB1cGdyYWRlZCBzdHJlYW1cbiAgICogQHBhcmFtIHtOdW1iZXJ9IG1heFBheWxvYWQgVGhlIG1heGltdW0gYWxsb3dlZCBtZXNzYWdlIHNpemVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHNldFNvY2tldChzb2NrZXQsIGhlYWQsIG1heFBheWxvYWQpIHtcbiAgICBjb25zdCByZWNlaXZlciA9IG5ldyBSZWNlaXZlcihcbiAgICAgIHRoaXMuX2JpbmFyeVR5cGUsXG4gICAgICB0aGlzLl9leHRlbnNpb25zLFxuICAgICAgdGhpcy5faXNTZXJ2ZXIsXG4gICAgICBtYXhQYXlsb2FkXG4gICAgKTtcblxuICAgIHRoaXMuX3NlbmRlciA9IG5ldyBTZW5kZXIoc29ja2V0LCB0aGlzLl9leHRlbnNpb25zKTtcbiAgICB0aGlzLl9yZWNlaXZlciA9IHJlY2VpdmVyO1xuICAgIHRoaXMuX3NvY2tldCA9IHNvY2tldDtcblxuICAgIHJlY2VpdmVyW2tXZWJTb2NrZXRdID0gdGhpcztcbiAgICBzb2NrZXRba1dlYlNvY2tldF0gPSB0aGlzO1xuXG4gICAgcmVjZWl2ZXIub24oJ2NvbmNsdWRlJywgcmVjZWl2ZXJPbkNvbmNsdWRlKTtcbiAgICByZWNlaXZlci5vbignZHJhaW4nLCByZWNlaXZlck9uRHJhaW4pO1xuICAgIHJlY2VpdmVyLm9uKCdlcnJvcicsIHJlY2VpdmVyT25FcnJvcik7XG4gICAgcmVjZWl2ZXIub24oJ21lc3NhZ2UnLCByZWNlaXZlck9uTWVzc2FnZSk7XG4gICAgcmVjZWl2ZXIub24oJ3BpbmcnLCByZWNlaXZlck9uUGluZyk7XG4gICAgcmVjZWl2ZXIub24oJ3BvbmcnLCByZWNlaXZlck9uUG9uZyk7XG5cbiAgICBzb2NrZXQuc2V0VGltZW91dCgwKTtcbiAgICBzb2NrZXQuc2V0Tm9EZWxheSgpO1xuXG4gICAgaWYgKGhlYWQubGVuZ3RoID4gMCkgc29ja2V0LnVuc2hpZnQoaGVhZCk7XG5cbiAgICBzb2NrZXQub24oJ2Nsb3NlJywgc29ja2V0T25DbG9zZSk7XG4gICAgc29ja2V0Lm9uKCdkYXRhJywgc29ja2V0T25EYXRhKTtcbiAgICBzb2NrZXQub24oJ2VuZCcsIHNvY2tldE9uRW5kKTtcbiAgICBzb2NrZXQub24oJ2Vycm9yJywgc29ja2V0T25FcnJvcik7XG5cbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBXZWJTb2NrZXQuT1BFTjtcbiAgICB0aGlzLmVtaXQoJ29wZW4nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbWl0IHRoZSBgJ2Nsb3NlJ2AgZXZlbnQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBlbWl0Q2xvc2UoKSB7XG4gICAgaWYgKCF0aGlzLl9zb2NrZXQpIHtcbiAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFdlYlNvY2tldC5DTE9TRUQ7XG4gICAgICB0aGlzLmVtaXQoJ2Nsb3NlJywgdGhpcy5fY2xvc2VDb2RlLCB0aGlzLl9jbG9zZU1lc3NhZ2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9leHRlbnNpb25zW1Blck1lc3NhZ2VEZWZsYXRlLmV4dGVuc2lvbk5hbWVdKSB7XG4gICAgICB0aGlzLl9leHRlbnNpb25zW1Blck1lc3NhZ2VEZWZsYXRlLmV4dGVuc2lvbk5hbWVdLmNsZWFudXAoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9yZWNlaXZlci5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBXZWJTb2NrZXQuQ0xPU0VEO1xuICAgIHRoaXMuZW1pdCgnY2xvc2UnLCB0aGlzLl9jbG9zZUNvZGUsIHRoaXMuX2Nsb3NlTWVzc2FnZSk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgYSBjbG9zaW5nIGhhbmRzaGFrZS5cbiAgICpcbiAgICogICAgICAgICAgKy0tLS0tLS0tLS0rICAgKy0tLS0tLS0tLS0tKyAgICstLS0tLS0tLS0tK1xuICAgKiAgICAgLSAtIC18d3MuY2xvc2UoKXwtLT58Y2xvc2UgZnJhbWV8LS0+fHdzLmNsb3NlKCl8LSAtIC1cbiAgICogICAgfCAgICAgKy0tLS0tLS0tLS0rICAgKy0tLS0tLS0tLS0tKyAgICstLS0tLS0tLS0tKyAgICAgfFxuICAgKiAgICAgICAgICArLS0tLS0tLS0tLSsgICArLS0tLS0tLS0tLS0rICAgICAgICAgfFxuICAgKiBDTE9TSU5HICB8d3MuY2xvc2UoKXw8LS18Y2xvc2UgZnJhbWV8PC0tKy0tLS0tKyAgICAgICBDTE9TSU5HXG4gICAqICAgICAgICAgICstLS0tLS0tLS0tKyAgICstLS0tLS0tLS0tLSsgICB8XG4gICAqICAgIHwgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICB8ICAgKy0tLSsgICAgICAgIHxcbiAgICogICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSstLT58ZmlufCAtIC0gLSAtXG4gICAqICAgIHwgICAgICAgICArLS0tKyAgICAgICAgICAgICAgICAgICAgICB8ICAgKy0tLStcbiAgICogICAgIC0gLSAtIC0gLXxmaW58PC0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAgICogICAgICAgICAgICAgICstLS0rXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlIFN0YXR1cyBjb2RlIGV4cGxhaW5pbmcgd2h5IHRoZSBjb25uZWN0aW9uIGlzIGNsb3NpbmdcbiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgQSBzdHJpbmcgZXhwbGFpbmluZyB3aHkgdGhlIGNvbm5lY3Rpb24gaXMgY2xvc2luZ1xuICAgKiBAcHVibGljXG4gICAqL1xuICBjbG9zZShjb2RlLCBkYXRhKSB7XG4gICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0LkNMT1NFRCkgcmV0dXJuO1xuICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5DT05ORUNUSU5HKSB7XG4gICAgICBjb25zdCBtc2cgPSAnV2ViU29ja2V0IHdhcyBjbG9zZWQgYmVmb3JlIHRoZSBjb25uZWN0aW9uIHdhcyBlc3RhYmxpc2hlZCc7XG4gICAgICByZXR1cm4gYWJvcnRIYW5kc2hha2UodGhpcywgdGhpcy5fcmVxLCBtc2cpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5DTE9TSU5HKSB7XG4gICAgICBpZiAodGhpcy5fY2xvc2VGcmFtZVNlbnQgJiYgdGhpcy5fY2xvc2VGcmFtZVJlY2VpdmVkKSB0aGlzLl9zb2NrZXQuZW5kKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5yZWFkeVN0YXRlID0gV2ViU29ja2V0LkNMT1NJTkc7XG4gICAgdGhpcy5fc2VuZGVyLmNsb3NlKGNvZGUsIGRhdGEsICF0aGlzLl9pc1NlcnZlciwgKGVycikgPT4ge1xuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3IgaXMgaGFuZGxlZCBieSB0aGUgYCdlcnJvcidgIGxpc3RlbmVyIG9uIHRoZSBzb2NrZXQuIFdlIG9ubHlcbiAgICAgIC8vIHdhbnQgdG8ga25vdyBpZiB0aGUgY2xvc2UgZnJhbWUgaGFzIGJlZW4gc2VudCBoZXJlLlxuICAgICAgLy9cbiAgICAgIGlmIChlcnIpIHJldHVybjtcblxuICAgICAgdGhpcy5fY2xvc2VGcmFtZVNlbnQgPSB0cnVlO1xuICAgICAgaWYgKHRoaXMuX2Nsb3NlRnJhbWVSZWNlaXZlZCkgdGhpcy5fc29ja2V0LmVuZCgpO1xuICAgIH0pO1xuXG4gICAgLy9cbiAgICAvLyBTcGVjaWZ5IGEgdGltZW91dCBmb3IgdGhlIGNsb3NpbmcgaGFuZHNoYWtlIHRvIGNvbXBsZXRlLlxuICAgIC8vXG4gICAgdGhpcy5fY2xvc2VUaW1lciA9IHNldFRpbWVvdXQoXG4gICAgICB0aGlzLl9zb2NrZXQuZGVzdHJveS5iaW5kKHRoaXMuX3NvY2tldCksXG4gICAgICBjbG9zZVRpbWVvdXRcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgYSBwaW5nLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIGRhdGEgdG8gc2VuZFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG1hc2sgSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHRvIG1hc2sgYGRhdGFgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIENhbGxiYWNrIHdoaWNoIGlzIGV4ZWN1dGVkIHdoZW4gdGhlIHBpbmcgaXMgc2VudFxuICAgKiBAcHVibGljXG4gICAqL1xuICBwaW5nKGRhdGEsIG1hc2ssIGNiKSB7XG4gICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0LkNPTk5FQ1RJTkcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignV2ViU29ja2V0IGlzIG5vdCBvcGVuOiByZWFkeVN0YXRlIDAgKENPTk5FQ1RJTkcpJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYiA9IGRhdGE7XG4gICAgICBkYXRhID0gbWFzayA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtYXNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYiA9IG1hc2s7XG4gICAgICBtYXNrID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ251bWJlcicpIGRhdGEgPSBkYXRhLnRvU3RyaW5nKCk7XG5cbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlICE9PSBXZWJTb2NrZXQuT1BFTikge1xuICAgICAgc2VuZEFmdGVyQ2xvc2UodGhpcywgZGF0YSwgY2IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChtYXNrID09PSB1bmRlZmluZWQpIG1hc2sgPSAhdGhpcy5faXNTZXJ2ZXI7XG4gICAgdGhpcy5fc2VuZGVyLnBpbmcoZGF0YSB8fCBFTVBUWV9CVUZGRVIsIG1hc2ssIGNiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kIGEgcG9uZy5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBkYXRhIHRvIHNlbmRcbiAgICogQHBhcmFtIHtCb29sZWFufSBtYXNrIEluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCB0byBtYXNrIGBkYXRhYFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiBDYWxsYmFjayB3aGljaCBpcyBleGVjdXRlZCB3aGVuIHRoZSBwb25nIGlzIHNlbnRcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcG9uZyhkYXRhLCBtYXNrLCBjYikge1xuICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5DT05ORUNUSU5HKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dlYlNvY2tldCBpcyBub3Qgb3BlbjogcmVhZHlTdGF0ZSAwIChDT05ORUNUSU5HKScpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2IgPSBkYXRhO1xuICAgICAgZGF0YSA9IG1hc2sgPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbWFzayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2IgPSBtYXNrO1xuICAgICAgbWFzayA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdudW1iZXInKSBkYXRhID0gZGF0YS50b1N0cmluZygpO1xuXG4gICAgaWYgKHRoaXMucmVhZHlTdGF0ZSAhPT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgICAgIHNlbmRBZnRlckNsb3NlKHRoaXMsIGRhdGEsIGNiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobWFzayA9PT0gdW5kZWZpbmVkKSBtYXNrID0gIXRoaXMuX2lzU2VydmVyO1xuICAgIHRoaXMuX3NlbmRlci5wb25nKGRhdGEgfHwgRU1QVFlfQlVGRkVSLCBtYXNrLCBjYik7XG4gIH1cblxuICAvKipcbiAgICogU2VuZCBhIGRhdGEgbWVzc2FnZS5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXNzYWdlIHRvIHNlbmRcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgT3B0aW9ucyBvYmplY3RcbiAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLmNvbXByZXNzIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBjb21wcmVzc1xuICAgKiAgICAgYGRhdGFgXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5iaW5hcnkgU3BlY2lmaWVzIHdoZXRoZXIgYGRhdGFgIGlzIGJpbmFyeSBvciB0ZXh0XG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5maW4gU3BlY2lmaWVzIHdoZXRoZXIgdGhlIGZyYWdtZW50IGlzIHRoZSBsYXN0IG9uZVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMubWFzayBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdG8gbWFzayBgZGF0YWBcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgQ2FsbGJhY2sgd2hpY2ggaXMgZXhlY3V0ZWQgd2hlbiBkYXRhIGlzIHdyaXR0ZW4gb3V0XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHNlbmQoZGF0YSwgb3B0aW9ucywgY2IpIHtcbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuQ09OTkVDVElORykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdXZWJTb2NrZXQgaXMgbm90IG9wZW46IHJlYWR5U3RhdGUgMCAoQ09OTkVDVElORyknKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNiID0gb3B0aW9ucztcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdudW1iZXInKSBkYXRhID0gZGF0YS50b1N0cmluZygpO1xuXG4gICAgaWYgKHRoaXMucmVhZHlTdGF0ZSAhPT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgICAgIHNlbmRBZnRlckNsb3NlKHRoaXMsIGRhdGEsIGNiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBvcHRzID0ge1xuICAgICAgYmluYXJ5OiB0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycsXG4gICAgICBtYXNrOiAhdGhpcy5faXNTZXJ2ZXIsXG4gICAgICBjb21wcmVzczogdHJ1ZSxcbiAgICAgIGZpbjogdHJ1ZSxcbiAgICAgIC4uLm9wdGlvbnNcbiAgICB9O1xuXG4gICAgaWYgKCF0aGlzLl9leHRlbnNpb25zW1Blck1lc3NhZ2VEZWZsYXRlLmV4dGVuc2lvbk5hbWVdKSB7XG4gICAgICBvcHRzLmNvbXByZXNzID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5fc2VuZGVyLnNlbmQoZGF0YSB8fCBFTVBUWV9CVUZGRVIsIG9wdHMsIGNiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JjaWJseSBjbG9zZSB0aGUgY29ubmVjdGlvbi5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdGVybWluYXRlKCkge1xuICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5DTE9TRUQpIHJldHVybjtcbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuQ09OTkVDVElORykge1xuICAgICAgY29uc3QgbXNnID0gJ1dlYlNvY2tldCB3YXMgY2xvc2VkIGJlZm9yZSB0aGUgY29ubmVjdGlvbiB3YXMgZXN0YWJsaXNoZWQnO1xuICAgICAgcmV0dXJuIGFib3J0SGFuZHNoYWtlKHRoaXMsIHRoaXMuX3JlcSwgbXNnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fc29ja2V0KSB7XG4gICAgICB0aGlzLnJlYWR5U3RhdGUgPSBXZWJTb2NrZXQuQ0xPU0lORztcbiAgICAgIHRoaXMuX3NvY2tldC5kZXN0cm95KCk7XG4gICAgfVxuICB9XG59XG5cbnJlYWR5U3RhdGVzLmZvckVhY2goKHJlYWR5U3RhdGUsIGkpID0+IHtcbiAgV2ViU29ja2V0W3JlYWR5U3RhdGVdID0gaTtcbn0pO1xuXG4vL1xuLy8gQWRkIHRoZSBgb25vcGVuYCwgYG9uZXJyb3JgLCBgb25jbG9zZWAsIGFuZCBgb25tZXNzYWdlYCBhdHRyaWJ1dGVzLlxuLy8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2NvbW1zLmh0bWwjdGhlLXdlYnNvY2tldC1pbnRlcmZhY2Vcbi8vXG5bJ29wZW4nLCAnZXJyb3InLCAnY2xvc2UnLCAnbWVzc2FnZSddLmZvckVhY2goKG1ldGhvZCkgPT4ge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV2ViU29ja2V0LnByb3RvdHlwZSwgYG9uJHttZXRob2R9YCwge1xuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgbGlzdGVuZXIgb2YgdGhlIGV2ZW50LlxuICAgICAqXG4gICAgICogQHJldHVybiB7KEZ1bmN0aW9ufHVuZGVmaW5lZCl9IFRoZSBldmVudCBsaXN0ZW5lciBvciBgdW5kZWZpbmVkYFxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBnZXQoKSB7XG4gICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycyhtZXRob2QpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGxpc3RlbmVyc1tpXS5fbGlzdGVuZXIpIHJldHVybiBsaXN0ZW5lcnNbaV0uX2xpc3RlbmVyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQWRkIGEgbGlzdGVuZXIgZm9yIHRoZSBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB0byBhZGRcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc2V0KGxpc3RlbmVyKSB7XG4gICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycyhtZXRob2QpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gUmVtb3ZlIG9ubHkgdGhlIGxpc3RlbmVycyBhZGRlZCB2aWEgYGFkZEV2ZW50TGlzdGVuZXJgLlxuICAgICAgICAvL1xuICAgICAgICBpZiAobGlzdGVuZXJzW2ldLl9saXN0ZW5lcikgdGhpcy5yZW1vdmVMaXN0ZW5lcihtZXRob2QsIGxpc3RlbmVyc1tpXSk7XG4gICAgICB9XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIobWV0aG9kLCBsaXN0ZW5lcik7XG4gICAgfVxuICB9KTtcbn0pO1xuXG5XZWJTb2NrZXQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBhZGRFdmVudExpc3RlbmVyO1xuV2ViU29ja2V0LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gcmVtb3ZlRXZlbnRMaXN0ZW5lcjtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWJTb2NrZXQ7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBhIFdlYlNvY2tldCBjbGllbnQuXG4gKlxuICogQHBhcmFtIHtXZWJTb2NrZXR9IHdlYnNvY2tldCBUaGUgY2xpZW50IHRvIGluaXRpYWxpemVcbiAqIEBwYXJhbSB7KFN0cmluZ3x1cmwuVVJMKX0gYWRkcmVzcyBUaGUgVVJMIHRvIHdoaWNoIHRvIGNvbm5lY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm90b2NvbHMgVGhlIHN1YnByb3RvY29sc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQ29ubmVjdGlvbiBvcHRpb25zXG4gKiBAcGFyYW0geyhCb29sZWFufE9iamVjdCl9IG9wdGlvbnMucGVyTWVzc2FnZURlZmxhdGUgRW5hYmxlL2Rpc2FibGVcbiAqICAgICBwZXJtZXNzYWdlLWRlZmxhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmhhbmRzaGFrZVRpbWVvdXQgVGltZW91dCBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZVxuICogICAgIGhhbmRzaGFrZSByZXF1ZXN0XG4gKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5wcm90b2NvbFZlcnNpb24gVmFsdWUgb2YgdGhlIGBTZWMtV2ViU29ja2V0LVZlcnNpb25gXG4gKiAgICAgaGVhZGVyXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy5vcmlnaW4gVmFsdWUgb2YgdGhlIGBPcmlnaW5gIG9yXG4gKiAgICAgYFNlYy1XZWJTb2NrZXQtT3JpZ2luYCBoZWFkZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLm1heFBheWxvYWQgVGhlIG1heGltdW0gYWxsb3dlZCBtZXNzYWdlIHNpemVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5mb2xsb3dSZWRpcmVjdHMgV2hldGhlciBvciBub3QgdG8gZm9sbG93IHJlZGlyZWN0c1xuICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMubWF4UmVkaXJlY3RzIFRoZSBtYXhpbXVtIG51bWJlciBvZiByZWRpcmVjdHMgYWxsb3dlZFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaW5pdEFzQ2xpZW50KHdlYnNvY2tldCwgYWRkcmVzcywgcHJvdG9jb2xzLCBvcHRpb25zKSB7XG4gIGNvbnN0IG9wdHMgPSB7XG4gICAgcHJvdG9jb2xWZXJzaW9uOiBwcm90b2NvbFZlcnNpb25zWzFdLFxuICAgIG1heFBheWxvYWQ6IDEwMCAqIDEwMjQgKiAxMDI0LFxuICAgIHBlck1lc3NhZ2VEZWZsYXRlOiB0cnVlLFxuICAgIGZvbGxvd1JlZGlyZWN0czogZmFsc2UsXG4gICAgbWF4UmVkaXJlY3RzOiAxMCxcbiAgICAuLi5vcHRpb25zLFxuICAgIGNyZWF0ZUNvbm5lY3Rpb246IHVuZGVmaW5lZCxcbiAgICBzb2NrZXRQYXRoOiB1bmRlZmluZWQsXG4gICAgaG9zdG5hbWU6IHVuZGVmaW5lZCxcbiAgICBwcm90b2NvbDogdW5kZWZpbmVkLFxuICAgIHRpbWVvdXQ6IHVuZGVmaW5lZCxcbiAgICBtZXRob2Q6IHVuZGVmaW5lZCxcbiAgICBhdXRoOiB1bmRlZmluZWQsXG4gICAgaG9zdDogdW5kZWZpbmVkLFxuICAgIHBhdGg6IHVuZGVmaW5lZCxcbiAgICBwb3J0OiB1bmRlZmluZWRcbiAgfTtcblxuICBpZiAoIXByb3RvY29sVmVyc2lvbnMuaW5jbHVkZXMob3B0cy5wcm90b2NvbFZlcnNpb24pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICBgVW5zdXBwb3J0ZWQgcHJvdG9jb2wgdmVyc2lvbjogJHtvcHRzLnByb3RvY29sVmVyc2lvbn0gYCArXG4gICAgICAgIGAoc3VwcG9ydGVkIHZlcnNpb25zOiAke3Byb3RvY29sVmVyc2lvbnMuam9pbignLCAnKX0pYFxuICAgICk7XG4gIH1cblxuICBsZXQgcGFyc2VkVXJsO1xuXG4gIGlmIChhZGRyZXNzIGluc3RhbmNlb2YgVVJMKSB7XG4gICAgcGFyc2VkVXJsID0gYWRkcmVzcztcbiAgICB3ZWJzb2NrZXQudXJsID0gYWRkcmVzcy5ocmVmO1xuICB9IGVsc2Uge1xuICAgIHBhcnNlZFVybCA9IG5ldyBVUkwoYWRkcmVzcyk7XG4gICAgd2Vic29ja2V0LnVybCA9IGFkZHJlc3M7XG4gIH1cblxuICBjb25zdCBpc1VuaXhTb2NrZXQgPSBwYXJzZWRVcmwucHJvdG9jb2wgPT09ICd3cyt1bml4Oic7XG5cbiAgaWYgKCFwYXJzZWRVcmwuaG9zdCAmJiAoIWlzVW5peFNvY2tldCB8fCAhcGFyc2VkVXJsLnBhdGhuYW1lKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBVUkw6ICR7d2Vic29ja2V0LnVybH1gKTtcbiAgfVxuXG4gIGNvbnN0IGlzU2VjdXJlID1cbiAgICBwYXJzZWRVcmwucHJvdG9jb2wgPT09ICd3c3M6JyB8fCBwYXJzZWRVcmwucHJvdG9jb2wgPT09ICdodHRwczonO1xuICBjb25zdCBkZWZhdWx0UG9ydCA9IGlzU2VjdXJlID8gNDQzIDogODA7XG4gIGNvbnN0IGtleSA9IHJhbmRvbUJ5dGVzKDE2KS50b1N0cmluZygnYmFzZTY0Jyk7XG4gIGNvbnN0IGdldCA9IGlzU2VjdXJlID8gaHR0cHMuZ2V0IDogaHR0cC5nZXQ7XG4gIGxldCBwZXJNZXNzYWdlRGVmbGF0ZTtcblxuICBvcHRzLmNyZWF0ZUNvbm5lY3Rpb24gPSBpc1NlY3VyZSA/IHRsc0Nvbm5lY3QgOiBuZXRDb25uZWN0O1xuICBvcHRzLmRlZmF1bHRQb3J0ID0gb3B0cy5kZWZhdWx0UG9ydCB8fCBkZWZhdWx0UG9ydDtcbiAgb3B0cy5wb3J0ID0gcGFyc2VkVXJsLnBvcnQgfHwgZGVmYXVsdFBvcnQ7XG4gIG9wdHMuaG9zdCA9IHBhcnNlZFVybC5ob3N0bmFtZS5zdGFydHNXaXRoKCdbJylcbiAgICA/IHBhcnNlZFVybC5ob3N0bmFtZS5zbGljZSgxLCAtMSlcbiAgICA6IHBhcnNlZFVybC5ob3N0bmFtZTtcbiAgb3B0cy5oZWFkZXJzID0ge1xuICAgICdTZWMtV2ViU29ja2V0LVZlcnNpb24nOiBvcHRzLnByb3RvY29sVmVyc2lvbixcbiAgICAnU2VjLVdlYlNvY2tldC1LZXknOiBrZXksXG4gICAgQ29ubmVjdGlvbjogJ1VwZ3JhZGUnLFxuICAgIFVwZ3JhZGU6ICd3ZWJzb2NrZXQnLFxuICAgIC4uLm9wdHMuaGVhZGVyc1xuICB9O1xuICBvcHRzLnBhdGggPSBwYXJzZWRVcmwucGF0aG5hbWUgKyBwYXJzZWRVcmwuc2VhcmNoO1xuICBvcHRzLnRpbWVvdXQgPSBvcHRzLmhhbmRzaGFrZVRpbWVvdXQ7XG5cbiAgaWYgKG9wdHMucGVyTWVzc2FnZURlZmxhdGUpIHtcbiAgICBwZXJNZXNzYWdlRGVmbGF0ZSA9IG5ldyBQZXJNZXNzYWdlRGVmbGF0ZShcbiAgICAgIG9wdHMucGVyTWVzc2FnZURlZmxhdGUgIT09IHRydWUgPyBvcHRzLnBlck1lc3NhZ2VEZWZsYXRlIDoge30sXG4gICAgICBmYWxzZSxcbiAgICAgIG9wdHMubWF4UGF5bG9hZFxuICAgICk7XG4gICAgb3B0cy5oZWFkZXJzWydTZWMtV2ViU29ja2V0LUV4dGVuc2lvbnMnXSA9IGZvcm1hdCh7XG4gICAgICBbUGVyTWVzc2FnZURlZmxhdGUuZXh0ZW5zaW9uTmFtZV06IHBlck1lc3NhZ2VEZWZsYXRlLm9mZmVyKClcbiAgICB9KTtcbiAgfVxuICBpZiAocHJvdG9jb2xzKSB7XG4gICAgb3B0cy5oZWFkZXJzWydTZWMtV2ViU29ja2V0LVByb3RvY29sJ10gPSBwcm90b2NvbHM7XG4gIH1cbiAgaWYgKG9wdHMub3JpZ2luKSB7XG4gICAgaWYgKG9wdHMucHJvdG9jb2xWZXJzaW9uIDwgMTMpIHtcbiAgICAgIG9wdHMuaGVhZGVyc1snU2VjLVdlYlNvY2tldC1PcmlnaW4nXSA9IG9wdHMub3JpZ2luO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRzLmhlYWRlcnMuT3JpZ2luID0gb3B0cy5vcmlnaW47XG4gICAgfVxuICB9XG4gIGlmIChwYXJzZWRVcmwudXNlcm5hbWUgfHwgcGFyc2VkVXJsLnBhc3N3b3JkKSB7XG4gICAgb3B0cy5hdXRoID0gYCR7cGFyc2VkVXJsLnVzZXJuYW1lfToke3BhcnNlZFVybC5wYXNzd29yZH1gO1xuICB9XG5cbiAgaWYgKGlzVW5peFNvY2tldCkge1xuICAgIGNvbnN0IHBhcnRzID0gb3B0cy5wYXRoLnNwbGl0KCc6Jyk7XG5cbiAgICBvcHRzLnNvY2tldFBhdGggPSBwYXJ0c1swXTtcbiAgICBvcHRzLnBhdGggPSBwYXJ0c1sxXTtcbiAgfVxuXG4gIGxldCByZXEgPSAod2Vic29ja2V0Ll9yZXEgPSBnZXQob3B0cykpO1xuXG4gIGlmIChvcHRzLnRpbWVvdXQpIHtcbiAgICByZXEub24oJ3RpbWVvdXQnLCAoKSA9PiB7XG4gICAgICBhYm9ydEhhbmRzaGFrZSh3ZWJzb2NrZXQsIHJlcSwgJ09wZW5pbmcgaGFuZHNoYWtlIGhhcyB0aW1lZCBvdXQnKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlcS5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgaWYgKHdlYnNvY2tldC5fcmVxLmFib3J0ZWQpIHJldHVybjtcblxuICAgIHJlcSA9IHdlYnNvY2tldC5fcmVxID0gbnVsbDtcbiAgICB3ZWJzb2NrZXQucmVhZHlTdGF0ZSA9IFdlYlNvY2tldC5DTE9TSU5HO1xuICAgIHdlYnNvY2tldC5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgd2Vic29ja2V0LmVtaXRDbG9zZSgpO1xuICB9KTtcblxuICByZXEub24oJ3Jlc3BvbnNlJywgKHJlcykgPT4ge1xuICAgIGNvbnN0IGxvY2F0aW9uID0gcmVzLmhlYWRlcnMubG9jYXRpb247XG4gICAgY29uc3Qgc3RhdHVzQ29kZSA9IHJlcy5zdGF0dXNDb2RlO1xuXG4gICAgaWYgKFxuICAgICAgbG9jYXRpb24gJiZcbiAgICAgIG9wdHMuZm9sbG93UmVkaXJlY3RzICYmXG4gICAgICBzdGF0dXNDb2RlID49IDMwMCAmJlxuICAgICAgc3RhdHVzQ29kZSA8IDQwMFxuICAgICkge1xuICAgICAgaWYgKCsrd2Vic29ja2V0Ll9yZWRpcmVjdHMgPiBvcHRzLm1heFJlZGlyZWN0cykge1xuICAgICAgICBhYm9ydEhhbmRzaGFrZSh3ZWJzb2NrZXQsIHJlcSwgJ01heGltdW0gcmVkaXJlY3RzIGV4Y2VlZGVkJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVxLmFib3J0KCk7XG5cbiAgICAgIGNvbnN0IGFkZHIgPSBuZXcgVVJMKGxvY2F0aW9uLCBhZGRyZXNzKTtcblxuICAgICAgaW5pdEFzQ2xpZW50KHdlYnNvY2tldCwgYWRkciwgcHJvdG9jb2xzLCBvcHRpb25zKTtcbiAgICB9IGVsc2UgaWYgKCF3ZWJzb2NrZXQuZW1pdCgndW5leHBlY3RlZC1yZXNwb25zZScsIHJlcSwgcmVzKSkge1xuICAgICAgYWJvcnRIYW5kc2hha2UoXG4gICAgICAgIHdlYnNvY2tldCxcbiAgICAgICAgcmVxLFxuICAgICAgICBgVW5leHBlY3RlZCBzZXJ2ZXIgcmVzcG9uc2U6ICR7cmVzLnN0YXR1c0NvZGV9YFxuICAgICAgKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJlcS5vbigndXBncmFkZScsIChyZXMsIHNvY2tldCwgaGVhZCkgPT4ge1xuICAgIHdlYnNvY2tldC5lbWl0KCd1cGdyYWRlJywgcmVzKTtcblxuICAgIC8vXG4gICAgLy8gVGhlIHVzZXIgbWF5IGhhdmUgY2xvc2VkIHRoZSBjb25uZWN0aW9uIGZyb20gYSBsaXN0ZW5lciBvZiB0aGUgYHVwZ3JhZGVgXG4gICAgLy8gZXZlbnQuXG4gICAgLy9cbiAgICBpZiAod2Vic29ja2V0LnJlYWR5U3RhdGUgIT09IFdlYlNvY2tldC5DT05ORUNUSU5HKSByZXR1cm47XG5cbiAgICByZXEgPSB3ZWJzb2NrZXQuX3JlcSA9IG51bGw7XG5cbiAgICBjb25zdCBkaWdlc3QgPSBjcmVhdGVIYXNoKCdzaGExJylcbiAgICAgIC51cGRhdGUoa2V5ICsgR1VJRClcbiAgICAgIC5kaWdlc3QoJ2Jhc2U2NCcpO1xuXG4gICAgaWYgKHJlcy5oZWFkZXJzWydzZWMtd2Vic29ja2V0LWFjY2VwdCddICE9PSBkaWdlc3QpIHtcbiAgICAgIGFib3J0SGFuZHNoYWtlKHdlYnNvY2tldCwgc29ja2V0LCAnSW52YWxpZCBTZWMtV2ViU29ja2V0LUFjY2VwdCBoZWFkZXInKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzZXJ2ZXJQcm90ID0gcmVzLmhlYWRlcnNbJ3NlYy13ZWJzb2NrZXQtcHJvdG9jb2wnXTtcbiAgICBjb25zdCBwcm90TGlzdCA9IChwcm90b2NvbHMgfHwgJycpLnNwbGl0KC8sICovKTtcbiAgICBsZXQgcHJvdEVycm9yO1xuXG4gICAgaWYgKCFwcm90b2NvbHMgJiYgc2VydmVyUHJvdCkge1xuICAgICAgcHJvdEVycm9yID0gJ1NlcnZlciBzZW50IGEgc3VicHJvdG9jb2wgYnV0IG5vbmUgd2FzIHJlcXVlc3RlZCc7XG4gICAgfSBlbHNlIGlmIChwcm90b2NvbHMgJiYgIXNlcnZlclByb3QpIHtcbiAgICAgIHByb3RFcnJvciA9ICdTZXJ2ZXIgc2VudCBubyBzdWJwcm90b2NvbCc7XG4gICAgfSBlbHNlIGlmIChzZXJ2ZXJQcm90ICYmICFwcm90TGlzdC5pbmNsdWRlcyhzZXJ2ZXJQcm90KSkge1xuICAgICAgcHJvdEVycm9yID0gJ1NlcnZlciBzZW50IGFuIGludmFsaWQgc3VicHJvdG9jb2wnO1xuICAgIH1cblxuICAgIGlmIChwcm90RXJyb3IpIHtcbiAgICAgIGFib3J0SGFuZHNoYWtlKHdlYnNvY2tldCwgc29ja2V0LCBwcm90RXJyb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzZXJ2ZXJQcm90KSB3ZWJzb2NrZXQucHJvdG9jb2wgPSBzZXJ2ZXJQcm90O1xuXG4gICAgaWYgKHBlck1lc3NhZ2VEZWZsYXRlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBleHRlbnNpb25zID0gcGFyc2UocmVzLmhlYWRlcnNbJ3NlYy13ZWJzb2NrZXQtZXh0ZW5zaW9ucyddKTtcblxuICAgICAgICBpZiAoZXh0ZW5zaW9uc1tQZXJNZXNzYWdlRGVmbGF0ZS5leHRlbnNpb25OYW1lXSkge1xuICAgICAgICAgIHBlck1lc3NhZ2VEZWZsYXRlLmFjY2VwdChleHRlbnNpb25zW1Blck1lc3NhZ2VEZWZsYXRlLmV4dGVuc2lvbk5hbWVdKTtcbiAgICAgICAgICB3ZWJzb2NrZXQuX2V4dGVuc2lvbnNbXG4gICAgICAgICAgICBQZXJNZXNzYWdlRGVmbGF0ZS5leHRlbnNpb25OYW1lXG4gICAgICAgICAgXSA9IHBlck1lc3NhZ2VEZWZsYXRlO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgYWJvcnRIYW5kc2hha2UoXG4gICAgICAgICAgd2Vic29ja2V0LFxuICAgICAgICAgIHNvY2tldCxcbiAgICAgICAgICAnSW52YWxpZCBTZWMtV2ViU29ja2V0LUV4dGVuc2lvbnMgaGVhZGVyJ1xuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgd2Vic29ja2V0LnNldFNvY2tldChzb2NrZXQsIGhlYWQsIG9wdHMubWF4UGF5bG9hZCk7XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGBuZXQuU29ja2V0YCBhbmQgaW5pdGlhdGUgYSBjb25uZWN0aW9uLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIENvbm5lY3Rpb24gb3B0aW9uc1xuICogQHJldHVybiB7bmV0LlNvY2tldH0gVGhlIG5ld2x5IGNyZWF0ZWQgc29ja2V0IHVzZWQgdG8gc3RhcnQgdGhlIGNvbm5lY3Rpb25cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG5ldENvbm5lY3Qob3B0aW9ucykge1xuICBvcHRpb25zLnBhdGggPSBvcHRpb25zLnNvY2tldFBhdGg7XG4gIHJldHVybiBuZXQuY29ubmVjdChvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBgdGxzLlRMU1NvY2tldGAgYW5kIGluaXRpYXRlIGEgY29ubmVjdGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBDb25uZWN0aW9uIG9wdGlvbnNcbiAqIEByZXR1cm4ge3Rscy5UTFNTb2NrZXR9IFRoZSBuZXdseSBjcmVhdGVkIHNvY2tldCB1c2VkIHRvIHN0YXJ0IHRoZSBjb25uZWN0aW9uXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB0bHNDb25uZWN0KG9wdGlvbnMpIHtcbiAgb3B0aW9ucy5wYXRoID0gdW5kZWZpbmVkO1xuXG4gIGlmICghb3B0aW9ucy5zZXJ2ZXJuYW1lICYmIG9wdGlvbnMuc2VydmVybmFtZSAhPT0gJycpIHtcbiAgICBvcHRpb25zLnNlcnZlcm5hbWUgPSBvcHRpb25zLmhvc3Q7XG4gIH1cblxuICByZXR1cm4gdGxzLmNvbm5lY3Qob3B0aW9ucyk7XG59XG5cbi8qKlxuICogQWJvcnQgdGhlIGhhbmRzaGFrZSBhbmQgZW1pdCBhbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0ge1dlYlNvY2tldH0gd2Vic29ja2V0IFRoZSBXZWJTb2NrZXQgaW5zdGFuY2VcbiAqIEBwYXJhbSB7KGh0dHAuQ2xpZW50UmVxdWVzdHxuZXQuU29ja2V0KX0gc3RyZWFtIFRoZSByZXF1ZXN0IHRvIGFib3J0IG9yIHRoZVxuICogICAgIHNvY2tldCB0byBkZXN0cm95XG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYWJvcnRIYW5kc2hha2Uod2Vic29ja2V0LCBzdHJlYW0sIG1lc3NhZ2UpIHtcbiAgd2Vic29ja2V0LnJlYWR5U3RhdGUgPSBXZWJTb2NrZXQuQ0xPU0lORztcblxuICBjb25zdCBlcnIgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGVyciwgYWJvcnRIYW5kc2hha2UpO1xuXG4gIGlmIChzdHJlYW0uc2V0SGVhZGVyKSB7XG4gICAgc3RyZWFtLmFib3J0KCk7XG4gICAgc3RyZWFtLm9uY2UoJ2Fib3J0Jywgd2Vic29ja2V0LmVtaXRDbG9zZS5iaW5kKHdlYnNvY2tldCkpO1xuICAgIHdlYnNvY2tldC5lbWl0KCdlcnJvcicsIGVycik7XG4gIH0gZWxzZSB7XG4gICAgc3RyZWFtLmRlc3Ryb3koZXJyKTtcbiAgICBzdHJlYW0ub25jZSgnZXJyb3InLCB3ZWJzb2NrZXQuZW1pdC5iaW5kKHdlYnNvY2tldCwgJ2Vycm9yJykpO1xuICAgIHN0cmVhbS5vbmNlKCdjbG9zZScsIHdlYnNvY2tldC5lbWl0Q2xvc2UuYmluZCh3ZWJzb2NrZXQpKTtcbiAgfVxufVxuXG4vKipcbiAqIEhhbmRsZSBjYXNlcyB3aGVyZSB0aGUgYHBpbmcoKWAsIGBwb25nKClgLCBvciBgc2VuZCgpYCBtZXRob2RzIGFyZSBjYWxsZWRcbiAqIHdoZW4gdGhlIGByZWFkeVN0YXRlYCBhdHRyaWJ1dGUgaXMgYENMT1NJTkdgIG9yIGBDTE9TRURgLlxuICpcbiAqIEBwYXJhbSB7V2ViU29ja2V0fSB3ZWJzb2NrZXQgVGhlIFdlYlNvY2tldCBpbnN0YW5jZVxuICogQHBhcmFtIHsqfSBkYXRhIFRoZSBkYXRhIHRvIHNlbmRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIENhbGxiYWNrXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZW5kQWZ0ZXJDbG9zZSh3ZWJzb2NrZXQsIGRhdGEsIGNiKSB7XG4gIGlmIChkYXRhKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gdG9CdWZmZXIoZGF0YSkubGVuZ3RoO1xuXG4gICAgLy9cbiAgICAvLyBUaGUgYF9idWZmZXJlZEFtb3VudGAgcHJvcGVydHkgaXMgdXNlZCBvbmx5IHdoZW4gdGhlIHBlZXIgaXMgYSBjbGllbnQgYW5kXG4gICAgLy8gdGhlIG9wZW5pbmcgaGFuZHNoYWtlIGZhaWxzLiBVbmRlciB0aGVzZSBjaXJjdW1zdGFuY2VzLCBpbiBmYWN0LCB0aGVcbiAgICAvLyBgc2V0U29ja2V0KClgIG1ldGhvZCBpcyBub3QgY2FsbGVkLCBzbyB0aGUgYF9zb2NrZXRgIGFuZCBgX3NlbmRlcmBcbiAgICAvLyBwcm9wZXJ0aWVzIGFyZSBzZXQgdG8gYG51bGxgLlxuICAgIC8vXG4gICAgaWYgKHdlYnNvY2tldC5fc29ja2V0KSB3ZWJzb2NrZXQuX3NlbmRlci5fYnVmZmVyZWRCeXRlcyArPSBsZW5ndGg7XG4gICAgZWxzZSB3ZWJzb2NrZXQuX2J1ZmZlcmVkQW1vdW50ICs9IGxlbmd0aDtcbiAgfVxuXG4gIGlmIChjYikge1xuICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihcbiAgICAgIGBXZWJTb2NrZXQgaXMgbm90IG9wZW46IHJlYWR5U3RhdGUgJHt3ZWJzb2NrZXQucmVhZHlTdGF0ZX0gYCArXG4gICAgICAgIGAoJHtyZWFkeVN0YXRlc1t3ZWJzb2NrZXQucmVhZHlTdGF0ZV19KWBcbiAgICApO1xuICAgIGNiKGVycik7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgbGlzdGVuZXIgb2YgdGhlIGBSZWNlaXZlcmAgYCdjb25jbHVkZSdgIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlIFRoZSBzdGF0dXMgY29kZVxuICogQHBhcmFtIHtTdHJpbmd9IHJlYXNvbiBUaGUgcmVhc29uIGZvciBjbG9zaW5nXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZWNlaXZlck9uQ29uY2x1ZGUoY29kZSwgcmVhc29uKSB7XG4gIGNvbnN0IHdlYnNvY2tldCA9IHRoaXNba1dlYlNvY2tldF07XG5cbiAgd2Vic29ja2V0Ll9zb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBzb2NrZXRPbkRhdGEpO1xuICB3ZWJzb2NrZXQuX3NvY2tldC5yZXN1bWUoKTtcblxuICB3ZWJzb2NrZXQuX2Nsb3NlRnJhbWVSZWNlaXZlZCA9IHRydWU7XG4gIHdlYnNvY2tldC5fY2xvc2VNZXNzYWdlID0gcmVhc29uO1xuICB3ZWJzb2NrZXQuX2Nsb3NlQ29kZSA9IGNvZGU7XG5cbiAgaWYgKGNvZGUgPT09IDEwMDUpIHdlYnNvY2tldC5jbG9zZSgpO1xuICBlbHNlIHdlYnNvY2tldC5jbG9zZShjb2RlLCByZWFzb24pO1xufVxuXG4vKipcbiAqIFRoZSBsaXN0ZW5lciBvZiB0aGUgYFJlY2VpdmVyYCBgJ2RyYWluJ2AgZXZlbnQuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVjZWl2ZXJPbkRyYWluKCkge1xuICB0aGlzW2tXZWJTb2NrZXRdLl9zb2NrZXQucmVzdW1lKCk7XG59XG5cbi8qKlxuICogVGhlIGxpc3RlbmVyIG9mIHRoZSBgUmVjZWl2ZXJgIGAnZXJyb3InYCBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhSYW5nZUVycm9yfEVycm9yKX0gZXJyIFRoZSBlbWl0dGVkIGVycm9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZWNlaXZlck9uRXJyb3IoZXJyKSB7XG4gIGNvbnN0IHdlYnNvY2tldCA9IHRoaXNba1dlYlNvY2tldF07XG5cbiAgd2Vic29ja2V0Ll9zb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBzb2NrZXRPbkRhdGEpO1xuXG4gIHdlYnNvY2tldC5yZWFkeVN0YXRlID0gV2ViU29ja2V0LkNMT1NJTkc7XG4gIHdlYnNvY2tldC5fY2xvc2VDb2RlID0gZXJyW2tTdGF0dXNDb2RlXTtcbiAgd2Vic29ja2V0LmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgd2Vic29ja2V0Ll9zb2NrZXQuZGVzdHJveSgpO1xufVxuXG4vKipcbiAqIFRoZSBsaXN0ZW5lciBvZiB0aGUgYFJlY2VpdmVyYCBgJ2ZpbmlzaCdgIGV2ZW50LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlY2VpdmVyT25GaW5pc2goKSB7XG4gIHRoaXNba1dlYlNvY2tldF0uZW1pdENsb3NlKCk7XG59XG5cbi8qKlxuICogVGhlIGxpc3RlbmVyIG9mIHRoZSBgUmVjZWl2ZXJgIGAnbWVzc2FnZSdgIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xCdWZmZXJ8QXJyYXlCdWZmZXJ8QnVmZmVyW10pfSBkYXRhIFRoZSBtZXNzYWdlXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZWNlaXZlck9uTWVzc2FnZShkYXRhKSB7XG4gIHRoaXNba1dlYlNvY2tldF0uZW1pdCgnbWVzc2FnZScsIGRhdGEpO1xufVxuXG4vKipcbiAqIFRoZSBsaXN0ZW5lciBvZiB0aGUgYFJlY2VpdmVyYCBgJ3BpbmcnYCBldmVudC5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcn0gZGF0YSBUaGUgZGF0YSBpbmNsdWRlZCBpbiB0aGUgcGluZyBmcmFtZVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVjZWl2ZXJPblBpbmcoZGF0YSkge1xuICBjb25zdCB3ZWJzb2NrZXQgPSB0aGlzW2tXZWJTb2NrZXRdO1xuXG4gIHdlYnNvY2tldC5wb25nKGRhdGEsICF3ZWJzb2NrZXQuX2lzU2VydmVyLCBOT09QKTtcbiAgd2Vic29ja2V0LmVtaXQoJ3BpbmcnLCBkYXRhKTtcbn1cblxuLyoqXG4gKiBUaGUgbGlzdGVuZXIgb2YgdGhlIGBSZWNlaXZlcmAgYCdwb25nJ2AgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGRhdGEgVGhlIGRhdGEgaW5jbHVkZWQgaW4gdGhlIHBvbmcgZnJhbWVcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlY2VpdmVyT25Qb25nKGRhdGEpIHtcbiAgdGhpc1trV2ViU29ja2V0XS5lbWl0KCdwb25nJywgZGF0YSk7XG59XG5cbi8qKlxuICogVGhlIGxpc3RlbmVyIG9mIHRoZSBgbmV0LlNvY2tldGAgYCdjbG9zZSdgIGV2ZW50LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNvY2tldE9uQ2xvc2UoKSB7XG4gIGNvbnN0IHdlYnNvY2tldCA9IHRoaXNba1dlYlNvY2tldF07XG5cbiAgdGhpcy5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBzb2NrZXRPbkNsb3NlKTtcbiAgdGhpcy5yZW1vdmVMaXN0ZW5lcignZW5kJywgc29ja2V0T25FbmQpO1xuXG4gIHdlYnNvY2tldC5yZWFkeVN0YXRlID0gV2ViU29ja2V0LkNMT1NJTkc7XG5cbiAgLy9cbiAgLy8gVGhlIGNsb3NlIGZyYW1lIG1pZ2h0IG5vdCBoYXZlIGJlZW4gcmVjZWl2ZWQgb3IgdGhlIGAnZW5kJ2AgZXZlbnQgZW1pdHRlZCxcbiAgLy8gZm9yIGV4YW1wbGUsIGlmIHRoZSBzb2NrZXQgd2FzIGRlc3Ryb3llZCBkdWUgdG8gYW4gZXJyb3IuIEVuc3VyZSB0aGF0IHRoZVxuICAvLyBgcmVjZWl2ZXJgIHN0cmVhbSBpcyBjbG9zZWQgYWZ0ZXIgd3JpdGluZyBhbnkgcmVtYWluaW5nIGJ1ZmZlcmVkIGRhdGEgdG9cbiAgLy8gaXQuIElmIHRoZSByZWFkYWJsZSBzaWRlIG9mIHRoZSBzb2NrZXQgaXMgaW4gZmxvd2luZyBtb2RlIHRoZW4gdGhlcmUgaXMgbm9cbiAgLy8gYnVmZmVyZWQgZGF0YSBhcyBldmVyeXRoaW5nIGhhcyBiZWVuIGFscmVhZHkgd3JpdHRlbiBhbmQgYHJlYWRhYmxlLnJlYWQoKWBcbiAgLy8gd2lsbCByZXR1cm4gYG51bGxgLiBJZiBpbnN0ZWFkLCB0aGUgc29ja2V0IGlzIHBhdXNlZCwgYW55IHBvc3NpYmxlIGJ1ZmZlcmVkXG4gIC8vIGRhdGEgd2lsbCBiZSByZWFkIGFzIGEgc2luZ2xlIGNodW5rIGFuZCBlbWl0dGVkIHN5bmNocm9ub3VzbHkgaW4gYSBzaW5nbGVcbiAgLy8gYCdkYXRhJ2AgZXZlbnQuXG4gIC8vXG4gIHdlYnNvY2tldC5fc29ja2V0LnJlYWQoKTtcbiAgd2Vic29ja2V0Ll9yZWNlaXZlci5lbmQoKTtcblxuICB0aGlzLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgc29ja2V0T25EYXRhKTtcbiAgdGhpc1trV2ViU29ja2V0XSA9IHVuZGVmaW5lZDtcblxuICBjbGVhclRpbWVvdXQod2Vic29ja2V0Ll9jbG9zZVRpbWVyKTtcblxuICBpZiAoXG4gICAgd2Vic29ja2V0Ll9yZWNlaXZlci5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCB8fFxuICAgIHdlYnNvY2tldC5fcmVjZWl2ZXIuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkXG4gICkge1xuICAgIHdlYnNvY2tldC5lbWl0Q2xvc2UoKTtcbiAgfSBlbHNlIHtcbiAgICB3ZWJzb2NrZXQuX3JlY2VpdmVyLm9uKCdlcnJvcicsIHJlY2VpdmVyT25GaW5pc2gpO1xuICAgIHdlYnNvY2tldC5fcmVjZWl2ZXIub24oJ2ZpbmlzaCcsIHJlY2VpdmVyT25GaW5pc2gpO1xuICB9XG59XG5cbi8qKlxuICogVGhlIGxpc3RlbmVyIG9mIHRoZSBgbmV0LlNvY2tldGAgYCdkYXRhJ2AgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGNodW5rIEEgY2h1bmsgb2YgZGF0YVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc29ja2V0T25EYXRhKGNodW5rKSB7XG4gIGlmICghdGhpc1trV2ViU29ja2V0XS5fcmVjZWl2ZXIud3JpdGUoY2h1bmspKSB7XG4gICAgdGhpcy5wYXVzZSgpO1xuICB9XG59XG5cbi8qKlxuICogVGhlIGxpc3RlbmVyIG9mIHRoZSBgbmV0LlNvY2tldGAgYCdlbmQnYCBldmVudC5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzb2NrZXRPbkVuZCgpIHtcbiAgY29uc3Qgd2Vic29ja2V0ID0gdGhpc1trV2ViU29ja2V0XTtcblxuICB3ZWJzb2NrZXQucmVhZHlTdGF0ZSA9IFdlYlNvY2tldC5DTE9TSU5HO1xuICB3ZWJzb2NrZXQuX3JlY2VpdmVyLmVuZCgpO1xuICB0aGlzLmVuZCgpO1xufVxuXG4vKipcbiAqIFRoZSBsaXN0ZW5lciBvZiB0aGUgYG5ldC5Tb2NrZXRgIGAnZXJyb3InYCBldmVudC5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzb2NrZXRPbkVycm9yKCkge1xuICBjb25zdCB3ZWJzb2NrZXQgPSB0aGlzW2tXZWJTb2NrZXRdO1xuXG4gIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgc29ja2V0T25FcnJvcik7XG4gIHRoaXMub24oJ2Vycm9yJywgTk9PUCk7XG5cbiAgaWYgKHdlYnNvY2tldCkge1xuICAgIHdlYnNvY2tldC5yZWFkeVN0YXRlID0gV2ViU29ja2V0LkNMT1NJTkc7XG4gICAgdGhpcy5kZXN0cm95KCk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgeyBXcml0YWJsZSB9ID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5cbmNvbnN0IFBlck1lc3NhZ2VEZWZsYXRlID0gcmVxdWlyZSgnLi9wZXJtZXNzYWdlLWRlZmxhdGUnKTtcbmNvbnN0IHtcbiAgQklOQVJZX1RZUEVTLFxuICBFTVBUWV9CVUZGRVIsXG4gIGtTdGF0dXNDb2RlLFxuICBrV2ViU29ja2V0XG59ID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcbmNvbnN0IHsgY29uY2F0LCB0b0FycmF5QnVmZmVyLCB1bm1hc2sgfSA9IHJlcXVpcmUoJy4vYnVmZmVyLXV0aWwnKTtcbmNvbnN0IHsgaXNWYWxpZFN0YXR1c0NvZGUsIGlzVmFsaWRVVEY4IH0gPSByZXF1aXJlKCcuL3ZhbGlkYXRpb24nKTtcblxuY29uc3QgR0VUX0lORk8gPSAwO1xuY29uc3QgR0VUX1BBWUxPQURfTEVOR1RIXzE2ID0gMTtcbmNvbnN0IEdFVF9QQVlMT0FEX0xFTkdUSF82NCA9IDI7XG5jb25zdCBHRVRfTUFTSyA9IDM7XG5jb25zdCBHRVRfREFUQSA9IDQ7XG5jb25zdCBJTkZMQVRJTkcgPSA1O1xuXG4vKipcbiAqIEh5QmkgUmVjZWl2ZXIgaW1wbGVtZW50YXRpb24uXG4gKlxuICogQGV4dGVuZHMgc3RyZWFtLldyaXRhYmxlXG4gKi9cbmNsYXNzIFJlY2VpdmVyIGV4dGVuZHMgV3JpdGFibGUge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIFJlY2VpdmVyIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gYmluYXJ5VHlwZSBUaGUgdHlwZSBmb3IgYmluYXJ5IGRhdGFcbiAgICogQHBhcmFtIHtPYmplY3R9IGV4dGVuc2lvbnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG5lZ290aWF0ZWQgZXh0ZW5zaW9uc1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzU2VydmVyIFNwZWNpZmllcyB3aGV0aGVyIHRvIG9wZXJhdGUgaW4gY2xpZW50IG9yIHNlcnZlclxuICAgKiAgICAgbW9kZVxuICAgKiBAcGFyYW0ge051bWJlcn0gbWF4UGF5bG9hZCBUaGUgbWF4aW11bSBhbGxvd2VkIG1lc3NhZ2UgbGVuZ3RoXG4gICAqL1xuICBjb25zdHJ1Y3RvcihiaW5hcnlUeXBlLCBleHRlbnNpb25zLCBpc1NlcnZlciwgbWF4UGF5bG9hZCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9iaW5hcnlUeXBlID0gYmluYXJ5VHlwZSB8fCBCSU5BUllfVFlQRVNbMF07XG4gICAgdGhpc1trV2ViU29ja2V0XSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9leHRlbnNpb25zID0gZXh0ZW5zaW9ucyB8fCB7fTtcbiAgICB0aGlzLl9pc1NlcnZlciA9ICEhaXNTZXJ2ZXI7XG4gICAgdGhpcy5fbWF4UGF5bG9hZCA9IG1heFBheWxvYWQgfCAwO1xuXG4gICAgdGhpcy5fYnVmZmVyZWRCeXRlcyA9IDA7XG4gICAgdGhpcy5fYnVmZmVycyA9IFtdO1xuXG4gICAgdGhpcy5fY29tcHJlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3BheWxvYWRMZW5ndGggPSAwO1xuICAgIHRoaXMuX21hc2sgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZnJhZ21lbnRlZCA9IDA7XG4gICAgdGhpcy5fbWFza2VkID0gZmFsc2U7XG4gICAgdGhpcy5fZmluID0gZmFsc2U7XG4gICAgdGhpcy5fb3Bjb2RlID0gMDtcblxuICAgIHRoaXMuX3RvdGFsUGF5bG9hZExlbmd0aCA9IDA7XG4gICAgdGhpcy5fbWVzc2FnZUxlbmd0aCA9IDA7XG4gICAgdGhpcy5fZnJhZ21lbnRzID0gW107XG5cbiAgICB0aGlzLl9zdGF0ZSA9IEdFVF9JTkZPO1xuICAgIHRoaXMuX2xvb3AgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbXBsZW1lbnRzIGBXcml0YWJsZS5wcm90b3R5cGUuX3dyaXRlKClgLlxuICAgKlxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gY2h1bmsgVGhlIGNodW5rIG9mIGRhdGEgdG8gd3JpdGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IGVuY29kaW5nIFRoZSBjaGFyYWN0ZXIgZW5jb2Rpbmcgb2YgYGNodW5rYFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiBDYWxsYmFja1xuICAgKi9cbiAgX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgICBpZiAodGhpcy5fb3Bjb2RlID09PSAweDA4ICYmIHRoaXMuX3N0YXRlID09IEdFVF9JTkZPKSByZXR1cm4gY2IoKTtcblxuICAgIHRoaXMuX2J1ZmZlcmVkQnl0ZXMgKz0gY2h1bmsubGVuZ3RoO1xuICAgIHRoaXMuX2J1ZmZlcnMucHVzaChjaHVuayk7XG4gICAgdGhpcy5zdGFydExvb3AoY2IpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnN1bWVzIGBuYCBieXRlcyBmcm9tIHRoZSBidWZmZXJlZCBkYXRhLlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGJ5dGVzIHRvIGNvbnN1bWVcbiAgICogQHJldHVybiB7QnVmZmVyfSBUaGUgY29uc3VtZWQgYnl0ZXNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbnN1bWUobikge1xuICAgIHRoaXMuX2J1ZmZlcmVkQnl0ZXMgLT0gbjtcblxuICAgIGlmIChuID09PSB0aGlzLl9idWZmZXJzWzBdLmxlbmd0aCkgcmV0dXJuIHRoaXMuX2J1ZmZlcnMuc2hpZnQoKTtcblxuICAgIGlmIChuIDwgdGhpcy5fYnVmZmVyc1swXS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGJ1ZiA9IHRoaXMuX2J1ZmZlcnNbMF07XG4gICAgICB0aGlzLl9idWZmZXJzWzBdID0gYnVmLnNsaWNlKG4pO1xuICAgICAgcmV0dXJuIGJ1Zi5zbGljZSgwLCBuKTtcbiAgICB9XG5cbiAgICBjb25zdCBkc3QgPSBCdWZmZXIuYWxsb2NVbnNhZmUobik7XG5cbiAgICBkbyB7XG4gICAgICBjb25zdCBidWYgPSB0aGlzLl9idWZmZXJzWzBdO1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gZHN0Lmxlbmd0aCAtIG47XG5cbiAgICAgIGlmIChuID49IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgZHN0LnNldCh0aGlzLl9idWZmZXJzLnNoaWZ0KCksIG9mZnNldCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkc3Quc2V0KG5ldyBVaW50OEFycmF5KGJ1Zi5idWZmZXIsIGJ1Zi5ieXRlT2Zmc2V0LCBuKSwgb2Zmc2V0KTtcbiAgICAgICAgdGhpcy5fYnVmZmVyc1swXSA9IGJ1Zi5zbGljZShuKTtcbiAgICAgIH1cblxuICAgICAgbiAtPSBidWYubGVuZ3RoO1xuICAgIH0gd2hpbGUgKG4gPiAwKTtcblxuICAgIHJldHVybiBkc3Q7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBwYXJzaW5nIGxvb3AuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIENhbGxiYWNrXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGFydExvb3AoY2IpIHtcbiAgICBsZXQgZXJyO1xuICAgIHRoaXMuX2xvb3AgPSB0cnVlO1xuXG4gICAgZG8ge1xuICAgICAgc3dpdGNoICh0aGlzLl9zdGF0ZSkge1xuICAgICAgICBjYXNlIEdFVF9JTkZPOlxuICAgICAgICAgIGVyciA9IHRoaXMuZ2V0SW5mbygpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEdFVF9QQVlMT0FEX0xFTkdUSF8xNjpcbiAgICAgICAgICBlcnIgPSB0aGlzLmdldFBheWxvYWRMZW5ndGgxNigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEdFVF9QQVlMT0FEX0xFTkdUSF82NDpcbiAgICAgICAgICBlcnIgPSB0aGlzLmdldFBheWxvYWRMZW5ndGg2NCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEdFVF9NQVNLOlxuICAgICAgICAgIHRoaXMuZ2V0TWFzaygpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEdFVF9EQVRBOlxuICAgICAgICAgIGVyciA9IHRoaXMuZ2V0RGF0YShjYik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gYElORkxBVElOR2BcbiAgICAgICAgICB0aGlzLl9sb29wID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKHRoaXMuX2xvb3ApO1xuXG4gICAgY2IoZXJyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgZmlyc3QgdHdvIGJ5dGVzIG9mIGEgZnJhbWUuXG4gICAqXG4gICAqIEByZXR1cm4geyhSYW5nZUVycm9yfHVuZGVmaW5lZCl9IEEgcG9zc2libGUgZXJyb3JcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldEluZm8oKSB7XG4gICAgaWYgKHRoaXMuX2J1ZmZlcmVkQnl0ZXMgPCAyKSB7XG4gICAgICB0aGlzLl9sb29wID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgYnVmID0gdGhpcy5jb25zdW1lKDIpO1xuXG4gICAgaWYgKChidWZbMF0gJiAweDMwKSAhPT0gMHgwMCkge1xuICAgICAgdGhpcy5fbG9vcCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGVycm9yKFJhbmdlRXJyb3IsICdSU1YyIGFuZCBSU1YzIG11c3QgYmUgY2xlYXInLCB0cnVlLCAxMDAyKTtcbiAgICB9XG5cbiAgICBjb25zdCBjb21wcmVzc2VkID0gKGJ1ZlswXSAmIDB4NDApID09PSAweDQwO1xuXG4gICAgaWYgKGNvbXByZXNzZWQgJiYgIXRoaXMuX2V4dGVuc2lvbnNbUGVyTWVzc2FnZURlZmxhdGUuZXh0ZW5zaW9uTmFtZV0pIHtcbiAgICAgIHRoaXMuX2xvb3AgPSBmYWxzZTtcbiAgICAgIHJldHVybiBlcnJvcihSYW5nZUVycm9yLCAnUlNWMSBtdXN0IGJlIGNsZWFyJywgdHJ1ZSwgMTAwMik7XG4gICAgfVxuXG4gICAgdGhpcy5fZmluID0gKGJ1ZlswXSAmIDB4ODApID09PSAweDgwO1xuICAgIHRoaXMuX29wY29kZSA9IGJ1ZlswXSAmIDB4MGY7XG4gICAgdGhpcy5fcGF5bG9hZExlbmd0aCA9IGJ1ZlsxXSAmIDB4N2Y7XG5cbiAgICBpZiAodGhpcy5fb3Bjb2RlID09PSAweDAwKSB7XG4gICAgICBpZiAoY29tcHJlc3NlZCkge1xuICAgICAgICB0aGlzLl9sb29wID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBlcnJvcihSYW5nZUVycm9yLCAnUlNWMSBtdXN0IGJlIGNsZWFyJywgdHJ1ZSwgMTAwMik7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5fZnJhZ21lbnRlZCkge1xuICAgICAgICB0aGlzLl9sb29wID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBlcnJvcihSYW5nZUVycm9yLCAnaW52YWxpZCBvcGNvZGUgMCcsIHRydWUsIDEwMDIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9vcGNvZGUgPSB0aGlzLl9mcmFnbWVudGVkO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fb3Bjb2RlID09PSAweDAxIHx8IHRoaXMuX29wY29kZSA9PT0gMHgwMikge1xuICAgICAgaWYgKHRoaXMuX2ZyYWdtZW50ZWQpIHtcbiAgICAgICAgdGhpcy5fbG9vcCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gZXJyb3IoUmFuZ2VFcnJvciwgYGludmFsaWQgb3Bjb2RlICR7dGhpcy5fb3Bjb2RlfWAsIHRydWUsIDEwMDIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jb21wcmVzc2VkID0gY29tcHJlc3NlZDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX29wY29kZSA+IDB4MDcgJiYgdGhpcy5fb3Bjb2RlIDwgMHgwYikge1xuICAgICAgaWYgKCF0aGlzLl9maW4pIHtcbiAgICAgICAgdGhpcy5fbG9vcCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gZXJyb3IoUmFuZ2VFcnJvciwgJ0ZJTiBtdXN0IGJlIHNldCcsIHRydWUsIDEwMDIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29tcHJlc3NlZCkge1xuICAgICAgICB0aGlzLl9sb29wID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBlcnJvcihSYW5nZUVycm9yLCAnUlNWMSBtdXN0IGJlIGNsZWFyJywgdHJ1ZSwgMTAwMik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9wYXlsb2FkTGVuZ3RoID4gMHg3ZCkge1xuICAgICAgICB0aGlzLl9sb29wID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBlcnJvcihcbiAgICAgICAgICBSYW5nZUVycm9yLFxuICAgICAgICAgIGBpbnZhbGlkIHBheWxvYWQgbGVuZ3RoICR7dGhpcy5fcGF5bG9hZExlbmd0aH1gLFxuICAgICAgICAgIHRydWUsXG4gICAgICAgICAgMTAwMlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9sb29wID0gZmFsc2U7XG4gICAgICByZXR1cm4gZXJyb3IoUmFuZ2VFcnJvciwgYGludmFsaWQgb3Bjb2RlICR7dGhpcy5fb3Bjb2RlfWAsIHRydWUsIDEwMDIpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5fZmluICYmICF0aGlzLl9mcmFnbWVudGVkKSB0aGlzLl9mcmFnbWVudGVkID0gdGhpcy5fb3Bjb2RlO1xuICAgIHRoaXMuX21hc2tlZCA9IChidWZbMV0gJiAweDgwKSA9PT0gMHg4MDtcblxuICAgIGlmICh0aGlzLl9pc1NlcnZlcikge1xuICAgICAgaWYgKCF0aGlzLl9tYXNrZWQpIHtcbiAgICAgICAgdGhpcy5fbG9vcCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gZXJyb3IoUmFuZ2VFcnJvciwgJ01BU0sgbXVzdCBiZSBzZXQnLCB0cnVlLCAxMDAyKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuX21hc2tlZCkge1xuICAgICAgdGhpcy5fbG9vcCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGVycm9yKFJhbmdlRXJyb3IsICdNQVNLIG11c3QgYmUgY2xlYXInLCB0cnVlLCAxMDAyKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcGF5bG9hZExlbmd0aCA9PT0gMTI2KSB0aGlzLl9zdGF0ZSA9IEdFVF9QQVlMT0FEX0xFTkdUSF8xNjtcbiAgICBlbHNlIGlmICh0aGlzLl9wYXlsb2FkTGVuZ3RoID09PSAxMjcpIHRoaXMuX3N0YXRlID0gR0VUX1BBWUxPQURfTEVOR1RIXzY0O1xuICAgIGVsc2UgcmV0dXJuIHRoaXMuaGF2ZUxlbmd0aCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgZXh0ZW5kZWQgcGF5bG9hZCBsZW5ndGggKDcrMTYpLlxuICAgKlxuICAgKiBAcmV0dXJuIHsoUmFuZ2VFcnJvcnx1bmRlZmluZWQpfSBBIHBvc3NpYmxlIGVycm9yXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRQYXlsb2FkTGVuZ3RoMTYoKSB7XG4gICAgaWYgKHRoaXMuX2J1ZmZlcmVkQnl0ZXMgPCAyKSB7XG4gICAgICB0aGlzLl9sb29wID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fcGF5bG9hZExlbmd0aCA9IHRoaXMuY29uc3VtZSgyKS5yZWFkVUludDE2QkUoMCk7XG4gICAgcmV0dXJuIHRoaXMuaGF2ZUxlbmd0aCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgZXh0ZW5kZWQgcGF5bG9hZCBsZW5ndGggKDcrNjQpLlxuICAgKlxuICAgKiBAcmV0dXJuIHsoUmFuZ2VFcnJvcnx1bmRlZmluZWQpfSBBIHBvc3NpYmxlIGVycm9yXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRQYXlsb2FkTGVuZ3RoNjQoKSB7XG4gICAgaWYgKHRoaXMuX2J1ZmZlcmVkQnl0ZXMgPCA4KSB7XG4gICAgICB0aGlzLl9sb29wID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgYnVmID0gdGhpcy5jb25zdW1lKDgpO1xuICAgIGNvbnN0IG51bSA9IGJ1Zi5yZWFkVUludDMyQkUoMCk7XG5cbiAgICAvL1xuICAgIC8vIFRoZSBtYXhpbXVtIHNhZmUgaW50ZWdlciBpbiBKYXZhU2NyaXB0IGlzIDJeNTMgLSAxLiBBbiBlcnJvciBpcyByZXR1cm5lZFxuICAgIC8vIGlmIHBheWxvYWQgbGVuZ3RoIGlzIGdyZWF0ZXIgdGhhbiB0aGlzIG51bWJlci5cbiAgICAvL1xuICAgIGlmIChudW0gPiBNYXRoLnBvdygyLCA1MyAtIDMyKSAtIDEpIHtcbiAgICAgIHRoaXMuX2xvb3AgPSBmYWxzZTtcbiAgICAgIHJldHVybiBlcnJvcihcbiAgICAgICAgUmFuZ2VFcnJvcixcbiAgICAgICAgJ1Vuc3VwcG9ydGVkIFdlYlNvY2tldCBmcmFtZTogcGF5bG9hZCBsZW5ndGggPiAyXjUzIC0gMScsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAxMDA5XG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMuX3BheWxvYWRMZW5ndGggPSBudW0gKiBNYXRoLnBvdygyLCAzMikgKyBidWYucmVhZFVJbnQzMkJFKDQpO1xuICAgIHJldHVybiB0aGlzLmhhdmVMZW5ndGgoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXlsb2FkIGxlbmd0aCBoYXMgYmVlbiByZWFkLlxuICAgKlxuICAgKiBAcmV0dXJuIHsoUmFuZ2VFcnJvcnx1bmRlZmluZWQpfSBBIHBvc3NpYmxlIGVycm9yXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYXZlTGVuZ3RoKCkge1xuICAgIGlmICh0aGlzLl9wYXlsb2FkTGVuZ3RoICYmIHRoaXMuX29wY29kZSA8IDB4MDgpIHtcbiAgICAgIHRoaXMuX3RvdGFsUGF5bG9hZExlbmd0aCArPSB0aGlzLl9wYXlsb2FkTGVuZ3RoO1xuICAgICAgaWYgKHRoaXMuX3RvdGFsUGF5bG9hZExlbmd0aCA+IHRoaXMuX21heFBheWxvYWQgJiYgdGhpcy5fbWF4UGF5bG9hZCA+IDApIHtcbiAgICAgICAgdGhpcy5fbG9vcCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gZXJyb3IoUmFuZ2VFcnJvciwgJ01heCBwYXlsb2FkIHNpemUgZXhjZWVkZWQnLCBmYWxzZSwgMTAwOSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX21hc2tlZCkgdGhpcy5fc3RhdGUgPSBHRVRfTUFTSztcbiAgICBlbHNlIHRoaXMuX3N0YXRlID0gR0VUX0RBVEE7XG4gIH1cblxuICAvKipcbiAgICogUmVhZHMgbWFzayBieXRlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldE1hc2soKSB7XG4gICAgaWYgKHRoaXMuX2J1ZmZlcmVkQnl0ZXMgPCA0KSB7XG4gICAgICB0aGlzLl9sb29wID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fbWFzayA9IHRoaXMuY29uc3VtZSg0KTtcbiAgICB0aGlzLl9zdGF0ZSA9IEdFVF9EQVRBO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlYWRzIGRhdGEgYnl0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIENhbGxiYWNrXG4gICAqIEByZXR1cm4geyhFcnJvcnxSYW5nZUVycm9yfHVuZGVmaW5lZCl9IEEgcG9zc2libGUgZXJyb3JcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldERhdGEoY2IpIHtcbiAgICBsZXQgZGF0YSA9IEVNUFRZX0JVRkZFUjtcblxuICAgIGlmICh0aGlzLl9wYXlsb2FkTGVuZ3RoKSB7XG4gICAgICBpZiAodGhpcy5fYnVmZmVyZWRCeXRlcyA8IHRoaXMuX3BheWxvYWRMZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fbG9vcCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGRhdGEgPSB0aGlzLmNvbnN1bWUodGhpcy5fcGF5bG9hZExlbmd0aCk7XG4gICAgICBpZiAodGhpcy5fbWFza2VkKSB1bm1hc2soZGF0YSwgdGhpcy5fbWFzayk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX29wY29kZSA+IDB4MDcpIHJldHVybiB0aGlzLmNvbnRyb2xNZXNzYWdlKGRhdGEpO1xuXG4gICAgaWYgKHRoaXMuX2NvbXByZXNzZWQpIHtcbiAgICAgIHRoaXMuX3N0YXRlID0gSU5GTEFUSU5HO1xuICAgICAgdGhpcy5kZWNvbXByZXNzKGRhdGEsIGNiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5sZW5ndGgpIHtcbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIG1lc3NhZ2UgaXMgbm90IGNvbXByZXNzZWQgc28gaXRzIGxlbmdodCBpcyB0aGUgc3VtIG9mIHRoZSBwYXlsb2FkXG4gICAgICAvLyBsZW5ndGggb2YgYWxsIGZyYWdtZW50cy5cbiAgICAgIC8vXG4gICAgICB0aGlzLl9tZXNzYWdlTGVuZ3RoID0gdGhpcy5fdG90YWxQYXlsb2FkTGVuZ3RoO1xuICAgICAgdGhpcy5fZnJhZ21lbnRzLnB1c2goZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZGF0YU1lc3NhZ2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvbXByZXNzZXMgZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGRhdGEgQ29tcHJlc3NlZCBkYXRhXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIENhbGxiYWNrXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBkZWNvbXByZXNzKGRhdGEsIGNiKSB7XG4gICAgY29uc3QgcGVyTWVzc2FnZURlZmxhdGUgPSB0aGlzLl9leHRlbnNpb25zW1Blck1lc3NhZ2VEZWZsYXRlLmV4dGVuc2lvbk5hbWVdO1xuXG4gICAgcGVyTWVzc2FnZURlZmxhdGUuZGVjb21wcmVzcyhkYXRhLCB0aGlzLl9maW4sIChlcnIsIGJ1ZikgPT4ge1xuICAgICAgaWYgKGVycikgcmV0dXJuIGNiKGVycik7XG5cbiAgICAgIGlmIChidWYubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX21lc3NhZ2VMZW5ndGggKz0gYnVmLmxlbmd0aDtcbiAgICAgICAgaWYgKHRoaXMuX21lc3NhZ2VMZW5ndGggPiB0aGlzLl9tYXhQYXlsb2FkICYmIHRoaXMuX21heFBheWxvYWQgPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIGNiKFxuICAgICAgICAgICAgZXJyb3IoUmFuZ2VFcnJvciwgJ01heCBwYXlsb2FkIHNpemUgZXhjZWVkZWQnLCBmYWxzZSwgMTAwOSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZnJhZ21lbnRzLnB1c2goYnVmKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXIgPSB0aGlzLmRhdGFNZXNzYWdlKCk7XG4gICAgICBpZiAoZXIpIHJldHVybiBjYihlcik7XG5cbiAgICAgIHRoaXMuc3RhcnRMb29wKGNiKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGEgZGF0YSBtZXNzYWdlLlxuICAgKlxuICAgKiBAcmV0dXJuIHsoRXJyb3J8dW5kZWZpbmVkKX0gQSBwb3NzaWJsZSBlcnJvclxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZGF0YU1lc3NhZ2UoKSB7XG4gICAgaWYgKHRoaXMuX2Zpbikge1xuICAgICAgY29uc3QgbWVzc2FnZUxlbmd0aCA9IHRoaXMuX21lc3NhZ2VMZW5ndGg7XG4gICAgICBjb25zdCBmcmFnbWVudHMgPSB0aGlzLl9mcmFnbWVudHM7XG5cbiAgICAgIHRoaXMuX3RvdGFsUGF5bG9hZExlbmd0aCA9IDA7XG4gICAgICB0aGlzLl9tZXNzYWdlTGVuZ3RoID0gMDtcbiAgICAgIHRoaXMuX2ZyYWdtZW50ZWQgPSAwO1xuICAgICAgdGhpcy5fZnJhZ21lbnRzID0gW107XG5cbiAgICAgIGlmICh0aGlzLl9vcGNvZGUgPT09IDIpIHtcbiAgICAgICAgbGV0IGRhdGE7XG5cbiAgICAgICAgaWYgKHRoaXMuX2JpbmFyeVR5cGUgPT09ICdub2RlYnVmZmVyJykge1xuICAgICAgICAgIGRhdGEgPSBjb25jYXQoZnJhZ21lbnRzLCBtZXNzYWdlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9iaW5hcnlUeXBlID09PSAnYXJyYXlidWZmZXInKSB7XG4gICAgICAgICAgZGF0YSA9IHRvQXJyYXlCdWZmZXIoY29uY2F0KGZyYWdtZW50cywgbWVzc2FnZUxlbmd0aCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGEgPSBmcmFnbWVudHM7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCBkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGJ1ZiA9IGNvbmNhdChmcmFnbWVudHMsIG1lc3NhZ2VMZW5ndGgpO1xuXG4gICAgICAgIGlmICghaXNWYWxpZFVURjgoYnVmKSkge1xuICAgICAgICAgIHRoaXMuX2xvb3AgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gZXJyb3IoRXJyb3IsICdpbnZhbGlkIFVURi04IHNlcXVlbmNlJywgdHJ1ZSwgMTAwNyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCBidWYudG9TdHJpbmcoKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fc3RhdGUgPSBHRVRfSU5GTztcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGEgY29udHJvbCBtZXNzYWdlLlxuICAgKlxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gZGF0YSBEYXRhIHRvIGhhbmRsZVxuICAgKiBAcmV0dXJuIHsoRXJyb3J8UmFuZ2VFcnJvcnx1bmRlZmluZWQpfSBBIHBvc3NpYmxlIGVycm9yXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb250cm9sTWVzc2FnZShkYXRhKSB7XG4gICAgaWYgKHRoaXMuX29wY29kZSA9PT0gMHgwOCkge1xuICAgICAgdGhpcy5fbG9vcCA9IGZhbHNlO1xuXG4gICAgICBpZiAoZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5lbWl0KCdjb25jbHVkZScsIDEwMDUsICcnKTtcbiAgICAgICAgdGhpcy5lbmQoKTtcbiAgICAgIH0gZWxzZSBpZiAoZGF0YS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yKFJhbmdlRXJyb3IsICdpbnZhbGlkIHBheWxvYWQgbGVuZ3RoIDEnLCB0cnVlLCAxMDAyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNvZGUgPSBkYXRhLnJlYWRVSW50MTZCRSgwKTtcblxuICAgICAgICBpZiAoIWlzVmFsaWRTdGF0dXNDb2RlKGNvZGUpKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yKFJhbmdlRXJyb3IsIGBpbnZhbGlkIHN0YXR1cyBjb2RlICR7Y29kZX1gLCB0cnVlLCAxMDAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJ1ZiA9IGRhdGEuc2xpY2UoMik7XG5cbiAgICAgICAgaWYgKCFpc1ZhbGlkVVRGOChidWYpKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yKEVycm9yLCAnaW52YWxpZCBVVEYtOCBzZXF1ZW5jZScsIHRydWUsIDEwMDcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbWl0KCdjb25jbHVkZScsIGNvZGUsIGJ1Zi50b1N0cmluZygpKTtcbiAgICAgICAgdGhpcy5lbmQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuX29wY29kZSA9PT0gMHgwOSkge1xuICAgICAgdGhpcy5lbWl0KCdwaW5nJywgZGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZW1pdCgncG9uZycsIGRhdGEpO1xuICAgIH1cblxuICAgIHRoaXMuX3N0YXRlID0gR0VUX0lORk87XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWNlaXZlcjtcblxuLyoqXG4gKiBCdWlsZHMgYW4gZXJyb3Igb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7KEVycm9yfFJhbmdlRXJyb3IpfSBFcnJvckN0b3IgVGhlIGVycm9yIGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZVxuICogQHBhcmFtIHtCb29sZWFufSBwcmVmaXggU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIGFkZCBhIGRlZmF1bHQgcHJlZml4IHRvXG4gKiAgICAgYG1lc3NhZ2VgXG4gKiBAcGFyYW0ge051bWJlcn0gc3RhdHVzQ29kZSBUaGUgc3RhdHVzIGNvZGVcbiAqIEByZXR1cm4geyhFcnJvcnxSYW5nZUVycm9yKX0gVGhlIGVycm9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlcnJvcihFcnJvckN0b3IsIG1lc3NhZ2UsIHByZWZpeCwgc3RhdHVzQ29kZSkge1xuICBjb25zdCBlcnIgPSBuZXcgRXJyb3JDdG9yKFxuICAgIHByZWZpeCA/IGBJbnZhbGlkIFdlYlNvY2tldCBmcmFtZTogJHttZXNzYWdlfWAgOiBtZXNzYWdlXG4gICk7XG5cbiAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZXJyLCBlcnJvcik7XG4gIGVycltrU3RhdHVzQ29kZV0gPSBzdGF0dXNDb2RlO1xuICByZXR1cm4gZXJyO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG50cnkge1xuICBjb25zdCBpc1ZhbGlkVVRGOCA9IHJlcXVpcmUoJ3V0Zi04LXZhbGlkYXRlJyk7XG5cbiAgZXhwb3J0cy5pc1ZhbGlkVVRGOCA9XG4gICAgdHlwZW9mIGlzVmFsaWRVVEY4ID09PSAnb2JqZWN0J1xuICAgICAgPyBpc1ZhbGlkVVRGOC5WYWxpZGF0aW9uLmlzVmFsaWRVVEY4IC8vIHV0Zi04LXZhbGlkYXRlQDwzLjAuMFxuICAgICAgOiBpc1ZhbGlkVVRGODtcbn0gY2F0Y2ggKGUpIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHtcbiAgZXhwb3J0cy5pc1ZhbGlkVVRGOCA9ICgpID0+IHRydWU7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhdHVzIGNvZGUgaXMgYWxsb3dlZCBpbiBhIGNsb3NlIGZyYW1lLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlIFRoZSBzdGF0dXMgY29kZVxuICogQHJldHVybiB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBzdGF0dXMgY29kZSBpcyB2YWxpZCwgZWxzZSBgZmFsc2VgXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydHMuaXNWYWxpZFN0YXR1c0NvZGUgPSAoY29kZSkgPT4ge1xuICByZXR1cm4gKFxuICAgIChjb2RlID49IDEwMDAgJiZcbiAgICAgIGNvZGUgPD0gMTAxNCAmJlxuICAgICAgY29kZSAhPT0gMTAwNCAmJlxuICAgICAgY29kZSAhPT0gMTAwNSAmJlxuICAgICAgY29kZSAhPT0gMTAwNikgfHxcbiAgICAoY29kZSA+PSAzMDAwICYmIGNvZGUgPD0gNDk5OSlcbiAgKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHsgcmFuZG9tRmlsbFN5bmMgfSA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuXG5jb25zdCBQZXJNZXNzYWdlRGVmbGF0ZSA9IHJlcXVpcmUoJy4vcGVybWVzc2FnZS1kZWZsYXRlJyk7XG5jb25zdCB7IEVNUFRZX0JVRkZFUiB9ID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcbmNvbnN0IHsgaXNWYWxpZFN0YXR1c0NvZGUgfSA9IHJlcXVpcmUoJy4vdmFsaWRhdGlvbicpO1xuY29uc3QgeyBtYXNrOiBhcHBseU1hc2ssIHRvQnVmZmVyIH0gPSByZXF1aXJlKCcuL2J1ZmZlci11dGlsJyk7XG5cbmNvbnN0IG1hc2sgPSBCdWZmZXIuYWxsb2MoNCk7XG5cbi8qKlxuICogSHlCaSBTZW5kZXIgaW1wbGVtZW50YXRpb24uXG4gKi9cbmNsYXNzIFNlbmRlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgU2VuZGVyIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge25ldC5Tb2NrZXR9IHNvY2tldCBUaGUgY29ubmVjdGlvbiBzb2NrZXRcbiAgICogQHBhcmFtIHtPYmplY3R9IGV4dGVuc2lvbnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG5lZ290aWF0ZWQgZXh0ZW5zaW9uc1xuICAgKi9cbiAgY29uc3RydWN0b3Ioc29ja2V0LCBleHRlbnNpb25zKSB7XG4gICAgdGhpcy5fZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnMgfHwge307XG4gICAgdGhpcy5fc29ja2V0ID0gc29ja2V0O1xuXG4gICAgdGhpcy5fZmlyc3RGcmFnbWVudCA9IHRydWU7XG4gICAgdGhpcy5fY29tcHJlc3MgPSBmYWxzZTtcblxuICAgIHRoaXMuX2J1ZmZlcmVkQnl0ZXMgPSAwO1xuICAgIHRoaXMuX2RlZmxhdGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3F1ZXVlID0gW107XG4gIH1cblxuICAvKipcbiAgICogRnJhbWVzIGEgcGllY2Ugb2YgZGF0YSBhY2NvcmRpbmcgdG8gdGhlIEh5QmkgV2ViU29ja2V0IHByb3RvY29sLlxuICAgKlxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gZGF0YSBUaGUgZGF0YSB0byBmcmFtZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBPcHRpb25zIG9iamVjdFxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5vcGNvZGUgVGhlIG9wY29kZVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMucmVhZE9ubHkgU3BlY2lmaWVzIHdoZXRoZXIgYGRhdGFgIGNhbiBiZSBtb2RpZmllZFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMuZmluIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBzZXQgdGhlIEZJTiBiaXRcbiAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLm1hc2sgU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIG1hc2sgYGRhdGFgXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5yc3YxIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBzZXQgdGhlIFJTVjEgYml0XG4gICAqIEByZXR1cm4ge0J1ZmZlcltdfSBUaGUgZnJhbWVkIGRhdGEgYXMgYSBsaXN0IG9mIGBCdWZmZXJgIGluc3RhbmNlc1xuICAgKiBAcHVibGljXG4gICAqL1xuICBzdGF0aWMgZnJhbWUoZGF0YSwgb3B0aW9ucykge1xuICAgIGNvbnN0IG1lcmdlID0gb3B0aW9ucy5tYXNrICYmIG9wdGlvbnMucmVhZE9ubHk7XG4gICAgbGV0IG9mZnNldCA9IG9wdGlvbnMubWFzayA/IDYgOiAyO1xuICAgIGxldCBwYXlsb2FkTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgICBpZiAoZGF0YS5sZW5ndGggPj0gNjU1MzYpIHtcbiAgICAgIG9mZnNldCArPSA4O1xuICAgICAgcGF5bG9hZExlbmd0aCA9IDEyNztcbiAgICB9IGVsc2UgaWYgKGRhdGEubGVuZ3RoID4gMTI1KSB7XG4gICAgICBvZmZzZXQgKz0gMjtcbiAgICAgIHBheWxvYWRMZW5ndGggPSAxMjY7XG4gICAgfVxuXG4gICAgY29uc3QgdGFyZ2V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG1lcmdlID8gZGF0YS5sZW5ndGggKyBvZmZzZXQgOiBvZmZzZXQpO1xuXG4gICAgdGFyZ2V0WzBdID0gb3B0aW9ucy5maW4gPyBvcHRpb25zLm9wY29kZSB8IDB4ODAgOiBvcHRpb25zLm9wY29kZTtcbiAgICBpZiAob3B0aW9ucy5yc3YxKSB0YXJnZXRbMF0gfD0gMHg0MDtcblxuICAgIHRhcmdldFsxXSA9IHBheWxvYWRMZW5ndGg7XG5cbiAgICBpZiAocGF5bG9hZExlbmd0aCA9PT0gMTI2KSB7XG4gICAgICB0YXJnZXQud3JpdGVVSW50MTZCRShkYXRhLmxlbmd0aCwgMik7XG4gICAgfSBlbHNlIGlmIChwYXlsb2FkTGVuZ3RoID09PSAxMjcpIHtcbiAgICAgIHRhcmdldC53cml0ZVVJbnQzMkJFKDAsIDIpO1xuICAgICAgdGFyZ2V0LndyaXRlVUludDMyQkUoZGF0YS5sZW5ndGgsIDYpO1xuICAgIH1cblxuICAgIGlmICghb3B0aW9ucy5tYXNrKSByZXR1cm4gW3RhcmdldCwgZGF0YV07XG5cbiAgICByYW5kb21GaWxsU3luYyhtYXNrLCAwLCA0KTtcblxuICAgIHRhcmdldFsxXSB8PSAweDgwO1xuICAgIHRhcmdldFtvZmZzZXQgLSA0XSA9IG1hc2tbMF07XG4gICAgdGFyZ2V0W29mZnNldCAtIDNdID0gbWFza1sxXTtcbiAgICB0YXJnZXRbb2Zmc2V0IC0gMl0gPSBtYXNrWzJdO1xuICAgIHRhcmdldFtvZmZzZXQgLSAxXSA9IG1hc2tbM107XG5cbiAgICBpZiAobWVyZ2UpIHtcbiAgICAgIGFwcGx5TWFzayhkYXRhLCBtYXNrLCB0YXJnZXQsIG9mZnNldCwgZGF0YS5sZW5ndGgpO1xuICAgICAgcmV0dXJuIFt0YXJnZXRdO1xuICAgIH1cblxuICAgIGFwcGx5TWFzayhkYXRhLCBtYXNrLCBkYXRhLCAwLCBkYXRhLmxlbmd0aCk7XG4gICAgcmV0dXJuIFt0YXJnZXQsIGRhdGFdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIGEgY2xvc2UgbWVzc2FnZSB0byB0aGUgb3RoZXIgcGVlci5cbiAgICpcbiAgICogQHBhcmFtIHsoTnVtYmVyfHVuZGVmaW5lZCl9IGNvZGUgVGhlIHN0YXR1cyBjb2RlIGNvbXBvbmVudCBvZiB0aGUgYm9keVxuICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YSBUaGUgbWVzc2FnZSBjb21wb25lbnQgb2YgdGhlIGJvZHlcbiAgICogQHBhcmFtIHtCb29sZWFufSBtYXNrIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBtYXNrIHRoZSBtZXNzYWdlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIENhbGxiYWNrXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGNsb3NlKGNvZGUsIGRhdGEsIG1hc2ssIGNiKSB7XG4gICAgbGV0IGJ1ZjtcblxuICAgIGlmIChjb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGJ1ZiA9IEVNUFRZX0JVRkZFUjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb2RlICE9PSAnbnVtYmVyJyB8fCAhaXNWYWxpZFN0YXR1c0NvZGUoY29kZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSB2YWxpZCBlcnJvciBjb2RlIG51bWJlcicpO1xuICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkIHx8IGRhdGEgPT09ICcnKSB7XG4gICAgICBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMik7XG4gICAgICBidWYud3JpdGVVSW50MTZCRShjb2RlLCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgoZGF0YSk7XG5cbiAgICAgIGlmIChsZW5ndGggPiAxMjMpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSBtZXNzYWdlIG11c3Qgbm90IGJlIGdyZWF0ZXIgdGhhbiAxMjMgYnl0ZXMnKTtcbiAgICAgIH1cblxuICAgICAgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDIgKyBsZW5ndGgpO1xuICAgICAgYnVmLndyaXRlVUludDE2QkUoY29kZSwgMCk7XG4gICAgICBidWYud3JpdGUoZGF0YSwgMik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2RlZmxhdGluZykge1xuICAgICAgdGhpcy5lbnF1ZXVlKFt0aGlzLmRvQ2xvc2UsIGJ1ZiwgbWFzaywgY2JdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kb0Nsb3NlKGJ1ZiwgbWFzaywgY2IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGcmFtZXMgYW5kIHNlbmRzIGEgY2xvc2UgbWVzc2FnZS5cbiAgICpcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGRhdGEgVGhlIG1lc3NhZ2UgdG8gc2VuZFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG1hc2sgU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIG1hc2sgYGRhdGFgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIENhbGxiYWNrXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBkb0Nsb3NlKGRhdGEsIG1hc2ssIGNiKSB7XG4gICAgdGhpcy5zZW5kRnJhbWUoXG4gICAgICBTZW5kZXIuZnJhbWUoZGF0YSwge1xuICAgICAgICBmaW46IHRydWUsXG4gICAgICAgIHJzdjE6IGZhbHNlLFxuICAgICAgICBvcGNvZGU6IDB4MDgsXG4gICAgICAgIG1hc2ssXG4gICAgICAgIHJlYWRPbmx5OiBmYWxzZVxuICAgICAgfSksXG4gICAgICBjYlxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgYSBwaW5nIG1lc3NhZ2UgdG8gdGhlIG90aGVyIHBlZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWVzc2FnZSB0byBzZW5kXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gbWFzayBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdG8gbWFzayBgZGF0YWBcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgQ2FsbGJhY2tcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcGluZyhkYXRhLCBtYXNrLCBjYikge1xuICAgIGNvbnN0IGJ1ZiA9IHRvQnVmZmVyKGRhdGEpO1xuXG4gICAgaWYgKGJ1Zi5sZW5ndGggPiAxMjUpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgZGF0YSBzaXplIG11c3Qgbm90IGJlIGdyZWF0ZXIgdGhhbiAxMjUgYnl0ZXMnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZGVmbGF0aW5nKSB7XG4gICAgICB0aGlzLmVucXVldWUoW3RoaXMuZG9QaW5nLCBidWYsIG1hc2ssIHRvQnVmZmVyLnJlYWRPbmx5LCBjYl0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRvUGluZyhidWYsIG1hc2ssIHRvQnVmZmVyLnJlYWRPbmx5LCBjYik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZyYW1lcyBhbmQgc2VuZHMgYSBwaW5nIG1lc3NhZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWVzc2FnZSB0byBzZW5kXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gbWFzayBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdG8gbWFzayBgZGF0YWBcbiAgICogQHBhcmFtIHtCb29sZWFufSByZWFkT25seSBTcGVjaWZpZXMgd2hldGhlciBgZGF0YWAgY2FuIGJlIG1vZGlmaWVkXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIENhbGxiYWNrXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBkb1BpbmcoZGF0YSwgbWFzaywgcmVhZE9ubHksIGNiKSB7XG4gICAgdGhpcy5zZW5kRnJhbWUoXG4gICAgICBTZW5kZXIuZnJhbWUoZGF0YSwge1xuICAgICAgICBmaW46IHRydWUsXG4gICAgICAgIHJzdjE6IGZhbHNlLFxuICAgICAgICBvcGNvZGU6IDB4MDksXG4gICAgICAgIG1hc2ssXG4gICAgICAgIHJlYWRPbmx5XG4gICAgICB9KSxcbiAgICAgIGNiXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBhIHBvbmcgbWVzc2FnZSB0byB0aGUgb3RoZXIgcGVlci5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXNzYWdlIHRvIHNlbmRcbiAgICogQHBhcmFtIHtCb29sZWFufSBtYXNrIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBtYXNrIGBkYXRhYFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiBDYWxsYmFja1xuICAgKiBAcHVibGljXG4gICAqL1xuICBwb25nKGRhdGEsIG1hc2ssIGNiKSB7XG4gICAgY29uc3QgYnVmID0gdG9CdWZmZXIoZGF0YSk7XG5cbiAgICBpZiAoYnVmLmxlbmd0aCA+IDEyNSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSBkYXRhIHNpemUgbXVzdCBub3QgYmUgZ3JlYXRlciB0aGFuIDEyNSBieXRlcycpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9kZWZsYXRpbmcpIHtcbiAgICAgIHRoaXMuZW5xdWV1ZShbdGhpcy5kb1BvbmcsIGJ1ZiwgbWFzaywgdG9CdWZmZXIucmVhZE9ubHksIGNiXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9Qb25nKGJ1ZiwgbWFzaywgdG9CdWZmZXIucmVhZE9ubHksIGNiKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRnJhbWVzIGFuZCBzZW5kcyBhIHBvbmcgbWVzc2FnZS5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXNzYWdlIHRvIHNlbmRcbiAgICogQHBhcmFtIHtCb29sZWFufSBtYXNrIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBtYXNrIGBkYXRhYFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlYWRPbmx5IFNwZWNpZmllcyB3aGV0aGVyIGBkYXRhYCBjYW4gYmUgbW9kaWZpZWRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgQ2FsbGJhY2tcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGRvUG9uZyhkYXRhLCBtYXNrLCByZWFkT25seSwgY2IpIHtcbiAgICB0aGlzLnNlbmRGcmFtZShcbiAgICAgIFNlbmRlci5mcmFtZShkYXRhLCB7XG4gICAgICAgIGZpbjogdHJ1ZSxcbiAgICAgICAgcnN2MTogZmFsc2UsXG4gICAgICAgIG9wY29kZTogMHgwYSxcbiAgICAgICAgbWFzayxcbiAgICAgICAgcmVhZE9ubHlcbiAgICAgIH0pLFxuICAgICAgY2JcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIGEgZGF0YSBtZXNzYWdlIHRvIHRoZSBvdGhlciBwZWVyLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1lc3NhZ2UgdG8gc2VuZFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBPcHRpb25zIG9iamVjdFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMuY29tcHJlc3MgU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIGNvbXByZXNzIGBkYXRhYFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMuYmluYXJ5IFNwZWNpZmllcyB3aGV0aGVyIGBkYXRhYCBpcyBiaW5hcnkgb3IgdGV4dFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMuZmluIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBmcmFnbWVudCBpcyB0aGUgbGFzdCBvbmVcbiAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLm1hc2sgU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIG1hc2sgYGRhdGFgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIENhbGxiYWNrXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHNlbmQoZGF0YSwgb3B0aW9ucywgY2IpIHtcbiAgICBjb25zdCBidWYgPSB0b0J1ZmZlcihkYXRhKTtcbiAgICBjb25zdCBwZXJNZXNzYWdlRGVmbGF0ZSA9IHRoaXMuX2V4dGVuc2lvbnNbUGVyTWVzc2FnZURlZmxhdGUuZXh0ZW5zaW9uTmFtZV07XG4gICAgbGV0IG9wY29kZSA9IG9wdGlvbnMuYmluYXJ5ID8gMiA6IDE7XG4gICAgbGV0IHJzdjEgPSBvcHRpb25zLmNvbXByZXNzO1xuXG4gICAgaWYgKHRoaXMuX2ZpcnN0RnJhZ21lbnQpIHtcbiAgICAgIHRoaXMuX2ZpcnN0RnJhZ21lbnQgPSBmYWxzZTtcbiAgICAgIGlmIChyc3YxICYmIHBlck1lc3NhZ2VEZWZsYXRlKSB7XG4gICAgICAgIHJzdjEgPSBidWYubGVuZ3RoID49IHBlck1lc3NhZ2VEZWZsYXRlLl90aHJlc2hvbGQ7XG4gICAgICB9XG4gICAgICB0aGlzLl9jb21wcmVzcyA9IHJzdjE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJzdjEgPSBmYWxzZTtcbiAgICAgIG9wY29kZSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZmluKSB0aGlzLl9maXJzdEZyYWdtZW50ID0gdHJ1ZTtcblxuICAgIGlmIChwZXJNZXNzYWdlRGVmbGF0ZSkge1xuICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgZmluOiBvcHRpb25zLmZpbixcbiAgICAgICAgcnN2MSxcbiAgICAgICAgb3Bjb2RlLFxuICAgICAgICBtYXNrOiBvcHRpb25zLm1hc2ssXG4gICAgICAgIHJlYWRPbmx5OiB0b0J1ZmZlci5yZWFkT25seVxuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMuX2RlZmxhdGluZykge1xuICAgICAgICB0aGlzLmVucXVldWUoW3RoaXMuZGlzcGF0Y2gsIGJ1ZiwgdGhpcy5fY29tcHJlc3MsIG9wdHMsIGNiXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRpc3BhdGNoKGJ1ZiwgdGhpcy5fY29tcHJlc3MsIG9wdHMsIGNiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZW5kRnJhbWUoXG4gICAgICAgIFNlbmRlci5mcmFtZShidWYsIHtcbiAgICAgICAgICBmaW46IG9wdGlvbnMuZmluLFxuICAgICAgICAgIHJzdjE6IGZhbHNlLFxuICAgICAgICAgIG9wY29kZSxcbiAgICAgICAgICBtYXNrOiBvcHRpb25zLm1hc2ssXG4gICAgICAgICAgcmVhZE9ubHk6IHRvQnVmZmVyLnJlYWRPbmx5XG4gICAgICAgIH0pLFxuICAgICAgICBjYlxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhIGRhdGEgbWVzc2FnZS5cbiAgICpcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGRhdGEgVGhlIG1lc3NhZ2UgdG8gc2VuZFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGNvbXByZXNzIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBjb21wcmVzcyBgZGF0YWBcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgT3B0aW9ucyBvYmplY3RcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMub3Bjb2RlIFRoZSBvcGNvZGVcbiAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLnJlYWRPbmx5IFNwZWNpZmllcyB3aGV0aGVyIGBkYXRhYCBjYW4gYmUgbW9kaWZpZWRcbiAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLmZpbiBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdG8gc2V0IHRoZSBGSU4gYml0XG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5tYXNrIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBtYXNrIGBkYXRhYFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMucnN2MSBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdG8gc2V0IHRoZSBSU1YxIGJpdFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiBDYWxsYmFja1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZGlzcGF0Y2goZGF0YSwgY29tcHJlc3MsIG9wdGlvbnMsIGNiKSB7XG4gICAgaWYgKCFjb21wcmVzcykge1xuICAgICAgdGhpcy5zZW5kRnJhbWUoU2VuZGVyLmZyYW1lKGRhdGEsIG9wdGlvbnMpLCBjYik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGVyTWVzc2FnZURlZmxhdGUgPSB0aGlzLl9leHRlbnNpb25zW1Blck1lc3NhZ2VEZWZsYXRlLmV4dGVuc2lvbk5hbWVdO1xuXG4gICAgdGhpcy5fZGVmbGF0aW5nID0gdHJ1ZTtcbiAgICBwZXJNZXNzYWdlRGVmbGF0ZS5jb21wcmVzcyhkYXRhLCBvcHRpb25zLmZpbiwgKF8sIGJ1ZikgPT4ge1xuICAgICAgaWYgKHRoaXMuX3NvY2tldC5kZXN0cm95ZWQpIHtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFxuICAgICAgICAgICdUaGUgc29ja2V0IHdhcyBjbG9zZWQgd2hpbGUgZGF0YSB3YXMgYmVpbmcgY29tcHJlc3NlZCdcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSBjYihlcnIpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IHRoaXMuX3F1ZXVlW2ldWzRdO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZGVmbGF0aW5nID0gZmFsc2U7XG4gICAgICBvcHRpb25zLnJlYWRPbmx5ID0gZmFsc2U7XG4gICAgICB0aGlzLnNlbmRGcmFtZShTZW5kZXIuZnJhbWUoYnVmLCBvcHRpb25zKSwgY2IpO1xuICAgICAgdGhpcy5kZXF1ZXVlKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZXMgcXVldWVkIHNlbmQgb3BlcmF0aW9ucy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGRlcXVldWUoKSB7XG4gICAgd2hpbGUgKCF0aGlzLl9kZWZsYXRpbmcgJiYgdGhpcy5fcXVldWUubGVuZ3RoKSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSB0aGlzLl9xdWV1ZS5zaGlmdCgpO1xuXG4gICAgICB0aGlzLl9idWZmZXJlZEJ5dGVzIC09IHBhcmFtc1sxXS5sZW5ndGg7XG4gICAgICBSZWZsZWN0LmFwcGx5KHBhcmFtc1swXSwgdGhpcywgcGFyYW1zLnNsaWNlKDEpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRW5xdWV1ZXMgYSBzZW5kIG9wZXJhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gcGFyYW1zIFNlbmQgb3BlcmF0aW9uIHBhcmFtZXRlcnMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBlbnF1ZXVlKHBhcmFtcykge1xuICAgIHRoaXMuX2J1ZmZlcmVkQnl0ZXMgKz0gcGFyYW1zWzFdLmxlbmd0aDtcbiAgICB0aGlzLl9xdWV1ZS5wdXNoKHBhcmFtcyk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgYSBmcmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtCdWZmZXJbXX0gbGlzdCBUaGUgZnJhbWUgdG8gc2VuZFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiBDYWxsYmFja1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc2VuZEZyYW1lKGxpc3QsIGNiKSB7XG4gICAgaWYgKGxpc3QubGVuZ3RoID09PSAyKSB7XG4gICAgICB0aGlzLl9zb2NrZXQuY29yaygpO1xuICAgICAgdGhpcy5fc29ja2V0LndyaXRlKGxpc3RbMF0pO1xuICAgICAgdGhpcy5fc29ja2V0LndyaXRlKGxpc3RbMV0sIGNiKTtcbiAgICAgIHRoaXMuX3NvY2tldC51bmNvcmsoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc29ja2V0LndyaXRlKGxpc3RbMF0sIGNiKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTZW5kZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vXG4vLyBBbGxvd2VkIHRva2VuIGNoYXJhY3RlcnM6XG4vL1xuLy8gJyEnLCAnIycsICckJywgJyUnLCAnJicsICcnJywgJyonLCAnKycsICctJyxcbi8vICcuJywgMC05LCBBLVosICdeJywgJ18nLCAnYCcsIGEteiwgJ3wnLCAnfidcbi8vXG4vLyB0b2tlbkNoYXJzWzMyXSA9PT0gMCAvLyAnICdcbi8vIHRva2VuQ2hhcnNbMzNdID09PSAxIC8vICchJ1xuLy8gdG9rZW5DaGFyc1szNF0gPT09IDAgLy8gJ1wiJ1xuLy8gLi4uXG4vL1xuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCB0b2tlbkNoYXJzID0gW1xuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAvLyAwIC0gMTVcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgLy8gMTYgLSAzMVxuICAwLCAxLCAwLCAxLCAxLCAxLCAxLCAxLCAwLCAwLCAxLCAxLCAwLCAxLCAxLCAwLCAvLyAzMiAtIDQ3XG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAsIDAsIDAsIDAsIDAsIDAsIC8vIDQ4IC0gNjNcbiAgMCwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLy8gNjQgLSA3OVxuICAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAwLCAwLCAwLCAxLCAxLCAvLyA4MCAtIDk1XG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIC8vIDk2IC0gMTExXG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAsIDEsIDAsIDEsIDAgLy8gMTEyIC0gMTI3XG5dO1xuXG4vKipcbiAqIEFkZHMgYW4gb2ZmZXIgdG8gdGhlIG1hcCBvZiBleHRlbnNpb24gb2ZmZXJzIG9yIGEgcGFyYW1ldGVyIHRvIHRoZSBtYXAgb2ZcbiAqIHBhcmFtZXRlcnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlc3QgVGhlIG1hcCBvZiBleHRlbnNpb24gb2ZmZXJzIG9yIHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIFRoZSBleHRlbnNpb24gb3IgcGFyYW1ldGVyIG5hbWVcbiAqIEBwYXJhbSB7KE9iamVjdHxCb29sZWFufFN0cmluZyl9IGVsZW0gVGhlIGV4dGVuc2lvbiBwYXJhbWV0ZXJzIG9yIHRoZVxuICogICAgIHBhcmFtZXRlciB2YWx1ZVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcHVzaChkZXN0LCBuYW1lLCBlbGVtKSB7XG4gIGlmIChkZXN0W25hbWVdID09PSB1bmRlZmluZWQpIGRlc3RbbmFtZV0gPSBbZWxlbV07XG4gIGVsc2UgZGVzdFtuYW1lXS5wdXNoKGVsZW0pO1xufVxuXG4vKipcbiAqIFBhcnNlcyB0aGUgYFNlYy1XZWJTb2NrZXQtRXh0ZW5zaW9uc2AgaGVhZGVyIGludG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXIgVGhlIGZpZWxkIHZhbHVlIG9mIHRoZSBoZWFkZXJcbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHBhcnNlZCBvYmplY3RcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcGFyc2UoaGVhZGVyKSB7XG4gIGNvbnN0IG9mZmVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgaWYgKGhlYWRlciA9PT0gdW5kZWZpbmVkIHx8IGhlYWRlciA9PT0gJycpIHJldHVybiBvZmZlcnM7XG5cbiAgbGV0IHBhcmFtcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGxldCBtdXN0VW5lc2NhcGUgPSBmYWxzZTtcbiAgbGV0IGlzRXNjYXBpbmcgPSBmYWxzZTtcbiAgbGV0IGluUXVvdGVzID0gZmFsc2U7XG4gIGxldCBleHRlbnNpb25OYW1lO1xuICBsZXQgcGFyYW1OYW1lO1xuICBsZXQgc3RhcnQgPSAtMTtcbiAgbGV0IGVuZCA9IC0xO1xuICBsZXQgaSA9IDA7XG5cbiAgZm9yICg7IGkgPCBoZWFkZXIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjb2RlID0gaGVhZGVyLmNoYXJDb2RlQXQoaSk7XG5cbiAgICBpZiAoZXh0ZW5zaW9uTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoZW5kID09PSAtMSAmJiB0b2tlbkNoYXJzW2NvZGVdID09PSAxKSB7XG4gICAgICAgIGlmIChzdGFydCA9PT0gLTEpIHN0YXJ0ID0gaTtcbiAgICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHgyMCAvKiAnICcgKi8gfHwgY29kZSA9PT0gMHgwOSAvKiAnXFx0JyAqLykge1xuICAgICAgICBpZiAoZW5kID09PSAtMSAmJiBzdGFydCAhPT0gLTEpIGVuZCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4M2IgLyogJzsnICovIHx8IGNvZGUgPT09IDB4MmMgLyogJywnICovKSB7XG4gICAgICAgIGlmIChzdGFydCA9PT0gLTEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYFVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7aX1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbmQgPT09IC0xKSBlbmQgPSBpO1xuICAgICAgICBjb25zdCBuYW1lID0gaGVhZGVyLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgICBpZiAoY29kZSA9PT0gMHgyYykge1xuICAgICAgICAgIHB1c2gob2ZmZXJzLCBuYW1lLCBwYXJhbXMpO1xuICAgICAgICAgIHBhcmFtcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXh0ZW5zaW9uTmFtZSA9IG5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydCA9IGVuZCA9IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBVbmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2l9YCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbU5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGVuZCA9PT0gLTEgJiYgdG9rZW5DaGFyc1tjb2RlXSA9PT0gMSkge1xuICAgICAgICBpZiAoc3RhcnQgPT09IC0xKSBzdGFydCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4MjAgfHwgY29kZSA9PT0gMHgwOSkge1xuICAgICAgICBpZiAoZW5kID09PSAtMSAmJiBzdGFydCAhPT0gLTEpIGVuZCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4M2IgfHwgY29kZSA9PT0gMHgyYykge1xuICAgICAgICBpZiAoc3RhcnQgPT09IC0xKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBVbmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2l9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW5kID09PSAtMSkgZW5kID0gaTtcbiAgICAgICAgcHVzaChwYXJhbXMsIGhlYWRlci5zbGljZShzdGFydCwgZW5kKSwgdHJ1ZSk7XG4gICAgICAgIGlmIChjb2RlID09PSAweDJjKSB7XG4gICAgICAgICAgcHVzaChvZmZlcnMsIGV4dGVuc2lvbk5hbWUsIHBhcmFtcyk7XG4gICAgICAgICAgcGFyYW1zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBleHRlbnNpb25OYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnQgPSBlbmQgPSAtMTtcbiAgICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHgzZCAvKiAnPScgKi8gJiYgc3RhcnQgIT09IC0xICYmIGVuZCA9PT0gLTEpIHtcbiAgICAgICAgcGFyYW1OYW1lID0gaGVhZGVyLnNsaWNlKHN0YXJ0LCBpKTtcbiAgICAgICAgc3RhcnQgPSBlbmQgPSAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihgVW5leHBlY3RlZCBjaGFyYWN0ZXIgYXQgaW5kZXggJHtpfWApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvL1xuICAgICAgLy8gVGhlIHZhbHVlIG9mIGEgcXVvdGVkLXN0cmluZyBhZnRlciB1bmVzY2FwaW5nIG11c3QgY29uZm9ybSB0byB0aGVcbiAgICAgIC8vIHRva2VuIEFCTkYsIHNvIG9ubHkgdG9rZW4gY2hhcmFjdGVycyBhcmUgdmFsaWQuXG4gICAgICAvLyBSZWY6IGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2NDU1I3NlY3Rpb24tOS4xXG4gICAgICAvL1xuICAgICAgaWYgKGlzRXNjYXBpbmcpIHtcbiAgICAgICAgaWYgKHRva2VuQ2hhcnNbY29kZV0gIT09IDEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYFVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7aX1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnQgPT09IC0xKSBzdGFydCA9IGk7XG4gICAgICAgIGVsc2UgaWYgKCFtdXN0VW5lc2NhcGUpIG11c3RVbmVzY2FwZSA9IHRydWU7XG4gICAgICAgIGlzRXNjYXBpbmcgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoaW5RdW90ZXMpIHtcbiAgICAgICAgaWYgKHRva2VuQ2hhcnNbY29kZV0gPT09IDEpIHtcbiAgICAgICAgICBpZiAoc3RhcnQgPT09IC0xKSBzdGFydCA9IGk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHgyMiAvKiAnXCInICovICYmIHN0YXJ0ICE9PSAtMSkge1xuICAgICAgICAgIGluUXVvdGVzID0gZmFsc2U7XG4gICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2RlID09PSAweDVjIC8qICdcXCcgKi8pIHtcbiAgICAgICAgICBpc0VzY2FwaW5nID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYFVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7aX1gKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjb2RlID09PSAweDIyICYmIGhlYWRlci5jaGFyQ29kZUF0KGkgLSAxKSA9PT0gMHgzZCkge1xuICAgICAgICBpblF1b3RlcyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGVuZCA9PT0gLTEgJiYgdG9rZW5DaGFyc1tjb2RlXSA9PT0gMSkge1xuICAgICAgICBpZiAoc3RhcnQgPT09IC0xKSBzdGFydCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0ICE9PSAtMSAmJiAoY29kZSA9PT0gMHgyMCB8fCBjb2RlID09PSAweDA5KSkge1xuICAgICAgICBpZiAoZW5kID09PSAtMSkgZW5kID0gaTtcbiAgICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHgzYiB8fCBjb2RlID09PSAweDJjKSB7XG4gICAgICAgIGlmIChzdGFydCA9PT0gLTEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYFVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7aX1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbmQgPT09IC0xKSBlbmQgPSBpO1xuICAgICAgICBsZXQgdmFsdWUgPSBoZWFkZXIuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgICAgIGlmIChtdXN0VW5lc2NhcGUpIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcXFwvZywgJycpO1xuICAgICAgICAgIG11c3RVbmVzY2FwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHB1c2gocGFyYW1zLCBwYXJhbU5hbWUsIHZhbHVlKTtcbiAgICAgICAgaWYgKGNvZGUgPT09IDB4MmMpIHtcbiAgICAgICAgICBwdXNoKG9mZmVycywgZXh0ZW5zaW9uTmFtZSwgcGFyYW1zKTtcbiAgICAgICAgICBwYXJhbXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGV4dGVuc2lvbk5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJhbU5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHN0YXJ0ID0gZW5kID0gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYFVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7aX1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc3RhcnQgPT09IC0xIHx8IGluUXVvdGVzKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dCcpO1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gLTEpIGVuZCA9IGk7XG4gIGNvbnN0IHRva2VuID0gaGVhZGVyLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICBpZiAoZXh0ZW5zaW9uTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcHVzaChvZmZlcnMsIHRva2VuLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGlmIChwYXJhbU5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcHVzaChwYXJhbXMsIHRva2VuLCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKG11c3RVbmVzY2FwZSkge1xuICAgICAgcHVzaChwYXJhbXMsIHBhcmFtTmFtZSwgdG9rZW4ucmVwbGFjZSgvXFxcXC9nLCAnJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoKHBhcmFtcywgcGFyYW1OYW1lLCB0b2tlbik7XG4gICAgfVxuICAgIHB1c2gob2ZmZXJzLCBleHRlbnNpb25OYW1lLCBwYXJhbXMpO1xuICB9XG5cbiAgcmV0dXJuIG9mZmVycztcbn1cblxuLyoqXG4gKiBCdWlsZHMgdGhlIGBTZWMtV2ViU29ja2V0LUV4dGVuc2lvbnNgIGhlYWRlciBmaWVsZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZXh0ZW5zaW9ucyBUaGUgbWFwIG9mIGV4dGVuc2lvbnMgYW5kIHBhcmFtZXRlcnMgdG8gZm9ybWF0XG4gKiBAcmV0dXJuIHtTdHJpbmd9IEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgZ2l2ZW4gb2JqZWN0XG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdChleHRlbnNpb25zKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhleHRlbnNpb25zKVxuICAgIC5tYXAoKGV4dGVuc2lvbikgPT4ge1xuICAgICAgbGV0IGNvbmZpZ3VyYXRpb25zID0gZXh0ZW5zaW9uc1tleHRlbnNpb25dO1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGNvbmZpZ3VyYXRpb25zKSkgY29uZmlndXJhdGlvbnMgPSBbY29uZmlndXJhdGlvbnNdO1xuICAgICAgcmV0dXJuIGNvbmZpZ3VyYXRpb25zXG4gICAgICAgIC5tYXAoKHBhcmFtcykgPT4ge1xuICAgICAgICAgIHJldHVybiBbZXh0ZW5zaW9uXVxuICAgICAgICAgICAgLmNvbmNhdChcbiAgICAgICAgICAgICAgT2JqZWN0LmtleXMocGFyYW1zKS5tYXAoKGspID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWVzID0gcGFyYW1zW2tdO1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZXMpKSB2YWx1ZXMgPSBbdmFsdWVzXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVzXG4gICAgICAgICAgICAgICAgICAubWFwKCh2KSA9PiAodiA9PT0gdHJ1ZSA/IGsgOiBgJHtrfT0ke3Z9YCkpXG4gICAgICAgICAgICAgICAgICAuam9pbignOyAnKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5qb2luKCc7ICcpO1xuICAgICAgICB9KVxuICAgICAgICAuam9pbignLCAnKTtcbiAgICB9KVxuICAgIC5qb2luKCcsICcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgZm9ybWF0LCBwYXJzZSB9O1xuIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKi9cblxuZnVuY3Rpb24gc2V0dXAoZW52KSB7XG5cdGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmRlZmF1bHQgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuY29lcmNlID0gY29lcmNlO1xuXHRjcmVhdGVEZWJ1Zy5kaXNhYmxlID0gZGlzYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlID0gZW5hYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGVkID0gZW5hYmxlZDtcblx0Y3JlYXRlRGVidWcuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG5cdE9iamVjdC5rZXlzKGVudikuZm9yRWFjaChrZXkgPT4ge1xuXHRcdGNyZWF0ZURlYnVnW2tleV0gPSBlbnZba2V5XTtcblx0fSk7XG5cblx0LyoqXG5cdCogQWN0aXZlIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuXHQqL1xuXHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMgPSBbXTtcblxuXHQvKipcblx0KiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cblx0Ki9cblxuXHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdC8qKlxuXHQqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cblx0KlxuXHQqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cblx0Ki9cblx0Y3JlYXRlRGVidWcuZm9ybWF0dGVycyA9IHt9O1xuXG5cdC8qKlxuXHQqIFNlbGVjdHMgYSBjb2xvciBmb3IgYSBkZWJ1ZyBuYW1lc3BhY2Vcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIFRoZSBuYW1lc3BhY2Ugc3RyaW5nIGZvciB0aGUgZm9yIHRoZSBkZWJ1ZyBpbnN0YW5jZSB0byBiZSBjb2xvcmVkXG5cdCogQHJldHVybiB7TnVtYmVyfFN0cmluZ30gQW4gQU5TSSBjb2xvciBjb2RlIGZvciB0aGUgZ2l2ZW4gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuXHRcdGxldCBoYXNoID0gMDtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXNwYWNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcblx0XHRcdGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNyZWF0ZURlYnVnLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGNyZWF0ZURlYnVnLmNvbG9ycy5sZW5ndGhdO1xuXHR9XG5cdGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yID0gc2VsZWN0Q29sb3I7XG5cblx0LyoqXG5cdCogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQHJldHVybiB7RnVuY3Rpb259XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cdFx0bGV0IHByZXZUaW1lO1xuXG5cdFx0ZnVuY3Rpb24gZGVidWcoLi4uYXJncykge1xuXHRcdFx0Ly8gRGlzYWJsZWQ/XG5cdFx0XHRpZiAoIWRlYnVnLmVuYWJsZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzZWxmID0gZGVidWc7XG5cblx0XHRcdC8vIFNldCBgZGlmZmAgdGltZXN0YW1wXG5cdFx0XHRjb25zdCBjdXJyID0gTnVtYmVyKG5ldyBEYXRlKCkpO1xuXHRcdFx0Y29uc3QgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuXHRcdFx0c2VsZi5kaWZmID0gbXM7XG5cdFx0XHRzZWxmLnByZXYgPSBwcmV2VGltZTtcblx0XHRcdHNlbGYuY3VyciA9IGN1cnI7XG5cdFx0XHRwcmV2VGltZSA9IGN1cnI7XG5cblx0XHRcdGFyZ3NbMF0gPSBjcmVhdGVEZWJ1Zy5jb2VyY2UoYXJnc1swXSk7XG5cblx0XHRcdGlmICh0eXBlb2YgYXJnc1swXSAhPT0gJ3N0cmluZycpIHtcblx0XHRcdFx0Ly8gQW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cblx0XHRcdFx0YXJncy51bnNoaWZ0KCclTycpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuXHRcdFx0bGV0IGluZGV4ID0gMDtcblx0XHRcdGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCAobWF0Y2gsIGZvcm1hdCkgPT4ge1xuXHRcdFx0XHQvLyBJZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG5cdFx0XHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRjb25zdCBmb3JtYXR0ZXIgPSBjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cdFx0XHRcdGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsID0gYXJnc1tpbmRleF07XG5cdFx0XHRcdFx0bWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG5cdFx0XHRcdFx0Ly8gTm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuXHRcdFx0XHRcdGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHRpbmRleC0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBBcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuXHRcdFx0Y3JlYXRlRGVidWcuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG5cdFx0XHRjb25zdCBsb2dGbiA9IHNlbGYubG9nIHx8IGNyZWF0ZURlYnVnLmxvZztcblx0XHRcdGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXHRcdH1cblxuXHRcdGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcblx0XHRkZWJ1Zy5lbmFibGVkID0gY3JlYXRlRGVidWcuZW5hYmxlZChuYW1lc3BhY2UpO1xuXHRcdGRlYnVnLnVzZUNvbG9ycyA9IGNyZWF0ZURlYnVnLnVzZUNvbG9ycygpO1xuXHRcdGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcblx0XHRkZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblx0XHRkZWJ1Zy5leHRlbmQgPSBleHRlbmQ7XG5cdFx0Ly8gRGVidWcuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5cdFx0Ly8gZGVidWcucmF3TG9nID0gcmF3TG9nO1xuXG5cdFx0Ly8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcblx0XHRpZiAodHlwZW9mIGNyZWF0ZURlYnVnLmluaXQgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdGNyZWF0ZURlYnVnLmluaXQoZGVidWcpO1xuXHRcdH1cblxuXHRcdGNyZWF0ZURlYnVnLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcblxuXHRcdHJldHVybiBkZWJ1Zztcblx0fVxuXG5cdGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG5cdFx0Y29uc3QgaW5kZXggPSBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcblx0XHRpZiAoaW5kZXggIT09IC0xKSB7XG5cdFx0XHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRmdW5jdGlvbiBleHRlbmQobmFtZXNwYWNlLCBkZWxpbWl0ZXIpIHtcblx0XHRjb25zdCBuZXdEZWJ1ZyA9IGNyZWF0ZURlYnVnKHRoaXMubmFtZXNwYWNlICsgKHR5cGVvZiBkZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gJzonIDogZGVsaW1pdGVyKSArIG5hbWVzcGFjZSk7XG5cdFx0bmV3RGVidWcubG9nID0gdGhpcy5sb2c7XG5cdFx0cmV0dXJuIG5ld0RlYnVnO1xuXHR9XG5cblx0LyoqXG5cdCogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuXHQqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG5cdFx0Y3JlYXRlRGVidWcuc2F2ZShuYW1lc3BhY2VzKTtcblxuXHRcdGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG5cdFx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHRcdGxldCBpO1xuXHRcdGNvbnN0IHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcblx0XHRjb25zdCBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmICghc3BsaXRbaV0pIHtcblx0XHRcdFx0Ly8gaWdub3JlIGVtcHR5IHN0cmluZ3Ncblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuXG5cdFx0XHRpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgY3JlYXRlRGVidWcuaW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBpbnN0YW5jZSA9IGNyZWF0ZURlYnVnLmluc3RhbmNlc1tpXTtcblx0XHRcdGluc3RhbmNlLmVuYWJsZWQgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKGluc3RhbmNlLm5hbWVzcGFjZSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG5cdCpcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBkaXNhYmxlKCkge1xuXHRcdGNvbnN0IG5hbWVzcGFjZXMgPSBbXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5uYW1lcy5tYXAodG9OYW1lc3BhY2UpLFxuXHRcdFx0Li4uY3JlYXRlRGVidWcuc2tpcHMubWFwKHRvTmFtZXNwYWNlKS5tYXAobmFtZXNwYWNlID0+ICctJyArIG5hbWVzcGFjZSlcblx0XHRdLmpvaW4oJywnKTtcblx0XHRjcmVhdGVEZWJ1Zy5lbmFibGUoJycpO1xuXHRcdHJldHVybiBuYW1lc3BhY2VzO1xuXHR9XG5cblx0LyoqXG5cdCogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVcblx0KiBAcmV0dXJuIHtCb29sZWFufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuXHRcdGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0bGV0IGk7XG5cdFx0bGV0IGxlbjtcblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQqIENvbnZlcnQgcmVnZXhwIHRvIG5hbWVzcGFjZVxuXHQqXG5cdCogQHBhcmFtIHtSZWdFeHB9IHJlZ3hlcFxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHRvTmFtZXNwYWNlKHJlZ2V4cCkge1xuXHRcdHJldHVybiByZWdleHAudG9TdHJpbmcoKVxuXHRcdFx0LnN1YnN0cmluZygyLCByZWdleHAudG9TdHJpbmcoKS5sZW5ndGggLSAyKVxuXHRcdFx0LnJlcGxhY2UoL1xcLlxcKlxcPyQvLCAnKicpO1xuXHR9XG5cblx0LyoqXG5cdCogQ29lcmNlIGB2YWxgLlxuXHQqXG5cdCogQHBhcmFtIHtNaXhlZH0gdmFsXG5cdCogQHJldHVybiB7TWl4ZWR9XG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcblx0XHRpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHtcblx0XHRcdHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHRjcmVhdGVEZWJ1Zy5lbmFibGUoY3JlYXRlRGVidWcubG9hZCgpKTtcblxuXHRyZXR1cm4gY3JlYXRlRGVidWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0dXA7XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIlxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZjtcblxudmFyIHdpdGhOYXRpdmVCdWZmZXIgPSB0eXBlb2YgQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBCdWZmZXIuaXNCdWZmZXIgPT09ICdmdW5jdGlvbic7XG52YXIgd2l0aE5hdGl2ZUFycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSAnZnVuY3Rpb24nO1xuXG52YXIgaXNWaWV3ID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyA/IEFycmF5QnVmZmVyLmlzVmlldyhvYmopIDogKG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBvYmogaXMgYSBidWZmZXIgb3IgYW4gYXJyYXlidWZmZXIuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaXNCdWYob2JqKSB7XG4gIHJldHVybiAod2l0aE5hdGl2ZUJ1ZmZlciAmJiBCdWZmZXIuaXNCdWZmZXIob2JqKSkgfHxcbiAgICAgICAgICAod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmIChvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBpc1ZpZXcob2JqKSkpO1xufVxuIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKi9cblxuZnVuY3Rpb24gc2V0dXAoZW52KSB7XG5cdGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmRlZmF1bHQgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuY29lcmNlID0gY29lcmNlO1xuXHRjcmVhdGVEZWJ1Zy5kaXNhYmxlID0gZGlzYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlID0gZW5hYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGVkID0gZW5hYmxlZDtcblx0Y3JlYXRlRGVidWcuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG5cdE9iamVjdC5rZXlzKGVudikuZm9yRWFjaChrZXkgPT4ge1xuXHRcdGNyZWF0ZURlYnVnW2tleV0gPSBlbnZba2V5XTtcblx0fSk7XG5cblx0LyoqXG5cdCogQWN0aXZlIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuXHQqL1xuXHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMgPSBbXTtcblxuXHQvKipcblx0KiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cblx0Ki9cblxuXHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdC8qKlxuXHQqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cblx0KlxuXHQqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cblx0Ki9cblx0Y3JlYXRlRGVidWcuZm9ybWF0dGVycyA9IHt9O1xuXG5cdC8qKlxuXHQqIFNlbGVjdHMgYSBjb2xvciBmb3IgYSBkZWJ1ZyBuYW1lc3BhY2Vcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIFRoZSBuYW1lc3BhY2Ugc3RyaW5nIGZvciB0aGUgZm9yIHRoZSBkZWJ1ZyBpbnN0YW5jZSB0byBiZSBjb2xvcmVkXG5cdCogQHJldHVybiB7TnVtYmVyfFN0cmluZ30gQW4gQU5TSSBjb2xvciBjb2RlIGZvciB0aGUgZ2l2ZW4gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuXHRcdGxldCBoYXNoID0gMDtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXNwYWNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcblx0XHRcdGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNyZWF0ZURlYnVnLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGNyZWF0ZURlYnVnLmNvbG9ycy5sZW5ndGhdO1xuXHR9XG5cdGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yID0gc2VsZWN0Q29sb3I7XG5cblx0LyoqXG5cdCogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQHJldHVybiB7RnVuY3Rpb259XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cdFx0bGV0IHByZXZUaW1lO1xuXG5cdFx0ZnVuY3Rpb24gZGVidWcoLi4uYXJncykge1xuXHRcdFx0Ly8gRGlzYWJsZWQ/XG5cdFx0XHRpZiAoIWRlYnVnLmVuYWJsZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzZWxmID0gZGVidWc7XG5cblx0XHRcdC8vIFNldCBgZGlmZmAgdGltZXN0YW1wXG5cdFx0XHRjb25zdCBjdXJyID0gTnVtYmVyKG5ldyBEYXRlKCkpO1xuXHRcdFx0Y29uc3QgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuXHRcdFx0c2VsZi5kaWZmID0gbXM7XG5cdFx0XHRzZWxmLnByZXYgPSBwcmV2VGltZTtcblx0XHRcdHNlbGYuY3VyciA9IGN1cnI7XG5cdFx0XHRwcmV2VGltZSA9IGN1cnI7XG5cblx0XHRcdGFyZ3NbMF0gPSBjcmVhdGVEZWJ1Zy5jb2VyY2UoYXJnc1swXSk7XG5cblx0XHRcdGlmICh0eXBlb2YgYXJnc1swXSAhPT0gJ3N0cmluZycpIHtcblx0XHRcdFx0Ly8gQW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cblx0XHRcdFx0YXJncy51bnNoaWZ0KCclTycpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuXHRcdFx0bGV0IGluZGV4ID0gMDtcblx0XHRcdGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCAobWF0Y2gsIGZvcm1hdCkgPT4ge1xuXHRcdFx0XHQvLyBJZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG5cdFx0XHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRjb25zdCBmb3JtYXR0ZXIgPSBjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cdFx0XHRcdGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsID0gYXJnc1tpbmRleF07XG5cdFx0XHRcdFx0bWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG5cdFx0XHRcdFx0Ly8gTm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuXHRcdFx0XHRcdGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHRpbmRleC0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBBcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuXHRcdFx0Y3JlYXRlRGVidWcuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG5cdFx0XHRjb25zdCBsb2dGbiA9IHNlbGYubG9nIHx8IGNyZWF0ZURlYnVnLmxvZztcblx0XHRcdGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXHRcdH1cblxuXHRcdGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcblx0XHRkZWJ1Zy5lbmFibGVkID0gY3JlYXRlRGVidWcuZW5hYmxlZChuYW1lc3BhY2UpO1xuXHRcdGRlYnVnLnVzZUNvbG9ycyA9IGNyZWF0ZURlYnVnLnVzZUNvbG9ycygpO1xuXHRcdGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcblx0XHRkZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblx0XHRkZWJ1Zy5leHRlbmQgPSBleHRlbmQ7XG5cdFx0Ly8gRGVidWcuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5cdFx0Ly8gZGVidWcucmF3TG9nID0gcmF3TG9nO1xuXG5cdFx0Ly8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcblx0XHRpZiAodHlwZW9mIGNyZWF0ZURlYnVnLmluaXQgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdGNyZWF0ZURlYnVnLmluaXQoZGVidWcpO1xuXHRcdH1cblxuXHRcdGNyZWF0ZURlYnVnLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcblxuXHRcdHJldHVybiBkZWJ1Zztcblx0fVxuXG5cdGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG5cdFx0Y29uc3QgaW5kZXggPSBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcblx0XHRpZiAoaW5kZXggIT09IC0xKSB7XG5cdFx0XHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRmdW5jdGlvbiBleHRlbmQobmFtZXNwYWNlLCBkZWxpbWl0ZXIpIHtcblx0XHRjb25zdCBuZXdEZWJ1ZyA9IGNyZWF0ZURlYnVnKHRoaXMubmFtZXNwYWNlICsgKHR5cGVvZiBkZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gJzonIDogZGVsaW1pdGVyKSArIG5hbWVzcGFjZSk7XG5cdFx0bmV3RGVidWcubG9nID0gdGhpcy5sb2c7XG5cdFx0cmV0dXJuIG5ld0RlYnVnO1xuXHR9XG5cblx0LyoqXG5cdCogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuXHQqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG5cdFx0Y3JlYXRlRGVidWcuc2F2ZShuYW1lc3BhY2VzKTtcblxuXHRcdGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG5cdFx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHRcdGxldCBpO1xuXHRcdGNvbnN0IHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcblx0XHRjb25zdCBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmICghc3BsaXRbaV0pIHtcblx0XHRcdFx0Ly8gaWdub3JlIGVtcHR5IHN0cmluZ3Ncblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuXG5cdFx0XHRpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgY3JlYXRlRGVidWcuaW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBpbnN0YW5jZSA9IGNyZWF0ZURlYnVnLmluc3RhbmNlc1tpXTtcblx0XHRcdGluc3RhbmNlLmVuYWJsZWQgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKGluc3RhbmNlLm5hbWVzcGFjZSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG5cdCpcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBkaXNhYmxlKCkge1xuXHRcdGNvbnN0IG5hbWVzcGFjZXMgPSBbXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5uYW1lcy5tYXAodG9OYW1lc3BhY2UpLFxuXHRcdFx0Li4uY3JlYXRlRGVidWcuc2tpcHMubWFwKHRvTmFtZXNwYWNlKS5tYXAobmFtZXNwYWNlID0+ICctJyArIG5hbWVzcGFjZSlcblx0XHRdLmpvaW4oJywnKTtcblx0XHRjcmVhdGVEZWJ1Zy5lbmFibGUoJycpO1xuXHRcdHJldHVybiBuYW1lc3BhY2VzO1xuXHR9XG5cblx0LyoqXG5cdCogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVcblx0KiBAcmV0dXJuIHtCb29sZWFufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuXHRcdGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0bGV0IGk7XG5cdFx0bGV0IGxlbjtcblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQqIENvbnZlcnQgcmVnZXhwIHRvIG5hbWVzcGFjZVxuXHQqXG5cdCogQHBhcmFtIHtSZWdFeHB9IHJlZ3hlcFxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHRvTmFtZXNwYWNlKHJlZ2V4cCkge1xuXHRcdHJldHVybiByZWdleHAudG9TdHJpbmcoKVxuXHRcdFx0LnN1YnN0cmluZygyLCByZWdleHAudG9TdHJpbmcoKS5sZW5ndGggLSAyKVxuXHRcdFx0LnJlcGxhY2UoL1xcLlxcKlxcPyQvLCAnKicpO1xuXHR9XG5cblx0LyoqXG5cdCogQ29lcmNlIGB2YWxgLlxuXHQqXG5cdCogQHBhcmFtIHtNaXhlZH0gdmFsXG5cdCogQHJldHVybiB7TWl4ZWR9XG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcblx0XHRpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHtcblx0XHRcdHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHRjcmVhdGVEZWJ1Zy5lbmFibGUoY3JlYXRlRGVidWcubG9hZCgpKTtcblxuXHRyZXR1cm4gY3JlYXRlRGVidWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0dXA7XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgU29ja2V0ID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBoYXNCaW4gPSByZXF1aXJlKCdoYXMtYmluYXJ5MicpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvOm5hbWVzcGFjZScpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IE5hbWVzcGFjZTtcblxuLyoqXG4gKiBCbGFja2xpc3RlZCBldmVudHMuXG4gKi9cblxuZXhwb3J0cy5ldmVudHMgPSBbXG4gICdjb25uZWN0JywgICAgLy8gZm9yIHN5bW1ldHJ5IHdpdGggY2xpZW50XG4gICdjb25uZWN0aW9uJyxcbiAgJ25ld0xpc3RlbmVyJ1xuXTtcblxuLyoqXG4gKiBGbGFncy5cbiAqL1xuXG5leHBvcnRzLmZsYWdzID0gW1xuICAnanNvbicsXG4gICd2b2xhdGlsZScsXG4gICdsb2NhbCdcbl07XG5cbi8qKlxuICogYEV2ZW50RW1pdHRlciNlbWl0YCByZWZlcmVuY2UuXG4gKi9cblxudmFyIGVtaXQgPSBFbWl0dGVyLnByb3RvdHlwZS5lbWl0O1xuXG4vKipcbiAqIE5hbWVzcGFjZSBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1NlcnZlcn0gc2VydmVyIGluc3RhbmNlXG4gKiBAcGFyYW0ge1NvY2tldH0gbmFtZVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gTmFtZXNwYWNlKHNlcnZlciwgbmFtZSl7XG4gIHRoaXMubmFtZSA9IG5hbWU7XG4gIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICB0aGlzLnNvY2tldHMgPSB7fTtcbiAgdGhpcy5jb25uZWN0ZWQgPSB7fTtcbiAgdGhpcy5mbnMgPSBbXTtcbiAgdGhpcy5pZHMgPSAwO1xuICB0aGlzLnJvb21zID0gW107XG4gIHRoaXMuZmxhZ3MgPSB7fTtcbiAgdGhpcy5pbml0QWRhcHRlcigpO1xufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gYEV2ZW50RW1pdHRlcmAuXG4gKi9cblxuTmFtZXNwYWNlLnByb3RvdHlwZS5fX3Byb3RvX18gPSBFbWl0dGVyLnByb3RvdHlwZTtcblxuLyoqXG4gKiBBcHBseSBmbGFncyBmcm9tIGBTb2NrZXRgLlxuICovXG5cbmV4cG9ydHMuZmxhZ3MuZm9yRWFjaChmdW5jdGlvbihmbGFnKXtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5hbWVzcGFjZS5wcm90b3R5cGUsIGZsYWcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5mbGFnc1tmbGFnXSA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0pO1xufSk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIGBBZGFwdGVyYCBmb3IgdGhpcyBuc3AuXG4gKiBSdW4gdXBvbiBjaGFuZ2luZyBhZGFwdGVyIGJ5IGBTZXJ2ZXIjYWRhcHRlcmBcbiAqIGluIGFkZGl0aW9uIHRvIHRoZSBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5OYW1lc3BhY2UucHJvdG90eXBlLmluaXRBZGFwdGVyID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5hZGFwdGVyID0gbmV3ICh0aGlzLnNlcnZlci5hZGFwdGVyKCkpKHRoaXMpO1xufTtcblxuLyoqXG4gKiBTZXRzIHVwIG5hbWVzcGFjZSBtaWRkbGV3YXJlLlxuICpcbiAqIEByZXR1cm4ge05hbWVzcGFjZX0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5OYW1lc3BhY2UucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uKGZuKXtcbiAgaWYgKHRoaXMuc2VydmVyLmVpbyAmJiB0aGlzLm5hbWUgPT09ICcvJykge1xuICAgIGRlYnVnKCdyZW1vdmluZyBpbml0aWFsIHBhY2tldCcpO1xuICAgIGRlbGV0ZSB0aGlzLnNlcnZlci5laW8uaW5pdGlhbFBhY2tldDtcbiAgfVxuICB0aGlzLmZucy5wdXNoKGZuKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEV4ZWN1dGVzIHRoZSBtaWRkbGV3YXJlIGZvciBhbiBpbmNvbWluZyBjbGllbnQuXG4gKlxuICogQHBhcmFtIHtTb2NrZXR9IHNvY2tldCB0aGF0IHdpbGwgZ2V0IGFkZGVkXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBsYXN0IGZuIGNhbGwgaW4gdGhlIG1pZGRsZXdhcmVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk5hbWVzcGFjZS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oc29ja2V0LCBmbil7XG4gIHZhciBmbnMgPSB0aGlzLmZucy5zbGljZSgwKTtcbiAgaWYgKCFmbnMubGVuZ3RoKSByZXR1cm4gZm4obnVsbCk7XG5cbiAgZnVuY3Rpb24gcnVuKGkpe1xuICAgIGZuc1tpXShzb2NrZXQsIGZ1bmN0aW9uKGVycil7XG4gICAgICAvLyB1cG9uIGVycm9yLCBzaG9ydC1jaXJjdWl0XG4gICAgICBpZiAoZXJyKSByZXR1cm4gZm4oZXJyKTtcblxuICAgICAgLy8gaWYgbm8gbWlkZGxld2FyZSBsZWZ0LCBzdW1tb24gY2FsbGJhY2tcbiAgICAgIGlmICghZm5zW2kgKyAxXSkgcmV0dXJuIGZuKG51bGwpO1xuXG4gICAgICAvLyBnbyBvbiB0byBuZXh0XG4gICAgICBydW4oaSArIDEpO1xuICAgIH0pO1xuICB9XG5cbiAgcnVuKDApO1xufTtcblxuLyoqXG4gKiBUYXJnZXRzIGEgcm9vbSB3aGVuIGVtaXR0aW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtOYW1lc3BhY2V9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTmFtZXNwYWNlLnByb3RvdHlwZS50byA9XG5OYW1lc3BhY2UucHJvdG90eXBlLmluID0gZnVuY3Rpb24obmFtZSl7XG4gIGlmICghfnRoaXMucm9vbXMuaW5kZXhPZihuYW1lKSkgdGhpcy5yb29tcy5wdXNoKG5hbWUpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQWRkcyBhIG5ldyBjbGllbnQuXG4gKlxuICogQHJldHVybiB7U29ja2V0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTmFtZXNwYWNlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihjbGllbnQsIHF1ZXJ5LCBmbil7XG4gIGRlYnVnKCdhZGRpbmcgc29ja2V0IHRvIG5zcCAlcycsIHRoaXMubmFtZSk7XG4gIHZhciBzb2NrZXQgPSBuZXcgU29ja2V0KHRoaXMsIGNsaWVudCwgcXVlcnkpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMucnVuKHNvY2tldCwgZnVuY3Rpb24oZXJyKXtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCl7XG4gICAgICBpZiAoJ29wZW4nID09IGNsaWVudC5jb25uLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIHNvY2tldC5lcnJvcihlcnIuZGF0YSB8fCBlcnIubWVzc2FnZSk7XG5cbiAgICAgICAgLy8gdHJhY2sgc29ja2V0XG4gICAgICAgIHNlbGYuc29ja2V0c1tzb2NrZXQuaWRdID0gc29ja2V0O1xuXG4gICAgICAgIC8vIGl0J3MgcGFyYW1vdW50IHRoYXQgdGhlIGludGVybmFsIGBvbmNvbm5lY3RgIGxvZ2ljXG4gICAgICAgIC8vIGZpcmVzIGJlZm9yZSB1c2VyLXNldCBldmVudHMgdG8gcHJldmVudCBzdGF0ZSBvcmRlclxuICAgICAgICAvLyB2aW9sYXRpb25zIChzdWNoIGFzIGEgZGlzY29ubmVjdGlvbiBiZWZvcmUgdGhlIGNvbm5lY3Rpb25cbiAgICAgICAgLy8gbG9naWMgaXMgY29tcGxldGUpXG4gICAgICAgIHNvY2tldC5vbmNvbm5lY3QoKTtcbiAgICAgICAgaWYgKGZuKSBmbigpO1xuXG4gICAgICAgIC8vIGZpcmUgdXNlci1zZXQgZXZlbnRzXG4gICAgICAgIHNlbGYuZW1pdCgnY29ubmVjdCcsIHNvY2tldCk7XG4gICAgICAgIHNlbGYuZW1pdCgnY29ubmVjdGlvbicsIHNvY2tldCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWJ1ZygnbmV4dCBjYWxsZWQgYWZ0ZXIgY2xpZW50IHdhcyBjbG9zZWQgLSBpZ25vcmluZyBzb2NrZXQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBzb2NrZXQ7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgYSBjbGllbnQuIENhbGxlZCBieSBlYWNoIGBTb2NrZXRgLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk5hbWVzcGFjZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oc29ja2V0KXtcbiAgaWYgKHRoaXMuc29ja2V0cy5oYXNPd25Qcm9wZXJ0eShzb2NrZXQuaWQpKSB7XG4gICAgZGVsZXRlIHRoaXMuc29ja2V0c1tzb2NrZXQuaWRdO1xuICB9IGVsc2Uge1xuICAgIGRlYnVnKCdpZ25vcmluZyByZW1vdmUgZm9yICVzJywgc29ja2V0LmlkKTtcbiAgfVxufTtcblxuLyoqXG4gKiBFbWl0cyB0byBhbGwgY2xpZW50cy5cbiAqXG4gKiBAcmV0dXJuIHtOYW1lc3BhY2V9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTmFtZXNwYWNlLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXYpe1xuICBpZiAofmV4cG9ydHMuZXZlbnRzLmluZGV4T2YoZXYpKSB7XG4gICAgZW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8vIHNldCB1cCBwYWNrZXQgb2JqZWN0XG4gIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgdmFyIHBhY2tldCA9IHtcbiAgICB0eXBlOiAodGhpcy5mbGFncy5iaW5hcnkgIT09IHVuZGVmaW5lZCA/IHRoaXMuZmxhZ3MuYmluYXJ5IDogaGFzQmluKGFyZ3MpKSA/IHBhcnNlci5CSU5BUllfRVZFTlQgOiBwYXJzZXIuRVZFTlQsXG4gICAgZGF0YTogYXJnc1xuICB9O1xuXG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxiYWNrcyBhcmUgbm90IHN1cHBvcnRlZCB3aGVuIGJyb2FkY2FzdGluZycpO1xuICB9XG5cbiAgdmFyIHJvb21zID0gdGhpcy5yb29tcy5zbGljZSgwKTtcbiAgdmFyIGZsYWdzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5mbGFncyk7XG5cbiAgLy8gcmVzZXQgZmxhZ3NcbiAgdGhpcy5yb29tcyA9IFtdO1xuICB0aGlzLmZsYWdzID0ge307XG5cbiAgdGhpcy5hZGFwdGVyLmJyb2FkY2FzdChwYWNrZXQsIHtcbiAgICByb29tczogcm9vbXMsXG4gICAgZmxhZ3M6IGZsYWdzXG4gIH0pO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBhIGBtZXNzYWdlYCBldmVudCB0byBhbGwgY2xpZW50cy5cbiAqXG4gKiBAcmV0dXJuIHtOYW1lc3BhY2V9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTmFtZXNwYWNlLnByb3RvdHlwZS5zZW5kID1cbk5hbWVzcGFjZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbigpe1xuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gIGFyZ3MudW5zaGlmdCgnbWVzc2FnZScpO1xuICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBHZXRzIGEgbGlzdCBvZiBjbGllbnRzLlxuICpcbiAqIEByZXR1cm4ge05hbWVzcGFjZX0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5OYW1lc3BhY2UucHJvdG90eXBlLmNsaWVudHMgPSBmdW5jdGlvbihmbil7XG4gIGlmKCF0aGlzLmFkYXB0ZXIpe1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gYWRhcHRlciBmb3IgdGhpcyBuYW1lc3BhY2UsIGFyZSB5b3UgdHJ5aW5nIHRvIGdldCB0aGUgbGlzdCBvZiBjbGllbnRzIG9mIGEgZHluYW1pYyBuYW1lc3BhY2U/JylcbiAgfVxuICB0aGlzLmFkYXB0ZXIuY2xpZW50cyh0aGlzLnJvb21zLCBmbik7XG4gIC8vIHJlc2V0IHJvb21zIGZvciBzY2VuYXJpbzpcbiAgLy8gLmluKCdyb29tJykuY2xpZW50cygpIChHSC0xOTc4KVxuICB0aGlzLnJvb21zID0gW107XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjb21wcmVzcyBmbGFnLlxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gY29tcHJlc3MgaWYgYHRydWVgLCBjb21wcmVzc2VzIHRoZSBzZW5kaW5nIGRhdGFcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5OYW1lc3BhY2UucHJvdG90eXBlLmNvbXByZXNzID0gZnVuY3Rpb24oY29tcHJlc3Mpe1xuICB0aGlzLmZsYWdzLmNvbXByZXNzID0gY29tcHJlc3M7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBiaW5hcnkgZmxhZ1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gRW5jb2RlIGFzIGlmIGl0IGhhcyBiaW5hcnkgZGF0YSBpZiBgdHJ1ZWAsIEVuY29kZSBhcyBpZiBpdCBkb2VzbnQgaGF2ZSBiaW5hcnkgZGF0YSBpZiBgZmFsc2VgXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuIE5hbWVzcGFjZS5wcm90b3R5cGUuYmluYXJ5ID0gZnVuY3Rpb24gKGJpbmFyeSkge1xuICAgdGhpcy5mbGFncy5iaW5hcnkgPSBiaW5hcnk7XG4gICByZXR1cm4gdGhpcztcbiB9O1xuIiwiaW1wb3J0ICogYXMgS29hIGZyb20gJ2tvYSc7XHJcbmltcG9ydCBzb2NrZXRJbyBmcm9tICcuL3NvY2tldC5pbyc7XHJcbmltcG9ydCAqIGFzIHNvY2tldCBmcm9tICdzb2NrZXQuaW8nO1xyXG5jb25zdCBhcHAgPSBuZXcgS29hKCk7XHJcbnNvY2tldElvKGFwcCwgc29ja2V0KTtcclxuXHJcbmFwcC51c2UoKGN0eDogYW55KSA9PiB7XHJcbiAgICBjdHguYm9keSA9IHtcclxuICAgICAgICBjb2RlOiAwLFxyXG4gICAgICAgIG1lc3NhZ2U6ICdrb2Egc2VydmVyIGlzIHJ1bm5pbmcnXHJcbiAgICB9O1xyXG59KTtcclxuYXBwLmxpc3RlbigzMDA1KTsiLCJcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbmNvbnN0IGlzR2VuZXJhdG9yRnVuY3Rpb24gPSByZXF1aXJlKCdpcy1nZW5lcmF0b3ItZnVuY3Rpb24nKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgna29hOmFwcGxpY2F0aW9uJyk7XG5jb25zdCBvbkZpbmlzaGVkID0gcmVxdWlyZSgnb24tZmluaXNoZWQnKTtcbmNvbnN0IHJlc3BvbnNlID0gcmVxdWlyZSgnLi9yZXNwb25zZScpO1xuY29uc3QgY29tcG9zZSA9IHJlcXVpcmUoJ2tvYS1jb21wb3NlJyk7XG5jb25zdCBjb250ZXh0ID0gcmVxdWlyZSgnLi9jb250ZXh0Jyk7XG5jb25zdCByZXF1ZXN0ID0gcmVxdWlyZSgnLi9yZXF1ZXN0Jyk7XG5jb25zdCBzdGF0dXNlcyA9IHJlcXVpcmUoJ3N0YXR1c2VzJyk7XG5jb25zdCBFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5jb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuY29uc3QgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5jb25zdCBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xuY29uc3Qgb25seSA9IHJlcXVpcmUoJ29ubHknKTtcbmNvbnN0IGNvbnZlcnQgPSByZXF1aXJlKCdrb2EtY29udmVydCcpO1xuY29uc3QgZGVwcmVjYXRlID0gcmVxdWlyZSgnZGVwZCcpKCdrb2EnKTtcbmNvbnN0IHsgSHR0cEVycm9yIH0gPSByZXF1aXJlKCdodHRwLWVycm9ycycpO1xuXG4vKipcbiAqIEV4cG9zZSBgQXBwbGljYXRpb25gIGNsYXNzLlxuICogSW5oZXJpdHMgZnJvbSBgRW1pdHRlci5wcm90b3R5cGVgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgQXBwbGljYXRpb24gZXh0ZW5kcyBFbWl0dGVyIHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgYSBuZXcgYEFwcGxpY2F0aW9uYC5cbiAgICpcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgLyoqXG4gICAgKlxuICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBBcHBsaWNhdGlvbiBvcHRpb25zXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuZW52PSdkZXZlbG9wbWVudCddIEVudmlyb25tZW50XG4gICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbb3B0aW9ucy5rZXlzXSBTaWduZWQgY29va2llIGtleXNcbiAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucHJveHldIFRydXN0IHByb3h5IGhlYWRlcnNcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zdWJkb21haW5PZmZzZXRdIFN1YmRvbWFpbiBvZmZzZXRcbiAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucHJveHlJcEhlYWRlcl0gcHJveHkgaXAgaGVhZGVyLCBkZWZhdWx0IHRvIFgtRm9yd2FyZGVkLUZvclxuICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5tYXhJcHNDb3VudF0gbWF4IGlwcyByZWFkIGZyb20gcHJveHkgaXAgaGVhZGVyLCBkZWZhdWx0IHRvIDAgKG1lYW5zIGluZmluaXR5KVxuICAgICpcbiAgICAqL1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHRoaXMucHJveHkgPSBvcHRpb25zLnByb3h5IHx8IGZhbHNlO1xuICAgIHRoaXMuc3ViZG9tYWluT2Zmc2V0ID0gb3B0aW9ucy5zdWJkb21haW5PZmZzZXQgfHwgMjtcbiAgICB0aGlzLnByb3h5SXBIZWFkZXIgPSBvcHRpb25zLnByb3h5SXBIZWFkZXIgfHwgJ1gtRm9yd2FyZGVkLUZvcic7XG4gICAgdGhpcy5tYXhJcHNDb3VudCA9IG9wdGlvbnMubWF4SXBzQ291bnQgfHwgMDtcbiAgICB0aGlzLmVudiA9IG9wdGlvbnMuZW52IHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WIHx8ICdkZXZlbG9wbWVudCc7XG4gICAgaWYgKG9wdGlvbnMua2V5cykgdGhpcy5rZXlzID0gb3B0aW9ucy5rZXlzO1xuICAgIHRoaXMubWlkZGxld2FyZSA9IFtdO1xuICAgIHRoaXMuY29udGV4dCA9IE9iamVjdC5jcmVhdGUoY29udGV4dCk7XG4gICAgdGhpcy5yZXF1ZXN0ID0gT2JqZWN0LmNyZWF0ZShyZXF1ZXN0KTtcbiAgICB0aGlzLnJlc3BvbnNlID0gT2JqZWN0LmNyZWF0ZShyZXNwb25zZSk7XG4gICAgaWYgKHV0aWwuaW5zcGVjdC5jdXN0b20pIHtcbiAgICAgIHRoaXNbdXRpbC5pbnNwZWN0LmN1c3RvbV0gPSB0aGlzLmluc3BlY3Q7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNob3J0aGFuZCBmb3I6XG4gICAqXG4gICAqICAgIGh0dHAuY3JlYXRlU2VydmVyKGFwcC5jYWxsYmFjaygpKS5saXN0ZW4oLi4uKVxuICAgKlxuICAgKiBAcGFyYW0ge01peGVkfSAuLi5cbiAgICogQHJldHVybiB7U2VydmVyfVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBsaXN0ZW4oLi4uYXJncykge1xuICAgIGRlYnVnKCdsaXN0ZW4nKTtcbiAgICBjb25zdCBzZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcih0aGlzLmNhbGxiYWNrKCkpO1xuICAgIHJldHVybiBzZXJ2ZXIubGlzdGVuKC4uLmFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBKU09OIHJlcHJlc2VudGF0aW9uLlxuICAgKiBXZSBvbmx5IGJvdGhlciBzaG93aW5nIHNldHRpbmdzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4gb25seSh0aGlzLCBbXG4gICAgICAnc3ViZG9tYWluT2Zmc2V0JyxcbiAgICAgICdwcm94eScsXG4gICAgICAnZW52J1xuICAgIF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc3BlY3QgaW1wbGVtZW50YXRpb24uXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgaW5zcGVjdCgpIHtcbiAgICByZXR1cm4gdGhpcy50b0pTT04oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2UgdGhlIGdpdmVuIG1pZGRsZXdhcmUgYGZuYC5cbiAgICpcbiAgICogT2xkLXN0eWxlIG1pZGRsZXdhcmUgd2lsbCBiZSBjb252ZXJ0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gICAqIEByZXR1cm4ge0FwcGxpY2F0aW9ufSBzZWxmXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHVzZShmbikge1xuICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pZGRsZXdhcmUgbXVzdCBiZSBhIGZ1bmN0aW9uIScpO1xuICAgIGlmIChpc0dlbmVyYXRvckZ1bmN0aW9uKGZuKSkge1xuICAgICAgZGVwcmVjYXRlKCdTdXBwb3J0IGZvciBnZW5lcmF0b3JzIHdpbGwgYmUgcmVtb3ZlZCBpbiB2My4gJyArXG4gICAgICAgICAgICAgICAgJ1NlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgZXhhbXBsZXMgb2YgaG93IHRvIGNvbnZlcnQgb2xkIG1pZGRsZXdhcmUgJyArXG4gICAgICAgICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9rb2Fqcy9rb2EvYmxvYi9tYXN0ZXIvZG9jcy9taWdyYXRpb24ubWQnKTtcbiAgICAgIGZuID0gY29udmVydChmbik7XG4gICAgfVxuICAgIGRlYnVnKCd1c2UgJXMnLCBmbi5fbmFtZSB8fCBmbi5uYW1lIHx8ICctJyk7XG4gICAgdGhpcy5taWRkbGV3YXJlLnB1c2goZm4pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhIHJlcXVlc3QgaGFuZGxlciBjYWxsYmFja1xuICAgKiBmb3Igbm9kZSdzIG5hdGl2ZSBodHRwIHNlcnZlci5cbiAgICpcbiAgICogQHJldHVybiB7RnVuY3Rpb259XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGNhbGxiYWNrKCkge1xuICAgIGNvbnN0IGZuID0gY29tcG9zZSh0aGlzLm1pZGRsZXdhcmUpO1xuXG4gICAgaWYgKCF0aGlzLmxpc3RlbmVyQ291bnQoJ2Vycm9yJykpIHRoaXMub24oJ2Vycm9yJywgdGhpcy5vbmVycm9yKTtcblxuICAgIGNvbnN0IGhhbmRsZVJlcXVlc3QgPSAocmVxLCByZXMpID0+IHtcbiAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3JlYXRlQ29udGV4dChyZXEsIHJlcyk7XG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXF1ZXN0KGN0eCwgZm4pO1xuICAgIH07XG5cbiAgICByZXR1cm4gaGFuZGxlUmVxdWVzdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgcmVxdWVzdCBpbiBjYWxsYmFjay5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuXG4gIGhhbmRsZVJlcXVlc3QoY3R4LCBmbk1pZGRsZXdhcmUpIHtcbiAgICBjb25zdCByZXMgPSBjdHgucmVzO1xuICAgIHJlcy5zdGF0dXNDb2RlID0gNDA0O1xuICAgIGNvbnN0IG9uZXJyb3IgPSBlcnIgPT4gY3R4Lm9uZXJyb3IoZXJyKTtcbiAgICBjb25zdCBoYW5kbGVSZXNwb25zZSA9ICgpID0+IHJlc3BvbmQoY3R4KTtcbiAgICBvbkZpbmlzaGVkKHJlcywgb25lcnJvcik7XG4gICAgcmV0dXJuIGZuTWlkZGxld2FyZShjdHgpLnRoZW4oaGFuZGxlUmVzcG9uc2UpLmNhdGNoKG9uZXJyb3IpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgYSBuZXcgY29udGV4dC5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuXG4gIGNyZWF0ZUNvbnRleHQocmVxLCByZXMpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gT2JqZWN0LmNyZWF0ZSh0aGlzLmNvbnRleHQpO1xuICAgIGNvbnN0IHJlcXVlc3QgPSBjb250ZXh0LnJlcXVlc3QgPSBPYmplY3QuY3JlYXRlKHRoaXMucmVxdWVzdCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBjb250ZXh0LnJlc3BvbnNlID0gT2JqZWN0LmNyZWF0ZSh0aGlzLnJlc3BvbnNlKTtcbiAgICBjb250ZXh0LmFwcCA9IHJlcXVlc3QuYXBwID0gcmVzcG9uc2UuYXBwID0gdGhpcztcbiAgICBjb250ZXh0LnJlcSA9IHJlcXVlc3QucmVxID0gcmVzcG9uc2UucmVxID0gcmVxO1xuICAgIGNvbnRleHQucmVzID0gcmVxdWVzdC5yZXMgPSByZXNwb25zZS5yZXMgPSByZXM7XG4gICAgcmVxdWVzdC5jdHggPSByZXNwb25zZS5jdHggPSBjb250ZXh0O1xuICAgIHJlcXVlc3QucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICByZXNwb25zZS5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICBjb250ZXh0Lm9yaWdpbmFsVXJsID0gcmVxdWVzdC5vcmlnaW5hbFVybCA9IHJlcS51cmw7XG4gICAgY29udGV4dC5zdGF0ZSA9IHt9O1xuICAgIHJldHVybiBjb250ZXh0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgZXJyb3IgaGFuZGxlci5cbiAgICpcbiAgICogQHBhcmFtIHtFcnJvcn0gZXJyXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cblxuICBvbmVycm9yKGVycikge1xuICAgIGlmICghKGVyciBpbnN0YW5jZW9mIEVycm9yKSkgdGhyb3cgbmV3IFR5cGVFcnJvcih1dGlsLmZvcm1hdCgnbm9uLWVycm9yIHRocm93bjogJWonLCBlcnIpKTtcblxuICAgIGlmICg0MDQgPT0gZXJyLnN0YXR1cyB8fCBlcnIuZXhwb3NlKSByZXR1cm47XG4gICAgaWYgKHRoaXMuc2lsZW50KSByZXR1cm47XG5cbiAgICBjb25zdCBtc2cgPSBlcnIuc3RhY2sgfHwgZXJyLnRvU3RyaW5nKCk7XG4gICAgY29uc29sZS5lcnJvcigpO1xuICAgIGNvbnNvbGUuZXJyb3IobXNnLnJlcGxhY2UoL14vZ20sICcgICcpKTtcbiAgICBjb25zb2xlLmVycm9yKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVzcG9uc2UgaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHJlc3BvbmQoY3R4KSB7XG4gIC8vIGFsbG93IGJ5cGFzc2luZyBrb2FcbiAgaWYgKGZhbHNlID09PSBjdHgucmVzcG9uZCkgcmV0dXJuO1xuXG4gIGlmICghY3R4LndyaXRhYmxlKSByZXR1cm47XG5cbiAgY29uc3QgcmVzID0gY3R4LnJlcztcbiAgbGV0IGJvZHkgPSBjdHguYm9keTtcbiAgY29uc3QgY29kZSA9IGN0eC5zdGF0dXM7XG5cbiAgLy8gaWdub3JlIGJvZHlcbiAgaWYgKHN0YXR1c2VzLmVtcHR5W2NvZGVdKSB7XG4gICAgLy8gc3RyaXAgaGVhZGVyc1xuICAgIGN0eC5ib2R5ID0gbnVsbDtcbiAgICByZXR1cm4gcmVzLmVuZCgpO1xuICB9XG5cbiAgaWYgKCdIRUFEJyA9PT0gY3R4Lm1ldGhvZCkge1xuICAgIGlmICghcmVzLmhlYWRlcnNTZW50ICYmICFjdHgucmVzcG9uc2UuaGFzKCdDb250ZW50LUxlbmd0aCcpKSB7XG4gICAgICBjb25zdCB7IGxlbmd0aCB9ID0gY3R4LnJlc3BvbnNlO1xuICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIobGVuZ3RoKSkgY3R4Lmxlbmd0aCA9IGxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5lbmQoKTtcbiAgfVxuXG4gIC8vIHN0YXR1cyBib2R5XG4gIGlmIChudWxsID09IGJvZHkpIHtcbiAgICBpZiAoY3R4LnJlcS5odHRwVmVyc2lvbk1ham9yID49IDIpIHtcbiAgICAgIGJvZHkgPSBTdHJpbmcoY29kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvZHkgPSBjdHgubWVzc2FnZSB8fCBTdHJpbmcoY29kZSk7XG4gICAgfVxuICAgIGlmICghcmVzLmhlYWRlcnNTZW50KSB7XG4gICAgICBjdHgudHlwZSA9ICd0ZXh0JztcbiAgICAgIGN0eC5sZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aChib2R5KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5lbmQoYm9keSk7XG4gIH1cblxuICAvLyByZXNwb25zZXNcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihib2R5KSkgcmV0dXJuIHJlcy5lbmQoYm9keSk7XG4gIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgYm9keSkgcmV0dXJuIHJlcy5lbmQoYm9keSk7XG4gIGlmIChib2R5IGluc3RhbmNlb2YgU3RyZWFtKSByZXR1cm4gYm9keS5waXBlKHJlcyk7XG5cbiAgLy8gYm9keToganNvblxuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoYm9keSk7XG4gIGlmICghcmVzLmhlYWRlcnNTZW50KSB7XG4gICAgY3R4Lmxlbmd0aCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKGJvZHkpO1xuICB9XG4gIHJlcy5lbmQoYm9keSk7XG59XG5cbi8qKlxuICogTWFrZSBIdHRwRXJyb3IgYXZhaWxhYmxlIHRvIGNvbnN1bWVycyBvZiB0aGUgbGlicmFyeSBzbyB0aGF0IGNvbnN1bWVycyBkb24ndFxuICogaGF2ZSBhIGRpcmVjdCBkZXBlbmRlbmN5IHVwb24gYGh0dHAtZXJyb3JzYFxuICovXG5tb2R1bGUuZXhwb3J0cy5IdHRwRXJyb3IgPSBIdHRwRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZm5Ub1N0ciA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbnZhciBpc0ZuUmVnZXggPSAvXlxccyooPzpmdW5jdGlvbik/XFwqLztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgZ2V0R2VuZXJhdG9yRnVuYyA9IGZ1bmN0aW9uICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXJldHVyblxuXHRpZiAoIWhhc1RvU3RyaW5nVGFnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHRyeSB7XG5cdFx0cmV0dXJuIEZ1bmN0aW9uKCdyZXR1cm4gZnVuY3Rpb24qKCkge30nKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdH1cbn07XG52YXIgZ2VuZXJhdG9yRnVuYyA9IGdldEdlbmVyYXRvckZ1bmMoKTtcbnZhciBHZW5lcmF0b3JGdW5jdGlvbiA9IGdlbmVyYXRvckZ1bmMgPyBnZXRQcm90byhnZW5lcmF0b3JGdW5jKSA6IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzR2VuZXJhdG9yRnVuY3Rpb24oZm4pIHtcblx0aWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRpZiAoaXNGblJlZ2V4LnRlc3QoZm5Ub1N0ci5jYWxsKGZuKSkpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRpZiAoIWhhc1RvU3RyaW5nVGFnKSB7XG5cdFx0dmFyIHN0ciA9IHRvU3RyLmNhbGwoZm4pO1xuXHRcdHJldHVybiBzdHIgPT09ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXSc7XG5cdH1cblx0cmV0dXJuIGdldFByb3RvKGZuKSA9PT0gR2VuZXJhdG9yRnVuY3Rpb247XG59O1xuIiwiLyoqXG4gKiBEZXRlY3QgRWxlY3Ryb24gcmVuZGVyZXIgcHJvY2Vzcywgd2hpY2ggaXMgbm9kZSwgYnV0IHdlIHNob3VsZFxuICogdHJlYXQgYXMgYSBicm93c2VyLlxuICovXG5cbmlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHwgcHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9icm93c2VyLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbm9kZS5qcycpO1xufVxuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnIzAwMDBDQycsICcjMDAwMEZGJywgJyMwMDMzQ0MnLCAnIzAwMzNGRicsICcjMDA2NkNDJywgJyMwMDY2RkYnLCAnIzAwOTlDQycsXG4gICcjMDA5OUZGJywgJyMwMENDMDAnLCAnIzAwQ0MzMycsICcjMDBDQzY2JywgJyMwMENDOTknLCAnIzAwQ0NDQycsICcjMDBDQ0ZGJyxcbiAgJyMzMzAwQ0MnLCAnIzMzMDBGRicsICcjMzMzM0NDJywgJyMzMzMzRkYnLCAnIzMzNjZDQycsICcjMzM2NkZGJywgJyMzMzk5Q0MnLFxuICAnIzMzOTlGRicsICcjMzNDQzAwJywgJyMzM0NDMzMnLCAnIzMzQ0M2NicsICcjMzNDQzk5JywgJyMzM0NDQ0MnLCAnIzMzQ0NGRicsXG4gICcjNjYwMENDJywgJyM2NjAwRkYnLCAnIzY2MzNDQycsICcjNjYzM0ZGJywgJyM2NkNDMDAnLCAnIzY2Q0MzMycsICcjOTkwMENDJyxcbiAgJyM5OTAwRkYnLCAnIzk5MzNDQycsICcjOTkzM0ZGJywgJyM5OUNDMDAnLCAnIzk5Q0MzMycsICcjQ0MwMDAwJywgJyNDQzAwMzMnLFxuICAnI0NDMDA2NicsICcjQ0MwMDk5JywgJyNDQzAwQ0MnLCAnI0NDMDBGRicsICcjQ0MzMzAwJywgJyNDQzMzMzMnLCAnI0NDMzM2NicsXG4gICcjQ0MzMzk5JywgJyNDQzMzQ0MnLCAnI0NDMzNGRicsICcjQ0M2NjAwJywgJyNDQzY2MzMnLCAnI0NDOTkwMCcsICcjQ0M5OTMzJyxcbiAgJyNDQ0NDMDAnLCAnI0NDQ0MzMycsICcjRkYwMDAwJywgJyNGRjAwMzMnLCAnI0ZGMDA2NicsICcjRkYwMDk5JywgJyNGRjAwQ0MnLFxuICAnI0ZGMDBGRicsICcjRkYzMzAwJywgJyNGRjMzMzMnLCAnI0ZGMzM2NicsICcjRkYzMzk5JywgJyNGRjMzQ0MnLCAnI0ZGMzNGRicsXG4gICcjRkY2NjAwJywgJyNGRjY2MzMnLCAnI0ZGOTkwMCcsICcjRkY5OTMzJywgJyNGRkNDMDAnLCAnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbCkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIGlmIChtcyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtcyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICByZXR1cm4gcGx1cmFsKG1zLCBkLCAnZGF5JykgfHxcbiAgICBwbHVyYWwobXMsIGgsICdob3VyJykgfHxcbiAgICBwbHVyYWwobXMsIG0sICdtaW51dGUnKSB8fFxuICAgIHBsdXJhbChtcywgcywgJ3NlY29uZCcpIHx8XG4gICAgbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG4sIG5hbWUpIHtcbiAgaWYgKG1zIDwgbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobXMgPCBuICogMS41KSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBuKSArICcgJyArIG5hbWU7XG4gIH1cbiAgcmV0dXJuIE1hdGguY2VpbChtcyAvIG4pICsgJyAnICsgbmFtZSArICdzJztcbn1cbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgdHR5ID0gcmVxdWlyZSgndHR5Jyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBOb2RlLmpzIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZWJ1ZycpO1xuZXhwb3J0cy5pbml0ID0gaW5pdDtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gWyA2LCAyLCAzLCA0LCA1LCAxIF07XG5cbnRyeSB7XG4gIHZhciBzdXBwb3J0c0NvbG9yID0gcmVxdWlyZSgnc3VwcG9ydHMtY29sb3InKTtcbiAgaWYgKHN1cHBvcnRzQ29sb3IgJiYgc3VwcG9ydHNDb2xvci5sZXZlbCA+PSAyKSB7XG4gICAgZXhwb3J0cy5jb2xvcnMgPSBbXG4gICAgICAyMCwgMjEsIDI2LCAyNywgMzIsIDMzLCAzOCwgMzksIDQwLCA0MSwgNDIsIDQzLCA0NCwgNDUsIDU2LCA1NywgNjIsIDYzLCA2OCxcbiAgICAgIDY5LCA3NCwgNzUsIDc2LCA3NywgNzgsIDc5LCA4MCwgODEsIDkyLCA5MywgOTgsIDk5LCAxMTIsIDExMywgMTI4LCAxMjksIDEzNCxcbiAgICAgIDEzNSwgMTQ4LCAxNDksIDE2MCwgMTYxLCAxNjIsIDE2MywgMTY0LCAxNjUsIDE2NiwgMTY3LCAxNjgsIDE2OSwgMTcwLCAxNzEsXG4gICAgICAxNzIsIDE3MywgMTc4LCAxNzksIDE4NCwgMTg1LCAxOTYsIDE5NywgMTk4LCAxOTksIDIwMCwgMjAxLCAyMDIsIDIwMywgMjA0LFxuICAgICAgMjA1LCAyMDYsIDIwNywgMjA4LCAyMDksIDIxNCwgMjE1LCAyMjAsIDIyMVxuICAgIF07XG4gIH1cbn0gY2F0Y2ggKGVycikge1xuICAvLyBzd2FsbG93IC0gd2Ugb25seSBjYXJlIGlmIGBzdXBwb3J0cy1jb2xvcmAgaXMgYXZhaWxhYmxlOyBpdCBkb2Vzbid0IGhhdmUgdG8gYmUuXG59XG5cbi8qKlxuICogQnVpbGQgdXAgdGhlIGRlZmF1bHQgYGluc3BlY3RPcHRzYCBvYmplY3QgZnJvbSB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzLlxuICpcbiAqICAgJCBERUJVR19DT0xPUlM9bm8gREVCVUdfREVQVEg9MTAgREVCVUdfU0hPV19ISURERU49ZW5hYmxlZCBub2RlIHNjcmlwdC5qc1xuICovXG5cbmV4cG9ydHMuaW5zcGVjdE9wdHMgPSBPYmplY3Qua2V5cyhwcm9jZXNzLmVudikuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIC9eZGVidWdfL2kudGVzdChrZXkpO1xufSkucmVkdWNlKGZ1bmN0aW9uIChvYmosIGtleSkge1xuICAvLyBjYW1lbC1jYXNlXG4gIHZhciBwcm9wID0ga2V5XG4gICAgLnN1YnN0cmluZyg2KVxuICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgLnJlcGxhY2UoL18oW2Etel0pL2csIGZ1bmN0aW9uIChfLCBrKSB7IHJldHVybiBrLnRvVXBwZXJDYXNlKCkgfSk7XG5cbiAgLy8gY29lcmNlIHN0cmluZyB2YWx1ZSBpbnRvIEpTIHZhbHVlXG4gIHZhciB2YWwgPSBwcm9jZXNzLmVudltrZXldO1xuICBpZiAoL14oeWVzfG9ufHRydWV8ZW5hYmxlZCkkL2kudGVzdCh2YWwpKSB2YWwgPSB0cnVlO1xuICBlbHNlIGlmICgvXihub3xvZmZ8ZmFsc2V8ZGlzYWJsZWQpJC9pLnRlc3QodmFsKSkgdmFsID0gZmFsc2U7XG4gIGVsc2UgaWYgKHZhbCA9PT0gJ251bGwnKSB2YWwgPSBudWxsO1xuICBlbHNlIHZhbCA9IE51bWJlcih2YWwpO1xuXG4gIG9ialtwcm9wXSA9IHZhbDtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KTtcblxuLyoqXG4gKiBJcyBzdGRvdXQgYSBUVFk/IENvbG9yZWQgb3V0cHV0IGlzIGVuYWJsZWQgd2hlbiBgdHJ1ZWAuXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICByZXR1cm4gJ2NvbG9ycycgaW4gZXhwb3J0cy5pbnNwZWN0T3B0c1xuICAgID8gQm9vbGVhbihleHBvcnRzLmluc3BlY3RPcHRzLmNvbG9ycylcbiAgICA6IHR0eS5pc2F0dHkocHJvY2Vzcy5zdGRlcnIuZmQpO1xufVxuXG4vKipcbiAqIE1hcCAlbyB0byBgdXRpbC5pbnNwZWN0KClgLCBhbGwgb24gYSBzaW5nbGUgbGluZS5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMubyA9IGZ1bmN0aW9uKHYpIHtcbiAgdGhpcy5pbnNwZWN0T3B0cy5jb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcbiAgcmV0dXJuIHV0aWwuaW5zcGVjdCh2LCB0aGlzLmluc3BlY3RPcHRzKVxuICAgIC5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKHN0cikge1xuICAgICAgcmV0dXJuIHN0ci50cmltKClcbiAgICB9KS5qb2luKCcgJyk7XG59O1xuXG4vKipcbiAqIE1hcCAlbyB0byBgdXRpbC5pbnNwZWN0KClgLCBhbGxvd2luZyBtdWx0aXBsZSBsaW5lcyBpZiBuZWVkZWQuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzLk8gPSBmdW5jdGlvbih2KSB7XG4gIHRoaXMuaW5zcGVjdE9wdHMuY29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG4gIHJldHVybiB1dGlsLmluc3BlY3QodiwgdGhpcy5pbnNwZWN0T3B0cyk7XG59O1xuXG4vKipcbiAqIEFkZHMgQU5TSSBjb2xvciBlc2NhcGUgY29kZXMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuICB2YXIgbmFtZSA9IHRoaXMubmFtZXNwYWNlO1xuICB2YXIgdXNlQ29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG5cbiAgaWYgKHVzZUNvbG9ycykge1xuICAgIHZhciBjID0gdGhpcy5jb2xvcjtcbiAgICB2YXIgY29sb3JDb2RlID0gJ1xcdTAwMWJbMycgKyAoYyA8IDggPyBjIDogJzg7NTsnICsgYyk7XG4gICAgdmFyIHByZWZpeCA9ICcgICcgKyBjb2xvckNvZGUgKyAnOzFtJyArIG5hbWUgKyAnICcgKyAnXFx1MDAxYlswbSc7XG5cbiAgICBhcmdzWzBdID0gcHJlZml4ICsgYXJnc1swXS5zcGxpdCgnXFxuJykuam9pbignXFxuJyArIHByZWZpeCk7XG4gICAgYXJncy5wdXNoKGNvbG9yQ29kZSArICdtKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZikgKyAnXFx1MDAxYlswbScpO1xuICB9IGVsc2Uge1xuICAgIGFyZ3NbMF0gPSBnZXREYXRlKCkgKyBuYW1lICsgJyAnICsgYXJnc1swXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREYXRlKCkge1xuICBpZiAoZXhwb3J0cy5pbnNwZWN0T3B0cy5oaWRlRGF0ZSkge1xuICAgIHJldHVybiAnJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IERhdGUoKS50b0lTT1N0cmluZygpICsgJyAnO1xuICB9XG59XG5cbi8qKlxuICogSW52b2tlcyBgdXRpbC5mb3JtYXQoKWAgd2l0aCB0aGUgc3BlY2lmaWVkIGFyZ3VtZW50cyBhbmQgd3JpdGVzIHRvIHN0ZGVyci5cbiAqL1xuXG5mdW5jdGlvbiBsb2coKSB7XG4gIHJldHVybiBwcm9jZXNzLnN0ZGVyci53cml0ZSh1dGlsLmZvcm1hdC5hcHBseSh1dGlsLCBhcmd1bWVudHMpICsgJ1xcbicpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgIC8vIElmIHlvdSBzZXQgYSBwcm9jZXNzLmVudiBmaWVsZCB0byBudWxsIG9yIHVuZGVmaW5lZCwgaXQgZ2V0cyBjYXN0IHRvIHRoZVxuICAgIC8vIHN0cmluZyAnbnVsbCcgb3IgJ3VuZGVmaW5lZCcuIEp1c3QgZGVsZXRlIGluc3RlYWQuXG4gICAgZGVsZXRlIHByb2Nlc3MuZW52LkRFQlVHO1xuICB9IGVsc2Uge1xuICAgIHByb2Nlc3MuZW52LkRFQlVHID0gbmFtZXNwYWNlcztcbiAgfVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG4gIHJldHVybiBwcm9jZXNzLmVudi5ERUJVRztcbn1cblxuLyoqXG4gKiBJbml0IGxvZ2ljIGZvciBgZGVidWdgIGluc3RhbmNlcy5cbiAqXG4gKiBDcmVhdGUgYSBuZXcgYGluc3BlY3RPcHRzYCBvYmplY3QgaW4gY2FzZSBgdXNlQ29sb3JzYCBpcyBzZXRcbiAqIGRpZmZlcmVudGx5IGZvciBhIHBhcnRpY3VsYXIgYGRlYnVnYCBpbnN0YW5jZS5cbiAqL1xuXG5mdW5jdGlvbiBpbml0IChkZWJ1Zykge1xuICBkZWJ1Zy5pbnNwZWN0T3B0cyA9IHt9O1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXhwb3J0cy5pbnNwZWN0T3B0cyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlYnVnLmluc3BlY3RPcHRzW2tleXNbaV1dID0gZXhwb3J0cy5pbnNwZWN0T3B0c1trZXlzW2ldXTtcbiAgfVxufVxuXG4vKipcbiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgcHJvY2Vzcy5lbnYuREVCVUdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwib3NcIik7IiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSAoZmxhZywgYXJndikgPT4ge1xuXHRhcmd2ID0gYXJndiB8fCBwcm9jZXNzLmFyZ3Y7XG5cdGNvbnN0IHByZWZpeCA9IGZsYWcuc3RhcnRzV2l0aCgnLScpID8gJycgOiAoZmxhZy5sZW5ndGggPT09IDEgPyAnLScgOiAnLS0nKTtcblx0Y29uc3QgcG9zID0gYXJndi5pbmRleE9mKHByZWZpeCArIGZsYWcpO1xuXHRjb25zdCB0ZXJtaW5hdG9yUG9zID0gYXJndi5pbmRleE9mKCctLScpO1xuXHRyZXR1cm4gcG9zICE9PSAtMSAmJiAodGVybWluYXRvclBvcyA9PT0gLTEgPyB0cnVlIDogcG9zIDwgdGVybWluYXRvclBvcyk7XG59O1xuIiwiLyohXG4gKiBlZS1maXJzdFxuICogQ29weXJpZ2h0KGMpIDIwMTQgSm9uYXRoYW4gT25nXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZpcnN0XG5cbi8qKlxuICogR2V0IHRoZSBmaXJzdCBldmVudCBpbiBhIHNldCBvZiBldmVudCBlbWl0dGVycyBhbmQgZXZlbnQgcGFpcnMuXG4gKlxuICogQHBhcmFtIHthcnJheX0gc3R1ZmZcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGRvbmVcbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmaXJzdChzdHVmZiwgZG9uZSkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoc3R1ZmYpKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZyBtdXN0IGJlIGFuIGFycmF5IG9mIFtlZSwgZXZlbnRzLi4uXSBhcnJheXMnKVxuXG4gIHZhciBjbGVhbnVwcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHVmZi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBhcnIgPSBzdHVmZltpXVxuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycikgfHwgYXJyLmxlbmd0aCA8IDIpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlYWNoIGFycmF5IG1lbWJlciBtdXN0IGJlIFtlZSwgZXZlbnRzLi4uXScpXG5cbiAgICB2YXIgZWUgPSBhcnJbMF1cblxuICAgIGZvciAodmFyIGogPSAxOyBqIDwgYXJyLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgZXZlbnQgPSBhcnJbal1cbiAgICAgIHZhciBmbiA9IGxpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaylcblxuICAgICAgLy8gbGlzdGVuIHRvIHRoZSBldmVudFxuICAgICAgZWUub24oZXZlbnQsIGZuKVxuICAgICAgLy8gcHVzaCB0aGlzIGxpc3RlbmVyIHRvIHRoZSBsaXN0IG9mIGNsZWFudXBzXG4gICAgICBjbGVhbnVwcy5wdXNoKHtcbiAgICAgICAgZWU6IGVlLFxuICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgIGZuOiBmbixcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2FsbGJhY2soKSB7XG4gICAgY2xlYW51cCgpXG4gICAgZG9uZS5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gIH1cblxuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIHZhciB4XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbGVhbnVwcy5sZW5ndGg7IGkrKykge1xuICAgICAgeCA9IGNsZWFudXBzW2ldXG4gICAgICB4LmVlLnJlbW92ZUxpc3RlbmVyKHguZXZlbnQsIHguZm4pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdGh1bmsoZm4pIHtcbiAgICBkb25lID0gZm5cbiAgfVxuXG4gIHRodW5rLmNhbmNlbCA9IGNsZWFudXBcblxuICByZXR1cm4gdGh1bmtcbn1cblxuLyoqXG4gKiBDcmVhdGUgdGhlIGV2ZW50IGxpc3RlbmVyLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsaXN0ZW5lcihldmVudCwgZG9uZSkge1xuICByZXR1cm4gZnVuY3Rpb24gb25ldmVudChhcmcxKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aClcbiAgICB2YXIgZWUgPSB0aGlzXG4gICAgdmFyIGVyciA9IGV2ZW50ID09PSAnZXJyb3InXG4gICAgICA/IGFyZzFcbiAgICAgIDogbnVsbFxuXG4gICAgLy8gY29weSBhcmdzIHRvIHByZXZlbnQgYXJndW1lbnRzIGVzY2FwaW5nIHNjb3BlXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldXG4gICAgfVxuXG4gICAgZG9uZShlcnIsIGVlLCBldmVudCwgYXJncylcbiAgfVxufVxuIiwiXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG5jb25zdCBjb250ZW50RGlzcG9zaXRpb24gPSByZXF1aXJlKCdjb250ZW50LWRpc3Bvc2l0aW9uJyk7XG5jb25zdCBlbnN1cmVFcnJvckhhbmRsZXIgPSByZXF1aXJlKCdlcnJvci1pbmplY3QnKTtcbmNvbnN0IGdldFR5cGUgPSByZXF1aXJlKCdjYWNoZS1jb250ZW50LXR5cGUnKTtcbmNvbnN0IG9uRmluaXNoID0gcmVxdWlyZSgnb24tZmluaXNoZWQnKTtcbmNvbnN0IGVzY2FwZSA9IHJlcXVpcmUoJ2VzY2FwZS1odG1sJyk7XG5jb25zdCB0eXBlaXMgPSByZXF1aXJlKCd0eXBlLWlzJykuaXM7XG5jb25zdCBzdGF0dXNlcyA9IHJlcXVpcmUoJ3N0YXR1c2VzJyk7XG5jb25zdCBkZXN0cm95ID0gcmVxdWlyZSgnZGVzdHJveScpO1xuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5jb25zdCBleHRuYW1lID0gcmVxdWlyZSgncGF0aCcpLmV4dG5hbWU7XG5jb25zdCB2YXJ5ID0gcmVxdWlyZSgndmFyeScpO1xuY29uc3Qgb25seSA9IHJlcXVpcmUoJ29ubHknKTtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCBlbmNvZGVVcmwgPSByZXF1aXJlKCdlbmNvZGV1cmwnKTtcbmNvbnN0IFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuXG4vKipcbiAqIFByb3RvdHlwZS5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSByZXF1ZXN0IHNvY2tldC5cbiAgICpcbiAgICogQHJldHVybiB7Q29ubmVjdGlvbn1cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZ2V0IHNvY2tldCgpIHtcbiAgICByZXR1cm4gdGhpcy5yZXMuc29ja2V0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm4gcmVzcG9uc2UgaGVhZGVyLlxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGdldCBoZWFkZXIoKSB7XG4gICAgY29uc3QgeyByZXMgfSA9IHRoaXM7XG4gICAgcmV0dXJuIHR5cGVvZiByZXMuZ2V0SGVhZGVycyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyByZXMuZ2V0SGVhZGVycygpXG4gICAgICA6IHJlcy5faGVhZGVycyB8fCB7fTsgLy8gTm9kZSA8IDcuN1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm4gcmVzcG9uc2UgaGVhZGVyLCBhbGlhcyBhcyByZXNwb25zZS5oZWFkZXJcbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBnZXQgaGVhZGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5oZWFkZXI7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCByZXNwb25zZSBzdGF0dXMgY29kZS5cbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBnZXQgc3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLnJlcy5zdGF0dXNDb2RlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXQgcmVzcG9uc2Ugc3RhdHVzIGNvZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHNldCBzdGF0dXMoY29kZSkge1xuICAgIGlmICh0aGlzLmhlYWRlclNlbnQpIHJldHVybjtcblxuICAgIGFzc2VydChOdW1iZXIuaXNJbnRlZ2VyKGNvZGUpLCAnc3RhdHVzIGNvZGUgbXVzdCBiZSBhIG51bWJlcicpO1xuICAgIGFzc2VydChjb2RlID49IDEwMCAmJiBjb2RlIDw9IDk5OSwgYGludmFsaWQgc3RhdHVzIGNvZGU6ICR7Y29kZX1gKTtcbiAgICB0aGlzLl9leHBsaWNpdFN0YXR1cyA9IHRydWU7XG4gICAgdGhpcy5yZXMuc3RhdHVzQ29kZSA9IGNvZGU7XG4gICAgaWYgKHRoaXMucmVxLmh0dHBWZXJzaW9uTWFqb3IgPCAyKSB0aGlzLnJlcy5zdGF0dXNNZXNzYWdlID0gc3RhdHVzZXNbY29kZV07XG4gICAgaWYgKHRoaXMuYm9keSAmJiBzdGF0dXNlcy5lbXB0eVtjb2RlXSkgdGhpcy5ib2R5ID0gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IHJlc3BvbnNlIHN0YXR1cyBtZXNzYWdlXG4gICAqXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZ2V0IG1lc3NhZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzLnN0YXR1c01lc3NhZ2UgfHwgc3RhdHVzZXNbdGhpcy5zdGF0dXNdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXQgcmVzcG9uc2Ugc3RhdHVzIG1lc3NhZ2VcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZ1xuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBzZXQgbWVzc2FnZShtc2cpIHtcbiAgICB0aGlzLnJlcy5zdGF0dXNNZXNzYWdlID0gbXNnO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgcmVzcG9uc2UgYm9keS5cbiAgICpcbiAgICogQHJldHVybiB7TWl4ZWR9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGdldCBib2R5KCkge1xuICAgIHJldHVybiB0aGlzLl9ib2R5O1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXQgcmVzcG9uc2UgYm9keS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8QnVmZmVyfE9iamVjdHxTdHJlYW19IHZhbFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBzZXQgYm9keSh2YWwpIHtcbiAgICBjb25zdCBvcmlnaW5hbCA9IHRoaXMuX2JvZHk7XG4gICAgdGhpcy5fYm9keSA9IHZhbDtcblxuICAgIC8vIG5vIGNvbnRlbnRcbiAgICBpZiAobnVsbCA9PSB2YWwpIHtcbiAgICAgIGlmICghc3RhdHVzZXMuZW1wdHlbdGhpcy5zdGF0dXNdKSB0aGlzLnN0YXR1cyA9IDIwNDtcbiAgICAgIHRoaXMucmVtb3ZlKCdDb250ZW50LVR5cGUnKTtcbiAgICAgIHRoaXMucmVtb3ZlKCdDb250ZW50LUxlbmd0aCcpO1xuICAgICAgdGhpcy5yZW1vdmUoJ1RyYW5zZmVyLUVuY29kaW5nJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gc2V0IHRoZSBzdGF0dXNcbiAgICBpZiAoIXRoaXMuX2V4cGxpY2l0U3RhdHVzKSB0aGlzLnN0YXR1cyA9IDIwMDtcblxuICAgIC8vIHNldCB0aGUgY29udGVudC10eXBlIG9ubHkgaWYgbm90IHlldCBzZXRcbiAgICBjb25zdCBzZXRUeXBlID0gIXRoaXMuaGFzKCdDb250ZW50LVR5cGUnKTtcblxuICAgIC8vIHN0cmluZ1xuICAgIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgdmFsKSB7XG4gICAgICBpZiAoc2V0VHlwZSkgdGhpcy50eXBlID0gL15cXHMqPC8udGVzdCh2YWwpID8gJ2h0bWwnIDogJ3RleHQnO1xuICAgICAgdGhpcy5sZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aCh2YWwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJ1ZmZlclxuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgICAgaWYgKHNldFR5cGUpIHRoaXMudHlwZSA9ICdiaW4nO1xuICAgICAgdGhpcy5sZW5ndGggPSB2YWwubGVuZ3RoO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHN0cmVhbVxuICAgIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiB2YWwucGlwZSkge1xuICAgICAgb25GaW5pc2godGhpcy5yZXMsIGRlc3Ryb3kuYmluZChudWxsLCB2YWwpKTtcbiAgICAgIGVuc3VyZUVycm9ySGFuZGxlcih2YWwsIGVyciA9PiB0aGlzLmN0eC5vbmVycm9yKGVycikpO1xuXG4gICAgICAvLyBvdmVyd3JpdGluZ1xuICAgICAgaWYgKG51bGwgIT0gb3JpZ2luYWwgJiYgb3JpZ2luYWwgIT0gdmFsKSB0aGlzLnJlbW92ZSgnQ29udGVudC1MZW5ndGgnKTtcblxuICAgICAgaWYgKHNldFR5cGUpIHRoaXMudHlwZSA9ICdiaW4nO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGpzb25cbiAgICB0aGlzLnJlbW92ZSgnQ29udGVudC1MZW5ndGgnKTtcbiAgICB0aGlzLnR5cGUgPSAnanNvbic7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldCBDb250ZW50LUxlbmd0aCBmaWVsZCB0byBgbmAuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBuXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHNldCBsZW5ndGgobikge1xuICAgIHRoaXMuc2V0KCdDb250ZW50LUxlbmd0aCcsIG4pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm4gcGFyc2VkIHJlc3BvbnNlIENvbnRlbnQtTGVuZ3RoIHdoZW4gcHJlc2VudC5cbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBnZXQgbGVuZ3RoKCkge1xuICAgIGlmICh0aGlzLmhhcygnQ29udGVudC1MZW5ndGgnKSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuZ2V0KCdDb250ZW50LUxlbmd0aCcpLCAxMCkgfHwgMDtcbiAgICB9XG5cbiAgICBjb25zdCB7IGJvZHkgfSA9IHRoaXM7XG4gICAgaWYgKCFib2R5IHx8IGJvZHkgaW5zdGFuY2VvZiBTdHJlYW0pIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgYm9keSkgcmV0dXJuIEJ1ZmZlci5ieXRlTGVuZ3RoKGJvZHkpO1xuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoYm9keSkpIHJldHVybiBib2R5Lmxlbmd0aDtcbiAgICByZXR1cm4gQnVmZmVyLmJ5dGVMZW5ndGgoSlNPTi5zdHJpbmdpZnkoYm9keSkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIGhlYWRlciBoYXMgYmVlbiB3cml0dGVuIHRvIHRoZSBzb2NrZXQuXG4gICAqXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGdldCBoZWFkZXJTZW50KCkge1xuICAgIHJldHVybiB0aGlzLnJlcy5oZWFkZXJzU2VudDtcbiAgfSxcblxuICAvKipcbiAgICogVmFyeSBvbiBgZmllbGRgLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZmllbGRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgdmFyeShmaWVsZCkge1xuICAgIGlmICh0aGlzLmhlYWRlclNlbnQpIHJldHVybjtcblxuICAgIHZhcnkodGhpcy5yZXMsIGZpZWxkKTtcbiAgfSxcblxuICAvKipcbiAgICogUGVyZm9ybSBhIDMwMiByZWRpcmVjdCB0byBgdXJsYC5cbiAgICpcbiAgICogVGhlIHN0cmluZyBcImJhY2tcIiBpcyBzcGVjaWFsLWNhc2VkXG4gICAqIHRvIHByb3ZpZGUgUmVmZXJyZXIgc3VwcG9ydCwgd2hlbiBSZWZlcnJlclxuICAgKiBpcyBub3QgcHJlc2VudCBgYWx0YCBvciBcIi9cIiBpcyB1c2VkLlxuICAgKlxuICAgKiBFeGFtcGxlczpcbiAgICpcbiAgICogICAgdGhpcy5yZWRpcmVjdCgnYmFjaycpO1xuICAgKiAgICB0aGlzLnJlZGlyZWN0KCdiYWNrJywgJy9pbmRleC5odG1sJyk7XG4gICAqICAgIHRoaXMucmVkaXJlY3QoJy9sb2dpbicpO1xuICAgKiAgICB0aGlzLnJlZGlyZWN0KCdodHRwOi8vZ29vZ2xlLmNvbScpO1xuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbYWx0XVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICByZWRpcmVjdCh1cmwsIGFsdCkge1xuICAgIC8vIGxvY2F0aW9uXG4gICAgaWYgKCdiYWNrJyA9PSB1cmwpIHVybCA9IHRoaXMuY3R4LmdldCgnUmVmZXJyZXInKSB8fCBhbHQgfHwgJy8nO1xuICAgIHRoaXMuc2V0KCdMb2NhdGlvbicsIGVuY29kZVVybCh1cmwpKTtcblxuICAgIC8vIHN0YXR1c1xuICAgIGlmICghc3RhdHVzZXMucmVkaXJlY3RbdGhpcy5zdGF0dXNdKSB0aGlzLnN0YXR1cyA9IDMwMjtcblxuICAgIC8vIGh0bWxcbiAgICBpZiAodGhpcy5jdHguYWNjZXB0cygnaHRtbCcpKSB7XG4gICAgICB1cmwgPSBlc2NhcGUodXJsKTtcbiAgICAgIHRoaXMudHlwZSA9ICd0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgnO1xuICAgICAgdGhpcy5ib2R5ID0gYFJlZGlyZWN0aW5nIHRvIDxhIGhyZWY9XCIke3VybH1cIj4ke3VybH08L2E+LmA7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gdGV4dFxuICAgIHRoaXMudHlwZSA9ICd0ZXh0L3BsYWluOyBjaGFyc2V0PXV0Zi04JztcbiAgICB0aGlzLmJvZHkgPSBgUmVkaXJlY3RpbmcgdG8gJHt1cmx9LmA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldCBDb250ZW50LURpc3Bvc2l0aW9uIGhlYWRlciB0byBcImF0dGFjaG1lbnRcIiB3aXRoIG9wdGlvbmFsIGBmaWxlbmFtZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBmaWxlbmFtZVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhdHRhY2htZW50KGZpbGVuYW1lLCBvcHRpb25zKSB7XG4gICAgaWYgKGZpbGVuYW1lKSB0aGlzLnR5cGUgPSBleHRuYW1lKGZpbGVuYW1lKTtcbiAgICB0aGlzLnNldCgnQ29udGVudC1EaXNwb3NpdGlvbicsIGNvbnRlbnREaXNwb3NpdGlvbihmaWxlbmFtZSwgb3B0aW9ucykpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXQgQ29udGVudC1UeXBlIHJlc3BvbnNlIGhlYWRlciB3aXRoIGB0eXBlYCB0aHJvdWdoIGBtaW1lLmxvb2t1cCgpYFxuICAgKiB3aGVuIGl0IGRvZXMgbm90IGNvbnRhaW4gYSBjaGFyc2V0LlxuICAgKlxuICAgKiBFeGFtcGxlczpcbiAgICpcbiAgICogICAgIHRoaXMudHlwZSA9ICcuaHRtbCc7XG4gICAqICAgICB0aGlzLnR5cGUgPSAnaHRtbCc7XG4gICAqICAgICB0aGlzLnR5cGUgPSAnanNvbic7XG4gICAqICAgICB0aGlzLnR5cGUgPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAqICAgICB0aGlzLnR5cGUgPSAncG5nJztcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgc2V0IHR5cGUodHlwZSkge1xuICAgIHR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICAgIGlmICh0eXBlKSB7XG4gICAgICB0aGlzLnNldCgnQ29udGVudC1UeXBlJywgdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlKCdDb250ZW50LVR5cGUnKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldCB0aGUgTGFzdC1Nb2RpZmllZCBkYXRlIHVzaW5nIGEgc3RyaW5nIG9yIGEgRGF0ZS5cbiAgICpcbiAgICogICAgIHRoaXMucmVzcG9uc2UubGFzdE1vZGlmaWVkID0gbmV3IERhdGUoKTtcbiAgICogICAgIHRoaXMucmVzcG9uc2UubGFzdE1vZGlmaWVkID0gJzIwMTMtMDktMTMnO1xuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xEYXRlfSB0eXBlXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHNldCBsYXN0TW9kaWZpZWQodmFsKSB7XG4gICAgaWYgKCdzdHJpbmcnID09IHR5cGVvZiB2YWwpIHZhbCA9IG5ldyBEYXRlKHZhbCk7XG4gICAgdGhpcy5zZXQoJ0xhc3QtTW9kaWZpZWQnLCB2YWwudG9VVENTdHJpbmcoKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgTGFzdC1Nb2RpZmllZCBkYXRlIGluIERhdGUgZm9ybSwgaWYgaXQgZXhpc3RzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtEYXRlfVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBnZXQgbGFzdE1vZGlmaWVkKCkge1xuICAgIGNvbnN0IGRhdGUgPSB0aGlzLmdldCgnbGFzdC1tb2RpZmllZCcpO1xuICAgIGlmIChkYXRlKSByZXR1cm4gbmV3IERhdGUoZGF0ZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldCB0aGUgRVRhZyBvZiBhIHJlc3BvbnNlLlxuICAgKiBUaGlzIHdpbGwgbm9ybWFsaXplIHRoZSBxdW90ZXMgaWYgbmVjZXNzYXJ5LlxuICAgKlxuICAgKiAgICAgdGhpcy5yZXNwb25zZS5ldGFnID0gJ21kNWhhc2hzdW0nO1xuICAgKiAgICAgdGhpcy5yZXNwb25zZS5ldGFnID0gJ1wibWQ1aGFzaHN1bVwiJztcbiAgICogICAgIHRoaXMucmVzcG9uc2UuZXRhZyA9ICdXL1wiMTIzNDU2Nzg5XCInO1xuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZXRhZ1xuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBzZXQgZXRhZyh2YWwpIHtcbiAgICBpZiAoIS9eKFdcXC8pP1wiLy50ZXN0KHZhbCkpIHZhbCA9IGBcIiR7dmFsfVwiYDtcbiAgICB0aGlzLnNldCgnRVRhZycsIHZhbCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgRVRhZyBvZiBhIHJlc3BvbnNlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGdldCBldGFnKCkge1xuICAgIHJldHVybiB0aGlzLmdldCgnRVRhZycpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHJlc3BvbnNlIG1pbWUgdHlwZSB2b2lkIG9mXG4gICAqIHBhcmFtZXRlcnMgc3VjaCBhcyBcImNoYXJzZXRcIi5cbiAgICpcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBnZXQgdHlwZSgpIHtcbiAgICBjb25zdCB0eXBlID0gdGhpcy5nZXQoJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICghdHlwZSkgcmV0dXJuICcnO1xuICAgIHJldHVybiB0eXBlLnNwbGl0KCc7JywgMSlbMF07XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgdGhlIHJlc3BvbnNlIGlzIG9uZSBvZiB0aGUgbGlzdGVkIHR5cGVzLlxuICAgKiBQcmV0dHkgbXVjaCB0aGUgc2FtZSBhcyBgdGhpcy5yZXF1ZXN0LmlzKClgLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xTdHJpbmdbXX0gW3R5cGVdXG4gICAqIEBwYXJhbSB7U3RyaW5nW119IFt0eXBlc11cbiAgICogQHJldHVybiB7U3RyaW5nfGZhbHNlfVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBpcyh0eXBlLCAuLi50eXBlcykge1xuICAgIHJldHVybiB0eXBlaXModGhpcy50eXBlLCB0eXBlLCAuLi50eXBlcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybiByZXNwb25zZSBoZWFkZXIuXG4gICAqXG4gICAqIEV4YW1wbGVzOlxuICAgKlxuICAgKiAgICAgdGhpcy5nZXQoJ0NvbnRlbnQtVHlwZScpO1xuICAgKiAgICAgLy8gPT4gXCJ0ZXh0L3BsYWluXCJcbiAgICpcbiAgICogICAgIHRoaXMuZ2V0KCdjb250ZW50LXR5cGUnKTtcbiAgICogICAgIC8vID0+IFwidGV4dC9wbGFpblwiXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBmaWVsZFxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGdldChmaWVsZCkge1xuICAgIHJldHVybiB0aGlzLmhlYWRlcltmaWVsZC50b0xvd2VyQ2FzZSgpXSB8fCAnJztcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBoZWFkZXIgaWRlbnRpZmllZCBieSBuYW1lIGlzIGN1cnJlbnRseSBzZXQgaW4gdGhlIG91dGdvaW5nIGhlYWRlcnMuXG4gICAqIFRoZSBoZWFkZXIgbmFtZSBtYXRjaGluZyBpcyBjYXNlLWluc2Vuc2l0aXZlLlxuICAgKlxuICAgKiBFeGFtcGxlczpcbiAgICpcbiAgICogICAgIHRoaXMuaGFzKCdDb250ZW50LVR5cGUnKTtcbiAgICogICAgIC8vID0+IHRydWVcbiAgICpcbiAgICogICAgIHRoaXMuZ2V0KCdjb250ZW50LXR5cGUnKTtcbiAgICogICAgIC8vID0+IHRydWVcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBoYXMoZmllbGQpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMucmVzLmhhc0hlYWRlciA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyB0aGlzLnJlcy5oYXNIZWFkZXIoZmllbGQpXG4gICAgICAvLyBOb2RlIDwgNy43XG4gICAgICA6IGZpZWxkLnRvTG93ZXJDYXNlKCkgaW4gdGhpcy5oZWFkZXJzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXQgaGVhZGVyIGBmaWVsZGAgdG8gYHZhbGAsIG9yIHBhc3NcbiAgICogYW4gb2JqZWN0IG9mIGhlYWRlciBmaWVsZHMuXG4gICAqXG4gICAqIEV4YW1wbGVzOlxuICAgKlxuICAgKiAgICB0aGlzLnNldCgnRm9vJywgWydiYXInLCAnYmF6J10pO1xuICAgKiAgICB0aGlzLnNldCgnQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICogICAgdGhpcy5zZXQoeyBBY2NlcHQ6ICd0ZXh0L3BsYWluJywgJ1gtQVBJLUtleSc6ICd0b2JpJyB9KTtcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fEFycmF5fSBmaWVsZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHNldChmaWVsZCwgdmFsKSB7XG4gICAgaWYgKHRoaXMuaGVhZGVyU2VudCkgcmV0dXJuO1xuXG4gICAgaWYgKDIgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkgdmFsID0gdmFsLm1hcCh2ID0+IHR5cGVvZiB2ID09PSAnc3RyaW5nJyA/IHYgOiBTdHJpbmcodikpO1xuICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbCAhPT0gJ3N0cmluZycpIHZhbCA9IFN0cmluZyh2YWwpO1xuICAgICAgdGhpcy5yZXMuc2V0SGVhZGVyKGZpZWxkLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBmaWVsZCkge1xuICAgICAgICB0aGlzLnNldChrZXksIGZpZWxkW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQXBwZW5kIGFkZGl0aW9uYWwgaGVhZGVyIGBmaWVsZGAgd2l0aCB2YWx1ZSBgdmFsYC5cbiAgICpcbiAgICogRXhhbXBsZXM6XG4gICAqXG4gICAqIGBgYFxuICAgKiB0aGlzLmFwcGVuZCgnTGluaycsIFsnPGh0dHA6Ly9sb2NhbGhvc3QvPicsICc8aHR0cDovL2xvY2FsaG9zdDozMDAwLz4nXSk7XG4gICAqIHRoaXMuYXBwZW5kKCdTZXQtQ29va2llJywgJ2Zvbz1iYXI7IFBhdGg9LzsgSHR0cE9ubHknKTtcbiAgICogdGhpcy5hcHBlbmQoJ1dhcm5pbmcnLCAnMTk5IE1pc2NlbGxhbmVvdXMgd2FybmluZycpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkXG4gICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSB2YWxcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXBwZW5kKGZpZWxkLCB2YWwpIHtcbiAgICBjb25zdCBwcmV2ID0gdGhpcy5nZXQoZmllbGQpO1xuXG4gICAgaWYgKHByZXYpIHtcbiAgICAgIHZhbCA9IEFycmF5LmlzQXJyYXkocHJldilcbiAgICAgICAgPyBwcmV2LmNvbmNhdCh2YWwpXG4gICAgICAgIDogW3ByZXZdLmNvbmNhdCh2YWwpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNldChmaWVsZCwgdmFsKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlIGhlYWRlciBgZmllbGRgLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICByZW1vdmUoZmllbGQpIHtcbiAgICBpZiAodGhpcy5oZWFkZXJTZW50KSByZXR1cm47XG5cbiAgICB0aGlzLnJlcy5yZW1vdmVIZWFkZXIoZmllbGQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIHJlcXVlc3QgaXMgd3JpdGFibGUuXG4gICAqIFRlc3RzIGZvciB0aGUgZXhpc3RlbmNlIG9mIHRoZSBzb2NrZXRcbiAgICogYXMgbm9kZSBzb21ldGltZXMgZG9lcyBub3Qgc2V0IGl0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG5cbiAgZ2V0IHdyaXRhYmxlKCkge1xuICAgIC8vIGNhbid0IHdyaXRlIGFueSBtb3JlIGFmdGVyIHJlc3BvbnNlIGZpbmlzaGVkXG4gICAgLy8gcmVzcG9uc2Uud3JpdGFibGVFbmRlZCBpcyBhdmFpbGFibGUgc2luY2UgTm9kZSA+IDEyLjlcbiAgICAvLyBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX3Jlc3BvbnNlX3dyaXRhYmxlZW5kZWRcbiAgICAvLyByZXNwb25zZS5maW5pc2hlZCBpcyB1bmRvY3VtZW50ZWQgZmVhdHVyZSBvZiBwcmV2aW91cyBOb2RlIHZlcnNpb25zXG4gICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTYyNTQzODUvdW5kb2N1bWVudGVkLXJlc3BvbnNlLWZpbmlzaGVkLWluLW5vZGUtanNcbiAgICBpZiAodGhpcy5yZXMud3JpdGFibGVFbmRlZCB8fCB0aGlzLnJlcy5maW5pc2hlZCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgY29uc3Qgc29ja2V0ID0gdGhpcy5yZXMuc29ja2V0O1xuICAgIC8vIFRoZXJlIGFyZSBhbHJlYWR5IHBlbmRpbmcgb3V0Z29pbmcgcmVzLCBidXQgc3RpbGwgd3JpdGFibGVcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi92NC40LjcvbGliL19odHRwX3NlcnZlci5qcyNMNDg2XG4gICAgaWYgKCFzb2NrZXQpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBzb2NrZXQud3JpdGFibGU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluc3BlY3QgaW1wbGVtZW50YXRpb24uXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgaW5zcGVjdCgpIHtcbiAgICBpZiAoIXRoaXMucmVzKSByZXR1cm47XG4gICAgY29uc3QgbyA9IHRoaXMudG9KU09OKCk7XG4gICAgby5ib2R5ID0gdGhpcy5ib2R5O1xuICAgIHJldHVybiBvO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm4gSlNPTiByZXByZXNlbnRhdGlvbi5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIG9ubHkodGhpcywgW1xuICAgICAgJ3N0YXR1cycsXG4gICAgICAnbWVzc2FnZScsXG4gICAgICAnaGVhZGVyJ1xuICAgIF0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGbHVzaCBhbnkgc2V0IGhlYWRlcnMsIGFuZCBiZWdpbiB0aGUgYm9keVxuICAgKi9cbiAgZmx1c2hIZWFkZXJzKCkge1xuICAgIHRoaXMucmVzLmZsdXNoSGVhZGVycygpO1xuICB9XG59O1xuXG4vKipcbiAqIEN1c3RvbSBpbnNwZWN0aW9uIGltcGxlbWVudGF0aW9uIGZvciBuZXdlciBOb2RlLmpzIHZlcnNpb25zLlxuICpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cbmlmICh1dGlsLmluc3BlY3QuY3VzdG9tKSB7XG4gIG1vZHVsZS5leHBvcnRzW3V0aWwuaW5zcGVjdC5jdXN0b21dID0gbW9kdWxlLmV4cG9ydHMuaW5zcGVjdDtcbn1cbiIsIi8qIVxuICogY29udGVudC1kaXNwb3NpdGlvblxuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNyBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50RGlzcG9zaXRpb25cbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2VcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgYmFzZW5hbWUgPSByZXF1aXJlKCdwYXRoJykuYmFzZW5hbWVcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG4vKipcbiAqIFJlZ0V4cCB0byBtYXRjaCBub24gYXR0ci1jaGFyLCAqYWZ0ZXIqIGVuY29kZVVSSUNvbXBvbmVudCAoaS5lLiBub3QgaW5jbHVkaW5nIFwiJVwiKVxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgRU5DT0RFX1VSTF9BVFRSX0NIQVJfUkVHRVhQID0gL1tcXHgwMC1cXHgyMFwiJygpKiwvOjs8PT4/QFtcXFxcXFxde31cXHg3Zl0vZyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnRyb2wtcmVnZXhcblxuLyoqXG4gKiBSZWdFeHAgdG8gbWF0Y2ggcGVyY2VudCBlbmNvZGluZyBlc2NhcGUuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBIRVhfRVNDQVBFX1JFR0VYUCA9IC8lWzAtOUEtRmEtZl17Mn0vXG52YXIgSEVYX0VTQ0FQRV9SRVBMQUNFX1JFR0VYUCA9IC8lKFswLTlBLUZhLWZdezJ9KS9nXG5cbi8qKlxuICogUmVnRXhwIHRvIG1hdGNoIG5vbi1sYXRpbjEgY2hhcmFjdGVycy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIE5PTl9MQVRJTjFfUkVHRVhQID0gL1teXFx4MjAtXFx4N2VcXHhhMC1cXHhmZl0vZ1xuXG4vKipcbiAqIFJlZ0V4cCB0byBtYXRjaCBxdW90ZWQtcGFpciBpbiBSRkMgMjYxNlxuICpcbiAqIHF1b3RlZC1wYWlyID0gXCJcXFwiIENIQVJcbiAqIENIQVIgICAgICAgID0gPGFueSBVUy1BU0NJSSBjaGFyYWN0ZXIgKG9jdGV0cyAwIC0gMTI3KT5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIFFFU0NfUkVHRVhQID0gL1xcXFwoW1xcdTAwMDAtXFx1MDA3Zl0pL2cgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb250cm9sLXJlZ2V4XG5cbi8qKlxuICogUmVnRXhwIHRvIG1hdGNoIGNoYXJzIHRoYXQgbXVzdCBiZSBxdW90ZWQtcGFpciBpbiBSRkMgMjYxNlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgUVVPVEVfUkVHRVhQID0gLyhbXFxcXFwiXSkvZ1xuXG4vKipcbiAqIFJlZ0V4cCBmb3IgdmFyaW91cyBSRkMgMjYxNiBncmFtbWFyXG4gKlxuICogcGFyYW1ldGVyICAgICA9IHRva2VuIFwiPVwiICggdG9rZW4gfCBxdW90ZWQtc3RyaW5nIClcbiAqIHRva2VuICAgICAgICAgPSAxKjxhbnkgQ0hBUiBleGNlcHQgQ1RMcyBvciBzZXBhcmF0b3JzPlxuICogc2VwYXJhdG9ycyAgICA9IFwiKFwiIHwgXCIpXCIgfCBcIjxcIiB8IFwiPlwiIHwgXCJAXCJcbiAqICAgICAgICAgICAgICAgfCBcIixcIiB8IFwiO1wiIHwgXCI6XCIgfCBcIlxcXCIgfCA8XCI+XG4gKiAgICAgICAgICAgICAgIHwgXCIvXCIgfCBcIltcIiB8IFwiXVwiIHwgXCI/XCIgfCBcIj1cIlxuICogICAgICAgICAgICAgICB8IFwie1wiIHwgXCJ9XCIgfCBTUCB8IEhUXG4gKiBxdW90ZWQtc3RyaW5nID0gKCA8XCI+ICoocWR0ZXh0IHwgcXVvdGVkLXBhaXIgKSA8XCI+IClcbiAqIHFkdGV4dCAgICAgICAgPSA8YW55IFRFWFQgZXhjZXB0IDxcIj4+XG4gKiBxdW90ZWQtcGFpciAgID0gXCJcXFwiIENIQVJcbiAqIENIQVIgICAgICAgICAgPSA8YW55IFVTLUFTQ0lJIGNoYXJhY3RlciAob2N0ZXRzIDAgLSAxMjcpPlxuICogVEVYVCAgICAgICAgICA9IDxhbnkgT0NURVQgZXhjZXB0IENUTHMsIGJ1dCBpbmNsdWRpbmcgTFdTPlxuICogTFdTICAgICAgICAgICA9IFtDUkxGXSAxKiggU1AgfCBIVCApXG4gKiBDUkxGICAgICAgICAgID0gQ1IgTEZcbiAqIENSICAgICAgICAgICAgPSA8VVMtQVNDSUkgQ1IsIGNhcnJpYWdlIHJldHVybiAoMTMpPlxuICogTEYgICAgICAgICAgICA9IDxVUy1BU0NJSSBMRiwgbGluZWZlZWQgKDEwKT5cbiAqIFNQICAgICAgICAgICAgPSA8VVMtQVNDSUkgU1AsIHNwYWNlICgzMik+XG4gKiBIVCAgICAgICAgICAgID0gPFVTLUFTQ0lJIEhULCBob3Jpem9udGFsLXRhYiAoOSk+XG4gKiBDVEwgICAgICAgICAgID0gPGFueSBVUy1BU0NJSSBjb250cm9sIGNoYXJhY3RlciAob2N0ZXRzIDAgLSAzMSkgYW5kIERFTCAoMTI3KT5cbiAqIE9DVEVUICAgICAgICAgPSA8YW55IDgtYml0IHNlcXVlbmNlIG9mIGRhdGE+XG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBQQVJBTV9SRUdFWFAgPSAvO1tcXHgwOVxceDIwXSooWyEjJCUmJyorLjAtOUEtWl5fYGEtenx+LV0rKVtcXHgwOVxceDIwXSo9W1xceDA5XFx4MjBdKihcIig/OltcXHgyMCFcXHgyMy1cXHg1YlxceDVkLVxceDdlXFx4ODAtXFx4ZmZdfFxcXFxbXFx4MjAtXFx4N2VdKSpcInxbISMkJSYnKisuMC05QS1aXl9gYS16fH4tXSspW1xceDA5XFx4MjBdKi9nIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29udHJvbC1yZWdleFxudmFyIFRFWFRfUkVHRVhQID0gL15bXFx4MjAtXFx4N2VcXHg4MC1cXHhmZl0rJC9cbnZhciBUT0tFTl9SRUdFWFAgPSAvXlshIyQlJicqKy4wLTlBLVpeX2BhLXp8fi1dKyQvXG5cbi8qKlxuICogUmVnRXhwIGZvciB2YXJpb3VzIFJGQyA1OTg3IGdyYW1tYXJcbiAqXG4gKiBleHQtdmFsdWUgICAgID0gY2hhcnNldCAgXCInXCIgWyBsYW5ndWFnZSBdIFwiJ1wiIHZhbHVlLWNoYXJzXG4gKiBjaGFyc2V0ICAgICAgID0gXCJVVEYtOFwiIC8gXCJJU08tODg1OS0xXCIgLyBtaW1lLWNoYXJzZXRcbiAqIG1pbWUtY2hhcnNldCAgPSAxKm1pbWUtY2hhcnNldGNcbiAqIG1pbWUtY2hhcnNldGMgPSBBTFBIQSAvIERJR0lUXG4gKiAgICAgICAgICAgICAgIC8gXCIhXCIgLyBcIiNcIiAvIFwiJFwiIC8gXCIlXCIgLyBcIiZcIlxuICogICAgICAgICAgICAgICAvIFwiK1wiIC8gXCItXCIgLyBcIl5cIiAvIFwiX1wiIC8gXCJgXCJcbiAqICAgICAgICAgICAgICAgLyBcIntcIiAvIFwifVwiIC8gXCJ+XCJcbiAqIGxhbmd1YWdlICAgICAgPSAoIDIqM0FMUEhBIFsgZXh0bGFuZyBdIClcbiAqICAgICAgICAgICAgICAgLyA0QUxQSEFcbiAqICAgICAgICAgICAgICAgLyA1KjhBTFBIQVxuICogZXh0bGFuZyAgICAgICA9ICozKCBcIi1cIiAzQUxQSEEgKVxuICogdmFsdWUtY2hhcnMgICA9ICooIHBjdC1lbmNvZGVkIC8gYXR0ci1jaGFyIClcbiAqIHBjdC1lbmNvZGVkICAgPSBcIiVcIiBIRVhESUcgSEVYRElHXG4gKiBhdHRyLWNoYXIgICAgID0gQUxQSEEgLyBESUdJVFxuICogICAgICAgICAgICAgICAvIFwiIVwiIC8gXCIjXCIgLyBcIiRcIiAvIFwiJlwiIC8gXCIrXCIgLyBcIi1cIiAvIFwiLlwiXG4gKiAgICAgICAgICAgICAgIC8gXCJeXCIgLyBcIl9cIiAvIFwiYFwiIC8gXCJ8XCIgLyBcIn5cIlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgRVhUX1ZBTFVFX1JFR0VYUCA9IC9eKFtBLVphLXowLTkhIyQlJitcXC1eX2B7fX5dKyknKD86W0EtWmEtel17MiwzfSg/Oi1bQS1aYS16XXszfSl7MCwzfXxbQS1aYS16XXs0LDh9fCknKCg/OiVbMC05QS1GYS1mXXsyfXxbQS1aYS16MC05ISMkJisuXl9gfH4tXSkrKSQvXG5cbi8qKlxuICogUmVnRXhwIGZvciB2YXJpb3VzIFJGQyA2MjY2IGdyYW1tYXJcbiAqXG4gKiBkaXNwb3NpdGlvbi10eXBlID0gXCJpbmxpbmVcIiB8IFwiYXR0YWNobWVudFwiIHwgZGlzcC1leHQtdHlwZVxuICogZGlzcC1leHQtdHlwZSAgICA9IHRva2VuXG4gKiBkaXNwb3NpdGlvbi1wYXJtID0gZmlsZW5hbWUtcGFybSB8IGRpc3AtZXh0LXBhcm1cbiAqIGZpbGVuYW1lLXBhcm0gICAgPSBcImZpbGVuYW1lXCIgXCI9XCIgdmFsdWVcbiAqICAgICAgICAgICAgICAgICAgfCBcImZpbGVuYW1lKlwiIFwiPVwiIGV4dC12YWx1ZVxuICogZGlzcC1leHQtcGFybSAgICA9IHRva2VuIFwiPVwiIHZhbHVlXG4gKiAgICAgICAgICAgICAgICAgIHwgZXh0LXRva2VuIFwiPVwiIGV4dC12YWx1ZVxuICogZXh0LXRva2VuICAgICAgICA9IDx0aGUgY2hhcmFjdGVycyBpbiB0b2tlbiwgZm9sbG93ZWQgYnkgXCIqXCI+XG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBESVNQT1NJVElPTl9UWVBFX1JFR0VYUCA9IC9eKFshIyQlJicqKy4wLTlBLVpeX2BhLXp8fi1dKylbXFx4MDlcXHgyMF0qKD86JHw7KS8gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb250cm9sLXJlZ2V4XG5cbi8qKlxuICogQ3JlYXRlIGFuIGF0dGFjaG1lbnQgQ29udGVudC1EaXNwb3NpdGlvbiBoZWFkZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtmaWxlbmFtZV1cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy50eXBlPWF0dGFjaG1lbnRdXG4gKiBAcGFyYW0ge3N0cmluZ3xib29sZWFufSBbb3B0aW9ucy5mYWxsYmFjaz10cnVlXVxuICogQHJldHVybiB7c3RyaW5nfVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGNvbnRlbnREaXNwb3NpdGlvbiAoZmlsZW5hbWUsIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSBvcHRpb25zIHx8IHt9XG5cbiAgLy8gZ2V0IHR5cGVcbiAgdmFyIHR5cGUgPSBvcHRzLnR5cGUgfHwgJ2F0dGFjaG1lbnQnXG5cbiAgLy8gZ2V0IHBhcmFtZXRlcnNcbiAgdmFyIHBhcmFtcyA9IGNyZWF0ZXBhcmFtcyhmaWxlbmFtZSwgb3B0cy5mYWxsYmFjaylcblxuICAvLyBmb3JtYXQgaW50byBzdHJpbmdcbiAgcmV0dXJuIGZvcm1hdChuZXcgQ29udGVudERpc3Bvc2l0aW9uKHR5cGUsIHBhcmFtcykpXG59XG5cbi8qKlxuICogQ3JlYXRlIHBhcmFtZXRlcnMgb2JqZWN0IGZyb20gZmlsZW5hbWUgYW5kIGZhbGxiYWNrLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbZmlsZW5hbWVdXG4gKiBAcGFyYW0ge3N0cmluZ3xib29sZWFufSBbZmFsbGJhY2s9dHJ1ZV1cbiAqIEByZXR1cm4ge29iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlcGFyYW1zIChmaWxlbmFtZSwgZmFsbGJhY2spIHtcbiAgaWYgKGZpbGVuYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBwYXJhbXMgPSB7fVxuXG4gIGlmICh0eXBlb2YgZmlsZW5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZmlsZW5hbWUgbXVzdCBiZSBhIHN0cmluZycpXG4gIH1cblxuICAvLyBmYWxsYmFjayBkZWZhdWx0cyB0byB0cnVlXG4gIGlmIChmYWxsYmFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZmFsbGJhY2sgPSB0cnVlXG4gIH1cblxuICBpZiAodHlwZW9mIGZhbGxiYWNrICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgZmFsbGJhY2sgIT09ICdib29sZWFuJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ZhbGxiYWNrIG11c3QgYmUgYSBzdHJpbmcgb3IgYm9vbGVhbicpXG4gIH1cblxuICBpZiAodHlwZW9mIGZhbGxiYWNrID09PSAnc3RyaW5nJyAmJiBOT05fTEFUSU4xX1JFR0VYUC50ZXN0KGZhbGxiYWNrKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ZhbGxiYWNrIG11c3QgYmUgSVNPLTg4NTktMSBzdHJpbmcnKVxuICB9XG5cbiAgLy8gcmVzdHJpY3QgdG8gZmlsZSBiYXNlIG5hbWVcbiAgdmFyIG5hbWUgPSBiYXNlbmFtZShmaWxlbmFtZSlcblxuICAvLyBkZXRlcm1pbmUgaWYgbmFtZSBpcyBzdWl0YWJsZSBmb3IgcXVvdGVkIHN0cmluZ1xuICB2YXIgaXNRdW90ZWRTdHJpbmcgPSBURVhUX1JFR0VYUC50ZXN0KG5hbWUpXG5cbiAgLy8gZ2VuZXJhdGUgZmFsbGJhY2sgbmFtZVxuICB2YXIgZmFsbGJhY2tOYW1lID0gdHlwZW9mIGZhbGxiYWNrICE9PSAnc3RyaW5nJ1xuICAgID8gZmFsbGJhY2sgJiYgZ2V0bGF0aW4xKG5hbWUpXG4gICAgOiBiYXNlbmFtZShmYWxsYmFjaylcbiAgdmFyIGhhc0ZhbGxiYWNrID0gdHlwZW9mIGZhbGxiYWNrTmFtZSA9PT0gJ3N0cmluZycgJiYgZmFsbGJhY2tOYW1lICE9PSBuYW1lXG5cbiAgLy8gc2V0IGV4dGVuZGVkIGZpbGVuYW1lIHBhcmFtZXRlclxuICBpZiAoaGFzRmFsbGJhY2sgfHwgIWlzUXVvdGVkU3RyaW5nIHx8IEhFWF9FU0NBUEVfUkVHRVhQLnRlc3QobmFtZSkpIHtcbiAgICBwYXJhbXNbJ2ZpbGVuYW1lKiddID0gbmFtZVxuICB9XG5cbiAgLy8gc2V0IGZpbGVuYW1lIHBhcmFtZXRlclxuICBpZiAoaXNRdW90ZWRTdHJpbmcgfHwgaGFzRmFsbGJhY2spIHtcbiAgICBwYXJhbXMuZmlsZW5hbWUgPSBoYXNGYWxsYmFja1xuICAgICAgPyBmYWxsYmFja05hbWVcbiAgICAgIDogbmFtZVxuICB9XG5cbiAgcmV0dXJuIHBhcmFtc1xufVxuXG4vKipcbiAqIEZvcm1hdCBvYmplY3QgdG8gQ29udGVudC1EaXNwb3NpdGlvbiBoZWFkZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9ialxuICogQHBhcmFtIHtzdHJpbmd9IG9iai50eXBlXG4gKiBAcGFyYW0ge29iamVjdH0gW29iai5wYXJhbWV0ZXJzXVxuICogQHJldHVybiB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXQgKG9iaikge1xuICB2YXIgcGFyYW1ldGVycyA9IG9iai5wYXJhbWV0ZXJzXG4gIHZhciB0eXBlID0gb2JqLnR5cGVcblxuICBpZiAoIXR5cGUgfHwgdHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnIHx8ICFUT0tFTl9SRUdFWFAudGVzdCh0eXBlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgdHlwZScpXG4gIH1cblxuICAvLyBzdGFydCB3aXRoIG5vcm1hbGl6ZWQgdHlwZVxuICB2YXIgc3RyaW5nID0gU3RyaW5nKHR5cGUpLnRvTG93ZXJDYXNlKClcblxuICAvLyBhcHBlbmQgcGFyYW1ldGVyc1xuICBpZiAocGFyYW1ldGVycyAmJiB0eXBlb2YgcGFyYW1ldGVycyA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcGFyYW1cbiAgICB2YXIgcGFyYW1zID0gT2JqZWN0LmtleXMocGFyYW1ldGVycykuc29ydCgpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgICAgcGFyYW0gPSBwYXJhbXNbaV1cblxuICAgICAgdmFyIHZhbCA9IHBhcmFtLnN1YnN0cigtMSkgPT09ICcqJ1xuICAgICAgICA/IHVzdHJpbmcocGFyYW1ldGVyc1twYXJhbV0pXG4gICAgICAgIDogcXN0cmluZyhwYXJhbWV0ZXJzW3BhcmFtXSlcblxuICAgICAgc3RyaW5nICs9ICc7ICcgKyBwYXJhbSArICc9JyArIHZhbFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHJpbmdcbn1cblxuLyoqXG4gKiBEZWNvZGUgYSBSRkMgNjk4NyBmaWVsZCB2YWx1ZSAoZ3JhY2VmdWxseSkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBkZWNvZGVmaWVsZCAoc3RyKSB7XG4gIHZhciBtYXRjaCA9IEVYVF9WQUxVRV9SRUdFWFAuZXhlYyhzdHIpXG5cbiAgaWYgKCFtYXRjaCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgZXh0ZW5kZWQgZmllbGQgdmFsdWUnKVxuICB9XG5cbiAgdmFyIGNoYXJzZXQgPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpXG4gIHZhciBlbmNvZGVkID0gbWF0Y2hbMl1cbiAgdmFyIHZhbHVlXG5cbiAgLy8gdG8gYmluYXJ5IHN0cmluZ1xuICB2YXIgYmluYXJ5ID0gZW5jb2RlZC5yZXBsYWNlKEhFWF9FU0NBUEVfUkVQTEFDRV9SRUdFWFAsIHBkZWNvZGUpXG5cbiAgc3dpdGNoIChjaGFyc2V0KSB7XG4gICAgY2FzZSAnaXNvLTg4NTktMSc6XG4gICAgICB2YWx1ZSA9IGdldGxhdGluMShiaW5hcnkpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIHZhbHVlID0gQnVmZmVyLmZyb20oYmluYXJ5LCAnYmluYXJ5JykudG9TdHJpbmcoJ3V0ZjgnKVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndW5zdXBwb3J0ZWQgY2hhcnNldCBpbiBleHRlbmRlZCBmaWVsZCcpXG4gIH1cblxuICByZXR1cm4gdmFsdWVcbn1cblxuLyoqXG4gKiBHZXQgSVNPLTg4NTktMSB2ZXJzaW9uIG9mIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGdldGxhdGluMSAodmFsKSB7XG4gIC8vIHNpbXBsZSBVbmljb2RlIC0+IElTTy04ODU5LTEgdHJhbnNmb3JtYXRpb25cbiAgcmV0dXJuIFN0cmluZyh2YWwpLnJlcGxhY2UoTk9OX0xBVElOMV9SRUdFWFAsICc/Jylcbn1cblxuLyoqXG4gKiBQYXJzZSBDb250ZW50LURpc3Bvc2l0aW9uIGhlYWRlciBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7b2JqZWN0fVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHBhcnNlIChzdHJpbmcpIHtcbiAgaWYgKCFzdHJpbmcgfHwgdHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzdHJpbmcgaXMgcmVxdWlyZWQnKVxuICB9XG5cbiAgdmFyIG1hdGNoID0gRElTUE9TSVRJT05fVFlQRV9SRUdFWFAuZXhlYyhzdHJpbmcpXG5cbiAgaWYgKCFtYXRjaCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgdHlwZSBmb3JtYXQnKVxuICB9XG5cbiAgLy8gbm9ybWFsaXplIHR5cGVcbiAgdmFyIGluZGV4ID0gbWF0Y2hbMF0ubGVuZ3RoXG4gIHZhciB0eXBlID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKVxuXG4gIHZhciBrZXlcbiAgdmFyIG5hbWVzID0gW11cbiAgdmFyIHBhcmFtcyA9IHt9XG4gIHZhciB2YWx1ZVxuXG4gIC8vIGNhbGN1bGF0ZSBpbmRleCB0byBzdGFydCBhdFxuICBpbmRleCA9IFBBUkFNX1JFR0VYUC5sYXN0SW5kZXggPSBtYXRjaFswXS5zdWJzdHIoLTEpID09PSAnOydcbiAgICA/IGluZGV4IC0gMVxuICAgIDogaW5kZXhcblxuICAvLyBtYXRjaCBwYXJhbWV0ZXJzXG4gIHdoaWxlICgobWF0Y2ggPSBQQVJBTV9SRUdFWFAuZXhlYyhzdHJpbmcpKSkge1xuICAgIGlmIChtYXRjaC5pbmRleCAhPT0gaW5kZXgpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgcGFyYW1ldGVyIGZvcm1hdCcpXG4gICAgfVxuXG4gICAgaW5kZXggKz0gbWF0Y2hbMF0ubGVuZ3RoXG4gICAga2V5ID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKVxuICAgIHZhbHVlID0gbWF0Y2hbMl1cblxuICAgIGlmIChuYW1lcy5pbmRleE9mKGtleSkgIT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGR1cGxpY2F0ZSBwYXJhbWV0ZXInKVxuICAgIH1cblxuICAgIG5hbWVzLnB1c2goa2V5KVxuXG4gICAgaWYgKGtleS5pbmRleE9mKCcqJykgKyAxID09PSBrZXkubGVuZ3RoKSB7XG4gICAgICAvLyBkZWNvZGUgZXh0ZW5kZWQgdmFsdWVcbiAgICAgIGtleSA9IGtleS5zbGljZSgwLCAtMSlcbiAgICAgIHZhbHVlID0gZGVjb2RlZmllbGQodmFsdWUpXG5cbiAgICAgIC8vIG92ZXJ3cml0ZSBleGlzdGluZyB2YWx1ZVxuICAgICAgcGFyYW1zW2tleV0gPSB2YWx1ZVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHBhcmFtc1trZXldID09PSAnc3RyaW5nJykge1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBpZiAodmFsdWVbMF0gPT09ICdcIicpIHtcbiAgICAgIC8vIHJlbW92ZSBxdW90ZXMgYW5kIGVzY2FwZXNcbiAgICAgIHZhbHVlID0gdmFsdWVcbiAgICAgICAgLnN1YnN0cigxLCB2YWx1ZS5sZW5ndGggLSAyKVxuICAgICAgICAucmVwbGFjZShRRVNDX1JFR0VYUCwgJyQxJylcbiAgICB9XG5cbiAgICBwYXJhbXNba2V5XSA9IHZhbHVlXG4gIH1cblxuICBpZiAoaW5kZXggIT09IC0xICYmIGluZGV4ICE9PSBzdHJpbmcubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBwYXJhbWV0ZXIgZm9ybWF0JylcbiAgfVxuXG4gIHJldHVybiBuZXcgQ29udGVudERpc3Bvc2l0aW9uKHR5cGUsIHBhcmFtcylcbn1cblxuLyoqXG4gKiBQZXJjZW50IGRlY29kZSBhIHNpbmdsZSBjaGFyYWN0ZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHBhcmFtIHtzdHJpbmd9IGhleFxuICogQHJldHVybiB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwZGVjb2RlIChzdHIsIGhleCkge1xuICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChoZXgsIDE2KSlcbn1cblxuLyoqXG4gKiBQZXJjZW50IGVuY29kZSBhIHNpbmdsZSBjaGFyYWN0ZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNoYXJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGVuY29kZSAoY2hhcikge1xuICByZXR1cm4gJyUnICsgU3RyaW5nKGNoYXIpXG4gICAgLmNoYXJDb2RlQXQoMClcbiAgICAudG9TdHJpbmcoMTYpXG4gICAgLnRvVXBwZXJDYXNlKClcbn1cblxuLyoqXG4gKiBRdW90ZSBhIHN0cmluZyBmb3IgSFRUUC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHFzdHJpbmcgKHZhbCkge1xuICB2YXIgc3RyID0gU3RyaW5nKHZhbClcblxuICByZXR1cm4gJ1wiJyArIHN0ci5yZXBsYWNlKFFVT1RFX1JFR0VYUCwgJ1xcXFwkMScpICsgJ1wiJ1xufVxuXG4vKipcbiAqIEVuY29kZSBhIFVuaWNvZGUgc3RyaW5nIGZvciBIVFRQIChSRkMgNTk4NykuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbFxuICogQHJldHVybiB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiB1c3RyaW5nICh2YWwpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyh2YWwpXG5cbiAgLy8gcGVyY2VudCBlbmNvZGUgYXMgVVRGLThcbiAgdmFyIGVuY29kZWQgPSBlbmNvZGVVUklDb21wb25lbnQoc3RyKVxuICAgIC5yZXBsYWNlKEVOQ09ERV9VUkxfQVRUUl9DSEFSX1JFR0VYUCwgcGVuY29kZSlcblxuICByZXR1cm4gJ1VURi04XFwnXFwnJyArIGVuY29kZWRcbn1cblxuLyoqXG4gKiBDbGFzcyBmb3IgcGFyc2VkIENvbnRlbnQtRGlzcG9zaXRpb24gaGVhZGVyIGZvciB2OCBvcHRpbWl6YXRpb25cbiAqXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtvYmplY3R9IHBhcmFtZXRlcnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5cbmZ1bmN0aW9uIENvbnRlbnREaXNwb3NpdGlvbiAodHlwZSwgcGFyYW1ldGVycykge1xuICB0aGlzLnR5cGUgPSB0eXBlXG4gIHRoaXMucGFyYW1ldGVycyA9IHBhcmFtZXRlcnNcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJidWZmZXJcIik7IiwidmFyIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHJlYW0sIGVycm9yKSB7XG4gIGlmIChzdHJlYW0gaW5zdGFuY2VvZiBTdHJlYW1cbiAgICAmJiAhfnN0cmVhbS5saXN0ZW5lcnMoJ2Vycm9yJykuaW5kZXhPZihlcnJvcikpIHtcbiAgICBzdHJlYW0ub24oJ2Vycm9yJywgZXJyb3IpO1xuICB9XG4gIHJldHVybiBzdHJlYW07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBtaW1lVHlwZXMgPSByZXF1aXJlKCdtaW1lLXR5cGVzJyk7XG5jb25zdCBMUlUgPSByZXF1aXJlKCd5bHJ1Jyk7XG5cbmNvbnN0IHR5cGVMUlVDYWNoZSA9IG5ldyBMUlUoMTAwKTtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlID0+IHtcbiAgbGV0IG1pbWVUeXBlID0gdHlwZUxSVUNhY2hlLmdldCh0eXBlKTtcbiAgaWYgKCFtaW1lVHlwZSkge1xuICAgIG1pbWVUeXBlID0gbWltZVR5cGVzLmNvbnRlbnRUeXBlKHR5cGUpO1xuICAgIHR5cGVMUlVDYWNoZS5zZXQodHlwZSwgbWltZVR5cGUpO1xuICB9XG4gIHJldHVybiBtaW1lVHlwZTtcbn07XG4iLCIvKiFcbiAqIG1pbWUtZGJcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGIuanNvbicpXG4iLCIndXNlIHN0cmljdCc7XG5cbmNsYXNzIExSVSB7XG4gIGNvbnN0cnVjdG9yKG1heCkge1xuICAgIHRoaXMubWF4ID0gbWF4O1xuICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgdGhpcy5jYWNoZSA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9jYWNoZSA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIGdldChrZXksIG9wdGlvbnMpIHtcbiAgICBsZXQgaXRlbSA9IHRoaXMuY2FjaGUuZ2V0KGtleSk7XG4gICAgY29uc3QgbWF4QWdlID0gb3B0aW9ucyAmJiBvcHRpb25zLm1heEFnZTtcbiAgICAvLyBvbmx5IGNhbGwgRGF0ZS5ub3coKSB3aGVuIG5lY2Vzc2FyeVxuICAgIGxldCBub3c7XG4gICAgZnVuY3Rpb24gZ2V0Tm93KCkge1xuICAgICAgbm93ID0gbm93IHx8IERhdGUubm93KCk7XG4gICAgICByZXR1cm4gbm93O1xuICAgIH1cbiAgICBpZiAoaXRlbSkge1xuICAgICAgLy8gY2hlY2sgZXhwaXJlZFxuICAgICAgaWYgKGl0ZW0uZXhwaXJlZCAmJiBnZXROb3coKSA+IGl0ZW0uZXhwaXJlZCkge1xuICAgICAgICBpdGVtLmV4cGlyZWQgPSAwO1xuICAgICAgICBpdGVtLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdXBkYXRlIGV4cGlyZWQgaW4gZ2V0XG4gICAgICAgIGlmIChtYXhBZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvbnN0IGV4cGlyZWQgPSBtYXhBZ2UgPyBnZXROb3coKSArIG1heEFnZSA6IDA7XG4gICAgICAgICAgaXRlbS5leHBpcmVkID0gZXhwaXJlZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZW0udmFsdWU7XG4gICAgfVxuXG4gICAgLy8gdHJ5IHRvIHJlYWQgZnJvbSBfY2FjaGVcbiAgICBpdGVtID0gdGhpcy5fY2FjaGUuZ2V0KGtleSk7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIC8vIGNoZWNrIGV4cGlyZWRcbiAgICAgIGlmIChpdGVtLmV4cGlyZWQgJiYgZ2V0Tm93KCkgPiBpdGVtLmV4cGlyZWQpIHtcbiAgICAgICAgaXRlbS5leHBpcmVkID0gMDtcbiAgICAgICAgaXRlbS52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG5vdCBleHBpcmVkLCBzYXZlIHRvIGNhY2hlXG4gICAgICAgIHRoaXMuX3VwZGF0ZShrZXksIGl0ZW0pO1xuICAgICAgICAvLyB1cGRhdGUgZXhwaXJlZCBpbiBnZXRcbiAgICAgICAgaWYgKG1heEFnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29uc3QgZXhwaXJlZCA9IG1heEFnZSA/IGdldE5vdygpICsgbWF4QWdlIDogMDtcbiAgICAgICAgICBpdGVtLmV4cGlyZWQgPSBleHBpcmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlbS52YWx1ZTtcbiAgICB9XG4gIH1cblxuICBzZXQoa2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IG1heEFnZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5tYXhBZ2U7XG4gICAgY29uc3QgZXhwaXJlZCA9IG1heEFnZSA/IERhdGUubm93KCkgKyBtYXhBZ2UgOiAwO1xuICAgIGxldCBpdGVtID0gdGhpcy5jYWNoZS5nZXQoa2V5KTtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgaXRlbS5leHBpcmVkID0gZXhwaXJlZDtcbiAgICAgIGl0ZW0udmFsdWUgPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaXRlbSA9IHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGV4cGlyZWQsXG4gICAgICB9O1xuICAgICAgdGhpcy5fdXBkYXRlKGtleSwgaXRlbSk7XG4gICAgfVxuICB9XG5cbiAga2V5cygpIHtcbiAgICBjb25zdCBjYWNoZUtleXMgPSBuZXcgU2V0KCk7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGZvciAoY29uc3QgZW50cnkgb2YgdGhpcy5jYWNoZS5lbnRyaWVzKCkpIHtcbiAgICAgIGNoZWNrRW50cnkoZW50cnkpO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgZW50cnkgb2YgdGhpcy5fY2FjaGUuZW50cmllcygpKSB7XG4gICAgICBjaGVja0VudHJ5KGVudHJ5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja0VudHJ5KGVudHJ5KSB7XG4gICAgICBjb25zdCBrZXkgPSBlbnRyeVswXTtcbiAgICAgIGNvbnN0IGl0ZW0gPSBlbnRyeVsxXTtcbiAgICAgIGlmIChlbnRyeVsxXS52YWx1ZSAmJiAoIWVudHJ5WzFdLmV4cGlyZWQpIHx8IGl0ZW0uZXhwaXJlZCA+PSBub3cpIHtcbiAgICAgICAgY2FjaGVLZXlzLmFkZChrZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBBcnJheS5mcm9tKGNhY2hlS2V5cy5rZXlzKCkpO1xuICB9XG5cbiAgX3VwZGF0ZShrZXksIGl0ZW0pIHtcbiAgICB0aGlzLmNhY2hlLnNldChrZXksIGl0ZW0pO1xuICAgIHRoaXMuc2l6ZSsrO1xuICAgIGlmICh0aGlzLnNpemUgPj0gdGhpcy5tYXgpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICB0aGlzLl9jYWNoZSA9IHRoaXMuY2FjaGU7XG4gICAgICB0aGlzLmNhY2hlID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExSVTtcblxuIiwiLyohXG4gKiBlc2NhcGUtaHRtbFxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxMyBUSiBIb2xvd2F5Y2h1a1xuICogQ29weXJpZ2h0KGMpIDIwMTUgQW5kcmVhcyBMdWJiZVxuICogQ29weXJpZ2h0KGMpIDIwMTUgVGlhbmNoZW5nIFwiVGltb3RoeVwiIEd1XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIG1hdGNoSHRtbFJlZ0V4cCA9IC9bXCInJjw+XS87XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBlc2NhcGVIdG1sO1xuXG4vKipcbiAqIEVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgaW4gdGhlIGdpdmVuIHN0cmluZyBvZiBodG1sLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gZXNjYXBlIGZvciBpbnNlcnRpbmcgaW50byBIVE1MXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZXNjYXBlSHRtbChzdHJpbmcpIHtcbiAgdmFyIHN0ciA9ICcnICsgc3RyaW5nO1xuICB2YXIgbWF0Y2ggPSBtYXRjaEh0bWxSZWdFeHAuZXhlYyhzdHIpO1xuXG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgdmFyIGVzY2FwZTtcbiAgdmFyIGh0bWwgPSAnJztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RJbmRleCA9IDA7XG5cbiAgZm9yIChpbmRleCA9IG1hdGNoLmluZGV4OyBpbmRleCA8IHN0ci5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBzd2l0Y2ggKHN0ci5jaGFyQ29kZUF0KGluZGV4KSkge1xuICAgICAgY2FzZSAzNDogLy8gXCJcbiAgICAgICAgZXNjYXBlID0gJyZxdW90Oyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzODogLy8gJlxuICAgICAgICBlc2NhcGUgPSAnJmFtcDsnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzk6IC8vICdcbiAgICAgICAgZXNjYXBlID0gJyYjMzk7JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDYwOiAvLyA8XG4gICAgICAgIGVzY2FwZSA9ICcmbHQ7JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDYyOiAvLyA+XG4gICAgICAgIGVzY2FwZSA9ICcmZ3Q7JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAobGFzdEluZGV4ICE9PSBpbmRleCkge1xuICAgICAgaHRtbCArPSBzdHIuc3Vic3RyaW5nKGxhc3RJbmRleCwgaW5kZXgpO1xuICAgIH1cblxuICAgIGxhc3RJbmRleCA9IGluZGV4ICsgMTtcbiAgICBodG1sICs9IGVzY2FwZTtcbiAgfVxuXG4gIHJldHVybiBsYXN0SW5kZXggIT09IGluZGV4XG4gICAgPyBodG1sICsgc3RyLnN1YnN0cmluZyhsYXN0SW5kZXgsIGluZGV4KVxuICAgIDogaHRtbDtcbn1cbiIsIi8qIVxuICogbWVkaWEtdHlwZXJcbiAqIENvcHlyaWdodChjKSAyMDE0IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqIFJlZ0V4cCB0byBtYXRjaCAqKCBcIjtcIiBwYXJhbWV0ZXIgKSBpbiBSRkMgMjYxNiBzZWMgMy43XG4gKlxuICogcGFyYW1ldGVyICAgICA9IHRva2VuIFwiPVwiICggdG9rZW4gfCBxdW90ZWQtc3RyaW5nIClcbiAqIHRva2VuICAgICAgICAgPSAxKjxhbnkgQ0hBUiBleGNlcHQgQ1RMcyBvciBzZXBhcmF0b3JzPlxuICogc2VwYXJhdG9ycyAgICA9IFwiKFwiIHwgXCIpXCIgfCBcIjxcIiB8IFwiPlwiIHwgXCJAXCJcbiAqICAgICAgICAgICAgICAgfCBcIixcIiB8IFwiO1wiIHwgXCI6XCIgfCBcIlxcXCIgfCA8XCI+XG4gKiAgICAgICAgICAgICAgIHwgXCIvXCIgfCBcIltcIiB8IFwiXVwiIHwgXCI/XCIgfCBcIj1cIlxuICogICAgICAgICAgICAgICB8IFwie1wiIHwgXCJ9XCIgfCBTUCB8IEhUXG4gKiBxdW90ZWQtc3RyaW5nID0gKCA8XCI+ICoocWR0ZXh0IHwgcXVvdGVkLXBhaXIgKSA8XCI+IClcbiAqIHFkdGV4dCAgICAgICAgPSA8YW55IFRFWFQgZXhjZXB0IDxcIj4+XG4gKiBxdW90ZWQtcGFpciAgID0gXCJcXFwiIENIQVJcbiAqIENIQVIgICAgICAgICAgPSA8YW55IFVTLUFTQ0lJIGNoYXJhY3RlciAob2N0ZXRzIDAgLSAxMjcpPlxuICogVEVYVCAgICAgICAgICA9IDxhbnkgT0NURVQgZXhjZXB0IENUTHMsIGJ1dCBpbmNsdWRpbmcgTFdTPlxuICogTFdTICAgICAgICAgICA9IFtDUkxGXSAxKiggU1AgfCBIVCApXG4gKiBDUkxGICAgICAgICAgID0gQ1IgTEZcbiAqIENSICAgICAgICAgICAgPSA8VVMtQVNDSUkgQ1IsIGNhcnJpYWdlIHJldHVybiAoMTMpPlxuICogTEYgICAgICAgICAgICA9IDxVUy1BU0NJSSBMRiwgbGluZWZlZWQgKDEwKT5cbiAqIFNQICAgICAgICAgICAgPSA8VVMtQVNDSUkgU1AsIHNwYWNlICgzMik+XG4gKiBTSFQgICAgICAgICAgID0gPFVTLUFTQ0lJIEhULCBob3Jpem9udGFsLXRhYiAoOSk+XG4gKiBDVEwgICAgICAgICAgID0gPGFueSBVUy1BU0NJSSBjb250cm9sIGNoYXJhY3RlciAob2N0ZXRzIDAgLSAzMSkgYW5kIERFTCAoMTI3KT5cbiAqIE9DVEVUICAgICAgICAgPSA8YW55IDgtYml0IHNlcXVlbmNlIG9mIGRhdGE+XG4gKi9cbnZhciBwYXJhbVJlZ0V4cCA9IC87ICooWyEjJCUmJ1xcKlxcK1xcLVxcLjAtOUEtWlxcXl9gYS16XFx8fl0rKSAqPSAqKFwiKD86WyAhXFx1MDAyMy1cXHUwMDViXFx1MDA1ZC1cXHUwMDdlXFx1MDA4MC1cXHUwMGZmXXxcXFxcW1xcdTAwMjAtXFx1MDA3ZV0pKlwifFshIyQlJidcXCpcXCtcXC1cXC4wLTlBLVpcXF5fYGEtelxcfH5dKykgKi9nO1xudmFyIHRleHRSZWdFeHAgPSAvXltcXHUwMDIwLVxcdTAwN2VcXHUwMDgwLVxcdTAwZmZdKyQvXG52YXIgdG9rZW5SZWdFeHAgPSAvXlshIyQlJidcXCpcXCtcXC1cXC4wLTlBLVpcXF5fYGEtelxcfH5dKyQvXG5cbi8qKlxuICogUmVnRXhwIHRvIG1hdGNoIHF1b3RlZC1wYWlyIGluIFJGQyAyNjE2XG4gKlxuICogcXVvdGVkLXBhaXIgPSBcIlxcXCIgQ0hBUlxuICogQ0hBUiAgICAgICAgPSA8YW55IFVTLUFTQ0lJIGNoYXJhY3RlciAob2N0ZXRzIDAgLSAxMjcpPlxuICovXG52YXIgcWVzY1JlZ0V4cCA9IC9cXFxcKFtcXHUwMDAwLVxcdTAwN2ZdKS9nO1xuXG4vKipcbiAqIFJlZ0V4cCB0byBtYXRjaCBjaGFycyB0aGF0IG11c3QgYmUgcXVvdGVkLXBhaXIgaW4gUkZDIDI2MTZcbiAqL1xudmFyIHF1b3RlUmVnRXhwID0gLyhbXFxcXFwiXSkvZztcblxuLyoqXG4gKiBSZWdFeHAgdG8gbWF0Y2ggdHlwZSBpbiBSRkMgNjgzOFxuICpcbiAqIHR5cGUtbmFtZSA9IHJlc3RyaWN0ZWQtbmFtZVxuICogc3VidHlwZS1uYW1lID0gcmVzdHJpY3RlZC1uYW1lXG4gKiByZXN0cmljdGVkLW5hbWUgPSByZXN0cmljdGVkLW5hbWUtZmlyc3QgKjEyNnJlc3RyaWN0ZWQtbmFtZS1jaGFyc1xuICogcmVzdHJpY3RlZC1uYW1lLWZpcnN0ICA9IEFMUEhBIC8gRElHSVRcbiAqIHJlc3RyaWN0ZWQtbmFtZS1jaGFycyAgPSBBTFBIQSAvIERJR0lUIC8gXCIhXCIgLyBcIiNcIiAvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgXCIkXCIgLyBcIiZcIiAvIFwiLVwiIC8gXCJeXCIgLyBcIl9cIlxuICogcmVzdHJpY3RlZC1uYW1lLWNoYXJzID0vIFwiLlwiIDsgQ2hhcmFjdGVycyBiZWZvcmUgZmlyc3QgZG90IGFsd2F5c1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IHNwZWNpZnkgYSBmYWNldCBuYW1lXG4gKiByZXN0cmljdGVkLW5hbWUtY2hhcnMgPS8gXCIrXCIgOyBDaGFyYWN0ZXJzIGFmdGVyIGxhc3QgcGx1cyBhbHdheXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOyBzcGVjaWZ5IGEgc3RydWN0dXJlZCBzeW50YXggc3VmZml4XG4gKiBBTFBIQSA9ICAleDQxLTVBIC8gJXg2MS03QSAgIDsgQS1aIC8gYS16XG4gKiBESUdJVCA9ICAleDMwLTM5ICAgICAgICAgICAgIDsgMC05XG4gKi9cbnZhciBzdWJ0eXBlTmFtZVJlZ0V4cCA9IC9eW0EtWmEtejAtOV1bQS1aYS16MC05ISMkJl5fLi1dezAsMTI2fSQvXG52YXIgdHlwZU5hbWVSZWdFeHAgPSAvXltBLVphLXowLTldW0EtWmEtejAtOSEjJCZeXy1dezAsMTI2fSQvXG52YXIgdHlwZVJlZ0V4cCA9IC9eICooW0EtWmEtejAtOV1bQS1aYS16MC05ISMkJl5fLV17MCwxMjZ9KVxcLyhbQS1aYS16MC05XVtBLVphLXowLTkhIyQmXl8uKy1dezAsMTI2fSkgKiQvO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0ID0gZm9ybWF0XG5leHBvcnRzLnBhcnNlID0gcGFyc2VcblxuLyoqXG4gKiBGb3JtYXQgb2JqZWN0IHRvIG1lZGlhIHR5cGUuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9ialxuICogQHJldHVybiB7c3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXQob2JqKSB7XG4gIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgb2JqIGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIHZhciBwYXJhbWV0ZXJzID0gb2JqLnBhcmFtZXRlcnNcbiAgdmFyIHN1YnR5cGUgPSBvYmouc3VidHlwZVxuICB2YXIgc3VmZml4ID0gb2JqLnN1ZmZpeFxuICB2YXIgdHlwZSA9IG9iai50eXBlXG5cbiAgaWYgKCF0eXBlIHx8ICF0eXBlTmFtZVJlZ0V4cC50ZXN0KHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCB0eXBlJylcbiAgfVxuXG4gIGlmICghc3VidHlwZSB8fCAhc3VidHlwZU5hbWVSZWdFeHAudGVzdChzdWJ0eXBlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VidHlwZScpXG4gIH1cblxuICAvLyBmb3JtYXQgYXMgdHlwZS9zdWJ0eXBlXG4gIHZhciBzdHJpbmcgPSB0eXBlICsgJy8nICsgc3VidHlwZVxuXG4gIC8vIGFwcGVuZCArc3VmZml4XG4gIGlmIChzdWZmaXgpIHtcbiAgICBpZiAoIXR5cGVOYW1lUmVnRXhwLnRlc3Qoc3VmZml4KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWZmaXgnKVxuICAgIH1cblxuICAgIHN0cmluZyArPSAnKycgKyBzdWZmaXhcbiAgfVxuXG4gIC8vIGFwcGVuZCBwYXJhbWV0ZXJzXG4gIGlmIChwYXJhbWV0ZXJzICYmIHR5cGVvZiBwYXJhbWV0ZXJzID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBwYXJhbVxuICAgIHZhciBwYXJhbXMgPSBPYmplY3Qua2V5cyhwYXJhbWV0ZXJzKS5zb3J0KClcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwYXJhbSA9IHBhcmFtc1tpXVxuXG4gICAgICBpZiAoIXRva2VuUmVnRXhwLnRlc3QocGFyYW0pKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgcGFyYW1ldGVyIG5hbWUnKVxuICAgICAgfVxuXG4gICAgICBzdHJpbmcgKz0gJzsgJyArIHBhcmFtICsgJz0nICsgcXN0cmluZyhwYXJhbWV0ZXJzW3BhcmFtXSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyaW5nXG59XG5cbi8qKlxuICogUGFyc2UgbWVkaWEgdHlwZSB0byBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSBzdHJpbmdcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyaW5nKSB7XG4gIGlmICghc3RyaW5nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgc3RyaW5nIGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIC8vIHN1cHBvcnQgcmVxL3Jlcy1saWtlIG9iamVjdHMgYXMgYXJndW1lbnRcbiAgaWYgKHR5cGVvZiBzdHJpbmcgPT09ICdvYmplY3QnKSB7XG4gICAgc3RyaW5nID0gZ2V0Y29udGVudHR5cGUoc3RyaW5nKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgc3RyaW5nIGlzIHJlcXVpcmVkIHRvIGJlIGEgc3RyaW5nJylcbiAgfVxuXG4gIHZhciBpbmRleCA9IHN0cmluZy5pbmRleE9mKCc7JylcbiAgdmFyIHR5cGUgPSBpbmRleCAhPT0gLTFcbiAgICA/IHN0cmluZy5zdWJzdHIoMCwgaW5kZXgpXG4gICAgOiBzdHJpbmdcblxuICB2YXIga2V5XG4gIHZhciBtYXRjaFxuICB2YXIgb2JqID0gc3BsaXRUeXBlKHR5cGUpXG4gIHZhciBwYXJhbXMgPSB7fVxuICB2YXIgdmFsdWVcblxuICBwYXJhbVJlZ0V4cC5sYXN0SW5kZXggPSBpbmRleFxuXG4gIHdoaWxlIChtYXRjaCA9IHBhcmFtUmVnRXhwLmV4ZWMoc3RyaW5nKSkge1xuICAgIGlmIChtYXRjaC5pbmRleCAhPT0gaW5kZXgpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgcGFyYW1ldGVyIGZvcm1hdCcpXG4gICAgfVxuXG4gICAgaW5kZXggKz0gbWF0Y2hbMF0ubGVuZ3RoXG4gICAga2V5ID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKVxuICAgIHZhbHVlID0gbWF0Y2hbMl1cblxuICAgIGlmICh2YWx1ZVswXSA9PT0gJ1wiJykge1xuICAgICAgLy8gcmVtb3ZlIHF1b3RlcyBhbmQgZXNjYXBlc1xuICAgICAgdmFsdWUgPSB2YWx1ZVxuICAgICAgICAuc3Vic3RyKDEsIHZhbHVlLmxlbmd0aCAtIDIpXG4gICAgICAgIC5yZXBsYWNlKHFlc2NSZWdFeHAsICckMScpXG4gICAgfVxuXG4gICAgcGFyYW1zW2tleV0gPSB2YWx1ZVxuICB9XG5cbiAgaWYgKGluZGV4ICE9PSAtMSAmJiBpbmRleCAhPT0gc3RyaW5nLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgcGFyYW1ldGVyIGZvcm1hdCcpXG4gIH1cblxuICBvYmoucGFyYW1ldGVycyA9IHBhcmFtc1xuXG4gIHJldHVybiBvYmpcbn1cblxuLyoqXG4gKiBHZXQgY29udGVudC10eXBlIGZyb20gcmVxL3JlcyBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fVxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZ2V0Y29udGVudHR5cGUob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqLmdldEhlYWRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIHJlcy1saWtlXG4gICAgcmV0dXJuIG9iai5nZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScpXG4gIH1cblxuICBpZiAodHlwZW9mIG9iai5oZWFkZXJzID09PSAnb2JqZWN0Jykge1xuICAgIC8vIHJlcS1saWtlXG4gICAgcmV0dXJuIG9iai5oZWFkZXJzICYmIG9iai5oZWFkZXJzWydjb250ZW50LXR5cGUnXVxuICB9XG59XG5cbi8qKlxuICogUXVvdGUgYSBzdHJpbmcgaWYgbmVjZXNzYXJ5LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWxcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHFzdHJpbmcodmFsKSB7XG4gIHZhciBzdHIgPSBTdHJpbmcodmFsKVxuXG4gIC8vIG5vIG5lZWQgdG8gcXVvdGUgdG9rZW5zXG4gIGlmICh0b2tlblJlZ0V4cC50ZXN0KHN0cikpIHtcbiAgICByZXR1cm4gc3RyXG4gIH1cblxuICBpZiAoc3RyLmxlbmd0aCA+IDAgJiYgIXRleHRSZWdFeHAudGVzdChzdHIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBwYXJhbWV0ZXIgdmFsdWUnKVxuICB9XG5cbiAgcmV0dXJuICdcIicgKyBzdHIucmVwbGFjZShxdW90ZVJlZ0V4cCwgJ1xcXFwkMScpICsgJ1wiJ1xufVxuXG4vKipcbiAqIFNpbXBseSBcInR5cGUvc3VidHlwZStzaWZmeFwiIGludG8gcGFydHMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc3BsaXRUeXBlKHN0cmluZykge1xuICB2YXIgbWF0Y2ggPSB0eXBlUmVnRXhwLmV4ZWMoc3RyaW5nLnRvTG93ZXJDYXNlKCkpXG5cbiAgaWYgKCFtYXRjaCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgbWVkaWEgdHlwZScpXG4gIH1cblxuICB2YXIgdHlwZSA9IG1hdGNoWzFdXG4gIHZhciBzdWJ0eXBlID0gbWF0Y2hbMl1cbiAgdmFyIHN1ZmZpeFxuXG4gIC8vIHN1ZmZpeCBhZnRlciBsYXN0ICtcbiAgdmFyIGluZGV4ID0gc3VidHlwZS5sYXN0SW5kZXhPZignKycpXG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICBzdWZmaXggPSBzdWJ0eXBlLnN1YnN0cihpbmRleCArIDEpXG4gICAgc3VidHlwZSA9IHN1YnR5cGUuc3Vic3RyKDAsIGluZGV4KVxuICB9XG5cbiAgdmFyIG9iaiA9IHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHN1YnR5cGU6IHN1YnR5cGUsXG4gICAgc3VmZml4OiBzdWZmaXhcbiAgfVxuXG4gIHJldHVybiBvYmpcbn1cbiIsIi8qIVxuICogZGVzdHJveVxuICogQ29weXJpZ2h0KGMpIDIwMTQgSm9uYXRoYW4gT25nXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgUmVhZFN0cmVhbSA9IHJlcXVpcmUoJ2ZzJykuUmVhZFN0cmVhbVxudmFyIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBkZXN0cm95XG5cbi8qKlxuICogRGVzdHJveSBhIHN0cmVhbS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gc3RyZWFtXG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGVzdHJveShzdHJlYW0pIHtcbiAgaWYgKHN0cmVhbSBpbnN0YW5jZW9mIFJlYWRTdHJlYW0pIHtcbiAgICByZXR1cm4gZGVzdHJveVJlYWRTdHJlYW0oc3RyZWFtKVxuICB9XG5cbiAgaWYgKCEoc3RyZWFtIGluc3RhbmNlb2YgU3RyZWFtKSkge1xuICAgIHJldHVybiBzdHJlYW1cbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3RyZWFtLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzdHJlYW0uZGVzdHJveSgpXG4gIH1cblxuICByZXR1cm4gc3RyZWFtXG59XG5cbi8qKlxuICogRGVzdHJveSBhIFJlYWRTdHJlYW0uXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHN0cmVhbVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBkZXN0cm95UmVhZFN0cmVhbShzdHJlYW0pIHtcbiAgc3RyZWFtLmRlc3Ryb3koKVxuXG4gIGlmICh0eXBlb2Ygc3RyZWFtLmNsb3NlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gbm9kZS5qcyBjb3JlIGJ1ZyB3b3JrLWFyb3VuZFxuICAgIHN0cmVhbS5vbignb3BlbicsIG9uT3BlbkNsb3NlKVxuICB9XG5cbiAgcmV0dXJuIHN0cmVhbVxufVxuXG4vKipcbiAqIE9uIG9wZW4gaGFuZGxlciB0byBjbG9zZSBzdHJlYW0uXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG9uT3BlbkNsb3NlKCkge1xuICBpZiAodHlwZW9mIHRoaXMuZmQgPT09ICdudW1iZXInKSB7XG4gICAgLy8gYWN0dWFsbHkgY2xvc2UgZG93biB0aGUgZmRcbiAgICB0aGlzLmNsb3NlKClcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYXNzZXJ0XCIpOyIsIi8qIVxuICogdmFyeVxuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNyBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB2YXJ5XG5tb2R1bGUuZXhwb3J0cy5hcHBlbmQgPSBhcHBlbmRcblxuLyoqXG4gKiBSZWdFeHAgdG8gbWF0Y2ggZmllbGQtbmFtZSBpbiBSRkMgNzIzMCBzZWMgMy4yXG4gKlxuICogZmllbGQtbmFtZSAgICA9IHRva2VuXG4gKiB0b2tlbiAgICAgICAgID0gMSp0Y2hhclxuICogdGNoYXIgICAgICAgICA9IFwiIVwiIC8gXCIjXCIgLyBcIiRcIiAvIFwiJVwiIC8gXCImXCIgLyBcIidcIiAvIFwiKlwiXG4gKiAgICAgICAgICAgICAgIC8gXCIrXCIgLyBcIi1cIiAvIFwiLlwiIC8gXCJeXCIgLyBcIl9cIiAvIFwiYFwiIC8gXCJ8XCIgLyBcIn5cIlxuICogICAgICAgICAgICAgICAvIERJR0lUIC8gQUxQSEFcbiAqICAgICAgICAgICAgICAgOyBhbnkgVkNIQVIsIGV4Y2VwdCBkZWxpbWl0ZXJzXG4gKi9cblxudmFyIEZJRUxEX05BTUVfUkVHRVhQID0gL15bISMkJSYnKitcXC0uXl9gfH4wLTlBLVphLXpdKyQvXG5cbi8qKlxuICogQXBwZW5kIGEgZmllbGQgdG8gYSB2YXJ5IGhlYWRlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVyXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gZmllbGRcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBhcHBlbmQgKGhlYWRlciwgZmllbGQpIHtcbiAgaWYgKHR5cGVvZiBoZWFkZXIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaGVhZGVyIGFyZ3VtZW50IGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIGlmICghZmllbGQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdmaWVsZCBhcmd1bWVudCBpcyByZXF1aXJlZCcpXG4gIH1cblxuICAvLyBnZXQgZmllbGRzIGFycmF5XG4gIHZhciBmaWVsZHMgPSAhQXJyYXkuaXNBcnJheShmaWVsZClcbiAgICA/IHBhcnNlKFN0cmluZyhmaWVsZCkpXG4gICAgOiBmaWVsZFxuXG4gIC8vIGFzc2VydCBvbiBpbnZhbGlkIGZpZWxkIG5hbWVzXG4gIGZvciAodmFyIGogPSAwOyBqIDwgZmllbGRzLmxlbmd0aDsgaisrKSB7XG4gICAgaWYgKCFGSUVMRF9OQU1FX1JFR0VYUC50ZXN0KGZpZWxkc1tqXSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ZpZWxkIGFyZ3VtZW50IGNvbnRhaW5zIGFuIGludmFsaWQgaGVhZGVyIG5hbWUnKVxuICAgIH1cbiAgfVxuXG4gIC8vIGV4aXN0aW5nLCB1bnNwZWNpZmllZCB2YXJ5XG4gIGlmIChoZWFkZXIgPT09ICcqJykge1xuICAgIHJldHVybiBoZWFkZXJcbiAgfVxuXG4gIC8vIGVudW1lcmF0ZSBjdXJyZW50IHZhbHVlc1xuICB2YXIgdmFsID0gaGVhZGVyXG4gIHZhciB2YWxzID0gcGFyc2UoaGVhZGVyLnRvTG93ZXJDYXNlKCkpXG5cbiAgLy8gdW5zcGVjaWZpZWQgdmFyeVxuICBpZiAoZmllbGRzLmluZGV4T2YoJyonKSAhPT0gLTEgfHwgdmFscy5pbmRleE9mKCcqJykgIT09IC0xKSB7XG4gICAgcmV0dXJuICcqJ1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZmxkID0gZmllbGRzW2ldLnRvTG93ZXJDYXNlKClcblxuICAgIC8vIGFwcGVuZCB2YWx1ZSAoY2FzZS1wcmVzZXJ2aW5nKVxuICAgIGlmICh2YWxzLmluZGV4T2YoZmxkKSA9PT0gLTEpIHtcbiAgICAgIHZhbHMucHVzaChmbGQpXG4gICAgICB2YWwgPSB2YWxcbiAgICAgICAgPyB2YWwgKyAnLCAnICsgZmllbGRzW2ldXG4gICAgICAgIDogZmllbGRzW2ldXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG4vKipcbiAqIFBhcnNlIGEgdmFyeSBoZWFkZXIgaW50byBhbiBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVyXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2UgKGhlYWRlcikge1xuICB2YXIgZW5kID0gMFxuICB2YXIgbGlzdCA9IFtdXG4gIHZhciBzdGFydCA9IDBcblxuICAvLyBnYXRoZXIgdG9rZW5zXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBoZWFkZXIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBzd2l0Y2ggKGhlYWRlci5jaGFyQ29kZUF0KGkpKSB7XG4gICAgICBjYXNlIDB4MjA6IC8qICAgKi9cbiAgICAgICAgaWYgKHN0YXJ0ID09PSBlbmQpIHtcbiAgICAgICAgICBzdGFydCA9IGVuZCA9IGkgKyAxXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgMHgyYzogLyogLCAqL1xuICAgICAgICBsaXN0LnB1c2goaGVhZGVyLnN1YnN0cmluZyhzdGFydCwgZW5kKSlcbiAgICAgICAgc3RhcnQgPSBlbmQgPSBpICsgMVxuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZW5kID0gaSArIDFcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICAvLyBmaW5hbCB0b2tlblxuICBsaXN0LnB1c2goaGVhZGVyLnN1YnN0cmluZyhzdGFydCwgZW5kKSlcblxuICByZXR1cm4gbGlzdFxufVxuXG4vKipcbiAqIE1hcmsgdGhhdCBhIHJlcXVlc3QgaXMgdmFyaWVkIG9uIGEgaGVhZGVyIGZpZWxkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZXNcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBmaWVsZFxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHZhcnkgKHJlcywgZmllbGQpIHtcbiAgaWYgKCFyZXMgfHwgIXJlcy5nZXRIZWFkZXIgfHwgIXJlcy5zZXRIZWFkZXIpIHtcbiAgICAvLyBxdWFjayBxdWFja1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlcyBhcmd1bWVudCBpcyByZXF1aXJlZCcpXG4gIH1cblxuICAvLyBnZXQgZXhpc3RpbmcgaGVhZGVyXG4gIHZhciB2YWwgPSByZXMuZ2V0SGVhZGVyKCdWYXJ5JykgfHwgJydcbiAgdmFyIGhlYWRlciA9IEFycmF5LmlzQXJyYXkodmFsKVxuICAgID8gdmFsLmpvaW4oJywgJylcbiAgICA6IFN0cmluZyh2YWwpXG5cbiAgLy8gc2V0IG5ldyBoZWFkZXJcbiAgaWYgKCh2YWwgPSBhcHBlbmQoaGVhZGVyLCBmaWVsZCkpKSB7XG4gICAgcmVzLnNldEhlYWRlcignVmFyeScsIHZhbClcbiAgfVxufVxuIiwiLyohXG4gKiBlbmNvZGV1cmxcbiAqIENvcHlyaWdodChjKSAyMDE2IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVuY29kZVVybFxuXG4vKipcbiAqIFJlZ0V4cCB0byBtYXRjaCBub24tVVJMIGNvZGUgcG9pbnRzLCAqYWZ0ZXIqIGVuY29kaW5nIChpLmUuIG5vdCBpbmNsdWRpbmcgXCIlXCIpXG4gKiBhbmQgaW5jbHVkaW5nIGludmFsaWQgZXNjYXBlIHNlcXVlbmNlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIEVOQ09ERV9DSEFSU19SRUdFWFAgPSAvKD86W15cXHgyMVxceDI1XFx4MjYtXFx4M0JcXHgzRFxceDNGLVxceDVCXFx4NURcXHg1RlxceDYxLVxceDdBXFx4N0VdfCUoPzpbXjAtOUEtRmEtZl18WzAtOUEtRmEtZl1bXjAtOUEtRmEtZl18JCkpKy9nXG5cbi8qKlxuICogUmVnRXhwIHRvIG1hdGNoIHVubWF0Y2hlZCBzdXJyb2dhdGUgcGFpci5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIFVOTUFUQ0hFRF9TVVJST0dBVEVfUEFJUl9SRUdFWFAgPSAvKF58W15cXHVEODAwLVxcdURCRkZdKVtcXHVEQzAwLVxcdURGRkZdfFtcXHVEODAwLVxcdURCRkZdKFteXFx1REMwMC1cXHVERkZGXXwkKS9nXG5cbi8qKlxuICogU3RyaW5nIHRvIHJlcGxhY2UgdW5tYXRjaGVkIHN1cnJvZ2F0ZSBwYWlyIHdpdGguXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBVTk1BVENIRURfU1VSUk9HQVRFX1BBSVJfUkVQTEFDRSA9ICckMVxcdUZGRkQkMidcblxuLyoqXG4gKiBFbmNvZGUgYSBVUkwgdG8gYSBwZXJjZW50LWVuY29kZWQgZm9ybSwgZXhjbHVkaW5nIGFscmVhZHktZW5jb2RlZCBzZXF1ZW5jZXMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIHRha2UgYW4gYWxyZWFkeS1lbmNvZGVkIFVSTCBhbmQgZW5jb2RlIGFsbCB0aGUgbm9uLVVSTFxuICogY29kZSBwb2ludHMuIFRoaXMgZnVuY3Rpb24gd2lsbCBub3QgZW5jb2RlIHRoZSBcIiVcIiBjaGFyYWN0ZXIgdW5sZXNzIGl0IGlzXG4gKiBub3QgcGFydCBvZiBhIHZhbGlkIHNlcXVlbmNlIChgJTIwYCB3aWxsIGJlIGxlZnQgYXMtaXMsIGJ1dCBgJWZvb2Agd2lsbFxuICogYmUgZW5jb2RlZCBhcyBgJTI1Zm9vYCkuXG4gKlxuICogVGhpcyBlbmNvZGUgaXMgbWVhbnQgdG8gYmUgXCJzYWZlXCIgYW5kIGRvZXMgbm90IHRocm93IGVycm9ycy4gSXQgd2lsbCB0cnkgYXNcbiAqIGhhcmQgYXMgaXQgY2FuIHRvIHByb3Blcmx5IGVuY29kZSB0aGUgZ2l2ZW4gVVJMLCBpbmNsdWRpbmcgcmVwbGFjaW5nIGFueSByYXcsXG4gKiB1bnBhaXJlZCBzdXJyb2dhdGUgcGFpcnMgd2l0aCB0aGUgVW5pY29kZSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgcHJpb3IgdG9cbiAqIGVuY29kaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVVcmwgKHVybCkge1xuICByZXR1cm4gU3RyaW5nKHVybClcbiAgICAucmVwbGFjZShVTk1BVENIRURfU1VSUk9HQVRFX1BBSVJfUkVHRVhQLCBVTk1BVENIRURfU1VSUk9HQVRFX1BBSVJfUkVQTEFDRSlcbiAgICAucmVwbGFjZShFTkNPREVfQ0hBUlNfUkVHRVhQLCBlbmNvZGVVUkkpXG59XG4iLCIndXNlIHN0cmljdCdcblxuLyoqXG4gKiBFeHBvc2UgY29tcG9zaXRvci5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBvc2VcblxuLyoqXG4gKiBDb21wb3NlIGBtaWRkbGV3YXJlYCByZXR1cm5pbmdcbiAqIGEgZnVsbHkgdmFsaWQgbWlkZGxld2FyZSBjb21wcmlzZWRcbiAqIG9mIGFsbCB0aG9zZSB3aGljaCBhcmUgcGFzc2VkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IG1pZGRsZXdhcmVcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjb21wb3NlIChtaWRkbGV3YXJlKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShtaWRkbGV3YXJlKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignTWlkZGxld2FyZSBzdGFjayBtdXN0IGJlIGFuIGFycmF5IScpXG4gIGZvciAoY29uc3QgZm4gb2YgbWlkZGxld2FyZSkge1xuICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ01pZGRsZXdhcmUgbXVzdCBiZSBjb21wb3NlZCBvZiBmdW5jdGlvbnMhJylcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICByZXR1cm4gZnVuY3Rpb24gKGNvbnRleHQsIG5leHQpIHtcbiAgICAvLyBsYXN0IGNhbGxlZCBtaWRkbGV3YXJlICNcbiAgICBsZXQgaW5kZXggPSAtMVxuICAgIHJldHVybiBkaXNwYXRjaCgwKVxuICAgIGZ1bmN0aW9uIGRpc3BhdGNoIChpKSB7XG4gICAgICBpZiAoaSA8PSBpbmRleCkgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignbmV4dCgpIGNhbGxlZCBtdWx0aXBsZSB0aW1lcycpKVxuICAgICAgaW5kZXggPSBpXG4gICAgICBsZXQgZm4gPSBtaWRkbGV3YXJlW2ldXG4gICAgICBpZiAoaSA9PT0gbWlkZGxld2FyZS5sZW5ndGgpIGZuID0gbmV4dFxuICAgICAgaWYgKCFmbikgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZuKGNvbnRleHQsIGRpc3BhdGNoLmJpbmQobnVsbCwgaSArIDEpKSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycilcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIlxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbmNvbnN0IGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnaHR0cC1lcnJvcnMnKTtcbmNvbnN0IGh0dHBBc3NlcnQgPSByZXF1aXJlKCdodHRwLWFzc2VydCcpO1xuY29uc3QgZGVsZWdhdGUgPSByZXF1aXJlKCdkZWxlZ2F0ZXMnKTtcbmNvbnN0IHN0YXR1c2VzID0gcmVxdWlyZSgnc3RhdHVzZXMnKTtcbmNvbnN0IENvb2tpZXMgPSByZXF1aXJlKCdjb29raWVzJyk7XG5cbmNvbnN0IENPT0tJRVMgPSBTeW1ib2woJ2NvbnRleHQjY29va2llcycpO1xuXG4vKipcbiAqIENvbnRleHQgcHJvdG90eXBlLlxuICovXG5cbmNvbnN0IHByb3RvID0gbW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLyoqXG4gICAqIHV0aWwuaW5zcGVjdCgpIGltcGxlbWVudGF0aW9uLCB3aGljaFxuICAgKiBqdXN0IHJldHVybnMgdGhlIEpTT04gb3V0cHV0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGluc3BlY3QoKSB7XG4gICAgaWYgKHRoaXMgPT09IHByb3RvKSByZXR1cm4gdGhpcztcbiAgICByZXR1cm4gdGhpcy50b0pTT04oKTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJuIEpTT04gcmVwcmVzZW50YXRpb24uXG4gICAqXG4gICAqIEhlcmUgd2UgZXhwbGljaXRseSBpbnZva2UgLnRvSlNPTigpIG9uIGVhY2hcbiAgICogb2JqZWN0LCBhcyBpdGVyYXRpb24gd2lsbCBvdGhlcndpc2UgZmFpbCBkdWVcbiAgICogdG8gdGhlIGdldHRlcnMgYW5kIGNhdXNlIHV0aWxpdGllcyBzdWNoIGFzXG4gICAqIGNsb25lKCkgdG8gZmFpbC5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlcXVlc3Q6IHRoaXMucmVxdWVzdC50b0pTT04oKSxcbiAgICAgIHJlc3BvbnNlOiB0aGlzLnJlc3BvbnNlLnRvSlNPTigpLFxuICAgICAgYXBwOiB0aGlzLmFwcC50b0pTT04oKSxcbiAgICAgIG9yaWdpbmFsVXJsOiB0aGlzLm9yaWdpbmFsVXJsLFxuICAgICAgcmVxOiAnPG9yaWdpbmFsIG5vZGUgcmVxPicsXG4gICAgICByZXM6ICc8b3JpZ2luYWwgbm9kZSByZXM+JyxcbiAgICAgIHNvY2tldDogJzxvcmlnaW5hbCBub2RlIHNvY2tldD4nXG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogU2ltaWxhciB0byAudGhyb3coKSwgYWRkcyBhc3NlcnRpb24uXG4gICAqXG4gICAqICAgIHRoaXMuYXNzZXJ0KHRoaXMudXNlciwgNDAxLCAnUGxlYXNlIGxvZ2luIScpO1xuICAgKlxuICAgKiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qc2h0dHAvaHR0cC1hc3NlcnRcbiAgICpcbiAgICogQHBhcmFtIHtNaXhlZH0gdGVzdFxuICAgKiBAcGFyYW0ge051bWJlcn0gc3RhdHVzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydDogaHR0cEFzc2VydCxcblxuICAvKipcbiAgICogVGhyb3cgYW4gZXJyb3Igd2l0aCBgc3RhdHVzYCAoZGVmYXVsdCA1MDApIGFuZFxuICAgKiBgbXNnYC4gTm90ZSB0aGF0IHRoZXNlIGFyZSB1c2VyLWxldmVsXG4gICAqIGVycm9ycywgYW5kIHRoZSBtZXNzYWdlIG1heSBiZSBleHBvc2VkIHRvIHRoZSBjbGllbnQuXG4gICAqXG4gICAqICAgIHRoaXMudGhyb3coNDAzKVxuICAgKiAgICB0aGlzLnRocm93KDQwMCwgJ25hbWUgcmVxdWlyZWQnKVxuICAgKiAgICB0aGlzLnRocm93KCdzb21ldGhpbmcgZXhwbG9kZWQnKVxuICAgKiAgICB0aGlzLnRocm93KG5ldyBFcnJvcignaW52YWxpZCcpKVxuICAgKiAgICB0aGlzLnRocm93KDQwMCwgbmV3IEVycm9yKCdpbnZhbGlkJykpXG4gICAqXG4gICAqIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2pzaHR0cC9odHRwLWVycm9yc1xuICAgKlxuICAgKiBOb3RlOiBgc3RhdHVzYCBzaG91bGQgb25seSBiZSBwYXNzZWQgYXMgdGhlIGZpcnN0IHBhcmFtZXRlci5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfEVycm9yfSBlcnIsIG1zZyBvciBzdGF0dXNcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfEVycm9yfSBbZXJyLCBtc2cgb3Igc3RhdHVzXVxuICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BzXVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICB0aHJvdyguLi5hcmdzKSB7XG4gICAgdGhyb3cgY3JlYXRlRXJyb3IoLi4uYXJncyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlZmF1bHQgZXJyb3IgaGFuZGxpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7RXJyb3J9IGVyclxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG5cbiAgb25lcnJvcihlcnIpIHtcbiAgICAvLyBkb24ndCBkbyBhbnl0aGluZyBpZiB0aGVyZSBpcyBubyBlcnJvci5cbiAgICAvLyB0aGlzIGFsbG93cyB5b3UgdG8gcGFzcyBgdGhpcy5vbmVycm9yYFxuICAgIC8vIHRvIG5vZGUtc3R5bGUgY2FsbGJhY2tzLlxuICAgIGlmIChudWxsID09IGVycikgcmV0dXJuO1xuXG4gICAgaWYgKCEoZXJyIGluc3RhbmNlb2YgRXJyb3IpKSBlcnIgPSBuZXcgRXJyb3IodXRpbC5mb3JtYXQoJ25vbi1lcnJvciB0aHJvd246ICVqJywgZXJyKSk7XG5cbiAgICBsZXQgaGVhZGVyU2VudCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLmhlYWRlclNlbnQgfHwgIXRoaXMud3JpdGFibGUpIHtcbiAgICAgIGhlYWRlclNlbnQgPSBlcnIuaGVhZGVyU2VudCA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gZGVsZWdhdGVcbiAgICB0aGlzLmFwcC5lbWl0KCdlcnJvcicsIGVyciwgdGhpcyk7XG5cbiAgICAvLyBub3RoaW5nIHdlIGNhbiBkbyBoZXJlIG90aGVyXG4gICAgLy8gdGhhbiBkZWxlZ2F0ZSB0byB0aGUgYXBwLWxldmVsXG4gICAgLy8gaGFuZGxlciBhbmQgbG9nLlxuICAgIGlmIChoZWFkZXJTZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyByZXMgfSA9IHRoaXM7XG5cbiAgICAvLyBmaXJzdCB1bnNldCBhbGwgaGVhZGVyc1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHR5cGVvZiByZXMuZ2V0SGVhZGVyTmFtZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcy5nZXRIZWFkZXJOYW1lcygpLmZvckVhY2gobmFtZSA9PiByZXMucmVtb3ZlSGVhZGVyKG5hbWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzLl9oZWFkZXJzID0ge307IC8vIE5vZGUgPCA3LjdcbiAgICB9XG5cbiAgICAvLyB0aGVuIHNldCB0aG9zZSBzcGVjaWZpZWRcbiAgICB0aGlzLnNldChlcnIuaGVhZGVycyk7XG5cbiAgICAvLyBmb3JjZSB0ZXh0L3BsYWluXG4gICAgdGhpcy50eXBlID0gJ3RleHQnO1xuXG4gICAgLy8gRU5PRU5UIHN1cHBvcnRcbiAgICBpZiAoJ0VOT0VOVCcgPT0gZXJyLmNvZGUpIGVyci5zdGF0dXMgPSA0MDQ7XG5cbiAgICAvLyBkZWZhdWx0IHRvIDUwMFxuICAgIGlmICgnbnVtYmVyJyAhPSB0eXBlb2YgZXJyLnN0YXR1cyB8fCAhc3RhdHVzZXNbZXJyLnN0YXR1c10pIGVyci5zdGF0dXMgPSA1MDA7XG5cbiAgICAvLyByZXNwb25kXG4gICAgY29uc3QgY29kZSA9IHN0YXR1c2VzW2Vyci5zdGF0dXNdO1xuICAgIGNvbnN0IG1zZyA9IGVyci5leHBvc2UgPyBlcnIubWVzc2FnZSA6IGNvZGU7XG4gICAgdGhpcy5zdGF0dXMgPSBlcnIuc3RhdHVzO1xuICAgIHRoaXMubGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgobXNnKTtcbiAgICByZXMuZW5kKG1zZyk7XG4gIH0sXG5cbiAgZ2V0IGNvb2tpZXMoKSB7XG4gICAgaWYgKCF0aGlzW0NPT0tJRVNdKSB7XG4gICAgICB0aGlzW0NPT0tJRVNdID0gbmV3IENvb2tpZXModGhpcy5yZXEsIHRoaXMucmVzLCB7XG4gICAgICAgIGtleXM6IHRoaXMuYXBwLmtleXMsXG4gICAgICAgIHNlY3VyZTogdGhpcy5yZXF1ZXN0LnNlY3VyZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzW0NPT0tJRVNdO1xuICB9LFxuXG4gIHNldCBjb29raWVzKF9jb29raWVzKSB7XG4gICAgdGhpc1tDT09LSUVTXSA9IF9jb29raWVzO1xuICB9XG59O1xuXG4vKipcbiAqIEN1c3RvbSBpbnNwZWN0aW9uIGltcGxlbWVudGF0aW9uIGZvciBuZXdlciBOb2RlLmpzIHZlcnNpb25zLlxuICpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbmlmICh1dGlsLmluc3BlY3QuY3VzdG9tKSB7XG4gIG1vZHVsZS5leHBvcnRzW3V0aWwuaW5zcGVjdC5jdXN0b21dID0gbW9kdWxlLmV4cG9ydHMuaW5zcGVjdDtcbn1cblxuLyoqXG4gKiBSZXNwb25zZSBkZWxlZ2F0aW9uLlxuICovXG5cbmRlbGVnYXRlKHByb3RvLCAncmVzcG9uc2UnKVxuICAubWV0aG9kKCdhdHRhY2htZW50JylcbiAgLm1ldGhvZCgncmVkaXJlY3QnKVxuICAubWV0aG9kKCdyZW1vdmUnKVxuICAubWV0aG9kKCd2YXJ5JylcbiAgLm1ldGhvZCgnaGFzJylcbiAgLm1ldGhvZCgnc2V0JylcbiAgLm1ldGhvZCgnYXBwZW5kJylcbiAgLm1ldGhvZCgnZmx1c2hIZWFkZXJzJylcbiAgLmFjY2Vzcygnc3RhdHVzJylcbiAgLmFjY2VzcygnbWVzc2FnZScpXG4gIC5hY2Nlc3MoJ2JvZHknKVxuICAuYWNjZXNzKCdsZW5ndGgnKVxuICAuYWNjZXNzKCd0eXBlJylcbiAgLmFjY2VzcygnbGFzdE1vZGlmaWVkJylcbiAgLmFjY2VzcygnZXRhZycpXG4gIC5nZXR0ZXIoJ2hlYWRlclNlbnQnKVxuICAuZ2V0dGVyKCd3cml0YWJsZScpO1xuXG4vKipcbiAqIFJlcXVlc3QgZGVsZWdhdGlvbi5cbiAqL1xuXG5kZWxlZ2F0ZShwcm90bywgJ3JlcXVlc3QnKVxuICAubWV0aG9kKCdhY2NlcHRzTGFuZ3VhZ2VzJylcbiAgLm1ldGhvZCgnYWNjZXB0c0VuY29kaW5ncycpXG4gIC5tZXRob2QoJ2FjY2VwdHNDaGFyc2V0cycpXG4gIC5tZXRob2QoJ2FjY2VwdHMnKVxuICAubWV0aG9kKCdnZXQnKVxuICAubWV0aG9kKCdpcycpXG4gIC5hY2Nlc3MoJ3F1ZXJ5c3RyaW5nJylcbiAgLmFjY2VzcygnaWRlbXBvdGVudCcpXG4gIC5hY2Nlc3MoJ3NvY2tldCcpXG4gIC5hY2Nlc3MoJ3NlYXJjaCcpXG4gIC5hY2Nlc3MoJ21ldGhvZCcpXG4gIC5hY2Nlc3MoJ3F1ZXJ5JylcbiAgLmFjY2VzcygncGF0aCcpXG4gIC5hY2Nlc3MoJ3VybCcpXG4gIC5hY2Nlc3MoJ2FjY2VwdCcpXG4gIC5nZXR0ZXIoJ29yaWdpbicpXG4gIC5nZXR0ZXIoJ2hyZWYnKVxuICAuZ2V0dGVyKCdzdWJkb21haW5zJylcbiAgLmdldHRlcigncHJvdG9jb2wnKVxuICAuZ2V0dGVyKCdob3N0JylcbiAgLmdldHRlcignaG9zdG5hbWUnKVxuICAuZ2V0dGVyKCdVUkwnKVxuICAuZ2V0dGVyKCdoZWFkZXInKVxuICAuZ2V0dGVyKCdoZWFkZXJzJylcbiAgLmdldHRlcignc2VjdXJlJylcbiAgLmdldHRlcignc3RhbGUnKVxuICAuZ2V0dGVyKCdmcmVzaCcpXG4gIC5nZXR0ZXIoJ2lwcycpXG4gIC5nZXR0ZXIoJ2lwJyk7XG4iLCIvKiFcbiAqIGRlcGRcbiAqIENvcHlyaWdodChjKSAyMDE0IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNhbGxTaXRlVG9TdHJpbmdcblxuLyoqXG4gKiBGb3JtYXQgYSBDYWxsU2l0ZSBmaWxlIGxvY2F0aW9uIHRvIGEgc3RyaW5nLlxuICovXG5cbmZ1bmN0aW9uIGNhbGxTaXRlRmlsZUxvY2F0aW9uIChjYWxsU2l0ZSkge1xuICB2YXIgZmlsZU5hbWVcbiAgdmFyIGZpbGVMb2NhdGlvbiA9ICcnXG5cbiAgaWYgKGNhbGxTaXRlLmlzTmF0aXZlKCkpIHtcbiAgICBmaWxlTG9jYXRpb24gPSAnbmF0aXZlJ1xuICB9IGVsc2UgaWYgKGNhbGxTaXRlLmlzRXZhbCgpKSB7XG4gICAgZmlsZU5hbWUgPSBjYWxsU2l0ZS5nZXRTY3JpcHROYW1lT3JTb3VyY2VVUkwoKVxuICAgIGlmICghZmlsZU5hbWUpIHtcbiAgICAgIGZpbGVMb2NhdGlvbiA9IGNhbGxTaXRlLmdldEV2YWxPcmlnaW4oKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmaWxlTmFtZSA9IGNhbGxTaXRlLmdldEZpbGVOYW1lKClcbiAgfVxuXG4gIGlmIChmaWxlTmFtZSkge1xuICAgIGZpbGVMb2NhdGlvbiArPSBmaWxlTmFtZVxuXG4gICAgdmFyIGxpbmVOdW1iZXIgPSBjYWxsU2l0ZS5nZXRMaW5lTnVtYmVyKClcbiAgICBpZiAobGluZU51bWJlciAhPSBudWxsKSB7XG4gICAgICBmaWxlTG9jYXRpb24gKz0gJzonICsgbGluZU51bWJlclxuXG4gICAgICB2YXIgY29sdW1uTnVtYmVyID0gY2FsbFNpdGUuZ2V0Q29sdW1uTnVtYmVyKClcbiAgICAgIGlmIChjb2x1bW5OdW1iZXIpIHtcbiAgICAgICAgZmlsZUxvY2F0aW9uICs9ICc6JyArIGNvbHVtbk51bWJlclxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmaWxlTG9jYXRpb24gfHwgJ3Vua25vd24gc291cmNlJ1xufVxuXG4vKipcbiAqIEZvcm1hdCBhIENhbGxTaXRlIHRvIGEgc3RyaW5nLlxuICovXG5cbmZ1bmN0aW9uIGNhbGxTaXRlVG9TdHJpbmcgKGNhbGxTaXRlKSB7XG4gIHZhciBhZGRTdWZmaXggPSB0cnVlXG4gIHZhciBmaWxlTG9jYXRpb24gPSBjYWxsU2l0ZUZpbGVMb2NhdGlvbihjYWxsU2l0ZSlcbiAgdmFyIGZ1bmN0aW9uTmFtZSA9IGNhbGxTaXRlLmdldEZ1bmN0aW9uTmFtZSgpXG4gIHZhciBpc0NvbnN0cnVjdG9yID0gY2FsbFNpdGUuaXNDb25zdHJ1Y3RvcigpXG4gIHZhciBpc01ldGhvZENhbGwgPSAhKGNhbGxTaXRlLmlzVG9wbGV2ZWwoKSB8fCBpc0NvbnN0cnVjdG9yKVxuICB2YXIgbGluZSA9ICcnXG5cbiAgaWYgKGlzTWV0aG9kQ2FsbCkge1xuICAgIHZhciBtZXRob2ROYW1lID0gY2FsbFNpdGUuZ2V0TWV0aG9kTmFtZSgpXG4gICAgdmFyIHR5cGVOYW1lID0gZ2V0Q29uc3RydWN0b3JOYW1lKGNhbGxTaXRlKVxuXG4gICAgaWYgKGZ1bmN0aW9uTmFtZSkge1xuICAgICAgaWYgKHR5cGVOYW1lICYmIGZ1bmN0aW9uTmFtZS5pbmRleE9mKHR5cGVOYW1lKSAhPT0gMCkge1xuICAgICAgICBsaW5lICs9IHR5cGVOYW1lICsgJy4nXG4gICAgICB9XG5cbiAgICAgIGxpbmUgKz0gZnVuY3Rpb25OYW1lXG5cbiAgICAgIGlmIChtZXRob2ROYW1lICYmIGZ1bmN0aW9uTmFtZS5sYXN0SW5kZXhPZignLicgKyBtZXRob2ROYW1lKSAhPT0gZnVuY3Rpb25OYW1lLmxlbmd0aCAtIG1ldGhvZE5hbWUubGVuZ3RoIC0gMSkge1xuICAgICAgICBsaW5lICs9ICcgW2FzICcgKyBtZXRob2ROYW1lICsgJ10nXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbmUgKz0gdHlwZU5hbWUgKyAnLicgKyAobWV0aG9kTmFtZSB8fCAnPGFub255bW91cz4nKVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc0NvbnN0cnVjdG9yKSB7XG4gICAgbGluZSArPSAnbmV3ICcgKyAoZnVuY3Rpb25OYW1lIHx8ICc8YW5vbnltb3VzPicpXG4gIH0gZWxzZSBpZiAoZnVuY3Rpb25OYW1lKSB7XG4gICAgbGluZSArPSBmdW5jdGlvbk5hbWVcbiAgfSBlbHNlIHtcbiAgICBhZGRTdWZmaXggPSBmYWxzZVxuICAgIGxpbmUgKz0gZmlsZUxvY2F0aW9uXG4gIH1cblxuICBpZiAoYWRkU3VmZml4KSB7XG4gICAgbGluZSArPSAnICgnICsgZmlsZUxvY2F0aW9uICsgJyknXG4gIH1cblxuICByZXR1cm4gbGluZVxufVxuXG4vKipcbiAqIEdldCBjb25zdHJ1Y3RvciBuYW1lIG9mIHJldml2ZXIuXG4gKi9cblxuZnVuY3Rpb24gZ2V0Q29uc3RydWN0b3JOYW1lIChvYmopIHtcbiAgdmFyIHJlY2VpdmVyID0gb2JqLnJlY2VpdmVyXG4gIHJldHVybiAocmVjZWl2ZXIuY29uc3RydWN0b3IgJiYgcmVjZWl2ZXIuY29uc3RydWN0b3IubmFtZSkgfHwgbnVsbFxufVxuIiwiLyohXG4gKiBkZXBkXG4gKiBDb3B5cmlnaHQoYykgMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBldmVudExpc3RlbmVyQ291bnRcblxuLyoqXG4gKiBHZXQgdGhlIGNvdW50IG9mIGxpc3RlbmVycyBvbiBhbiBldmVudCBlbWl0dGVyIG9mIGEgc3BlY2lmaWMgdHlwZS5cbiAqL1xuXG5mdW5jdGlvbiBldmVudExpc3RlbmVyQ291bnQgKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aFxufVxuIiwiJ3VzZSBzdHJpY3QnXG4vKiBlc2xpbnQgbm8tcHJvdG86IDAgKi9cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ID8gc2V0UHJvdG9PZiA6IG1peGluUHJvcGVydGllcylcblxuZnVuY3Rpb24gc2V0UHJvdG9PZiAob2JqLCBwcm90bykge1xuICBvYmouX19wcm90b19fID0gcHJvdG9cbiAgcmV0dXJuIG9ialxufVxuXG5mdW5jdGlvbiBtaXhpblByb3BlcnRpZXMgKG9iaiwgcHJvdG8pIHtcbiAgZm9yICh2YXIgcHJvcCBpbiBwcm90bykge1xuICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICBvYmpbcHJvcF0gPSBwcm90b1twcm9wXVxuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqXG59XG4iLCJ0cnkge1xuICB2YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKHR5cGVvZiB1dGlsLmluaGVyaXRzICE9PSAnZnVuY3Rpb24nKSB0aHJvdyAnJztcbiAgbW9kdWxlLmV4cG9ydHMgPSB1dGlsLmluaGVyaXRzO1xufSBjYXRjaCAoZSkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vaW5oZXJpdHNfYnJvd3Nlci5qcycpO1xufVxuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICAgIH1cbiAgfVxufVxuIiwiLyohXG4gKiB0b2lkZW50aWZpZXJcbiAqIENvcHlyaWdodChjKSAyMDE2IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gdG9JZGVudGlmaWVyXG5cbi8qKlxuICogVHJhc2Zvcm0gdGhlIGdpdmVuIHN0cmluZyBpbnRvIGEgSmF2YVNjcmlwdCBpZGVudGlmaWVyXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybnMge3N0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiB0b0lkZW50aWZpZXIgKHN0cikge1xuICByZXR1cm4gc3RyXG4gICAgLnNwbGl0KCcgJylcbiAgICAubWFwKGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgcmV0dXJuIHRva2VuLnNsaWNlKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyB0b2tlbi5zbGljZSgxKVxuICAgIH0pXG4gICAgLmpvaW4oJycpXG4gICAgLnJlcGxhY2UoL1teIF8wLTlhLXpdL2dpLCAnJylcbn1cbiIsInZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJ2h0dHAtZXJyb3JzJylcbnZhciBlcWwgPSByZXF1aXJlKCdkZWVwLWVxdWFsJylcblxubW9kdWxlLmV4cG9ydHMgPSBhc3NlcnRcblxuZnVuY3Rpb24gYXNzZXJ0ICh2YWx1ZSwgc3RhdHVzLCBtc2csIG9wdHMpIHtcbiAgaWYgKHZhbHVlKSByZXR1cm5cbiAgdGhyb3cgY3JlYXRlRXJyb3Ioc3RhdHVzLCBtc2csIG9wdHMpXG59XG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIChhLCBiLCBzdGF0dXMsIG1zZywgb3B0cykge1xuICBhc3NlcnQoYSA9PSBiLCBzdGF0dXMsIG1zZywgb3B0cykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbn1cblxuYXNzZXJ0Lm5vdEVxdWFsID0gZnVuY3Rpb24gKGEsIGIsIHN0YXR1cywgbXNnLCBvcHRzKSB7XG4gIGFzc2VydChhICE9IGIsIHN0YXR1cywgbXNnLCBvcHRzKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxufVxuXG5hc3NlcnQub2sgPSBmdW5jdGlvbiAodmFsdWUsIHN0YXR1cywgbXNnLCBvcHRzKSB7XG4gIGFzc2VydCh2YWx1ZSwgc3RhdHVzLCBtc2csIG9wdHMpXG59XG5cbmFzc2VydC5zdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIChhLCBiLCBzdGF0dXMsIG1zZywgb3B0cykge1xuICBhc3NlcnQoYSA9PT0gYiwgc3RhdHVzLCBtc2csIG9wdHMpXG59XG5cbmFzc2VydC5ub3RTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIChhLCBiLCBzdGF0dXMsIG1zZywgb3B0cykge1xuICBhc3NlcnQoYSAhPT0gYiwgc3RhdHVzLCBtc2csIG9wdHMpXG59XG5cbmFzc2VydC5kZWVwRXF1YWwgPSBmdW5jdGlvbiAoYSwgYiwgc3RhdHVzLCBtc2csIG9wdHMpIHtcbiAgYXNzZXJ0KGVxbChhLCBiKSwgc3RhdHVzLCBtc2csIG9wdHMpXG59XG5cbmFzc2VydC5ub3REZWVwRXF1YWwgPSBmdW5jdGlvbiAoYSwgYiwgc3RhdHVzLCBtc2csIG9wdHMpIHtcbiAgYXNzZXJ0KCFlcWwoYSwgYiksIHN0YXR1cywgbXNnLCBvcHRzKVxufVxuIiwidmFyIHBTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi9saWIva2V5cy5qcycpO1xudmFyIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9saWIvaXNfYXJndW1lbnRzLmpzJyk7XG5cbnZhciBkZWVwRXF1YWwgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhY3R1YWwsIGV4cGVjdGVkLCBvcHRzKSB7XG4gIGlmICghb3B0cykgb3B0cyA9IHt9O1xuICAvLyA3LjEuIEFsbCBpZGVudGljYWwgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB9IGVsc2UgaWYgKGFjdHVhbCBpbnN0YW5jZW9mIERhdGUgJiYgZXhwZWN0ZWQgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgcmV0dXJuIGFjdHVhbC5nZXRUaW1lKCkgPT09IGV4cGVjdGVkLmdldFRpbWUoKTtcblxuICAvLyA3LjMuIE90aGVyIHBhaXJzIHRoYXQgZG8gbm90IGJvdGggcGFzcyB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcsXG4gIC8vIGVxdWl2YWxlbmNlIGlzIGRldGVybWluZWQgYnkgPT0uXG4gIH0gZWxzZSBpZiAoIWFjdHVhbCB8fCAhZXhwZWN0ZWQgfHwgdHlwZW9mIGFjdHVhbCAhPSAnb2JqZWN0JyAmJiB0eXBlb2YgZXhwZWN0ZWQgIT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gb3B0cy5zdHJpY3QgPyBhY3R1YWwgPT09IGV4cGVjdGVkIDogYWN0dWFsID09IGV4cGVjdGVkO1xuXG4gIC8vIDcuNC4gRm9yIGFsbCBvdGhlciBPYmplY3QgcGFpcnMsIGluY2x1ZGluZyBBcnJheSBvYmplY3RzLCBlcXVpdmFsZW5jZSBpc1xuICAvLyBkZXRlcm1pbmVkIGJ5IGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoYXMgdmVyaWZpZWRcbiAgLy8gd2l0aCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwpLCB0aGUgc2FtZSBzZXQgb2Yga2V5c1xuICAvLyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSwgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5XG4gIC8vIGNvcnJlc3BvbmRpbmcga2V5LCBhbmQgYW4gaWRlbnRpY2FsICdwcm90b3R5cGUnIHByb3BlcnR5LiBOb3RlOiB0aGlzXG4gIC8vIGFjY291bnRzIGZvciBib3RoIG5hbWVkIGFuZCBpbmRleGVkIHByb3BlcnRpZXMgb24gQXJyYXlzLlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBvYmpFcXVpdihhY3R1YWwsIGV4cGVjdGVkLCBvcHRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZE9yTnVsbCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKHgpIHtcbiAgaWYgKCF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgeC5sZW5ndGggIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgeC5jb3B5ICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB4LnNsaWNlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh4Lmxlbmd0aCA+IDAgJiYgdHlwZW9mIHhbMF0gIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBvYmpFcXVpdihhLCBiLCBvcHRzKSB7XG4gIHZhciBpLCBrZXk7XG4gIGlmIChpc1VuZGVmaW5lZE9yTnVsbChhKSB8fCBpc1VuZGVmaW5lZE9yTnVsbChiKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS5cbiAgaWYgKGEucHJvdG90eXBlICE9PSBiLnByb3RvdHlwZSkgcmV0dXJuIGZhbHNlO1xuICAvL35+fkkndmUgbWFuYWdlZCB0byBicmVhayBPYmplY3Qua2V5cyB0aHJvdWdoIHNjcmV3eSBhcmd1bWVudHMgcGFzc2luZy5cbiAgLy8gICBDb252ZXJ0aW5nIHRvIGFycmF5IHNvbHZlcyB0aGUgcHJvYmxlbS5cbiAgaWYgKGlzQXJndW1lbnRzKGEpKSB7XG4gICAgaWYgKCFpc0FyZ3VtZW50cyhiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhID0gcFNsaWNlLmNhbGwoYSk7XG4gICAgYiA9IHBTbGljZS5jYWxsKGIpO1xuICAgIHJldHVybiBkZWVwRXF1YWwoYSwgYiwgb3B0cyk7XG4gIH1cbiAgaWYgKGlzQnVmZmVyKGEpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhW2ldICE9PSBiW2ldKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHRyeSB7XG4gICAgdmFyIGthID0gb2JqZWN0S2V5cyhhKSxcbiAgICAgICAga2IgPSBvYmplY3RLZXlzKGIpO1xuICB9IGNhdGNoIChlKSB7Ly9oYXBwZW5zIHdoZW4gb25lIGlzIGEgc3RyaW5nIGxpdGVyYWwgYW5kIHRoZSBvdGhlciBpc24ndFxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGtleXMgaW5jb3Jwb3JhdGVzXG4gIC8vIGhhc093blByb3BlcnR5KVxuICBpZiAoa2EubGVuZ3RoICE9IGtiLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vdGhlIHNhbWUgc2V0IG9mIGtleXMgKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksXG4gIGthLnNvcnQoKTtcbiAga2Iuc29ydCgpO1xuICAvL35+fmNoZWFwIGtleSB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGthW2ldICE9IGtiW2ldKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LCBhbmRcbiAgLy9+fn5wb3NzaWJseSBleHBlbnNpdmUgZGVlcCB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAga2V5ID0ga2FbaV07XG4gICAgaWYgKCFkZWVwRXF1YWwoYVtrZXldLCBiW2tleV0sIG9wdHMpKSByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHR5cGVvZiBhID09PSB0eXBlb2YgYjtcbn1cbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gJ2Z1bmN0aW9uJ1xuICA/IE9iamVjdC5rZXlzIDogc2hpbTtcblxuZXhwb3J0cy5zaGltID0gc2hpbTtcbmZ1bmN0aW9uIHNoaW0gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSBrZXlzLnB1c2goa2V5KTtcbiAgcmV0dXJuIGtleXM7XG59XG4iLCJ2YXIgc3VwcG9ydHNBcmd1bWVudHNDbGFzcyA9IChmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50cylcbn0pKCkgPT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHN1cHBvcnRzQXJndW1lbnRzQ2xhc3MgPyBzdXBwb3J0ZWQgOiB1bnN1cHBvcnRlZDtcblxuZXhwb3J0cy5zdXBwb3J0ZWQgPSBzdXBwb3J0ZWQ7XG5mdW5jdGlvbiBzdXBwb3J0ZWQob2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcbn07XG5cbmV4cG9ydHMudW5zdXBwb3J0ZWQgPSB1bnN1cHBvcnRlZDtcbmZ1bmN0aW9uIHVuc3VwcG9ydGVkKG9iamVjdCl7XG4gIHJldHVybiBvYmplY3QgJiZcbiAgICB0eXBlb2Ygb2JqZWN0ID09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIG9iamVjdC5sZW5ndGggPT0gJ251bWJlcicgJiZcbiAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnY2FsbGVlJykgJiZcbiAgICAhT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgJ2NhbGxlZScpIHx8XG4gICAgZmFsc2U7XG59O1xuIiwiXG4vKipcbiAqIEV4cG9zZSBgRGVsZWdhdG9yYC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IERlbGVnYXRvcjtcblxuLyoqXG4gKiBJbml0aWFsaXplIGEgZGVsZWdhdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b1xuICogQHBhcmFtIHtTdHJpbmd9IHRhcmdldFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBEZWxlZ2F0b3IocHJvdG8sIHRhcmdldCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRGVsZWdhdG9yKSkgcmV0dXJuIG5ldyBEZWxlZ2F0b3IocHJvdG8sIHRhcmdldCk7XG4gIHRoaXMucHJvdG8gPSBwcm90bztcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMubWV0aG9kcyA9IFtdO1xuICB0aGlzLmdldHRlcnMgPSBbXTtcbiAgdGhpcy5zZXR0ZXJzID0gW107XG4gIHRoaXMuZmx1ZW50cyA9IFtdO1xufVxuXG4vKipcbiAqIERlbGVnYXRlIG1ldGhvZCBgbmFtZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge0RlbGVnYXRvcn0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5EZWxlZ2F0b3IucHJvdG90eXBlLm1ldGhvZCA9IGZ1bmN0aW9uKG5hbWUpe1xuICB2YXIgcHJvdG8gPSB0aGlzLnByb3RvO1xuICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQ7XG4gIHRoaXMubWV0aG9kcy5wdXNoKG5hbWUpO1xuXG4gIHByb3RvW25hbWVdID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpc1t0YXJnZXRdW25hbWVdLmFwcGx5KHRoaXNbdGFyZ2V0XSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogRGVsZWdhdG9yIGFjY2Vzc29yIGBuYW1lYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7RGVsZWdhdG9yfSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkRlbGVnYXRvci5wcm90b3R5cGUuYWNjZXNzID0gZnVuY3Rpb24obmFtZSl7XG4gIHJldHVybiB0aGlzLmdldHRlcihuYW1lKS5zZXR0ZXIobmFtZSk7XG59O1xuXG4vKipcbiAqIERlbGVnYXRvciBnZXR0ZXIgYG5hbWVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtEZWxlZ2F0b3J9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRGVsZWdhdG9yLnByb3RvdHlwZS5nZXR0ZXIgPSBmdW5jdGlvbihuYW1lKXtcbiAgdmFyIHByb3RvID0gdGhpcy5wcm90bztcbiAgdmFyIHRhcmdldCA9IHRoaXMudGFyZ2V0O1xuICB0aGlzLmdldHRlcnMucHVzaChuYW1lKTtcblxuICBwcm90by5fX2RlZmluZUdldHRlcl9fKG5hbWUsIGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXNbdGFyZ2V0XVtuYW1lXTtcbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIERlbGVnYXRvciBzZXR0ZXIgYG5hbWVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtEZWxlZ2F0b3J9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRGVsZWdhdG9yLnByb3RvdHlwZS5zZXR0ZXIgPSBmdW5jdGlvbihuYW1lKXtcbiAgdmFyIHByb3RvID0gdGhpcy5wcm90bztcbiAgdmFyIHRhcmdldCA9IHRoaXMudGFyZ2V0O1xuICB0aGlzLnNldHRlcnMucHVzaChuYW1lKTtcblxuICBwcm90by5fX2RlZmluZVNldHRlcl9fKG5hbWUsIGZ1bmN0aW9uKHZhbCl7XG4gICAgcmV0dXJuIHRoaXNbdGFyZ2V0XVtuYW1lXSA9IHZhbDtcbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIERlbGVnYXRvciBmbHVlbnQgYWNjZXNzb3JcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7RGVsZWdhdG9yfSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkRlbGVnYXRvci5wcm90b3R5cGUuZmx1ZW50ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHByb3RvID0gdGhpcy5wcm90bztcbiAgdmFyIHRhcmdldCA9IHRoaXMudGFyZ2V0O1xuICB0aGlzLmZsdWVudHMucHVzaChuYW1lKTtcblxuICBwcm90b1tuYW1lXSA9IGZ1bmN0aW9uKHZhbCl7XG4gICAgaWYgKCd1bmRlZmluZWQnICE9IHR5cGVvZiB2YWwpIHtcbiAgICAgIHRoaXNbdGFyZ2V0XVtuYW1lXSA9IHZhbDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpc1t0YXJnZXRdW25hbWVdO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdGhpcztcbn07XG4iLCIvKiFcbiAqIGNvb2tpZXNcbiAqIENvcHlyaWdodChjKSAyMDE0IEplZCBTY2htaWR0LCBodHRwOi8vamVkLmlzL1xuICogQ29weXJpZ2h0KGMpIDIwMTUtMjAxNiBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBkZXByZWNhdGUgPSByZXF1aXJlKCdkZXBkJykoJ2Nvb2tpZXMnKVxudmFyIEtleWdyaXAgPSByZXF1aXJlKCdrZXlncmlwJylcbnZhciBodHRwID0gcmVxdWlyZSgnaHR0cCcpXG52YXIgY2FjaGUgPSB7fVxuXG4vKipcbiAqIFJlZ0V4cCB0byBtYXRjaCBmaWVsZC1jb250ZW50IGluIFJGQyA3MjMwIHNlYyAzLjJcbiAqXG4gKiBmaWVsZC1jb250ZW50ID0gZmllbGQtdmNoYXIgWyAxKiggU1AgLyBIVEFCICkgZmllbGQtdmNoYXIgXVxuICogZmllbGQtdmNoYXIgICA9IFZDSEFSIC8gb2JzLXRleHRcbiAqIG9icy10ZXh0ICAgICAgPSAleDgwLUZGXG4gKi9cblxudmFyIGZpZWxkQ29udGVudFJlZ0V4cCA9IC9eW1xcdTAwMDlcXHUwMDIwLVxcdTAwN2VcXHUwMDgwLVxcdTAwZmZdKyQvO1xuXG4vKipcbiAqIFJlZ0V4cCB0byBtYXRjaCBTYW1lLVNpdGUgY29va2llIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqL1xuXG52YXIgU0FNRV9TSVRFX1JFR0VYUCA9IC9eKD86bGF4fG5vbmV8c3RyaWN0KSQvaVxuXG5mdW5jdGlvbiBDb29raWVzKHJlcXVlc3QsIHJlc3BvbnNlLCBvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDb29raWVzKSkgcmV0dXJuIG5ldyBDb29raWVzKHJlcXVlc3QsIHJlc3BvbnNlLCBvcHRpb25zKVxuXG4gIHRoaXMuc2VjdXJlID0gdW5kZWZpbmVkXG4gIHRoaXMucmVxdWVzdCA9IHJlcXVlc3RcbiAgdGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlXG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgICAgLy8gYXJyYXkgb2Yga2V5IHN0cmluZ3NcbiAgICAgIGRlcHJlY2F0ZSgnXCJrZXlzXCIgYXJndW1lbnQ7IHByb3ZpZGUgdXNpbmcgb3B0aW9ucyB7XCJrZXlzXCI6IFsuLi5dfScpXG4gICAgICB0aGlzLmtleXMgPSBuZXcgS2V5Z3JpcChvcHRpb25zKVxuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5jb25zdHJ1Y3RvciAmJiBvcHRpb25zLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdLZXlncmlwJykge1xuICAgICAgLy8gYW55IGtleWdyaXAgY29uc3RydWN0b3IgdG8gYWxsb3cgZGlmZmVyZW50IHZlcnNpb25zXG4gICAgICBkZXByZWNhdGUoJ1wia2V5c1wiIGFyZ3VtZW50OyBwcm92aWRlIHVzaW5nIG9wdGlvbnMge1wia2V5c1wiOiBrZXlncmlwfScpXG4gICAgICB0aGlzLmtleXMgPSBvcHRpb25zXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMua2V5cyA9IEFycmF5LmlzQXJyYXkob3B0aW9ucy5rZXlzKSA/IG5ldyBLZXlncmlwKG9wdGlvbnMua2V5cykgOiBvcHRpb25zLmtleXNcbiAgICAgIHRoaXMuc2VjdXJlID0gb3B0aW9ucy5zZWN1cmVcbiAgICB9XG4gIH1cbn1cblxuQ29va2llcy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSwgb3B0cykge1xuICB2YXIgc2lnTmFtZSA9IG5hbWUgKyBcIi5zaWdcIlxuICAgICwgaGVhZGVyLCBtYXRjaCwgdmFsdWUsIHJlbW90ZSwgZGF0YSwgaW5kZXhcbiAgICAsIHNpZ25lZCA9IG9wdHMgJiYgb3B0cy5zaWduZWQgIT09IHVuZGVmaW5lZCA/IG9wdHMuc2lnbmVkIDogISF0aGlzLmtleXNcblxuICBoZWFkZXIgPSB0aGlzLnJlcXVlc3QuaGVhZGVyc1tcImNvb2tpZVwiXVxuICBpZiAoIWhlYWRlcikgcmV0dXJuXG5cbiAgbWF0Y2ggPSBoZWFkZXIubWF0Y2goZ2V0UGF0dGVybihuYW1lKSlcbiAgaWYgKCFtYXRjaCkgcmV0dXJuXG5cbiAgdmFsdWUgPSBtYXRjaFsxXVxuICBpZiAoIW9wdHMgfHwgIXNpZ25lZCkgcmV0dXJuIHZhbHVlXG5cbiAgcmVtb3RlID0gdGhpcy5nZXQoc2lnTmFtZSlcbiAgaWYgKCFyZW1vdGUpIHJldHVyblxuXG4gIGRhdGEgPSBuYW1lICsgXCI9XCIgKyB2YWx1ZVxuICBpZiAoIXRoaXMua2V5cykgdGhyb3cgbmV3IEVycm9yKCcua2V5cyByZXF1aXJlZCBmb3Igc2lnbmVkIGNvb2tpZXMnKTtcbiAgaW5kZXggPSB0aGlzLmtleXMuaW5kZXgoZGF0YSwgcmVtb3RlKVxuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICB0aGlzLnNldChzaWdOYW1lLCBudWxsLCB7cGF0aDogXCIvXCIsIHNpZ25lZDogZmFsc2UgfSlcbiAgfSBlbHNlIHtcbiAgICBpbmRleCAmJiB0aGlzLnNldChzaWdOYW1lLCB0aGlzLmtleXMuc2lnbihkYXRhKSwgeyBzaWduZWQ6IGZhbHNlIH0pXG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbn07XG5cbkNvb2tpZXMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBvcHRzKSB7XG4gIHZhciByZXMgPSB0aGlzLnJlc3BvbnNlXG4gICAgLCByZXEgPSB0aGlzLnJlcXVlc3RcbiAgICAsIGhlYWRlcnMgPSByZXMuZ2V0SGVhZGVyKFwiU2V0LUNvb2tpZVwiKSB8fCBbXVxuICAgICwgc2VjdXJlID0gdGhpcy5zZWN1cmUgIT09IHVuZGVmaW5lZCA/ICEhdGhpcy5zZWN1cmUgOiByZXEucHJvdG9jb2wgPT09ICdodHRwcycgfHwgcmVxLmNvbm5lY3Rpb24uZW5jcnlwdGVkXG4gICAgLCBjb29raWUgPSBuZXcgQ29va2llKG5hbWUsIHZhbHVlLCBvcHRzKVxuICAgICwgc2lnbmVkID0gb3B0cyAmJiBvcHRzLnNpZ25lZCAhPT0gdW5kZWZpbmVkID8gb3B0cy5zaWduZWQgOiAhIXRoaXMua2V5c1xuXG4gIGlmICh0eXBlb2YgaGVhZGVycyA9PSBcInN0cmluZ1wiKSBoZWFkZXJzID0gW2hlYWRlcnNdXG5cbiAgaWYgKCFzZWN1cmUgJiYgb3B0cyAmJiBvcHRzLnNlY3VyZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHNlbmQgc2VjdXJlIGNvb2tpZSBvdmVyIHVuZW5jcnlwdGVkIGNvbm5lY3Rpb24nKVxuICB9XG5cbiAgY29va2llLnNlY3VyZSA9IG9wdHMgJiYgb3B0cy5zZWN1cmUgIT09IHVuZGVmaW5lZFxuICAgID8gb3B0cy5zZWN1cmVcbiAgICA6IHNlY3VyZVxuXG4gIGlmIChvcHRzICYmIFwic2VjdXJlUHJveHlcIiBpbiBvcHRzKSB7XG4gICAgZGVwcmVjYXRlKCdcInNlY3VyZVByb3h5XCIgb3B0aW9uOyB1c2UgXCJzZWN1cmVcIiBvcHRpb24sIHByb3ZpZGUgXCJzZWN1cmVcIiB0byBjb25zdHJ1Y3RvciBpZiBuZWVkZWQnKVxuICAgIGNvb2tpZS5zZWN1cmUgPSBvcHRzLnNlY3VyZVByb3h5XG4gIH1cblxuICBwdXNoQ29va2llKGhlYWRlcnMsIGNvb2tpZSlcblxuICBpZiAob3B0cyAmJiBzaWduZWQpIHtcbiAgICBpZiAoIXRoaXMua2V5cykgdGhyb3cgbmV3IEVycm9yKCcua2V5cyByZXF1aXJlZCBmb3Igc2lnbmVkIGNvb2tpZXMnKTtcbiAgICBjb29raWUudmFsdWUgPSB0aGlzLmtleXMuc2lnbihjb29raWUudG9TdHJpbmcoKSlcbiAgICBjb29raWUubmFtZSArPSBcIi5zaWdcIlxuICAgIHB1c2hDb29raWUoaGVhZGVycywgY29va2llKVxuICB9XG5cbiAgdmFyIHNldEhlYWRlciA9IHJlcy5zZXQgPyBodHRwLk91dGdvaW5nTWVzc2FnZS5wcm90b3R5cGUuc2V0SGVhZGVyIDogcmVzLnNldEhlYWRlclxuICBzZXRIZWFkZXIuY2FsbChyZXMsICdTZXQtQ29va2llJywgaGVhZGVycylcbiAgcmV0dXJuIHRoaXNcbn07XG5cbmZ1bmN0aW9uIENvb2tpZShuYW1lLCB2YWx1ZSwgYXR0cnMpIHtcbiAgaWYgKCFmaWVsZENvbnRlbnRSZWdFeHAudGVzdChuYW1lKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG5hbWUgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgaWYgKHZhbHVlICYmICFmaWVsZENvbnRlbnRSZWdFeHAudGVzdCh2YWx1ZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCB2YWx1ZSBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICB0aGlzLm5hbWUgPSBuYW1lXG4gIHRoaXMudmFsdWUgPSB2YWx1ZSB8fCBcIlwiXG5cbiAgZm9yICh2YXIgbmFtZSBpbiBhdHRycykge1xuICAgIHRoaXNbbmFtZV0gPSBhdHRyc1tuYW1lXVxuICB9XG5cbiAgaWYgKCF0aGlzLnZhbHVlKSB7XG4gICAgdGhpcy5leHBpcmVzID0gbmV3IERhdGUoMClcbiAgICB0aGlzLm1heEFnZSA9IG51bGxcbiAgfVxuXG4gIGlmICh0aGlzLnBhdGggJiYgIWZpZWxkQ29udGVudFJlZ0V4cC50ZXN0KHRoaXMucGF0aCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gcGF0aCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICBpZiAodGhpcy5kb21haW4gJiYgIWZpZWxkQ29udGVudFJlZ0V4cC50ZXN0KHRoaXMuZG9tYWluKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBkb21haW4gaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgaWYgKHRoaXMuc2FtZVNpdGUgJiYgdGhpcy5zYW1lU2l0ZSAhPT0gdHJ1ZSAmJiAhU0FNRV9TSVRFX1JFR0VYUC50ZXN0KHRoaXMuc2FtZVNpdGUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIHNhbWVTaXRlIGlzIGludmFsaWQnKVxuICB9XG59XG5cbkNvb2tpZS5wcm90b3R5cGUucGF0aCA9IFwiL1wiO1xuQ29va2llLnByb3RvdHlwZS5leHBpcmVzID0gdW5kZWZpbmVkO1xuQ29va2llLnByb3RvdHlwZS5kb21haW4gPSB1bmRlZmluZWQ7XG5Db29raWUucHJvdG90eXBlLmh0dHBPbmx5ID0gdHJ1ZTtcbkNvb2tpZS5wcm90b3R5cGUuc2FtZVNpdGUgPSBmYWxzZTtcbkNvb2tpZS5wcm90b3R5cGUuc2VjdXJlID0gZmFsc2U7XG5Db29raWUucHJvdG90eXBlLm92ZXJ3cml0ZSA9IGZhbHNlO1xuXG5Db29raWUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm5hbWUgKyBcIj1cIiArIHRoaXMudmFsdWVcbn07XG5cbkNvb2tpZS5wcm90b3R5cGUudG9IZWFkZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGhlYWRlciA9IHRoaXMudG9TdHJpbmcoKVxuXG4gIGlmICh0aGlzLm1heEFnZSkgdGhpcy5leHBpcmVzID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIHRoaXMubWF4QWdlKTtcblxuICBpZiAodGhpcy5wYXRoICAgICApIGhlYWRlciArPSBcIjsgcGF0aD1cIiArIHRoaXMucGF0aFxuICBpZiAodGhpcy5leHBpcmVzICApIGhlYWRlciArPSBcIjsgZXhwaXJlcz1cIiArIHRoaXMuZXhwaXJlcy50b1VUQ1N0cmluZygpXG4gIGlmICh0aGlzLmRvbWFpbiAgICkgaGVhZGVyICs9IFwiOyBkb21haW49XCIgKyB0aGlzLmRvbWFpblxuICBpZiAodGhpcy5zYW1lU2l0ZSApIGhlYWRlciArPSBcIjsgc2FtZXNpdGU9XCIgKyAodGhpcy5zYW1lU2l0ZSA9PT0gdHJ1ZSA/ICdzdHJpY3QnIDogdGhpcy5zYW1lU2l0ZS50b0xvd2VyQ2FzZSgpKVxuICBpZiAodGhpcy5zZWN1cmUgICApIGhlYWRlciArPSBcIjsgc2VjdXJlXCJcbiAgaWYgKHRoaXMuaHR0cE9ubHkgKSBoZWFkZXIgKz0gXCI7IGh0dHBvbmx5XCJcblxuICByZXR1cm4gaGVhZGVyXG59O1xuXG4vLyBiYWNrLWNvbXBhdCBzbyBtYXhhZ2UgbWlycm9ycyBtYXhBZ2Vcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb29raWUucHJvdG90eXBlLCAnbWF4YWdlJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5tYXhBZ2UgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsKSB7IHJldHVybiB0aGlzLm1heEFnZSA9IHZhbCB9XG59KTtcbmRlcHJlY2F0ZS5wcm9wZXJ0eShDb29raWUucHJvdG90eXBlLCAnbWF4YWdlJywgJ1wibWF4YWdlXCI7IHVzZSBcIm1heEFnZVwiIGluc3RlYWQnKVxuXG5mdW5jdGlvbiBnZXRQYXR0ZXJuKG5hbWUpIHtcbiAgaWYgKGNhY2hlW25hbWVdKSByZXR1cm4gY2FjaGVbbmFtZV1cblxuICByZXR1cm4gY2FjaGVbbmFtZV0gPSBuZXcgUmVnRXhwKFxuICAgIFwiKD86Xnw7KSAqXCIgK1xuICAgIG5hbWUucmVwbGFjZSgvWy1bXFxde30oKSorPy4sXFxcXF4kfCNcXHNdL2csIFwiXFxcXCQmXCIpICtcbiAgICBcIj0oW147XSopXCJcbiAgKVxufVxuXG5mdW5jdGlvbiBwdXNoQ29va2llKGhlYWRlcnMsIGNvb2tpZSkge1xuICBpZiAoY29va2llLm92ZXJ3cml0ZSkge1xuICAgIGZvciAodmFyIGkgPSBoZWFkZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBpZiAoaGVhZGVyc1tpXS5pbmRleE9mKGNvb2tpZS5uYW1lICsgJz0nKSA9PT0gMCkge1xuICAgICAgICBoZWFkZXJzLnNwbGljZShpLCAxKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhlYWRlcnMucHVzaChjb29raWUudG9IZWFkZXIoKSlcbn1cblxuQ29va2llcy5jb25uZWN0ID0gQ29va2llcy5leHByZXNzID0gZnVuY3Rpb24oa2V5cykge1xuICByZXR1cm4gZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgICByZXEuY29va2llcyA9IHJlcy5jb29raWVzID0gbmV3IENvb2tpZXMocmVxLCByZXMsIHtcbiAgICAgIGtleXM6IGtleXNcbiAgICB9KVxuXG4gICAgbmV4dCgpXG4gIH1cbn1cblxuQ29va2llcy5Db29raWUgPSBDb29raWVcblxubW9kdWxlLmV4cG9ydHMgPSBDb29raWVzXG4iLCIvKiFcbiAqIGRlcGRcbiAqIENvcHlyaWdodChjKSAyMDE0LTIwMTggRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgcmVsYXRpdmUgPSByZXF1aXJlKCdwYXRoJykucmVsYXRpdmVcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlcGRcblxuLyoqXG4gKiBHZXQgdGhlIHBhdGggdG8gYmFzZSBmaWxlcyBvbi5cbiAqL1xuXG52YXIgYmFzZVBhdGggPSBwcm9jZXNzLmN3ZCgpXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIG5hbWVzcGFjZSBpcyBjb250YWluZWQgaW4gdGhlIHN0cmluZy5cbiAqL1xuXG5mdW5jdGlvbiBjb250YWluc05hbWVzcGFjZSAoc3RyLCBuYW1lc3BhY2UpIHtcbiAgdmFyIHZhbHMgPSBzdHIuc3BsaXQoL1sgLF0rLylcbiAgdmFyIG5zID0gU3RyaW5nKG5hbWVzcGFjZSkudG9Mb3dlckNhc2UoKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFscy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2YWwgPSB2YWxzW2ldXG5cbiAgICAvLyBuYW1lc3BhY2UgY29udGFpbmVkXG4gICAgaWYgKHZhbCAmJiAodmFsID09PSAnKicgfHwgdmFsLnRvTG93ZXJDYXNlKCkgPT09IG5zKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgZGF0YSBkZXNjcmlwdG9yIHRvIGFjY2Vzc29yIGRlc2NyaXB0b3IuXG4gKi9cblxuZnVuY3Rpb24gY29udmVydERhdGFEZXNjcmlwdG9yVG9BY2Nlc3NvciAob2JqLCBwcm9wLCBtZXNzYWdlKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHByb3ApXG4gIHZhciB2YWx1ZSA9IGRlc2NyaXB0b3IudmFsdWVcblxuICBkZXNjcmlwdG9yLmdldCA9IGZ1bmN0aW9uIGdldHRlciAoKSB7IHJldHVybiB2YWx1ZSB9XG5cbiAgaWYgKGRlc2NyaXB0b3Iud3JpdGFibGUpIHtcbiAgICBkZXNjcmlwdG9yLnNldCA9IGZ1bmN0aW9uIHNldHRlciAodmFsKSB7IHJldHVybiAodmFsdWUgPSB2YWwpIH1cbiAgfVxuXG4gIGRlbGV0ZSBkZXNjcmlwdG9yLnZhbHVlXG4gIGRlbGV0ZSBkZXNjcmlwdG9yLndyaXRhYmxlXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwgZGVzY3JpcHRvcilcblxuICByZXR1cm4gZGVzY3JpcHRvclxufVxuXG4vKipcbiAqIENyZWF0ZSBhcmd1bWVudHMgc3RyaW5nIHRvIGtlZXAgYXJpdHkuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlQXJndW1lbnRzU3RyaW5nIChhcml0eSkge1xuICB2YXIgc3RyID0gJydcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyaXR5OyBpKyspIHtcbiAgICBzdHIgKz0gJywgYXJnJyArIGlcbiAgfVxuXG4gIHJldHVybiBzdHIuc3Vic3RyKDIpXG59XG5cbi8qKlxuICogQ3JlYXRlIHN0YWNrIHN0cmluZyBmcm9tIHN0YWNrLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0YWNrU3RyaW5nIChzdGFjaykge1xuICB2YXIgc3RyID0gdGhpcy5uYW1lICsgJzogJyArIHRoaXMubmFtZXNwYWNlXG5cbiAgaWYgKHRoaXMubWVzc2FnZSkge1xuICAgIHN0ciArPSAnIGRlcHJlY2F0ZWQgJyArIHRoaXMubWVzc2FnZVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGFjay5sZW5ndGg7IGkrKykge1xuICAgIHN0ciArPSAnXFxuICAgIGF0ICcgKyBzdGFja1tpXS50b1N0cmluZygpXG4gIH1cblxuICByZXR1cm4gc3RyXG59XG5cbi8qKlxuICogQ3JlYXRlIGRlcHJlY2F0ZSBmb3IgbmFtZXNwYWNlIGluIGNhbGxlci5cbiAqL1xuXG5mdW5jdGlvbiBkZXBkIChuYW1lc3BhY2UpIHtcbiAgaWYgKCFuYW1lc3BhY2UpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBuYW1lc3BhY2UgaXMgcmVxdWlyZWQnKVxuICB9XG5cbiAgdmFyIHN0YWNrID0gZ2V0U3RhY2soKVxuICB2YXIgc2l0ZSA9IGNhbGxTaXRlTG9jYXRpb24oc3RhY2tbMV0pXG4gIHZhciBmaWxlID0gc2l0ZVswXVxuXG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZSAobWVzc2FnZSkge1xuICAgIC8vIGNhbGwgdG8gc2VsZiBhcyBsb2dcbiAgICBsb2cuY2FsbChkZXByZWNhdGUsIG1lc3NhZ2UpXG4gIH1cblxuICBkZXByZWNhdGUuX2ZpbGUgPSBmaWxlXG4gIGRlcHJlY2F0ZS5faWdub3JlZCA9IGlzaWdub3JlZChuYW1lc3BhY2UpXG4gIGRlcHJlY2F0ZS5fbmFtZXNwYWNlID0gbmFtZXNwYWNlXG4gIGRlcHJlY2F0ZS5fdHJhY2VkID0gaXN0cmFjZWQobmFtZXNwYWNlKVxuICBkZXByZWNhdGUuX3dhcm5lZCA9IE9iamVjdC5jcmVhdGUobnVsbClcblxuICBkZXByZWNhdGUuZnVuY3Rpb24gPSB3cmFwZnVuY3Rpb25cbiAgZGVwcmVjYXRlLnByb3BlcnR5ID0gd3JhcHByb3BlcnR5XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZVxufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBldmVudCBlbWl0dGVyIGhhcyBsaXN0ZW5lcnMgb2YgYSBnaXZlbiB0eXBlLlxuICpcbiAqIFRoZSB3YXkgdG8gZG8gdGhpcyBjaGVjayBpcyBkb25lIHRocmVlIGRpZmZlcmVudCB3YXlzIGluIE5vZGUuanMgPj0gMC44XG4gKiBzbyB0aGlzIGNvbnNvbGlkYXRlcyB0aGVtIGludG8gYSBtaW5pbWFsIHNldCB1c2luZyBpbnN0YW5jZSBtZXRob2RzLlxuICpcbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlbWl0dGVyXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGVlaGFzbGlzdGVuZXJzIChlbWl0dGVyLCB0eXBlKSB7XG4gIHZhciBjb3VudCA9IHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgIT09ICdmdW5jdGlvbidcbiAgICA/IGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aFxuICAgIDogZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpXG5cbiAgcmV0dXJuIGNvdW50ID4gMFxufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBuYW1lc3BhY2UgaXMgaWdub3JlZC5cbiAqL1xuXG5mdW5jdGlvbiBpc2lnbm9yZWQgKG5hbWVzcGFjZSkge1xuICBpZiAocHJvY2Vzcy5ub0RlcHJlY2F0aW9uKSB7XG4gICAgLy8gLS1uby1kZXByZWNhdGlvbiBzdXBwb3J0XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIHZhciBzdHIgPSBwcm9jZXNzLmVudi5OT19ERVBSRUNBVElPTiB8fCAnJ1xuXG4gIC8vIG5hbWVzcGFjZSBpZ25vcmVkXG4gIHJldHVybiBjb250YWluc05hbWVzcGFjZShzdHIsIG5hbWVzcGFjZSlcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgbmFtZXNwYWNlIGlzIHRyYWNlZC5cbiAqL1xuXG5mdW5jdGlvbiBpc3RyYWNlZCAobmFtZXNwYWNlKSB7XG4gIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHtcbiAgICAvLyAtLXRyYWNlLWRlcHJlY2F0aW9uIHN1cHBvcnRcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgdmFyIHN0ciA9IHByb2Nlc3MuZW52LlRSQUNFX0RFUFJFQ0FUSU9OIHx8ICcnXG5cbiAgLy8gbmFtZXNwYWNlIHRyYWNlZFxuICByZXR1cm4gY29udGFpbnNOYW1lc3BhY2Uoc3RyLCBuYW1lc3BhY2UpXG59XG5cbi8qKlxuICogRGlzcGxheSBkZXByZWNhdGlvbiBtZXNzYWdlLlxuICovXG5cbmZ1bmN0aW9uIGxvZyAobWVzc2FnZSwgc2l0ZSkge1xuICB2YXIgaGFzbGlzdGVuZXJzID0gZWVoYXNsaXN0ZW5lcnMocHJvY2VzcywgJ2RlcHJlY2F0aW9uJylcblxuICAvLyBhYm9ydCBlYXJseSBpZiBubyBkZXN0aW5hdGlvblxuICBpZiAoIWhhc2xpc3RlbmVycyAmJiB0aGlzLl9pZ25vcmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY2FsbGVyXG4gIHZhciBjYWxsRmlsZVxuICB2YXIgY2FsbFNpdGVcbiAgdmFyIGRlcFNpdGVcbiAgdmFyIGkgPSAwXG4gIHZhciBzZWVuID0gZmFsc2VcbiAgdmFyIHN0YWNrID0gZ2V0U3RhY2soKVxuICB2YXIgZmlsZSA9IHRoaXMuX2ZpbGVcblxuICBpZiAoc2l0ZSkge1xuICAgIC8vIHByb3ZpZGVkIHNpdGVcbiAgICBkZXBTaXRlID0gc2l0ZVxuICAgIGNhbGxTaXRlID0gY2FsbFNpdGVMb2NhdGlvbihzdGFja1sxXSlcbiAgICBjYWxsU2l0ZS5uYW1lID0gZGVwU2l0ZS5uYW1lXG4gICAgZmlsZSA9IGNhbGxTaXRlWzBdXG4gIH0gZWxzZSB7XG4gICAgLy8gZ2V0IGNhbGwgc2l0ZVxuICAgIGkgPSAyXG4gICAgZGVwU2l0ZSA9IGNhbGxTaXRlTG9jYXRpb24oc3RhY2tbaV0pXG4gICAgY2FsbFNpdGUgPSBkZXBTaXRlXG4gIH1cblxuICAvLyBnZXQgY2FsbGVyIG9mIGRlcHJlY2F0ZWQgdGhpbmcgaW4gcmVsYXRpb24gdG8gZmlsZVxuICBmb3IgKDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgY2FsbGVyID0gY2FsbFNpdGVMb2NhdGlvbihzdGFja1tpXSlcbiAgICBjYWxsRmlsZSA9IGNhbGxlclswXVxuXG4gICAgaWYgKGNhbGxGaWxlID09PSBmaWxlKSB7XG4gICAgICBzZWVuID0gdHJ1ZVxuICAgIH0gZWxzZSBpZiAoY2FsbEZpbGUgPT09IHRoaXMuX2ZpbGUpIHtcbiAgICAgIGZpbGUgPSB0aGlzLl9maWxlXG4gICAgfSBlbHNlIGlmIChzZWVuKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIHZhciBrZXkgPSBjYWxsZXJcbiAgICA/IGRlcFNpdGUuam9pbignOicpICsgJ19fJyArIGNhbGxlci5qb2luKCc6JylcbiAgICA6IHVuZGVmaW5lZFxuXG4gIGlmIChrZXkgIT09IHVuZGVmaW5lZCAmJiBrZXkgaW4gdGhpcy5fd2FybmVkKSB7XG4gICAgLy8gYWxyZWFkeSB3YXJuZWRcbiAgICByZXR1cm5cbiAgfVxuXG4gIHRoaXMuX3dhcm5lZFtrZXldID0gdHJ1ZVxuXG4gIC8vIGdlbmVyYXRlIGF1dG9tYXRpYyBtZXNzYWdlIGZyb20gY2FsbCBzaXRlXG4gIHZhciBtc2cgPSBtZXNzYWdlXG4gIGlmICghbXNnKSB7XG4gICAgbXNnID0gY2FsbFNpdGUgPT09IGRlcFNpdGUgfHwgIWNhbGxTaXRlLm5hbWVcbiAgICAgID8gZGVmYXVsdE1lc3NhZ2UoZGVwU2l0ZSlcbiAgICAgIDogZGVmYXVsdE1lc3NhZ2UoY2FsbFNpdGUpXG4gIH1cblxuICAvLyBlbWl0IGRlcHJlY2F0aW9uIGlmIGxpc3RlbmVycyBleGlzdFxuICBpZiAoaGFzbGlzdGVuZXJzKSB7XG4gICAgdmFyIGVyciA9IERlcHJlY2F0aW9uRXJyb3IodGhpcy5fbmFtZXNwYWNlLCBtc2csIHN0YWNrLnNsaWNlKGkpKVxuICAgIHByb2Nlc3MuZW1pdCgnZGVwcmVjYXRpb24nLCBlcnIpXG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBmb3JtYXQgYW5kIHdyaXRlIG1lc3NhZ2VcbiAgdmFyIGZvcm1hdCA9IHByb2Nlc3Muc3RkZXJyLmlzVFRZXG4gICAgPyBmb3JtYXRDb2xvclxuICAgIDogZm9ybWF0UGxhaW5cbiAgdmFyIG91dHB1dCA9IGZvcm1hdC5jYWxsKHRoaXMsIG1zZywgY2FsbGVyLCBzdGFjay5zbGljZShpKSlcbiAgcHJvY2Vzcy5zdGRlcnIud3JpdGUob3V0cHV0ICsgJ1xcbicsICd1dGY4Jylcbn1cblxuLyoqXG4gKiBHZXQgY2FsbCBzaXRlIGxvY2F0aW9uIGFzIGFycmF5LlxuICovXG5cbmZ1bmN0aW9uIGNhbGxTaXRlTG9jYXRpb24gKGNhbGxTaXRlKSB7XG4gIHZhciBmaWxlID0gY2FsbFNpdGUuZ2V0RmlsZU5hbWUoKSB8fCAnPGFub255bW91cz4nXG4gIHZhciBsaW5lID0gY2FsbFNpdGUuZ2V0TGluZU51bWJlcigpXG4gIHZhciBjb2xtID0gY2FsbFNpdGUuZ2V0Q29sdW1uTnVtYmVyKClcblxuICBpZiAoY2FsbFNpdGUuaXNFdmFsKCkpIHtcbiAgICBmaWxlID0gY2FsbFNpdGUuZ2V0RXZhbE9yaWdpbigpICsgJywgJyArIGZpbGVcbiAgfVxuXG4gIHZhciBzaXRlID0gW2ZpbGUsIGxpbmUsIGNvbG1dXG5cbiAgc2l0ZS5jYWxsU2l0ZSA9IGNhbGxTaXRlXG4gIHNpdGUubmFtZSA9IGNhbGxTaXRlLmdldEZ1bmN0aW9uTmFtZSgpXG5cbiAgcmV0dXJuIHNpdGVcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGRlZmF1bHQgbWVzc2FnZSBmcm9tIHRoZSBzaXRlLlxuICovXG5cbmZ1bmN0aW9uIGRlZmF1bHRNZXNzYWdlIChzaXRlKSB7XG4gIHZhciBjYWxsU2l0ZSA9IHNpdGUuY2FsbFNpdGVcbiAgdmFyIGZ1bmNOYW1lID0gc2l0ZS5uYW1lXG5cbiAgLy8gbWFrZSB1c2VmdWwgYW5vbnltb3VzIG5hbWVcbiAgaWYgKCFmdW5jTmFtZSkge1xuICAgIGZ1bmNOYW1lID0gJzxhbm9ueW1vdXNAJyArIGZvcm1hdExvY2F0aW9uKHNpdGUpICsgJz4nXG4gIH1cblxuICB2YXIgY29udGV4dCA9IGNhbGxTaXRlLmdldFRoaXMoKVxuICB2YXIgdHlwZU5hbWUgPSBjb250ZXh0ICYmIGNhbGxTaXRlLmdldFR5cGVOYW1lKClcblxuICAvLyBpZ25vcmUgdXNlbGVzcyB0eXBlIG5hbWVcbiAgaWYgKHR5cGVOYW1lID09PSAnT2JqZWN0Jykge1xuICAgIHR5cGVOYW1lID0gdW5kZWZpbmVkXG4gIH1cblxuICAvLyBtYWtlIHVzZWZ1bCB0eXBlIG5hbWVcbiAgaWYgKHR5cGVOYW1lID09PSAnRnVuY3Rpb24nKSB7XG4gICAgdHlwZU5hbWUgPSBjb250ZXh0Lm5hbWUgfHwgdHlwZU5hbWVcbiAgfVxuXG4gIHJldHVybiB0eXBlTmFtZSAmJiBjYWxsU2l0ZS5nZXRNZXRob2ROYW1lKClcbiAgICA/IHR5cGVOYW1lICsgJy4nICsgZnVuY05hbWVcbiAgICA6IGZ1bmNOYW1lXG59XG5cbi8qKlxuICogRm9ybWF0IGRlcHJlY2F0aW9uIG1lc3NhZ2Ugd2l0aG91dCBjb2xvci5cbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRQbGFpbiAobXNnLCBjYWxsZXIsIHN0YWNrKSB7XG4gIHZhciB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvVVRDU3RyaW5nKClcblxuICB2YXIgZm9ybWF0dGVkID0gdGltZXN0YW1wICtcbiAgICAnICcgKyB0aGlzLl9uYW1lc3BhY2UgK1xuICAgICcgZGVwcmVjYXRlZCAnICsgbXNnXG5cbiAgLy8gYWRkIHN0YWNrIHRyYWNlXG4gIGlmICh0aGlzLl90cmFjZWQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3JtYXR0ZWQgKz0gJ1xcbiAgICBhdCAnICsgc3RhY2tbaV0udG9TdHJpbmcoKVxuICAgIH1cblxuICAgIHJldHVybiBmb3JtYXR0ZWRcbiAgfVxuXG4gIGlmIChjYWxsZXIpIHtcbiAgICBmb3JtYXR0ZWQgKz0gJyBhdCAnICsgZm9ybWF0TG9jYXRpb24oY2FsbGVyKVxuICB9XG5cbiAgcmV0dXJuIGZvcm1hdHRlZFxufVxuXG4vKipcbiAqIEZvcm1hdCBkZXByZWNhdGlvbiBtZXNzYWdlIHdpdGggY29sb3IuXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0Q29sb3IgKG1zZywgY2FsbGVyLCBzdGFjaykge1xuICB2YXIgZm9ybWF0dGVkID0gJ1xceDFiWzM2OzFtJyArIHRoaXMuX25hbWVzcGFjZSArICdcXHgxYlsyMjszOW0nICsgLy8gYm9sZCBjeWFuXG4gICAgJyBcXHgxYlszMzsxbWRlcHJlY2F0ZWRcXHgxYlsyMjszOW0nICsgLy8gYm9sZCB5ZWxsb3dcbiAgICAnIFxceDFiWzBtJyArIG1zZyArICdcXHgxYlszOW0nIC8vIHJlc2V0XG5cbiAgLy8gYWRkIHN0YWNrIHRyYWNlXG4gIGlmICh0aGlzLl90cmFjZWQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3JtYXR0ZWQgKz0gJ1xcbiAgICBcXHgxYlszNm1hdCAnICsgc3RhY2tbaV0udG9TdHJpbmcoKSArICdcXHgxYlszOW0nIC8vIGN5YW5cbiAgICB9XG5cbiAgICByZXR1cm4gZm9ybWF0dGVkXG4gIH1cblxuICBpZiAoY2FsbGVyKSB7XG4gICAgZm9ybWF0dGVkICs9ICcgXFx4MWJbMzZtJyArIGZvcm1hdExvY2F0aW9uKGNhbGxlcikgKyAnXFx4MWJbMzltJyAvLyBjeWFuXG4gIH1cblxuICByZXR1cm4gZm9ybWF0dGVkXG59XG5cbi8qKlxuICogRm9ybWF0IGNhbGwgc2l0ZSBsb2NhdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRMb2NhdGlvbiAoY2FsbFNpdGUpIHtcbiAgcmV0dXJuIHJlbGF0aXZlKGJhc2VQYXRoLCBjYWxsU2l0ZVswXSkgK1xuICAgICc6JyArIGNhbGxTaXRlWzFdICtcbiAgICAnOicgKyBjYWxsU2l0ZVsyXVxufVxuXG4vKipcbiAqIEdldCB0aGUgc3RhY2sgYXMgYXJyYXkgb2YgY2FsbCBzaXRlcy5cbiAqL1xuXG5mdW5jdGlvbiBnZXRTdGFjayAoKSB7XG4gIHZhciBsaW1pdCA9IEVycm9yLnN0YWNrVHJhY2VMaW1pdFxuICB2YXIgb2JqID0ge31cbiAgdmFyIHByZXAgPSBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZVxuXG4gIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gcHJlcGFyZU9iamVjdFN0YWNrVHJhY2VcbiAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gTWF0aC5tYXgoMTAsIGxpbWl0KVxuXG4gIC8vIGNhcHR1cmUgdGhlIHN0YWNrXG4gIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKG9iailcblxuICAvLyBzbGljZSB0aGlzIGZ1bmN0aW9uIG9mZiB0aGUgdG9wXG4gIHZhciBzdGFjayA9IG9iai5zdGFjay5zbGljZSgxKVxuXG4gIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gcHJlcFxuICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSBsaW1pdFxuXG4gIHJldHVybiBzdGFja1xufVxuXG4vKipcbiAqIENhcHR1cmUgY2FsbCBzaXRlIHN0YWNrIGZyb20gdjguXG4gKi9cblxuZnVuY3Rpb24gcHJlcGFyZU9iamVjdFN0YWNrVHJhY2UgKG9iaiwgc3RhY2spIHtcbiAgcmV0dXJuIHN0YWNrXG59XG5cbi8qKlxuICogUmV0dXJuIGEgd3JhcHBlZCBmdW5jdGlvbiBpbiBhIGRlcHJlY2F0aW9uIG1lc3NhZ2UuXG4gKi9cblxuZnVuY3Rpb24gd3JhcGZ1bmN0aW9uIChmbiwgbWVzc2FnZSkge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgZm4gbXVzdCBiZSBhIGZ1bmN0aW9uJylcbiAgfVxuXG4gIHZhciBhcmdzID0gY3JlYXRlQXJndW1lbnRzU3RyaW5nKGZuLmxlbmd0aClcbiAgdmFyIHN0YWNrID0gZ2V0U3RhY2soKVxuICB2YXIgc2l0ZSA9IGNhbGxTaXRlTG9jYXRpb24oc3RhY2tbMV0pXG5cbiAgc2l0ZS5uYW1lID0gZm4ubmFtZVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICB2YXIgZGVwcmVjYXRlZGZuID0gbmV3IEZ1bmN0aW9uKCdmbicsICdsb2cnLCAnZGVwcmVjYXRlJywgJ21lc3NhZ2UnLCAnc2l0ZScsXG4gICAgJ1widXNlIHN0cmljdFwiXFxuJyArXG4gICAgJ3JldHVybiBmdW5jdGlvbiAoJyArIGFyZ3MgKyAnKSB7JyArXG4gICAgJ2xvZy5jYWxsKGRlcHJlY2F0ZSwgbWVzc2FnZSwgc2l0ZSlcXG4nICtcbiAgICAncmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcXG4nICtcbiAgICAnfScpKGZuLCBsb2csIHRoaXMsIG1lc3NhZ2UsIHNpdGUpXG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWRmblxufVxuXG4vKipcbiAqIFdyYXAgcHJvcGVydHkgaW4gYSBkZXByZWNhdGlvbiBtZXNzYWdlLlxuICovXG5cbmZ1bmN0aW9uIHdyYXBwcm9wZXJ0eSAob2JqLCBwcm9wLCBtZXNzYWdlKSB7XG4gIGlmICghb2JqIHx8ICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqICE9PSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG9iaiBtdXN0IGJlIG9iamVjdCcpXG4gIH1cblxuICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBwcm9wKVxuXG4gIGlmICghZGVzY3JpcHRvcikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ211c3QgY2FsbCBwcm9wZXJ0eSBvbiBvd25lciBvYmplY3QnKVxuICB9XG5cbiAgaWYgKCFkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Byb3BlcnR5IG11c3QgYmUgY29uZmlndXJhYmxlJylcbiAgfVxuXG4gIHZhciBkZXByZWNhdGUgPSB0aGlzXG4gIHZhciBzdGFjayA9IGdldFN0YWNrKClcbiAgdmFyIHNpdGUgPSBjYWxsU2l0ZUxvY2F0aW9uKHN0YWNrWzFdKVxuXG4gIC8vIHNldCBzaXRlIG5hbWVcbiAgc2l0ZS5uYW1lID0gcHJvcFxuXG4gIC8vIGNvbnZlcnQgZGF0YSBkZXNjcmlwdG9yXG4gIGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIHtcbiAgICBkZXNjcmlwdG9yID0gY29udmVydERhdGFEZXNjcmlwdG9yVG9BY2Nlc3NvcihvYmosIHByb3AsIG1lc3NhZ2UpXG4gIH1cblxuICB2YXIgZ2V0ID0gZGVzY3JpcHRvci5nZXRcbiAgdmFyIHNldCA9IGRlc2NyaXB0b3Iuc2V0XG5cbiAgLy8gd3JhcCBnZXR0ZXJcbiAgaWYgKHR5cGVvZiBnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBkZXNjcmlwdG9yLmdldCA9IGZ1bmN0aW9uIGdldHRlciAoKSB7XG4gICAgICBsb2cuY2FsbChkZXByZWNhdGUsIG1lc3NhZ2UsIHNpdGUpXG4gICAgICByZXR1cm4gZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICB9XG4gIH1cblxuICAvLyB3cmFwIHNldHRlclxuICBpZiAodHlwZW9mIHNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGRlc2NyaXB0b3Iuc2V0ID0gZnVuY3Rpb24gc2V0dGVyICgpIHtcbiAgICAgIGxvZy5jYWxsKGRlcHJlY2F0ZSwgbWVzc2FnZSwgc2l0ZSlcbiAgICAgIHJldHVybiBzZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIGRlc2NyaXB0b3IpXG59XG5cbi8qKlxuICogQ3JlYXRlIERlcHJlY2F0aW9uRXJyb3IgZm9yIGRlcHJlY2F0aW9uXG4gKi9cblxuZnVuY3Rpb24gRGVwcmVjYXRpb25FcnJvciAobmFtZXNwYWNlLCBtZXNzYWdlLCBzdGFjaykge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKVxuICB2YXIgc3RhY2tTdHJpbmdcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXJyb3IsICdjb25zdHJ1Y3RvcicsIHtcbiAgICB2YWx1ZTogRGVwcmVjYXRpb25FcnJvclxuICB9KVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnJvciwgJ21lc3NhZ2UnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBtZXNzYWdlLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVycm9yLCAnbmFtZScsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6ICdEZXByZWNhdGlvbkVycm9yJyxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnJvciwgJ25hbWVzcGFjZScsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IG5hbWVzcGFjZSxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnJvciwgJ3N0YWNrJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzdGFja1N0cmluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBzdGFja1N0cmluZ1xuICAgICAgfVxuXG4gICAgICAvLyBwcmVwYXJlIHN0YWNrIHRyYWNlXG4gICAgICByZXR1cm4gKHN0YWNrU3RyaW5nID0gY3JlYXRlU3RhY2tTdHJpbmcuY2FsbCh0aGlzLCBzdGFjaykpXG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldHRlciAodmFsKSB7XG4gICAgICBzdGFja1N0cmluZyA9IHZhbFxuICAgIH1cbiAgfSlcblxuICByZXR1cm4gZXJyb3Jcbn1cbiIsIi8qIVxuICoga2V5Z3JpcFxuICogQ29weXJpZ2h0KGMpIDIwMTEtMjAxNCBKZWQgU2NobWlkdFxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBjb21wYXJlID0gcmVxdWlyZSgndHNzY21wJylcbnZhciBjcnlwdG8gPSByZXF1aXJlKFwiY3J5cHRvXCIpXG4gIFxuZnVuY3Rpb24gS2V5Z3JpcChrZXlzLCBhbGdvcml0aG0sIGVuY29kaW5nKSB7XG4gIGlmICghYWxnb3JpdGhtKSBhbGdvcml0aG0gPSBcInNoYTFcIjtcbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSBcImJhc2U2NFwiO1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgS2V5Z3JpcCkpIHJldHVybiBuZXcgS2V5Z3JpcChrZXlzLCBhbGdvcml0aG0sIGVuY29kaW5nKVxuXG4gIGlmICgha2V5cyB8fCAhKDAgaW4ga2V5cykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJLZXlzIG11c3QgYmUgcHJvdmlkZWQuXCIpXG4gIH1cblxuICBmdW5jdGlvbiBzaWduKGRhdGEsIGtleSkge1xuICAgIHJldHVybiBjcnlwdG9cbiAgICAgIC5jcmVhdGVIbWFjKGFsZ29yaXRobSwga2V5KVxuICAgICAgLnVwZGF0ZShkYXRhKS5kaWdlc3QoZW5jb2RpbmcpXG4gICAgICAucmVwbGFjZSgvXFwvfFxcK3w9L2csIGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuICh7IFwiL1wiOiBcIl9cIiwgXCIrXCI6IFwiLVwiLCBcIj1cIjogXCJcIiB9KVt4XVxuICAgICAgfSlcbiAgfVxuXG4gIHRoaXMuc2lnbiA9IGZ1bmN0aW9uKGRhdGEpeyByZXR1cm4gc2lnbihkYXRhLCBrZXlzWzBdKSB9XG5cbiAgdGhpcy52ZXJpZnkgPSBmdW5jdGlvbihkYXRhLCBkaWdlc3QpIHtcbiAgICByZXR1cm4gdGhpcy5pbmRleChkYXRhLCBkaWdlc3QpID4gLTFcbiAgfVxuXG4gIHRoaXMuaW5kZXggPSBmdW5jdGlvbihkYXRhLCBkaWdlc3QpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoY29tcGFyZShkaWdlc3QsIHNpZ24oZGF0YSwga2V5c1tpXSkpKSB7XG4gICAgICAgIHJldHVybiBpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIC0xXG4gIH1cbn1cblxuS2V5Z3JpcC5zaWduID0gS2V5Z3JpcC52ZXJpZnkgPSBLZXlncmlwLmluZGV4ID0gZnVuY3Rpb24oKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIlVzYWdlOiByZXF1aXJlKCdrZXlncmlwJykoPGFycmF5LW9mLWtleXM+KVwiKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEtleWdyaXBcbiIsIid1c2Ugc3RyaWN0JztcclxuXHJcbi8vIEltcGxlbWVudHMgQnJhZCBIaWxsJ3MgRG91YmxlIEhNQUMgcGF0dGVybiBmcm9tXHJcbi8vIGh0dHBzOi8vd3d3Lm5jY2dyb3VwLnRydXN0L3VzL2Fib3V0LXVzL25ld3Nyb29tLWFuZC1ldmVudHMvYmxvZy8yMDExL2ZlYnJ1YXJ5L2RvdWJsZS1obWFjLXZlcmlmaWNhdGlvbi8uXHJcbi8vIFRoZSBhcHByb2FjaCBpcyBzaW1pbGFyIHRvIHRoZSBub2RlJ3MgbmF0aXZlIGltcGxlbWVudGF0aW9uIG9mIHRpbWluZyBzYWZlIGJ1ZmZlciBjb21wYXJpc29uIHRoYXQgd2lsbCBiZSBhdmFpbGFibGUgb24gdjYrLlxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzMwNDNcclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL3B1bGwvMzA3M1xyXG5cclxudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xyXG5cclxuZnVuY3Rpb24gYnVmZmVyRXF1YWwoYSwgYikge1xyXG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgLy8gYGNyeXB0by50aW1pbmdTYWZlRXF1YWxgIHdhcyBpbnRyb2R1Y2VkIGluIE5vZGUgdjYuNi4wXHJcbiAgLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9qc2h0dHAvYmFzaWMtYXV0aC9pc3N1ZXMvMzk+XHJcbiAgaWYgKGNyeXB0by50aW1pbmdTYWZlRXF1YWwpIHtcclxuICAgIHJldHVybiBjcnlwdG8udGltaW5nU2FmZUVxdWFsKGEsIGIpO1xyXG4gIH1cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcclxuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRpbWVTYWZlQ29tcGFyZShhLCBiKSB7XHJcbiAgdmFyIHNhID0gU3RyaW5nKGEpO1xyXG4gIHZhciBzYiA9IFN0cmluZyhiKTtcclxuICB2YXIga2V5ID0gY3J5cHRvLnBzZXVkb1JhbmRvbUJ5dGVzKDMyKTtcclxuICB2YXIgYWggPSBjcnlwdG8uY3JlYXRlSG1hYygnc2hhMjU2Jywga2V5KS51cGRhdGUoc2EpLmRpZ2VzdCgpO1xyXG4gIHZhciBiaCA9IGNyeXB0by5jcmVhdGVIbWFjKCdzaGEyNTYnLCBrZXkpLnVwZGF0ZShzYikuZGlnZXN0KCk7XHJcblxyXG4gIHJldHVybiBidWZmZXJFcXVhbChhaCwgYmgpICYmIGEgPT09IGI7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gdGltZVNhZmVDb21wYXJlO1xyXG4iLCJcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbmNvbnN0IFVSTCA9IHJlcXVpcmUoJ3VybCcpLlVSTDtcbmNvbnN0IG5ldCA9IHJlcXVpcmUoJ25ldCcpO1xuY29uc3QgYWNjZXB0cyA9IHJlcXVpcmUoJ2FjY2VwdHMnKTtcbmNvbnN0IGNvbnRlbnRUeXBlID0gcmVxdWlyZSgnY29udGVudC10eXBlJyk7XG5jb25zdCBzdHJpbmdpZnkgPSByZXF1aXJlKCd1cmwnKS5mb3JtYXQ7XG5jb25zdCBwYXJzZSA9IHJlcXVpcmUoJ3BhcnNldXJsJyk7XG5jb25zdCBxcyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJyk7XG5jb25zdCB0eXBlaXMgPSByZXF1aXJlKCd0eXBlLWlzJyk7XG5jb25zdCBmcmVzaCA9IHJlcXVpcmUoJ2ZyZXNoJyk7XG5jb25zdCBvbmx5ID0gcmVxdWlyZSgnb25seScpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuY29uc3QgSVAgPSBTeW1ib2woJ2NvbnRleHQjaXAnKTtcblxuLyoqXG4gKiBQcm90b3R5cGUuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLyoqXG4gICAqIFJldHVybiByZXF1ZXN0IGhlYWRlci5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBnZXQgaGVhZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnJlcS5oZWFkZXJzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXQgcmVxdWVzdCBoZWFkZXIuXG4gICAqXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHNldCBoZWFkZXIodmFsKSB7XG4gICAgdGhpcy5yZXEuaGVhZGVycyA9IHZhbDtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJuIHJlcXVlc3QgaGVhZGVyLCBhbGlhcyBhcyByZXF1ZXN0LmhlYWRlclxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGdldCBoZWFkZXJzKCkge1xuICAgIHJldHVybiB0aGlzLnJlcS5oZWFkZXJzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXQgcmVxdWVzdCBoZWFkZXIsIGFsaWFzIGFzIHJlcXVlc3QuaGVhZGVyXG4gICAqXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHNldCBoZWFkZXJzKHZhbCkge1xuICAgIHRoaXMucmVxLmhlYWRlcnMgPSB2YWw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCByZXF1ZXN0IFVSTC5cbiAgICpcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBnZXQgdXJsKCkge1xuICAgIHJldHVybiB0aGlzLnJlcS51cmw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldCByZXF1ZXN0IFVSTC5cbiAgICpcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgc2V0IHVybCh2YWwpIHtcbiAgICB0aGlzLnJlcS51cmwgPSB2YWw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCBvcmlnaW4gb2YgVVJMLlxuICAgKlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGdldCBvcmlnaW4oKSB7XG4gICAgcmV0dXJuIGAke3RoaXMucHJvdG9jb2x9Oi8vJHt0aGlzLmhvc3R9YDtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IGZ1bGwgcmVxdWVzdCBVUkwuXG4gICAqXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZ2V0IGhyZWYoKSB7XG4gICAgLy8gc3VwcG9ydDogYEdFVCBodHRwOi8vZXhhbXBsZS5jb20vZm9vYFxuICAgIGlmICgvXmh0dHBzPzpcXC9cXC8vaS50ZXN0KHRoaXMub3JpZ2luYWxVcmwpKSByZXR1cm4gdGhpcy5vcmlnaW5hbFVybDtcbiAgICByZXR1cm4gdGhpcy5vcmlnaW4gKyB0aGlzLm9yaWdpbmFsVXJsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgcmVxdWVzdCBtZXRob2QuXG4gICAqXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZ2V0IG1ldGhvZCgpIHtcbiAgICByZXR1cm4gdGhpcy5yZXEubWV0aG9kO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXQgcmVxdWVzdCBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2YWxcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgc2V0IG1ldGhvZCh2YWwpIHtcbiAgICB0aGlzLnJlcS5tZXRob2QgPSB2YWw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCByZXF1ZXN0IHBhdGhuYW1lLlxuICAgKlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGdldCBwYXRoKCkge1xuICAgIHJldHVybiBwYXJzZSh0aGlzLnJlcSkucGF0aG5hbWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldCBwYXRobmFtZSwgcmV0YWluaW5nIHRoZSBxdWVyeS1zdHJpbmcgd2hlbiBwcmVzZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBzZXQgcGF0aChwYXRoKSB7XG4gICAgY29uc3QgdXJsID0gcGFyc2UodGhpcy5yZXEpO1xuICAgIGlmICh1cmwucGF0aG5hbWUgPT09IHBhdGgpIHJldHVybjtcblxuICAgIHVybC5wYXRobmFtZSA9IHBhdGg7XG4gICAgdXJsLnBhdGggPSBudWxsO1xuXG4gICAgdGhpcy51cmwgPSBzdHJpbmdpZnkodXJsKTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IHBhcnNlZCBxdWVyeS1zdHJpbmcuXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZ2V0IHF1ZXJ5KCkge1xuICAgIGNvbnN0IHN0ciA9IHRoaXMucXVlcnlzdHJpbmc7XG4gICAgY29uc3QgYyA9IHRoaXMuX3F1ZXJ5Y2FjaGUgPSB0aGlzLl9xdWVyeWNhY2hlIHx8IHt9O1xuICAgIHJldHVybiBjW3N0cl0gfHwgKGNbc3RyXSA9IHFzLnBhcnNlKHN0cikpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXQgcXVlcnktc3RyaW5nIGFzIGFuIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9ialxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBzZXQgcXVlcnkob2JqKSB7XG4gICAgdGhpcy5xdWVyeXN0cmluZyA9IHFzLnN0cmluZ2lmeShvYmopO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgcXVlcnkgc3RyaW5nLlxuICAgKlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGdldCBxdWVyeXN0cmluZygpIHtcbiAgICBpZiAoIXRoaXMucmVxKSByZXR1cm4gJyc7XG4gICAgcmV0dXJuIHBhcnNlKHRoaXMucmVxKS5xdWVyeSB8fCAnJztcbiAgfSxcblxuICAvKipcbiAgICogU2V0IHF1ZXJ5c3RyaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHNldCBxdWVyeXN0cmluZyhzdHIpIHtcbiAgICBjb25zdCB1cmwgPSBwYXJzZSh0aGlzLnJlcSk7XG4gICAgaWYgKHVybC5zZWFyY2ggPT09IGA/JHtzdHJ9YCkgcmV0dXJuO1xuXG4gICAgdXJsLnNlYXJjaCA9IHN0cjtcbiAgICB1cmwucGF0aCA9IG51bGw7XG5cbiAgICB0aGlzLnVybCA9IHN0cmluZ2lmeSh1cmwpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHNlYXJjaCBzdHJpbmcuIFNhbWUgYXMgdGhlIHF1ZXJ5c3RyaW5nXG4gICAqIGV4Y2VwdCBpdCBpbmNsdWRlcyB0aGUgbGVhZGluZyA/LlxuICAgKlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGdldCBzZWFyY2goKSB7XG4gICAgaWYgKCF0aGlzLnF1ZXJ5c3RyaW5nKSByZXR1cm4gJyc7XG4gICAgcmV0dXJuIGA/JHt0aGlzLnF1ZXJ5c3RyaW5nfWA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldCB0aGUgc2VhcmNoIHN0cmluZy4gU2FtZSBhc1xuICAgKiByZXF1ZXN0LnF1ZXJ5c3RyaW5nPSBidXQgaW5jbHVkZWQgZm9yIHViaXF1aXR5LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHNldCBzZWFyY2goc3RyKSB7XG4gICAgdGhpcy5xdWVyeXN0cmluZyA9IHN0cjtcbiAgfSxcblxuICAvKipcbiAgICogUGFyc2UgdGhlIFwiSG9zdFwiIGhlYWRlciBmaWVsZCBob3N0XG4gICAqIGFuZCBzdXBwb3J0IFgtRm9yd2FyZGVkLUhvc3Qgd2hlbiBhXG4gICAqIHByb3h5IGlzIGVuYWJsZWQuXG4gICAqXG4gICAqIEByZXR1cm4ge1N0cmluZ30gaG9zdG5hbWU6cG9ydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBnZXQgaG9zdCgpIHtcbiAgICBjb25zdCBwcm94eSA9IHRoaXMuYXBwLnByb3h5O1xuICAgIGxldCBob3N0ID0gcHJveHkgJiYgdGhpcy5nZXQoJ1gtRm9yd2FyZGVkLUhvc3QnKTtcbiAgICBpZiAoIWhvc3QpIHtcbiAgICAgIGlmICh0aGlzLnJlcS5odHRwVmVyc2lvbk1ham9yID49IDIpIGhvc3QgPSB0aGlzLmdldCgnOmF1dGhvcml0eScpO1xuICAgICAgaWYgKCFob3N0KSBob3N0ID0gdGhpcy5nZXQoJ0hvc3QnKTtcbiAgICB9XG4gICAgaWYgKCFob3N0KSByZXR1cm4gJyc7XG4gICAgcmV0dXJuIGhvc3Quc3BsaXQoL1xccyosXFxzKi8sIDEpWzBdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgXCJIb3N0XCIgaGVhZGVyIGZpZWxkIGhvc3RuYW1lXG4gICAqIGFuZCBzdXBwb3J0IFgtRm9yd2FyZGVkLUhvc3Qgd2hlbiBhXG4gICAqIHByb3h5IGlzIGVuYWJsZWQuXG4gICAqXG4gICAqIEByZXR1cm4ge1N0cmluZ30gaG9zdG5hbWVcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZ2V0IGhvc3RuYW1lKCkge1xuICAgIGNvbnN0IGhvc3QgPSB0aGlzLmhvc3Q7XG4gICAgaWYgKCFob3N0KSByZXR1cm4gJyc7XG4gICAgaWYgKCdbJyA9PSBob3N0WzBdKSByZXR1cm4gdGhpcy5VUkwuaG9zdG5hbWUgfHwgJyc7IC8vIElQdjZcbiAgICByZXR1cm4gaG9zdC5zcGxpdCgnOicsIDEpWzBdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgV0hBVFdHIHBhcnNlZCBVUkwuXG4gICAqIExhemlseSBtZW1vaXplZC5cbiAgICpcbiAgICogQHJldHVybiB7VVJMfE9iamVjdH1cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZ2V0IFVSTCgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICghdGhpcy5tZW1vaXplZFVSTCkge1xuICAgICAgY29uc3Qgb3JpZ2luYWxVcmwgPSB0aGlzLm9yaWdpbmFsVXJsIHx8ICcnOyAvLyBhdm9pZCB1bmRlZmluZWQgaW4gdGVtcGxhdGUgc3RyaW5nXG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLm1lbW9pemVkVVJMID0gbmV3IFVSTChgJHt0aGlzLm9yaWdpbn0ke29yaWdpbmFsVXJsfWApO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRoaXMubWVtb2l6ZWRVUkwgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5tZW1vaXplZFVSTDtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIHJlcXVlc3QgaXMgZnJlc2gsIGFrYVxuICAgKiBMYXN0LU1vZGlmaWVkIGFuZC9vciB0aGUgRVRhZ1xuICAgKiBzdGlsbCBtYXRjaC5cbiAgICpcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZ2V0IGZyZXNoKCkge1xuICAgIGNvbnN0IG1ldGhvZCA9IHRoaXMubWV0aG9kO1xuICAgIGNvbnN0IHMgPSB0aGlzLmN0eC5zdGF0dXM7XG5cbiAgICAvLyBHRVQgb3IgSEVBRCBmb3Igd2VhayBmcmVzaG5lc3MgdmFsaWRhdGlvbiBvbmx5XG4gICAgaWYgKCdHRVQnICE9IG1ldGhvZCAmJiAnSEVBRCcgIT0gbWV0aG9kKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyAyeHggb3IgMzA0IGFzIHBlciByZmMyNjE2IDE0LjI2XG4gICAgaWYgKChzID49IDIwMCAmJiBzIDwgMzAwKSB8fCAzMDQgPT0gcykge1xuICAgICAgcmV0dXJuIGZyZXNoKHRoaXMuaGVhZGVyLCB0aGlzLnJlc3BvbnNlLmhlYWRlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgcmVxdWVzdCBpcyBzdGFsZSwgYWthXG4gICAqIFwiTGFzdC1Nb2RpZmllZFwiIGFuZCAvIG9yIHRoZSBcIkVUYWdcIiBmb3IgdGhlXG4gICAqIHJlc291cmNlIGhhcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBnZXQgc3RhbGUoKSB7XG4gICAgcmV0dXJuICF0aGlzLmZyZXNoO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgcmVxdWVzdCBpcyBpZGVtcG90ZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBnZXQgaWRlbXBvdGVudCgpIHtcbiAgICBjb25zdCBtZXRob2RzID0gWydHRVQnLCAnSEVBRCcsICdQVVQnLCAnREVMRVRFJywgJ09QVElPTlMnLCAnVFJBQ0UnXTtcbiAgICByZXR1cm4gISF+bWV0aG9kcy5pbmRleE9mKHRoaXMubWV0aG9kKTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSByZXF1ZXN0IHNvY2tldC5cbiAgICpcbiAgICogQHJldHVybiB7Q29ubmVjdGlvbn1cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZ2V0IHNvY2tldCgpIHtcbiAgICByZXR1cm4gdGhpcy5yZXEuc29ja2V0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGNoYXJzZXQgd2hlbiBwcmVzZW50IG9yIHVuZGVmaW5lZC5cbiAgICpcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBnZXQgY2hhcnNldCgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBwYXJhbWV0ZXJzIH0gPSBjb250ZW50VHlwZS5wYXJzZSh0aGlzLnJlcSk7XG4gICAgICByZXR1cm4gcGFyYW1ldGVycy5jaGFyc2V0IHx8ICcnO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybiBwYXJzZWQgQ29udGVudC1MZW5ndGggd2hlbiBwcmVzZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGdldCBsZW5ndGgoKSB7XG4gICAgY29uc3QgbGVuID0gdGhpcy5nZXQoJ0NvbnRlbnQtTGVuZ3RoJyk7XG4gICAgaWYgKGxlbiA9PSAnJykgcmV0dXJuO1xuICAgIHJldHVybiB+fmxlbjtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBwcm90b2NvbCBzdHJpbmcgXCJodHRwXCIgb3IgXCJodHRwc1wiXG4gICAqIHdoZW4gcmVxdWVzdGVkIHdpdGggVExTLiBXaGVuIHRoZSBwcm94eSBzZXR0aW5nXG4gICAqIGlzIGVuYWJsZWQgdGhlIFwiWC1Gb3J3YXJkZWQtUHJvdG9cIiBoZWFkZXJcbiAgICogZmllbGQgd2lsbCBiZSB0cnVzdGVkLiBJZiB5b3UncmUgcnVubmluZyBiZWhpbmRcbiAgICogYSByZXZlcnNlIHByb3h5IHRoYXQgc3VwcGxpZXMgaHR0cHMgZm9yIHlvdSB0aGlzXG4gICAqIG1heSBiZSBlbmFibGVkLlxuICAgKlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGdldCBwcm90b2NvbCgpIHtcbiAgICBpZiAodGhpcy5zb2NrZXQuZW5jcnlwdGVkKSByZXR1cm4gJ2h0dHBzJztcbiAgICBpZiAoIXRoaXMuYXBwLnByb3h5KSByZXR1cm4gJ2h0dHAnO1xuICAgIGNvbnN0IHByb3RvID0gdGhpcy5nZXQoJ1gtRm9yd2FyZGVkLVByb3RvJyk7XG4gICAgcmV0dXJuIHByb3RvID8gcHJvdG8uc3BsaXQoL1xccyosXFxzKi8sIDEpWzBdIDogJ2h0dHAnO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTaG9ydC1oYW5kIGZvcjpcbiAgICpcbiAgICogICAgdGhpcy5wcm90b2NvbCA9PSAnaHR0cHMnXG4gICAqXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGdldCBzZWN1cmUoKSB7XG4gICAgcmV0dXJuICdodHRwcycgPT0gdGhpcy5wcm90b2NvbDtcbiAgfSxcblxuICAvKipcbiAgICogV2hlbiBgYXBwLnByb3h5YCBpcyBgdHJ1ZWAsIHBhcnNlXG4gICAqIHRoZSBcIlgtRm9yd2FyZGVkLUZvclwiIGlwIGFkZHJlc3MgbGlzdC5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUgaWYgdGhlIHZhbHVlIHdlcmUgXCJjbGllbnQsIHByb3h5MSwgcHJveHkyXCJcbiAgICogeW91IHdvdWxkIHJlY2VpdmUgdGhlIGFycmF5IGBbXCJjbGllbnRcIiwgXCJwcm94eTFcIiwgXCJwcm94eTJcIl1gXG4gICAqIHdoZXJlIFwicHJveHkyXCIgaXMgdGhlIGZ1cnRoZXN0IGRvd24tc3RyZWFtLlxuICAgKlxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZ2V0IGlwcygpIHtcbiAgICBjb25zdCBwcm94eSA9IHRoaXMuYXBwLnByb3h5O1xuICAgIGNvbnN0IHZhbCA9IHRoaXMuZ2V0KHRoaXMuYXBwLnByb3h5SXBIZWFkZXIpO1xuICAgIGxldCBpcHMgPSBwcm94eSAmJiB2YWxcbiAgICAgID8gdmFsLnNwbGl0KC9cXHMqLFxccyovKVxuICAgICAgOiBbXTtcbiAgICBpZiAodGhpcy5hcHAubWF4SXBzQ291bnQgPiAwKSB7XG4gICAgICBpcHMgPSBpcHMuc2xpY2UoLXRoaXMuYXBwLm1heElwc0NvdW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGlwcztcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJuIHJlcXVlc3QncyByZW1vdGUgYWRkcmVzc1xuICAgKiBXaGVuIGBhcHAucHJveHlgIGlzIGB0cnVlYCwgcGFyc2VcbiAgICogdGhlIFwiWC1Gb3J3YXJkZWQtRm9yXCIgaXAgYWRkcmVzcyBsaXN0IGFuZCByZXR1cm4gdGhlIGZpcnN0IG9uZVxuICAgKlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGdldCBpcCgpIHtcbiAgICBpZiAoIXRoaXNbSVBdKSB7XG4gICAgICB0aGlzW0lQXSA9IHRoaXMuaXBzWzBdIHx8IHRoaXMuc29ja2V0LnJlbW90ZUFkZHJlc3MgfHwgJyc7XG4gICAgfVxuICAgIHJldHVybiB0aGlzW0lQXTtcbiAgfSxcblxuICBzZXQgaXAoX2lwKSB7XG4gICAgdGhpc1tJUF0gPSBfaXA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybiBzdWJkb21haW5zIGFzIGFuIGFycmF5LlxuICAgKlxuICAgKiBTdWJkb21haW5zIGFyZSB0aGUgZG90LXNlcGFyYXRlZCBwYXJ0cyBvZiB0aGUgaG9zdCBiZWZvcmUgdGhlIG1haW4gZG9tYWluXG4gICAqIG9mIHRoZSBhcHAuIEJ5IGRlZmF1bHQsIHRoZSBkb21haW4gb2YgdGhlIGFwcCBpcyBhc3N1bWVkIHRvIGJlIHRoZSBsYXN0IHR3b1xuICAgKiBwYXJ0cyBvZiB0aGUgaG9zdC4gVGhpcyBjYW4gYmUgY2hhbmdlZCBieSBzZXR0aW5nIGBhcHAuc3ViZG9tYWluT2Zmc2V0YC5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUsIGlmIHRoZSBkb21haW4gaXMgXCJ0b2JpLmZlcnJldHMuZXhhbXBsZS5jb21cIjpcbiAgICogSWYgYGFwcC5zdWJkb21haW5PZmZzZXRgIGlzIG5vdCBzZXQsIHRoaXMuc3ViZG9tYWlucyBpc1xuICAgKiBgW1wiZmVycmV0c1wiLCBcInRvYmlcIl1gLlxuICAgKiBJZiBgYXBwLnN1YmRvbWFpbk9mZnNldGAgaXMgMywgdGhpcy5zdWJkb21haW5zIGlzIGBbXCJ0b2JpXCJdYC5cbiAgICpcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGdldCBzdWJkb21haW5zKCkge1xuICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuYXBwLnN1YmRvbWFpbk9mZnNldDtcbiAgICBjb25zdCBob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWU7XG4gICAgaWYgKG5ldC5pc0lQKGhvc3RuYW1lKSkgcmV0dXJuIFtdO1xuICAgIHJldHVybiBob3N0bmFtZVxuICAgICAgLnNwbGl0KCcuJylcbiAgICAgIC5yZXZlcnNlKClcbiAgICAgIC5zbGljZShvZmZzZXQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgYWNjZXB0IG9iamVjdC5cbiAgICogTGF6aWx5IG1lbW9pemVkLlxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZ2V0IGFjY2VwdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWNjZXB0IHx8ICh0aGlzLl9hY2NlcHQgPSBhY2NlcHRzKHRoaXMucmVxKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldCBhY2NlcHQgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH1cbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBzZXQgYWNjZXB0KG9iaikge1xuICAgIHRoaXMuX2FjY2VwdCA9IG9iajtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIGB0eXBlKHMpYCBpcyBhY2NlcHRhYmxlLCByZXR1cm5pbmdcbiAgICogdGhlIGJlc3QgbWF0Y2ggd2hlbiB0cnVlLCBvdGhlcndpc2UgYGZhbHNlYCwgaW4gd2hpY2hcbiAgICogY2FzZSB5b3Ugc2hvdWxkIHJlc3BvbmQgd2l0aCA0MDYgXCJOb3QgQWNjZXB0YWJsZVwiLlxuICAgKlxuICAgKiBUaGUgYHR5cGVgIHZhbHVlIG1heSBiZSBhIHNpbmdsZSBtaW1lIHR5cGUgc3RyaW5nXG4gICAqIHN1Y2ggYXMgXCJhcHBsaWNhdGlvbi9qc29uXCIsIHRoZSBleHRlbnNpb24gbmFtZVxuICAgKiBzdWNoIGFzIFwianNvblwiIG9yIGFuIGFycmF5IGBbXCJqc29uXCIsIFwiaHRtbFwiLCBcInRleHQvcGxhaW5cIl1gLiBXaGVuIGEgbGlzdFxuICAgKiBvciBhcnJheSBpcyBnaXZlbiB0aGUgX2Jlc3RfIG1hdGNoLCBpZiBhbnkgaXMgcmV0dXJuZWQuXG4gICAqXG4gICAqIEV4YW1wbGVzOlxuICAgKlxuICAgKiAgICAgLy8gQWNjZXB0OiB0ZXh0L2h0bWxcbiAgICogICAgIHRoaXMuYWNjZXB0cygnaHRtbCcpO1xuICAgKiAgICAgLy8gPT4gXCJodG1sXCJcbiAgICpcbiAgICogICAgIC8vIEFjY2VwdDogdGV4dC8qLCBhcHBsaWNhdGlvbi9qc29uXG4gICAqICAgICB0aGlzLmFjY2VwdHMoJ2h0bWwnKTtcbiAgICogICAgIC8vID0+IFwiaHRtbFwiXG4gICAqICAgICB0aGlzLmFjY2VwdHMoJ3RleHQvaHRtbCcpO1xuICAgKiAgICAgLy8gPT4gXCJ0ZXh0L2h0bWxcIlxuICAgKiAgICAgdGhpcy5hY2NlcHRzKCdqc29uJywgJ3RleHQnKTtcbiAgICogICAgIC8vID0+IFwianNvblwiXG4gICAqICAgICB0aGlzLmFjY2VwdHMoJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICogICAgIC8vID0+IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAqXG4gICAqICAgICAvLyBBY2NlcHQ6IHRleHQvKiwgYXBwbGljYXRpb24vanNvblxuICAgKiAgICAgdGhpcy5hY2NlcHRzKCdpbWFnZS9wbmcnKTtcbiAgICogICAgIHRoaXMuYWNjZXB0cygncG5nJyk7XG4gICAqICAgICAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiAgICAgLy8gQWNjZXB0OiB0ZXh0Lyo7cT0uNSwgYXBwbGljYXRpb24vanNvblxuICAgKiAgICAgdGhpcy5hY2NlcHRzKFsnaHRtbCcsICdqc29uJ10pO1xuICAgKiAgICAgdGhpcy5hY2NlcHRzKCdodG1sJywgJ2pzb24nKTtcbiAgICogICAgIC8vID0+IFwianNvblwiXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSB0eXBlKHMpLi4uXG4gICAqIEByZXR1cm4ge1N0cmluZ3xBcnJheXxmYWxzZX1cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYWNjZXB0cyguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuYWNjZXB0LnR5cGVzKC4uLmFyZ3MpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYWNjZXB0ZWQgZW5jb2RpbmdzIG9yIGJlc3QgZml0IGJhc2VkIG9uIGBlbmNvZGluZ3NgLlxuICAgKlxuICAgKiBHaXZlbiBgQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlYFxuICAgKiBhbiBhcnJheSBzb3J0ZWQgYnkgcXVhbGl0eSBpcyByZXR1cm5lZDpcbiAgICpcbiAgICogICAgIFsnZ3ppcCcsICdkZWZsYXRlJ11cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGVuY29kaW5nKHMpLi4uXG4gICAqIEByZXR1cm4ge1N0cmluZ3xBcnJheX1cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYWNjZXB0c0VuY29kaW5ncyguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuYWNjZXB0LmVuY29kaW5ncyguLi5hcmdzKTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJuIGFjY2VwdGVkIGNoYXJzZXRzIG9yIGJlc3QgZml0IGJhc2VkIG9uIGBjaGFyc2V0c2AuXG4gICAqXG4gICAqIEdpdmVuIGBBY2NlcHQtQ2hhcnNldDogdXRmLTgsIGlzby04ODU5LTE7cT0wLjIsIHV0Zi03O3E9MC41YFxuICAgKiBhbiBhcnJheSBzb3J0ZWQgYnkgcXVhbGl0eSBpcyByZXR1cm5lZDpcbiAgICpcbiAgICogICAgIFsndXRmLTgnLCAndXRmLTcnLCAnaXNvLTg4NTktMSddXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBjaGFyc2V0KHMpLi4uXG4gICAqIEByZXR1cm4ge1N0cmluZ3xBcnJheX1cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYWNjZXB0c0NoYXJzZXRzKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5hY2NlcHQuY2hhcnNldHMoLi4uYXJncyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybiBhY2NlcHRlZCBsYW5ndWFnZXMgb3IgYmVzdCBmaXQgYmFzZWQgb24gYGxhbmdzYC5cbiAgICpcbiAgICogR2l2ZW4gYEFjY2VwdC1MYW5ndWFnZTogZW47cT0wLjgsIGVzLCBwdGBcbiAgICogYW4gYXJyYXkgc29ydGVkIGJ5IHF1YWxpdHkgaXMgcmV0dXJuZWQ6XG4gICAqXG4gICAqICAgICBbJ2VzJywgJ3B0JywgJ2VuJ11cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGxhbmcocykuLi5cbiAgICogQHJldHVybiB7QXJyYXl8U3RyaW5nfVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhY2NlcHRzTGFuZ3VhZ2VzKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5hY2NlcHQubGFuZ3VhZ2VzKC4uLmFyZ3MpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgaW5jb21pbmcgcmVxdWVzdCBjb250YWlucyB0aGUgXCJDb250ZW50LVR5cGVcIlxuICAgKiBoZWFkZXIgZmllbGQsIGFuZCBpdCBjb250YWlucyBhbnkgb2YgdGhlIGdpdmUgbWltZSBgdHlwZWBzLlxuICAgKiBJZiB0aGVyZSBpcyBubyByZXF1ZXN0IGJvZHksIGBudWxsYCBpcyByZXR1cm5lZC5cbiAgICogSWYgdGhlcmUgaXMgbm8gY29udGVudCB0eXBlLCBgZmFsc2VgIGlzIHJldHVybmVkLlxuICAgKiBPdGhlcndpc2UsIGl0IHJldHVybnMgdGhlIGZpcnN0IGB0eXBlYCB0aGF0IG1hdGNoZXMuXG4gICAqXG4gICAqIEV4YW1wbGVzOlxuICAgKlxuICAgKiAgICAgLy8gV2l0aCBDb250ZW50LVR5cGU6IHRleHQvaHRtbDsgY2hhcnNldD11dGYtOFxuICAgKiAgICAgdGhpcy5pcygnaHRtbCcpOyAvLyA9PiAnaHRtbCdcbiAgICogICAgIHRoaXMuaXMoJ3RleHQvaHRtbCcpOyAvLyA9PiAndGV4dC9odG1sJ1xuICAgKiAgICAgdGhpcy5pcygndGV4dC8qJywgJ2FwcGxpY2F0aW9uL2pzb24nKTsgLy8gPT4gJ3RleHQvaHRtbCdcbiAgICpcbiAgICogICAgIC8vIFdoZW4gQ29udGVudC1UeXBlIGlzIGFwcGxpY2F0aW9uL2pzb25cbiAgICogICAgIHRoaXMuaXMoJ2pzb24nLCAndXJsZW5jb2RlZCcpOyAvLyA9PiAnanNvbidcbiAgICogICAgIHRoaXMuaXMoJ2FwcGxpY2F0aW9uL2pzb24nKTsgLy8gPT4gJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAqICAgICB0aGlzLmlzKCdodG1sJywgJ2FwcGxpY2F0aW9uLyonKTsgLy8gPT4gJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAqXG4gICAqICAgICB0aGlzLmlzKCdodG1sJyk7IC8vID0+IGZhbHNlXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfFN0cmluZ1tdfSBbdHlwZV1cbiAgICogQHBhcmFtIHtTdHJpbmdbXX0gW3R5cGVzXVxuICAgKiBAcmV0dXJuIHtTdHJpbmd8ZmFsc2V8bnVsbH1cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgaXModHlwZSwgLi4udHlwZXMpIHtcbiAgICByZXR1cm4gdHlwZWlzKHRoaXMucmVxLCB0eXBlLCAuLi50eXBlcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgcmVxdWVzdCBtaW1lIHR5cGUgdm9pZCBvZlxuICAgKiBwYXJhbWV0ZXJzIHN1Y2ggYXMgXCJjaGFyc2V0XCIuXG4gICAqXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZ2V0IHR5cGUoKSB7XG4gICAgY29uc3QgdHlwZSA9IHRoaXMuZ2V0KCdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAoIXR5cGUpIHJldHVybiAnJztcbiAgICByZXR1cm4gdHlwZS5zcGxpdCgnOycpWzBdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm4gcmVxdWVzdCBoZWFkZXIuXG4gICAqXG4gICAqIFRoZSBgUmVmZXJyZXJgIGhlYWRlciBmaWVsZCBpcyBzcGVjaWFsLWNhc2VkLFxuICAgKiBib3RoIGBSZWZlcnJlcmAgYW5kIGBSZWZlcmVyYCBhcmUgaW50ZXJjaGFuZ2VhYmxlLlxuICAgKlxuICAgKiBFeGFtcGxlczpcbiAgICpcbiAgICogICAgIHRoaXMuZ2V0KCdDb250ZW50LVR5cGUnKTtcbiAgICogICAgIC8vID0+IFwidGV4dC9wbGFpblwiXG4gICAqXG4gICAqICAgICB0aGlzLmdldCgnY29udGVudC10eXBlJyk7XG4gICAqICAgICAvLyA9PiBcInRleHQvcGxhaW5cIlxuICAgKlxuICAgKiAgICAgdGhpcy5nZXQoJ1NvbWV0aGluZycpO1xuICAgKiAgICAgLy8gPT4gJydcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZ2V0KGZpZWxkKSB7XG4gICAgY29uc3QgcmVxID0gdGhpcy5yZXE7XG4gICAgc3dpdGNoIChmaWVsZCA9IGZpZWxkLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGNhc2UgJ3JlZmVyZXInOlxuICAgICAgY2FzZSAncmVmZXJyZXInOlxuICAgICAgICByZXR1cm4gcmVxLmhlYWRlcnMucmVmZXJyZXIgfHwgcmVxLmhlYWRlcnMucmVmZXJlciB8fCAnJztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiByZXEuaGVhZGVyc1tmaWVsZF0gfHwgJyc7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBJbnNwZWN0IGltcGxlbWVudGF0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGluc3BlY3QoKSB7XG4gICAgaWYgKCF0aGlzLnJlcSkgcmV0dXJuO1xuICAgIHJldHVybiB0aGlzLnRvSlNPTigpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm4gSlNPTiByZXByZXNlbnRhdGlvbi5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIG9ubHkodGhpcywgW1xuICAgICAgJ21ldGhvZCcsXG4gICAgICAndXJsJyxcbiAgICAgICdoZWFkZXInXG4gICAgXSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ3VzdG9tIGluc3BlY3Rpb24gaW1wbGVtZW50YXRpb24gZm9yIG5ld2VyIE5vZGUuanMgdmVyc2lvbnMuXG4gKlxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuaWYgKHV0aWwuaW5zcGVjdC5jdXN0b20pIHtcbiAgbW9kdWxlLmV4cG9ydHNbdXRpbC5pbnNwZWN0LmN1c3RvbV0gPSBtb2R1bGUuZXhwb3J0cy5pbnNwZWN0O1xufVxuIiwiLyohXG4gKiBuZWdvdGlhdG9yXG4gKiBDb3B5cmlnaHQoYykgMjAxMiBGZWRlcmljbyBSb21lcm9cbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSXNhYWMgWi4gU2NobHVldGVyXG4gKiBDb3B5cmlnaHQoYykgMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENhY2hlZCBsb2FkZWQgc3VibW9kdWxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIG1vZHVsZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gTmVnb3RpYXRvcjtcbm1vZHVsZS5leHBvcnRzLk5lZ290aWF0b3IgPSBOZWdvdGlhdG9yO1xuXG4vKipcbiAqIENyZWF0ZSBhIE5lZ290aWF0b3IgaW5zdGFuY2UgZnJvbSBhIHJlcXVlc3QuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVxdWVzdFxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIE5lZ290aWF0b3IocmVxdWVzdCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTmVnb3RpYXRvcikpIHtcbiAgICByZXR1cm4gbmV3IE5lZ290aWF0b3IocmVxdWVzdCk7XG4gIH1cblxuICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0O1xufVxuXG5OZWdvdGlhdG9yLnByb3RvdHlwZS5jaGFyc2V0ID0gZnVuY3Rpb24gY2hhcnNldChhdmFpbGFibGUpIHtcbiAgdmFyIHNldCA9IHRoaXMuY2hhcnNldHMoYXZhaWxhYmxlKTtcbiAgcmV0dXJuIHNldCAmJiBzZXRbMF07XG59O1xuXG5OZWdvdGlhdG9yLnByb3RvdHlwZS5jaGFyc2V0cyA9IGZ1bmN0aW9uIGNoYXJzZXRzKGF2YWlsYWJsZSkge1xuICB2YXIgcHJlZmVycmVkQ2hhcnNldHMgPSBsb2FkTW9kdWxlKCdjaGFyc2V0JykucHJlZmVycmVkQ2hhcnNldHM7XG4gIHJldHVybiBwcmVmZXJyZWRDaGFyc2V0cyh0aGlzLnJlcXVlc3QuaGVhZGVyc1snYWNjZXB0LWNoYXJzZXQnXSwgYXZhaWxhYmxlKTtcbn07XG5cbk5lZ290aWF0b3IucHJvdG90eXBlLmVuY29kaW5nID0gZnVuY3Rpb24gZW5jb2RpbmcoYXZhaWxhYmxlKSB7XG4gIHZhciBzZXQgPSB0aGlzLmVuY29kaW5ncyhhdmFpbGFibGUpO1xuICByZXR1cm4gc2V0ICYmIHNldFswXTtcbn07XG5cbk5lZ290aWF0b3IucHJvdG90eXBlLmVuY29kaW5ncyA9IGZ1bmN0aW9uIGVuY29kaW5ncyhhdmFpbGFibGUpIHtcbiAgdmFyIHByZWZlcnJlZEVuY29kaW5ncyA9IGxvYWRNb2R1bGUoJ2VuY29kaW5nJykucHJlZmVycmVkRW5jb2RpbmdzO1xuICByZXR1cm4gcHJlZmVycmVkRW5jb2RpbmdzKHRoaXMucmVxdWVzdC5oZWFkZXJzWydhY2NlcHQtZW5jb2RpbmcnXSwgYXZhaWxhYmxlKTtcbn07XG5cbk5lZ290aWF0b3IucHJvdG90eXBlLmxhbmd1YWdlID0gZnVuY3Rpb24gbGFuZ3VhZ2UoYXZhaWxhYmxlKSB7XG4gIHZhciBzZXQgPSB0aGlzLmxhbmd1YWdlcyhhdmFpbGFibGUpO1xuICByZXR1cm4gc2V0ICYmIHNldFswXTtcbn07XG5cbk5lZ290aWF0b3IucHJvdG90eXBlLmxhbmd1YWdlcyA9IGZ1bmN0aW9uIGxhbmd1YWdlcyhhdmFpbGFibGUpIHtcbiAgdmFyIHByZWZlcnJlZExhbmd1YWdlcyA9IGxvYWRNb2R1bGUoJ2xhbmd1YWdlJykucHJlZmVycmVkTGFuZ3VhZ2VzO1xuICByZXR1cm4gcHJlZmVycmVkTGFuZ3VhZ2VzKHRoaXMucmVxdWVzdC5oZWFkZXJzWydhY2NlcHQtbGFuZ3VhZ2UnXSwgYXZhaWxhYmxlKTtcbn07XG5cbk5lZ290aWF0b3IucHJvdG90eXBlLm1lZGlhVHlwZSA9IGZ1bmN0aW9uIG1lZGlhVHlwZShhdmFpbGFibGUpIHtcbiAgdmFyIHNldCA9IHRoaXMubWVkaWFUeXBlcyhhdmFpbGFibGUpO1xuICByZXR1cm4gc2V0ICYmIHNldFswXTtcbn07XG5cbk5lZ290aWF0b3IucHJvdG90eXBlLm1lZGlhVHlwZXMgPSBmdW5jdGlvbiBtZWRpYVR5cGVzKGF2YWlsYWJsZSkge1xuICB2YXIgcHJlZmVycmVkTWVkaWFUeXBlcyA9IGxvYWRNb2R1bGUoJ21lZGlhVHlwZScpLnByZWZlcnJlZE1lZGlhVHlwZXM7XG4gIHJldHVybiBwcmVmZXJyZWRNZWRpYVR5cGVzKHRoaXMucmVxdWVzdC5oZWFkZXJzLmFjY2VwdCwgYXZhaWxhYmxlKTtcbn07XG5cbi8vIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5OZWdvdGlhdG9yLnByb3RvdHlwZS5wcmVmZXJyZWRDaGFyc2V0ID0gTmVnb3RpYXRvci5wcm90b3R5cGUuY2hhcnNldDtcbk5lZ290aWF0b3IucHJvdG90eXBlLnByZWZlcnJlZENoYXJzZXRzID0gTmVnb3RpYXRvci5wcm90b3R5cGUuY2hhcnNldHM7XG5OZWdvdGlhdG9yLnByb3RvdHlwZS5wcmVmZXJyZWRFbmNvZGluZyA9IE5lZ290aWF0b3IucHJvdG90eXBlLmVuY29kaW5nO1xuTmVnb3RpYXRvci5wcm90b3R5cGUucHJlZmVycmVkRW5jb2RpbmdzID0gTmVnb3RpYXRvci5wcm90b3R5cGUuZW5jb2RpbmdzO1xuTmVnb3RpYXRvci5wcm90b3R5cGUucHJlZmVycmVkTGFuZ3VhZ2UgPSBOZWdvdGlhdG9yLnByb3RvdHlwZS5sYW5ndWFnZTtcbk5lZ290aWF0b3IucHJvdG90eXBlLnByZWZlcnJlZExhbmd1YWdlcyA9IE5lZ290aWF0b3IucHJvdG90eXBlLmxhbmd1YWdlcztcbk5lZ290aWF0b3IucHJvdG90eXBlLnByZWZlcnJlZE1lZGlhVHlwZSA9IE5lZ290aWF0b3IucHJvdG90eXBlLm1lZGlhVHlwZTtcbk5lZ290aWF0b3IucHJvdG90eXBlLnByZWZlcnJlZE1lZGlhVHlwZXMgPSBOZWdvdGlhdG9yLnByb3RvdHlwZS5tZWRpYVR5cGVzO1xuXG4vKipcbiAqIExvYWQgdGhlIGdpdmVuIG1vZHVsZS5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZE1vZHVsZShtb2R1bGVOYW1lKSB7XG4gIHZhciBtb2R1bGUgPSBtb2R1bGVzW21vZHVsZU5hbWVdO1xuXG4gIGlmIChtb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBtb2R1bGU7XG4gIH1cblxuICAvLyBUaGlzIHVzZXMgYSBzd2l0Y2ggZm9yIHN0YXRpYyByZXF1aXJlIGFuYWx5c2lzXG4gIHN3aXRjaCAobW9kdWxlTmFtZSkge1xuICAgIGNhc2UgJ2NoYXJzZXQnOlxuICAgICAgbW9kdWxlID0gcmVxdWlyZSgnLi9saWIvY2hhcnNldCcpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZW5jb2RpbmcnOlxuICAgICAgbW9kdWxlID0gcmVxdWlyZSgnLi9saWIvZW5jb2RpbmcnKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2xhbmd1YWdlJzpcbiAgICAgIG1vZHVsZSA9IHJlcXVpcmUoJy4vbGliL2xhbmd1YWdlJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdtZWRpYVR5cGUnOlxuICAgICAgbW9kdWxlID0gcmVxdWlyZSgnLi9saWIvbWVkaWFUeXBlJyk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBtb2R1bGUgXFwnJyArIG1vZHVsZU5hbWUgKyAnXFwnJyk7XG4gIH1cblxuICAvLyBTdG9yZSB0byBwcmV2ZW50IGludm9raW5nIHJlcXVpcmUoKVxuICBtb2R1bGVzW21vZHVsZU5hbWVdID0gbW9kdWxlO1xuXG4gIHJldHVybiBtb2R1bGU7XG59XG4iLCIvKipcbiAqIG5lZ290aWF0b3JcbiAqIENvcHlyaWdodChjKSAyMDEyIElzYWFjIFouIFNjaGx1ZXRlclxuICogQ29weXJpZ2h0KGMpIDIwMTQgRmVkZXJpY28gUm9tZXJvXG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBwcmVmZXJyZWRDaGFyc2V0cztcbm1vZHVsZS5leHBvcnRzLnByZWZlcnJlZENoYXJzZXRzID0gcHJlZmVycmVkQ2hhcnNldHM7XG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIHNpbXBsZUNoYXJzZXRSZWdFeHAgPSAvXlxccyooW15cXHM7XSspXFxzKig/OjsoLiopKT8kLztcblxuLyoqXG4gKiBQYXJzZSB0aGUgQWNjZXB0LUNoYXJzZXQgaGVhZGVyLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZUFjY2VwdENoYXJzZXQoYWNjZXB0KSB7XG4gIHZhciBhY2NlcHRzID0gYWNjZXB0LnNwbGl0KCcsJyk7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGogPSAwOyBpIDwgYWNjZXB0cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjaGFyc2V0ID0gcGFyc2VDaGFyc2V0KGFjY2VwdHNbaV0udHJpbSgpLCBpKTtcblxuICAgIGlmIChjaGFyc2V0KSB7XG4gICAgICBhY2NlcHRzW2orK10gPSBjaGFyc2V0O1xuICAgIH1cbiAgfVxuXG4gIC8vIHRyaW0gYWNjZXB0c1xuICBhY2NlcHRzLmxlbmd0aCA9IGo7XG5cbiAgcmV0dXJuIGFjY2VwdHM7XG59XG5cbi8qKlxuICogUGFyc2UgYSBjaGFyc2V0IGZyb20gdGhlIEFjY2VwdC1DaGFyc2V0IGhlYWRlci5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VDaGFyc2V0KHN0ciwgaSkge1xuICB2YXIgbWF0Y2ggPSBzaW1wbGVDaGFyc2V0UmVnRXhwLmV4ZWMoc3RyKTtcbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIGNoYXJzZXQgPSBtYXRjaFsxXTtcbiAgdmFyIHEgPSAxO1xuICBpZiAobWF0Y2hbMl0pIHtcbiAgICB2YXIgcGFyYW1zID0gbWF0Y2hbMl0uc3BsaXQoJzsnKVxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcGFyYW1zLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgcCA9IHBhcmFtc1tqXS50cmltKCkuc3BsaXQoJz0nKTtcbiAgICAgIGlmIChwWzBdID09PSAncScpIHtcbiAgICAgICAgcSA9IHBhcnNlRmxvYXQocFsxXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY2hhcnNldDogY2hhcnNldCxcbiAgICBxOiBxLFxuICAgIGk6IGlcbiAgfTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHByaW9yaXR5IG9mIGEgY2hhcnNldC5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZ2V0Q2hhcnNldFByaW9yaXR5KGNoYXJzZXQsIGFjY2VwdGVkLCBpbmRleCkge1xuICB2YXIgcHJpb3JpdHkgPSB7bzogLTEsIHE6IDAsIHM6IDB9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYWNjZXB0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3BlYyA9IHNwZWNpZnkoY2hhcnNldCwgYWNjZXB0ZWRbaV0sIGluZGV4KTtcblxuICAgIGlmIChzcGVjICYmIChwcmlvcml0eS5zIC0gc3BlYy5zIHx8IHByaW9yaXR5LnEgLSBzcGVjLnEgfHwgcHJpb3JpdHkubyAtIHNwZWMubykgPCAwKSB7XG4gICAgICBwcmlvcml0eSA9IHNwZWM7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHByaW9yaXR5O1xufVxuXG4vKipcbiAqIEdldCB0aGUgc3BlY2lmaWNpdHkgb2YgdGhlIGNoYXJzZXQuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNwZWNpZnkoY2hhcnNldCwgc3BlYywgaW5kZXgpIHtcbiAgdmFyIHMgPSAwO1xuICBpZihzcGVjLmNoYXJzZXQudG9Mb3dlckNhc2UoKSA9PT0gY2hhcnNldC50b0xvd2VyQ2FzZSgpKXtcbiAgICBzIHw9IDE7XG4gIH0gZWxzZSBpZiAoc3BlYy5jaGFyc2V0ICE9PSAnKicgKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaTogaW5kZXgsXG4gICAgbzogc3BlYy5pLFxuICAgIHE6IHNwZWMucSxcbiAgICBzOiBzXG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIHByZWZlcnJlZCBjaGFyc2V0cyBmcm9tIGFuIEFjY2VwdC1DaGFyc2V0IGhlYWRlci5cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBwcmVmZXJyZWRDaGFyc2V0cyhhY2NlcHQsIHByb3ZpZGVkKSB7XG4gIC8vIFJGQyAyNjE2IHNlYyAxNC4yOiBubyBoZWFkZXIgPSAqXG4gIHZhciBhY2NlcHRzID0gcGFyc2VBY2NlcHRDaGFyc2V0KGFjY2VwdCA9PT0gdW5kZWZpbmVkID8gJyonIDogYWNjZXB0IHx8ICcnKTtcblxuICBpZiAoIXByb3ZpZGVkKSB7XG4gICAgLy8gc29ydGVkIGxpc3Qgb2YgYWxsIGNoYXJzZXRzXG4gICAgcmV0dXJuIGFjY2VwdHNcbiAgICAgIC5maWx0ZXIoaXNRdWFsaXR5KVxuICAgICAgLnNvcnQoY29tcGFyZVNwZWNzKVxuICAgICAgLm1hcChnZXRGdWxsQ2hhcnNldCk7XG4gIH1cblxuICB2YXIgcHJpb3JpdGllcyA9IHByb3ZpZGVkLm1hcChmdW5jdGlvbiBnZXRQcmlvcml0eSh0eXBlLCBpbmRleCkge1xuICAgIHJldHVybiBnZXRDaGFyc2V0UHJpb3JpdHkodHlwZSwgYWNjZXB0cywgaW5kZXgpO1xuICB9KTtcblxuICAvLyBzb3J0ZWQgbGlzdCBvZiBhY2NlcHRlZCBjaGFyc2V0c1xuICByZXR1cm4gcHJpb3JpdGllcy5maWx0ZXIoaXNRdWFsaXR5KS5zb3J0KGNvbXBhcmVTcGVjcykubWFwKGZ1bmN0aW9uIGdldENoYXJzZXQocHJpb3JpdHkpIHtcbiAgICByZXR1cm4gcHJvdmlkZWRbcHJpb3JpdGllcy5pbmRleE9mKHByaW9yaXR5KV07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbXBhcmUgdHdvIHNwZWNzLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb21wYXJlU3BlY3MoYSwgYikge1xuICByZXR1cm4gKGIucSAtIGEucSkgfHwgKGIucyAtIGEucykgfHwgKGEubyAtIGIubykgfHwgKGEuaSAtIGIuaSkgfHwgMDtcbn1cblxuLyoqXG4gKiBHZXQgZnVsbCBjaGFyc2V0IHN0cmluZy5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZ2V0RnVsbENoYXJzZXQoc3BlYykge1xuICByZXR1cm4gc3BlYy5jaGFyc2V0O1xufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgc3BlYyBoYXMgYW55IHF1YWxpdHkuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGlzUXVhbGl0eShzcGVjKSB7XG4gIHJldHVybiBzcGVjLnEgPiAwO1xufVxuIiwiLyoqXG4gKiBuZWdvdGlhdG9yXG4gKiBDb3B5cmlnaHQoYykgMjAxMiBJc2FhYyBaLiBTY2hsdWV0ZXJcbiAqIENvcHlyaWdodChjKSAyMDE0IEZlZGVyaWNvIFJvbWVyb1xuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcHJlZmVycmVkRW5jb2RpbmdzO1xubW9kdWxlLmV4cG9ydHMucHJlZmVycmVkRW5jb2RpbmdzID0gcHJlZmVycmVkRW5jb2RpbmdzO1xuXG4vKipcbiAqIE1vZHVsZSB2YXJpYWJsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBzaW1wbGVFbmNvZGluZ1JlZ0V4cCA9IC9eXFxzKihbXlxccztdKylcXHMqKD86OyguKikpPyQvO1xuXG4vKipcbiAqIFBhcnNlIHRoZSBBY2NlcHQtRW5jb2RpbmcgaGVhZGVyLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZUFjY2VwdEVuY29kaW5nKGFjY2VwdCkge1xuICB2YXIgYWNjZXB0cyA9IGFjY2VwdC5zcGxpdCgnLCcpO1xuICB2YXIgaGFzSWRlbnRpdHkgPSBmYWxzZTtcbiAgdmFyIG1pblF1YWxpdHkgPSAxO1xuXG4gIGZvciAodmFyIGkgPSAwLCBqID0gMDsgaSA8IGFjY2VwdHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZW5jb2RpbmcgPSBwYXJzZUVuY29kaW5nKGFjY2VwdHNbaV0udHJpbSgpLCBpKTtcblxuICAgIGlmIChlbmNvZGluZykge1xuICAgICAgYWNjZXB0c1tqKytdID0gZW5jb2Rpbmc7XG4gICAgICBoYXNJZGVudGl0eSA9IGhhc0lkZW50aXR5IHx8IHNwZWNpZnkoJ2lkZW50aXR5JywgZW5jb2RpbmcpO1xuICAgICAgbWluUXVhbGl0eSA9IE1hdGgubWluKG1pblF1YWxpdHksIGVuY29kaW5nLnEgfHwgMSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFoYXNJZGVudGl0eSkge1xuICAgIC8qXG4gICAgICogSWYgaWRlbnRpdHkgZG9lc24ndCBleHBsaWNpdGx5IGFwcGVhciBpbiB0aGUgYWNjZXB0LWVuY29kaW5nIGhlYWRlcixcbiAgICAgKiBpdCdzIGFkZGVkIHRvIHRoZSBsaXN0IG9mIGFjY2VwdGFibGUgZW5jb2Rpbmcgd2l0aCB0aGUgbG93ZXN0IHFcbiAgICAgKi9cbiAgICBhY2NlcHRzW2orK10gPSB7XG4gICAgICBlbmNvZGluZzogJ2lkZW50aXR5JyxcbiAgICAgIHE6IG1pblF1YWxpdHksXG4gICAgICBpOiBpXG4gICAgfTtcbiAgfVxuXG4gIC8vIHRyaW0gYWNjZXB0c1xuICBhY2NlcHRzLmxlbmd0aCA9IGo7XG5cbiAgcmV0dXJuIGFjY2VwdHM7XG59XG5cbi8qKlxuICogUGFyc2UgYW4gZW5jb2RpbmcgZnJvbSB0aGUgQWNjZXB0LUVuY29kaW5nIGhlYWRlci5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VFbmNvZGluZyhzdHIsIGkpIHtcbiAgdmFyIG1hdGNoID0gc2ltcGxlRW5jb2RpbmdSZWdFeHAuZXhlYyhzdHIpO1xuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuICB2YXIgZW5jb2RpbmcgPSBtYXRjaFsxXTtcbiAgdmFyIHEgPSAxO1xuICBpZiAobWF0Y2hbMl0pIHtcbiAgICB2YXIgcGFyYW1zID0gbWF0Y2hbMl0uc3BsaXQoJzsnKTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBhcmFtcy5sZW5ndGg7IGorKykge1xuICAgICAgdmFyIHAgPSBwYXJhbXNbal0udHJpbSgpLnNwbGl0KCc9Jyk7XG4gICAgICBpZiAocFswXSA9PT0gJ3EnKSB7XG4gICAgICAgIHEgPSBwYXJzZUZsb2F0KHBbMV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGVuY29kaW5nOiBlbmNvZGluZyxcbiAgICBxOiBxLFxuICAgIGk6IGlcbiAgfTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHByaW9yaXR5IG9mIGFuIGVuY29kaW5nLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXRFbmNvZGluZ1ByaW9yaXR5KGVuY29kaW5nLCBhY2NlcHRlZCwgaW5kZXgpIHtcbiAgdmFyIHByaW9yaXR5ID0ge286IC0xLCBxOiAwLCBzOiAwfTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFjY2VwdGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNwZWMgPSBzcGVjaWZ5KGVuY29kaW5nLCBhY2NlcHRlZFtpXSwgaW5kZXgpO1xuXG4gICAgaWYgKHNwZWMgJiYgKHByaW9yaXR5LnMgLSBzcGVjLnMgfHwgcHJpb3JpdHkucSAtIHNwZWMucSB8fCBwcmlvcml0eS5vIC0gc3BlYy5vKSA8IDApIHtcbiAgICAgIHByaW9yaXR5ID0gc3BlYztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcHJpb3JpdHk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBzcGVjaWZpY2l0eSBvZiB0aGUgZW5jb2RpbmcuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNwZWNpZnkoZW5jb2RpbmcsIHNwZWMsIGluZGV4KSB7XG4gIHZhciBzID0gMDtcbiAgaWYoc3BlYy5lbmNvZGluZy50b0xvd2VyQ2FzZSgpID09PSBlbmNvZGluZy50b0xvd2VyQ2FzZSgpKXtcbiAgICBzIHw9IDE7XG4gIH0gZWxzZSBpZiAoc3BlYy5lbmNvZGluZyAhPT0gJyonICkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGk6IGluZGV4LFxuICAgIG86IHNwZWMuaSxcbiAgICBxOiBzcGVjLnEsXG4gICAgczogc1xuICB9XG59O1xuXG4vKipcbiAqIEdldCB0aGUgcHJlZmVycmVkIGVuY29kaW5ncyBmcm9tIGFuIEFjY2VwdC1FbmNvZGluZyBoZWFkZXIuXG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gcHJlZmVycmVkRW5jb2RpbmdzKGFjY2VwdCwgcHJvdmlkZWQpIHtcbiAgdmFyIGFjY2VwdHMgPSBwYXJzZUFjY2VwdEVuY29kaW5nKGFjY2VwdCB8fCAnJyk7XG5cbiAgaWYgKCFwcm92aWRlZCkge1xuICAgIC8vIHNvcnRlZCBsaXN0IG9mIGFsbCBlbmNvZGluZ3NcbiAgICByZXR1cm4gYWNjZXB0c1xuICAgICAgLmZpbHRlcihpc1F1YWxpdHkpXG4gICAgICAuc29ydChjb21wYXJlU3BlY3MpXG4gICAgICAubWFwKGdldEZ1bGxFbmNvZGluZyk7XG4gIH1cblxuICB2YXIgcHJpb3JpdGllcyA9IHByb3ZpZGVkLm1hcChmdW5jdGlvbiBnZXRQcmlvcml0eSh0eXBlLCBpbmRleCkge1xuICAgIHJldHVybiBnZXRFbmNvZGluZ1ByaW9yaXR5KHR5cGUsIGFjY2VwdHMsIGluZGV4KTtcbiAgfSk7XG5cbiAgLy8gc29ydGVkIGxpc3Qgb2YgYWNjZXB0ZWQgZW5jb2RpbmdzXG4gIHJldHVybiBwcmlvcml0aWVzLmZpbHRlcihpc1F1YWxpdHkpLnNvcnQoY29tcGFyZVNwZWNzKS5tYXAoZnVuY3Rpb24gZ2V0RW5jb2RpbmcocHJpb3JpdHkpIHtcbiAgICByZXR1cm4gcHJvdmlkZWRbcHJpb3JpdGllcy5pbmRleE9mKHByaW9yaXR5KV07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbXBhcmUgdHdvIHNwZWNzLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb21wYXJlU3BlY3MoYSwgYikge1xuICByZXR1cm4gKGIucSAtIGEucSkgfHwgKGIucyAtIGEucykgfHwgKGEubyAtIGIubykgfHwgKGEuaSAtIGIuaSkgfHwgMDtcbn1cblxuLyoqXG4gKiBHZXQgZnVsbCBlbmNvZGluZyBzdHJpbmcuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGdldEZ1bGxFbmNvZGluZyhzcGVjKSB7XG4gIHJldHVybiBzcGVjLmVuY29kaW5nO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgc3BlYyBoYXMgYW55IHF1YWxpdHkuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGlzUXVhbGl0eShzcGVjKSB7XG4gIHJldHVybiBzcGVjLnEgPiAwO1xufVxuIiwiLyoqXG4gKiBuZWdvdGlhdG9yXG4gKiBDb3B5cmlnaHQoYykgMjAxMiBJc2FhYyBaLiBTY2hsdWV0ZXJcbiAqIENvcHlyaWdodChjKSAyMDE0IEZlZGVyaWNvIFJvbWVyb1xuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcHJlZmVycmVkTGFuZ3VhZ2VzO1xubW9kdWxlLmV4cG9ydHMucHJlZmVycmVkTGFuZ3VhZ2VzID0gcHJlZmVycmVkTGFuZ3VhZ2VzO1xuXG4vKipcbiAqIE1vZHVsZSB2YXJpYWJsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBzaW1wbGVMYW5ndWFnZVJlZ0V4cCA9IC9eXFxzKihbXlxcc1xcLTtdKykoPzotKFteXFxzO10rKSk/XFxzKig/OjsoLiopKT8kLztcblxuLyoqXG4gKiBQYXJzZSB0aGUgQWNjZXB0LUxhbmd1YWdlIGhlYWRlci5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VBY2NlcHRMYW5ndWFnZShhY2NlcHQpIHtcbiAgdmFyIGFjY2VwdHMgPSBhY2NlcHQuc3BsaXQoJywnKTtcblxuICBmb3IgKHZhciBpID0gMCwgaiA9IDA7IGkgPCBhY2NlcHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGxhbmd1YWdlID0gcGFyc2VMYW5ndWFnZShhY2NlcHRzW2ldLnRyaW0oKSwgaSk7XG5cbiAgICBpZiAobGFuZ3VhZ2UpIHtcbiAgICAgIGFjY2VwdHNbaisrXSA9IGxhbmd1YWdlO1xuICAgIH1cbiAgfVxuXG4gIC8vIHRyaW0gYWNjZXB0c1xuICBhY2NlcHRzLmxlbmd0aCA9IGo7XG5cbiAgcmV0dXJuIGFjY2VwdHM7XG59XG5cbi8qKlxuICogUGFyc2UgYSBsYW5ndWFnZSBmcm9tIHRoZSBBY2NlcHQtTGFuZ3VhZ2UgaGVhZGVyLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZUxhbmd1YWdlKHN0ciwgaSkge1xuICB2YXIgbWF0Y2ggPSBzaW1wbGVMYW5ndWFnZVJlZ0V4cC5leGVjKHN0cik7XG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuXG4gIHZhciBwcmVmaXggPSBtYXRjaFsxXSxcbiAgICBzdWZmaXggPSBtYXRjaFsyXSxcbiAgICBmdWxsID0gcHJlZml4O1xuXG4gIGlmIChzdWZmaXgpIGZ1bGwgKz0gXCItXCIgKyBzdWZmaXg7XG5cbiAgdmFyIHEgPSAxO1xuICBpZiAobWF0Y2hbM10pIHtcbiAgICB2YXIgcGFyYW1zID0gbWF0Y2hbM10uc3BsaXQoJzsnKVxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcGFyYW1zLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgcCA9IHBhcmFtc1tqXS5zcGxpdCgnPScpO1xuICAgICAgaWYgKHBbMF0gPT09ICdxJykgcSA9IHBhcnNlRmxvYXQocFsxXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwcmVmaXg6IHByZWZpeCxcbiAgICBzdWZmaXg6IHN1ZmZpeCxcbiAgICBxOiBxLFxuICAgIGk6IGksXG4gICAgZnVsbDogZnVsbFxuICB9O1xufVxuXG4vKipcbiAqIEdldCB0aGUgcHJpb3JpdHkgb2YgYSBsYW5ndWFnZS5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZ2V0TGFuZ3VhZ2VQcmlvcml0eShsYW5ndWFnZSwgYWNjZXB0ZWQsIGluZGV4KSB7XG4gIHZhciBwcmlvcml0eSA9IHtvOiAtMSwgcTogMCwgczogMH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhY2NlcHRlZC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzcGVjID0gc3BlY2lmeShsYW5ndWFnZSwgYWNjZXB0ZWRbaV0sIGluZGV4KTtcblxuICAgIGlmIChzcGVjICYmIChwcmlvcml0eS5zIC0gc3BlYy5zIHx8IHByaW9yaXR5LnEgLSBzcGVjLnEgfHwgcHJpb3JpdHkubyAtIHNwZWMubykgPCAwKSB7XG4gICAgICBwcmlvcml0eSA9IHNwZWM7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHByaW9yaXR5O1xufVxuXG4vKipcbiAqIEdldCB0aGUgc3BlY2lmaWNpdHkgb2YgdGhlIGxhbmd1YWdlLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzcGVjaWZ5KGxhbmd1YWdlLCBzcGVjLCBpbmRleCkge1xuICB2YXIgcCA9IHBhcnNlTGFuZ3VhZ2UobGFuZ3VhZ2UpXG4gIGlmICghcCkgcmV0dXJuIG51bGw7XG4gIHZhciBzID0gMDtcbiAgaWYoc3BlYy5mdWxsLnRvTG93ZXJDYXNlKCkgPT09IHAuZnVsbC50b0xvd2VyQ2FzZSgpKXtcbiAgICBzIHw9IDQ7XG4gIH0gZWxzZSBpZiAoc3BlYy5wcmVmaXgudG9Mb3dlckNhc2UoKSA9PT0gcC5mdWxsLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBzIHw9IDI7XG4gIH0gZWxzZSBpZiAoc3BlYy5mdWxsLnRvTG93ZXJDYXNlKCkgPT09IHAucHJlZml4LnRvTG93ZXJDYXNlKCkpIHtcbiAgICBzIHw9IDE7XG4gIH0gZWxzZSBpZiAoc3BlYy5mdWxsICE9PSAnKicgKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaTogaW5kZXgsXG4gICAgbzogc3BlYy5pLFxuICAgIHE6IHNwZWMucSxcbiAgICBzOiBzXG4gIH1cbn07XG5cbi8qKlxuICogR2V0IHRoZSBwcmVmZXJyZWQgbGFuZ3VhZ2VzIGZyb20gYW4gQWNjZXB0LUxhbmd1YWdlIGhlYWRlci5cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBwcmVmZXJyZWRMYW5ndWFnZXMoYWNjZXB0LCBwcm92aWRlZCkge1xuICAvLyBSRkMgMjYxNiBzZWMgMTQuNDogbm8gaGVhZGVyID0gKlxuICB2YXIgYWNjZXB0cyA9IHBhcnNlQWNjZXB0TGFuZ3VhZ2UoYWNjZXB0ID09PSB1bmRlZmluZWQgPyAnKicgOiBhY2NlcHQgfHwgJycpO1xuXG4gIGlmICghcHJvdmlkZWQpIHtcbiAgICAvLyBzb3J0ZWQgbGlzdCBvZiBhbGwgbGFuZ3VhZ2VzXG4gICAgcmV0dXJuIGFjY2VwdHNcbiAgICAgIC5maWx0ZXIoaXNRdWFsaXR5KVxuICAgICAgLnNvcnQoY29tcGFyZVNwZWNzKVxuICAgICAgLm1hcChnZXRGdWxsTGFuZ3VhZ2UpO1xuICB9XG5cbiAgdmFyIHByaW9yaXRpZXMgPSBwcm92aWRlZC5tYXAoZnVuY3Rpb24gZ2V0UHJpb3JpdHkodHlwZSwgaW5kZXgpIHtcbiAgICByZXR1cm4gZ2V0TGFuZ3VhZ2VQcmlvcml0eSh0eXBlLCBhY2NlcHRzLCBpbmRleCk7XG4gIH0pO1xuXG4gIC8vIHNvcnRlZCBsaXN0IG9mIGFjY2VwdGVkIGxhbmd1YWdlc1xuICByZXR1cm4gcHJpb3JpdGllcy5maWx0ZXIoaXNRdWFsaXR5KS5zb3J0KGNvbXBhcmVTcGVjcykubWFwKGZ1bmN0aW9uIGdldExhbmd1YWdlKHByaW9yaXR5KSB7XG4gICAgcmV0dXJuIHByb3ZpZGVkW3ByaW9yaXRpZXMuaW5kZXhPZihwcmlvcml0eSldO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDb21wYXJlIHR3byBzcGVjcy5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29tcGFyZVNwZWNzKGEsIGIpIHtcbiAgcmV0dXJuIChiLnEgLSBhLnEpIHx8IChiLnMgLSBhLnMpIHx8IChhLm8gLSBiLm8pIHx8IChhLmkgLSBiLmkpIHx8IDA7XG59XG5cbi8qKlxuICogR2V0IGZ1bGwgbGFuZ3VhZ2Ugc3RyaW5nLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXRGdWxsTGFuZ3VhZ2Uoc3BlYykge1xuICByZXR1cm4gc3BlYy5mdWxsO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgc3BlYyBoYXMgYW55IHF1YWxpdHkuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGlzUXVhbGl0eShzcGVjKSB7XG4gIHJldHVybiBzcGVjLnEgPiAwO1xufVxuIiwiLyoqXG4gKiBuZWdvdGlhdG9yXG4gKiBDb3B5cmlnaHQoYykgMjAxMiBJc2FhYyBaLiBTY2hsdWV0ZXJcbiAqIENvcHlyaWdodChjKSAyMDE0IEZlZGVyaWNvIFJvbWVyb1xuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcHJlZmVycmVkTWVkaWFUeXBlcztcbm1vZHVsZS5leHBvcnRzLnByZWZlcnJlZE1lZGlhVHlwZXMgPSBwcmVmZXJyZWRNZWRpYVR5cGVzO1xuXG4vKipcbiAqIE1vZHVsZSB2YXJpYWJsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBzaW1wbGVNZWRpYVR5cGVSZWdFeHAgPSAvXlxccyooW15cXHNcXC87XSspXFwvKFteO1xcc10rKVxccyooPzo7KC4qKSk/JC87XG5cbi8qKlxuICogUGFyc2UgdGhlIEFjY2VwdCBoZWFkZXIuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlQWNjZXB0KGFjY2VwdCkge1xuICB2YXIgYWNjZXB0cyA9IHNwbGl0TWVkaWFUeXBlcyhhY2NlcHQpO1xuXG4gIGZvciAodmFyIGkgPSAwLCBqID0gMDsgaSA8IGFjY2VwdHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbWVkaWFUeXBlID0gcGFyc2VNZWRpYVR5cGUoYWNjZXB0c1tpXS50cmltKCksIGkpO1xuXG4gICAgaWYgKG1lZGlhVHlwZSkge1xuICAgICAgYWNjZXB0c1tqKytdID0gbWVkaWFUeXBlO1xuICAgIH1cbiAgfVxuXG4gIC8vIHRyaW0gYWNjZXB0c1xuICBhY2NlcHRzLmxlbmd0aCA9IGo7XG5cbiAgcmV0dXJuIGFjY2VwdHM7XG59XG5cbi8qKlxuICogUGFyc2UgYSBtZWRpYSB0eXBlIGZyb20gdGhlIEFjY2VwdCBoZWFkZXIuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlTWVkaWFUeXBlKHN0ciwgaSkge1xuICB2YXIgbWF0Y2ggPSBzaW1wbGVNZWRpYVR5cGVSZWdFeHAuZXhlYyhzdHIpO1xuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuICB2YXIgcGFyYW1zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHEgPSAxO1xuICB2YXIgc3VidHlwZSA9IG1hdGNoWzJdO1xuICB2YXIgdHlwZSA9IG1hdGNoWzFdO1xuXG4gIGlmIChtYXRjaFszXSkge1xuICAgIHZhciBrdnBzID0gc3BsaXRQYXJhbWV0ZXJzKG1hdGNoWzNdKS5tYXAoc3BsaXRLZXlWYWx1ZVBhaXIpO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBrdnBzLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgcGFpciA9IGt2cHNbal07XG4gICAgICB2YXIga2V5ID0gcGFpclswXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIHZhbCA9IHBhaXJbMV07XG5cbiAgICAgIC8vIGdldCB0aGUgdmFsdWUsIHVud3JhcHBpbmcgcXVvdGVzXG4gICAgICB2YXIgdmFsdWUgPSB2YWwgJiYgdmFsWzBdID09PSAnXCInICYmIHZhbFt2YWwubGVuZ3RoIC0gMV0gPT09ICdcIidcbiAgICAgICAgPyB2YWwuc3Vic3RyKDEsIHZhbC5sZW5ndGggLSAyKVxuICAgICAgICA6IHZhbDtcblxuICAgICAgaWYgKGtleSA9PT0gJ3EnKSB7XG4gICAgICAgIHEgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIC8vIHN0b3JlIHBhcmFtZXRlclxuICAgICAgcGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgc3VidHlwZTogc3VidHlwZSxcbiAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICBxOiBxLFxuICAgIGk6IGlcbiAgfTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHByaW9yaXR5IG9mIGEgbWVkaWEgdHlwZS5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZ2V0TWVkaWFUeXBlUHJpb3JpdHkodHlwZSwgYWNjZXB0ZWQsIGluZGV4KSB7XG4gIHZhciBwcmlvcml0eSA9IHtvOiAtMSwgcTogMCwgczogMH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhY2NlcHRlZC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzcGVjID0gc3BlY2lmeSh0eXBlLCBhY2NlcHRlZFtpXSwgaW5kZXgpO1xuXG4gICAgaWYgKHNwZWMgJiYgKHByaW9yaXR5LnMgLSBzcGVjLnMgfHwgcHJpb3JpdHkucSAtIHNwZWMucSB8fCBwcmlvcml0eS5vIC0gc3BlYy5vKSA8IDApIHtcbiAgICAgIHByaW9yaXR5ID0gc3BlYztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcHJpb3JpdHk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBzcGVjaWZpY2l0eSBvZiB0aGUgbWVkaWEgdHlwZS5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc3BlY2lmeSh0eXBlLCBzcGVjLCBpbmRleCkge1xuICB2YXIgcCA9IHBhcnNlTWVkaWFUeXBlKHR5cGUpO1xuICB2YXIgcyA9IDA7XG5cbiAgaWYgKCFwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZihzcGVjLnR5cGUudG9Mb3dlckNhc2UoKSA9PSBwLnR5cGUudG9Mb3dlckNhc2UoKSkge1xuICAgIHMgfD0gNFxuICB9IGVsc2UgaWYoc3BlYy50eXBlICE9ICcqJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYoc3BlYy5zdWJ0eXBlLnRvTG93ZXJDYXNlKCkgPT0gcC5zdWJ0eXBlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBzIHw9IDJcbiAgfSBlbHNlIGlmKHNwZWMuc3VidHlwZSAhPSAnKicpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc3BlYy5wYXJhbXMpO1xuICBpZiAoa2V5cy5sZW5ndGggPiAwKSB7XG4gICAgaWYgKGtleXMuZXZlcnkoZnVuY3Rpb24gKGspIHtcbiAgICAgIHJldHVybiBzcGVjLnBhcmFtc1trXSA9PSAnKicgfHwgKHNwZWMucGFyYW1zW2tdIHx8ICcnKS50b0xvd2VyQ2FzZSgpID09IChwLnBhcmFtc1trXSB8fCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICB9KSkge1xuICAgICAgcyB8PSAxXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpOiBpbmRleCxcbiAgICBvOiBzcGVjLmksXG4gICAgcTogc3BlYy5xLFxuICAgIHM6IHMsXG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIHByZWZlcnJlZCBtZWRpYSB0eXBlcyBmcm9tIGFuIEFjY2VwdCBoZWFkZXIuXG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gcHJlZmVycmVkTWVkaWFUeXBlcyhhY2NlcHQsIHByb3ZpZGVkKSB7XG4gIC8vIFJGQyAyNjE2IHNlYyAxNC4yOiBubyBoZWFkZXIgPSAqLypcbiAgdmFyIGFjY2VwdHMgPSBwYXJzZUFjY2VwdChhY2NlcHQgPT09IHVuZGVmaW5lZCA/ICcqLyonIDogYWNjZXB0IHx8ICcnKTtcblxuICBpZiAoIXByb3ZpZGVkKSB7XG4gICAgLy8gc29ydGVkIGxpc3Qgb2YgYWxsIHR5cGVzXG4gICAgcmV0dXJuIGFjY2VwdHNcbiAgICAgIC5maWx0ZXIoaXNRdWFsaXR5KVxuICAgICAgLnNvcnQoY29tcGFyZVNwZWNzKVxuICAgICAgLm1hcChnZXRGdWxsVHlwZSk7XG4gIH1cblxuICB2YXIgcHJpb3JpdGllcyA9IHByb3ZpZGVkLm1hcChmdW5jdGlvbiBnZXRQcmlvcml0eSh0eXBlLCBpbmRleCkge1xuICAgIHJldHVybiBnZXRNZWRpYVR5cGVQcmlvcml0eSh0eXBlLCBhY2NlcHRzLCBpbmRleCk7XG4gIH0pO1xuXG4gIC8vIHNvcnRlZCBsaXN0IG9mIGFjY2VwdGVkIHR5cGVzXG4gIHJldHVybiBwcmlvcml0aWVzLmZpbHRlcihpc1F1YWxpdHkpLnNvcnQoY29tcGFyZVNwZWNzKS5tYXAoZnVuY3Rpb24gZ2V0VHlwZShwcmlvcml0eSkge1xuICAgIHJldHVybiBwcm92aWRlZFtwcmlvcml0aWVzLmluZGV4T2YocHJpb3JpdHkpXTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ29tcGFyZSB0d28gc3BlY3MuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbXBhcmVTcGVjcyhhLCBiKSB7XG4gIHJldHVybiAoYi5xIC0gYS5xKSB8fCAoYi5zIC0gYS5zKSB8fCAoYS5vIC0gYi5vKSB8fCAoYS5pIC0gYi5pKSB8fCAwO1xufVxuXG4vKipcbiAqIEdldCBmdWxsIHR5cGUgc3RyaW5nLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXRGdWxsVHlwZShzcGVjKSB7XG4gIHJldHVybiBzcGVjLnR5cGUgKyAnLycgKyBzcGVjLnN1YnR5cGU7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzcGVjIGhhcyBhbnkgcXVhbGl0eS5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaXNRdWFsaXR5KHNwZWMpIHtcbiAgcmV0dXJuIHNwZWMucSA+IDA7XG59XG5cbi8qKlxuICogQ291bnQgdGhlIG51bWJlciBvZiBxdW90ZXMgaW4gYSBzdHJpbmcuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHF1b3RlQ291bnQoc3RyaW5nKSB7XG4gIHZhciBjb3VudCA9IDA7XG4gIHZhciBpbmRleCA9IDA7XG5cbiAgd2hpbGUgKChpbmRleCA9IHN0cmluZy5pbmRleE9mKCdcIicsIGluZGV4KSkgIT09IC0xKSB7XG4gICAgY291bnQrKztcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgcmV0dXJuIGNvdW50O1xufVxuXG4vKipcbiAqIFNwbGl0IGEga2V5IHZhbHVlIHBhaXIuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNwbGl0S2V5VmFsdWVQYWlyKHN0cikge1xuICB2YXIgaW5kZXggPSBzdHIuaW5kZXhPZignPScpO1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuXG4gIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICBrZXkgPSBzdHI7XG4gIH0gZWxzZSB7XG4gICAga2V5ID0gc3RyLnN1YnN0cigwLCBpbmRleCk7XG4gICAgdmFsID0gc3RyLnN1YnN0cihpbmRleCArIDEpO1xuICB9XG5cbiAgcmV0dXJuIFtrZXksIHZhbF07XG59XG5cbi8qKlxuICogU3BsaXQgYW4gQWNjZXB0IGhlYWRlciBpbnRvIG1lZGlhIHR5cGVzLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzcGxpdE1lZGlhVHlwZXMoYWNjZXB0KSB7XG4gIHZhciBhY2NlcHRzID0gYWNjZXB0LnNwbGl0KCcsJyk7XG5cbiAgZm9yICh2YXIgaSA9IDEsIGogPSAwOyBpIDwgYWNjZXB0cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChxdW90ZUNvdW50KGFjY2VwdHNbal0pICUgMiA9PSAwKSB7XG4gICAgICBhY2NlcHRzWysral0gPSBhY2NlcHRzW2ldO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY2NlcHRzW2pdICs9ICcsJyArIGFjY2VwdHNbaV07XG4gICAgfVxuICB9XG5cbiAgLy8gdHJpbSBhY2NlcHRzXG4gIGFjY2VwdHMubGVuZ3RoID0gaiArIDE7XG5cbiAgcmV0dXJuIGFjY2VwdHM7XG59XG5cbi8qKlxuICogU3BsaXQgYSBzdHJpbmcgb2YgcGFyYW1ldGVycy5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc3BsaXRQYXJhbWV0ZXJzKHN0cikge1xuICB2YXIgcGFyYW1ldGVycyA9IHN0ci5zcGxpdCgnOycpO1xuXG4gIGZvciAodmFyIGkgPSAxLCBqID0gMDsgaSA8IHBhcmFtZXRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocXVvdGVDb3VudChwYXJhbWV0ZXJzW2pdKSAlIDIgPT0gMCkge1xuICAgICAgcGFyYW1ldGVyc1srK2pdID0gcGFyYW1ldGVyc1tpXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyYW1ldGVyc1tqXSArPSAnOycgKyBwYXJhbWV0ZXJzW2ldO1xuICAgIH1cbiAgfVxuXG4gIC8vIHRyaW0gcGFyYW1ldGVyc1xuICBwYXJhbWV0ZXJzLmxlbmd0aCA9IGogKyAxO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1ldGVycy5sZW5ndGg7IGkrKykge1xuICAgIHBhcmFtZXRlcnNbaV0gPSBwYXJhbWV0ZXJzW2ldLnRyaW0oKTtcbiAgfVxuXG4gIHJldHVybiBwYXJhbWV0ZXJzO1xufVxuIiwiLyohXG4gKiBjb250ZW50LXR5cGVcbiAqIENvcHlyaWdodChjKSAyMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBSZWdFeHAgdG8gbWF0Y2ggKiggXCI7XCIgcGFyYW1ldGVyICkgaW4gUkZDIDcyMzEgc2VjIDMuMS4xLjFcbiAqXG4gKiBwYXJhbWV0ZXIgICAgID0gdG9rZW4gXCI9XCIgKCB0b2tlbiAvIHF1b3RlZC1zdHJpbmcgKVxuICogdG9rZW4gICAgICAgICA9IDEqdGNoYXJcbiAqIHRjaGFyICAgICAgICAgPSBcIiFcIiAvIFwiI1wiIC8gXCIkXCIgLyBcIiVcIiAvIFwiJlwiIC8gXCInXCIgLyBcIipcIlxuICogICAgICAgICAgICAgICAvIFwiK1wiIC8gXCItXCIgLyBcIi5cIiAvIFwiXlwiIC8gXCJfXCIgLyBcImBcIiAvIFwifFwiIC8gXCJ+XCJcbiAqICAgICAgICAgICAgICAgLyBESUdJVCAvIEFMUEhBXG4gKiAgICAgICAgICAgICAgIDsgYW55IFZDSEFSLCBleGNlcHQgZGVsaW1pdGVyc1xuICogcXVvdGVkLXN0cmluZyA9IERRVU9URSAqKCBxZHRleHQgLyBxdW90ZWQtcGFpciApIERRVU9URVxuICogcWR0ZXh0ICAgICAgICA9IEhUQUIgLyBTUCAvICV4MjEgLyAleDIzLTVCIC8gJXg1RC03RSAvIG9icy10ZXh0XG4gKiBvYnMtdGV4dCAgICAgID0gJXg4MC1GRlxuICogcXVvdGVkLXBhaXIgICA9IFwiXFxcIiAoIEhUQUIgLyBTUCAvIFZDSEFSIC8gb2JzLXRleHQgKVxuICovXG52YXIgUEFSQU1fUkVHRVhQID0gLzsgKihbISMkJSYnKisuXl9gfH4wLTlBLVphLXotXSspICo9ICooXCIoPzpbXFx1MDAwYlxcdTAwMjBcXHUwMDIxXFx1MDAyMy1cXHUwMDViXFx1MDA1ZC1cXHUwMDdlXFx1MDA4MC1cXHUwMGZmXXxcXFxcW1xcdTAwMGJcXHUwMDIwLVxcdTAwZmZdKSpcInxbISMkJSYnKisuXl9gfH4wLTlBLVphLXotXSspICovZ1xudmFyIFRFWFRfUkVHRVhQID0gL15bXFx1MDAwYlxcdTAwMjAtXFx1MDA3ZVxcdTAwODAtXFx1MDBmZl0rJC9cbnZhciBUT0tFTl9SRUdFWFAgPSAvXlshIyQlJicqKy5eX2B8fjAtOUEtWmEtei1dKyQvXG5cbi8qKlxuICogUmVnRXhwIHRvIG1hdGNoIHF1b3RlZC1wYWlyIGluIFJGQyA3MjMwIHNlYyAzLjIuNlxuICpcbiAqIHF1b3RlZC1wYWlyID0gXCJcXFwiICggSFRBQiAvIFNQIC8gVkNIQVIgLyBvYnMtdGV4dCApXG4gKiBvYnMtdGV4dCAgICA9ICV4ODAtRkZcbiAqL1xudmFyIFFFU0NfUkVHRVhQID0gL1xcXFwoW1xcdTAwMGJcXHUwMDIwLVxcdTAwZmZdKS9nXG5cbi8qKlxuICogUmVnRXhwIHRvIG1hdGNoIGNoYXJzIHRoYXQgbXVzdCBiZSBxdW90ZWQtcGFpciBpbiBSRkMgNzIzMCBzZWMgMy4yLjZcbiAqL1xudmFyIFFVT1RFX1JFR0VYUCA9IC8oW1xcXFxcIl0pL2dcblxuLyoqXG4gKiBSZWdFeHAgdG8gbWF0Y2ggdHlwZSBpbiBSRkMgNzIzMSBzZWMgMy4xLjEuMVxuICpcbiAqIG1lZGlhLXR5cGUgPSB0eXBlIFwiL1wiIHN1YnR5cGVcbiAqIHR5cGUgICAgICAgPSB0b2tlblxuICogc3VidHlwZSAgICA9IHRva2VuXG4gKi9cbnZhciBUWVBFX1JFR0VYUCA9IC9eWyEjJCUmJyorLl5fYHx+MC05QS1aYS16LV0rXFwvWyEjJCUmJyorLl5fYHx+MC05QS1aYS16LV0rJC9cblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmZvcm1hdCA9IGZvcm1hdFxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5cbi8qKlxuICogRm9ybWF0IG9iamVjdCB0byBtZWRpYSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXQgKG9iaikge1xuICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG9iaiBpcyByZXF1aXJlZCcpXG4gIH1cblxuICB2YXIgcGFyYW1ldGVycyA9IG9iai5wYXJhbWV0ZXJzXG4gIHZhciB0eXBlID0gb2JqLnR5cGVcblxuICBpZiAoIXR5cGUgfHwgIVRZUEVfUkVHRVhQLnRlc3QodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHR5cGUnKVxuICB9XG5cbiAgdmFyIHN0cmluZyA9IHR5cGVcblxuICAvLyBhcHBlbmQgcGFyYW1ldGVyc1xuICBpZiAocGFyYW1ldGVycyAmJiB0eXBlb2YgcGFyYW1ldGVycyA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcGFyYW1cbiAgICB2YXIgcGFyYW1zID0gT2JqZWN0LmtleXMocGFyYW1ldGVycykuc29ydCgpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgICAgcGFyYW0gPSBwYXJhbXNbaV1cblxuICAgICAgaWYgKCFUT0tFTl9SRUdFWFAudGVzdChwYXJhbSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBwYXJhbWV0ZXIgbmFtZScpXG4gICAgICB9XG5cbiAgICAgIHN0cmluZyArPSAnOyAnICsgcGFyYW0gKyAnPScgKyBxc3RyaW5nKHBhcmFtZXRlcnNbcGFyYW1dKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHJpbmdcbn1cblxuLyoqXG4gKiBQYXJzZSBtZWRpYSB0eXBlIHRvIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHN0cmluZ1xuICogQHJldHVybiB7T2JqZWN0fVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHBhcnNlIChzdHJpbmcpIHtcbiAgaWYgKCFzdHJpbmcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzdHJpbmcgaXMgcmVxdWlyZWQnKVxuICB9XG5cbiAgLy8gc3VwcG9ydCByZXEvcmVzLWxpa2Ugb2JqZWN0cyBhcyBhcmd1bWVudFxuICB2YXIgaGVhZGVyID0gdHlwZW9mIHN0cmluZyA9PT0gJ29iamVjdCdcbiAgICA/IGdldGNvbnRlbnR0eXBlKHN0cmluZylcbiAgICA6IHN0cmluZ1xuXG4gIGlmICh0eXBlb2YgaGVhZGVyICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHN0cmluZyBpcyByZXF1aXJlZCB0byBiZSBhIHN0cmluZycpXG4gIH1cblxuICB2YXIgaW5kZXggPSBoZWFkZXIuaW5kZXhPZignOycpXG4gIHZhciB0eXBlID0gaW5kZXggIT09IC0xXG4gICAgPyBoZWFkZXIuc3Vic3RyKDAsIGluZGV4KS50cmltKClcbiAgICA6IGhlYWRlci50cmltKClcblxuICBpZiAoIVRZUEVfUkVHRVhQLnRlc3QodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIG1lZGlhIHR5cGUnKVxuICB9XG5cbiAgdmFyIG9iaiA9IG5ldyBDb250ZW50VHlwZSh0eXBlLnRvTG93ZXJDYXNlKCkpXG5cbiAgLy8gcGFyc2UgcGFyYW1ldGVyc1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgdmFyIGtleVxuICAgIHZhciBtYXRjaFxuICAgIHZhciB2YWx1ZVxuXG4gICAgUEFSQU1fUkVHRVhQLmxhc3RJbmRleCA9IGluZGV4XG5cbiAgICB3aGlsZSAoKG1hdGNoID0gUEFSQU1fUkVHRVhQLmV4ZWMoaGVhZGVyKSkpIHtcbiAgICAgIGlmIChtYXRjaC5pbmRleCAhPT0gaW5kZXgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBwYXJhbWV0ZXIgZm9ybWF0JylcbiAgICAgIH1cblxuICAgICAgaW5kZXggKz0gbWF0Y2hbMF0ubGVuZ3RoXG4gICAgICBrZXkgPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpXG4gICAgICB2YWx1ZSA9IG1hdGNoWzJdXG5cbiAgICAgIGlmICh2YWx1ZVswXSA9PT0gJ1wiJykge1xuICAgICAgICAvLyByZW1vdmUgcXVvdGVzIGFuZCBlc2NhcGVzXG4gICAgICAgIHZhbHVlID0gdmFsdWVcbiAgICAgICAgICAuc3Vic3RyKDEsIHZhbHVlLmxlbmd0aCAtIDIpXG4gICAgICAgICAgLnJlcGxhY2UoUUVTQ19SRUdFWFAsICckMScpXG4gICAgICB9XG5cbiAgICAgIG9iai5wYXJhbWV0ZXJzW2tleV0gPSB2YWx1ZVxuICAgIH1cblxuICAgIGlmIChpbmRleCAhPT0gaGVhZGVyLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBwYXJhbWV0ZXIgZm9ybWF0JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqXG59XG5cbi8qKlxuICogR2V0IGNvbnRlbnQtdHlwZSBmcm9tIHJlcS9yZXMgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH1cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZ2V0Y29udGVudHR5cGUgKG9iaikge1xuICB2YXIgaGVhZGVyXG5cbiAgaWYgKHR5cGVvZiBvYmouZ2V0SGVhZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gcmVzLWxpa2VcbiAgICBoZWFkZXIgPSBvYmouZ2V0SGVhZGVyKCdjb250ZW50LXR5cGUnKVxuICB9IGVsc2UgaWYgKHR5cGVvZiBvYmouaGVhZGVycyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyByZXEtbGlrZVxuICAgIGhlYWRlciA9IG9iai5oZWFkZXJzICYmIG9iai5oZWFkZXJzWydjb250ZW50LXR5cGUnXVxuICB9XG5cbiAgaWYgKHR5cGVvZiBoZWFkZXIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY29udGVudC10eXBlIGhlYWRlciBpcyBtaXNzaW5nIGZyb20gb2JqZWN0JylcbiAgfVxuXG4gIHJldHVybiBoZWFkZXJcbn1cblxuLyoqXG4gKiBRdW90ZSBhIHN0cmluZyBpZiBuZWNlc3NhcnkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbFxuICogQHJldHVybiB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBxc3RyaW5nICh2YWwpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyh2YWwpXG5cbiAgLy8gbm8gbmVlZCB0byBxdW90ZSB0b2tlbnNcbiAgaWYgKFRPS0VOX1JFR0VYUC50ZXN0KHN0cikpIHtcbiAgICByZXR1cm4gc3RyXG4gIH1cblxuICBpZiAoc3RyLmxlbmd0aCA+IDAgJiYgIVRFWFRfUkVHRVhQLnRlc3Qoc3RyKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgcGFyYW1ldGVyIHZhbHVlJylcbiAgfVxuXG4gIHJldHVybiAnXCInICsgc3RyLnJlcGxhY2UoUVVPVEVfUkVHRVhQLCAnXFxcXCQxJykgKyAnXCInXG59XG5cbi8qKlxuICogQ2xhc3MgdG8gcmVwcmVzZW50IGEgY29udGVudCB0eXBlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gQ29udGVudFR5cGUgKHR5cGUpIHtcbiAgdGhpcy5wYXJhbWV0ZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuICB0aGlzLnR5cGUgPSB0eXBlXG59XG4iLCIvKiFcbiAqIHBhcnNldXJsXG4gKiBDb3B5cmlnaHQoYykgMjAxNCBKb25hdGhhbiBPbmdcbiAqIENvcHlyaWdodChjKSAyMDE0LTIwMTcgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKVxudmFyIHBhcnNlID0gdXJsLnBhcnNlXG52YXIgVXJsID0gdXJsLlVybFxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2V1cmxcbm1vZHVsZS5leHBvcnRzLm9yaWdpbmFsID0gb3JpZ2luYWx1cmxcblxuLyoqXG4gKiBQYXJzZSB0aGUgYHJlcWAgdXJsIHdpdGggbWVtb2l6YXRpb24uXG4gKlxuICogQHBhcmFtIHtTZXJ2ZXJSZXF1ZXN0fSByZXFcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZXVybCAocmVxKSB7XG4gIHZhciB1cmwgPSByZXEudXJsXG5cbiAgaWYgKHVybCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gVVJMIGlzIHVuZGVmaW5lZFxuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIHZhciBwYXJzZWQgPSByZXEuX3BhcnNlZFVybFxuXG4gIGlmIChmcmVzaCh1cmwsIHBhcnNlZCkpIHtcbiAgICAvLyBSZXR1cm4gY2FjaGVkIFVSTCBwYXJzZVxuICAgIHJldHVybiBwYXJzZWRcbiAgfVxuXG4gIC8vIFBhcnNlIHRoZSBVUkxcbiAgcGFyc2VkID0gZmFzdHBhcnNlKHVybClcbiAgcGFyc2VkLl9yYXcgPSB1cmxcblxuICByZXR1cm4gKHJlcS5fcGFyc2VkVXJsID0gcGFyc2VkKVxufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgYHJlcWAgb3JpZ2luYWwgdXJsIHdpdGggZmFsbGJhY2sgYW5kIG1lbW9pemF0aW9uLlxuICpcbiAqIEBwYXJhbSB7U2VydmVyUmVxdWVzdH0gcmVxXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gb3JpZ2luYWx1cmwgKHJlcSkge1xuICB2YXIgdXJsID0gcmVxLm9yaWdpbmFsVXJsXG5cbiAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gRmFsbGJhY2tcbiAgICByZXR1cm4gcGFyc2V1cmwocmVxKVxuICB9XG5cbiAgdmFyIHBhcnNlZCA9IHJlcS5fcGFyc2VkT3JpZ2luYWxVcmxcblxuICBpZiAoZnJlc2godXJsLCBwYXJzZWQpKSB7XG4gICAgLy8gUmV0dXJuIGNhY2hlZCBVUkwgcGFyc2VcbiAgICByZXR1cm4gcGFyc2VkXG4gIH1cblxuICAvLyBQYXJzZSB0aGUgVVJMXG4gIHBhcnNlZCA9IGZhc3RwYXJzZSh1cmwpXG4gIHBhcnNlZC5fcmF3ID0gdXJsXG5cbiAgcmV0dXJuIChyZXEuX3BhcnNlZE9yaWdpbmFsVXJsID0gcGFyc2VkKVxufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgYHN0cmAgdXJsIHdpdGggZmFzdC1wYXRoIHNob3J0LWN1dC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZhc3RwYXJzZSAoc3RyKSB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJyB8fCBzdHIuY2hhckNvZGVBdCgwKSAhPT0gMHgyZiAvKiAvICovKSB7XG4gICAgcmV0dXJuIHBhcnNlKHN0cilcbiAgfVxuXG4gIHZhciBwYXRobmFtZSA9IHN0clxuICB2YXIgcXVlcnkgPSBudWxsXG4gIHZhciBzZWFyY2ggPSBudWxsXG5cbiAgLy8gVGhpcyB0YWtlcyB0aGUgcmVnZXhwIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL3B1bGwvNzg3OFxuICAvLyBXaGljaCBpcyAvXihcXC9bXj8jXFxzXSopKFxcP1teI1xcc10qKT8kL1xuICAvLyBBbmQgdW5yb2xscyBpdCBpbnRvIGEgZm9yIGxvb3BcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBzd2l0Y2ggKHN0ci5jaGFyQ29kZUF0KGkpKSB7XG4gICAgICBjYXNlIDB4M2Y6IC8qID8gICovXG4gICAgICAgIGlmIChzZWFyY2ggPT09IG51bGwpIHtcbiAgICAgICAgICBwYXRobmFtZSA9IHN0ci5zdWJzdHJpbmcoMCwgaSlcbiAgICAgICAgICBxdWVyeSA9IHN0ci5zdWJzdHJpbmcoaSArIDEpXG4gICAgICAgICAgc2VhcmNoID0gc3RyLnN1YnN0cmluZyhpKVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDB4MDk6IC8qIFxcdCAqL1xuICAgICAgY2FzZSAweDBhOiAvKiBcXG4gKi9cbiAgICAgIGNhc2UgMHgwYzogLyogXFxmICovXG4gICAgICBjYXNlIDB4MGQ6IC8qIFxcciAqL1xuICAgICAgY2FzZSAweDIwOiAvKiAgICAqL1xuICAgICAgY2FzZSAweDIzOiAvKiAjICAqL1xuICAgICAgY2FzZSAweGEwOlxuICAgICAgY2FzZSAweGZlZmY6XG4gICAgICAgIHJldHVybiBwYXJzZShzdHIpXG4gICAgfVxuICB9XG5cbiAgdmFyIHVybCA9IFVybCAhPT0gdW5kZWZpbmVkXG4gICAgPyBuZXcgVXJsKClcbiAgICA6IHt9XG5cbiAgdXJsLnBhdGggPSBzdHJcbiAgdXJsLmhyZWYgPSBzdHJcbiAgdXJsLnBhdGhuYW1lID0gcGF0aG5hbWVcblxuICBpZiAoc2VhcmNoICE9PSBudWxsKSB7XG4gICAgdXJsLnF1ZXJ5ID0gcXVlcnlcbiAgICB1cmwuc2VhcmNoID0gc2VhcmNoXG4gIH1cblxuICByZXR1cm4gdXJsXG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHBhcnNlZCBpcyBzdGlsbCBmcmVzaCBmb3IgdXJsLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJzZWRVcmxcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZyZXNoICh1cmwsIHBhcnNlZFVybCkge1xuICByZXR1cm4gdHlwZW9mIHBhcnNlZFVybCA9PT0gJ29iamVjdCcgJiZcbiAgICBwYXJzZWRVcmwgIT09IG51bGwgJiZcbiAgICAoVXJsID09PSB1bmRlZmluZWQgfHwgcGFyc2VkVXJsIGluc3RhbmNlb2YgVXJsKSAmJlxuICAgIHBhcnNlZFVybC5fcmF3ID09PSB1cmxcbn1cbiIsIi8qIVxuICogZnJlc2hcbiAqIENvcHlyaWdodChjKSAyMDEyIFRKIEhvbG93YXljaHVrXG4gKiBDb3B5cmlnaHQoYykgMjAxNi0yMDE3IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBSZWdFeHAgdG8gY2hlY2sgZm9yIG5vLWNhY2hlIHRva2VuIGluIENhY2hlLUNvbnRyb2wuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBDQUNIRV9DT05UUk9MX05PX0NBQ0hFX1JFR0VYUCA9IC8oPzpefCwpXFxzKj9uby1jYWNoZVxccyo/KD86LHwkKS9cblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZXNoXG5cbi8qKlxuICogQ2hlY2sgZnJlc2huZXNzIG9mIHRoZSByZXNwb25zZSB1c2luZyByZXF1ZXN0IGFuZCByZXNwb25zZSBoZWFkZXJzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZXFIZWFkZXJzXG4gKiBAcGFyYW0ge09iamVjdH0gcmVzSGVhZGVyc1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmcmVzaCAocmVxSGVhZGVycywgcmVzSGVhZGVycykge1xuICAvLyBmaWVsZHNcbiAgdmFyIG1vZGlmaWVkU2luY2UgPSByZXFIZWFkZXJzWydpZi1tb2RpZmllZC1zaW5jZSddXG4gIHZhciBub25lTWF0Y2ggPSByZXFIZWFkZXJzWydpZi1ub25lLW1hdGNoJ11cblxuICAvLyB1bmNvbmRpdGlvbmFsIHJlcXVlc3RcbiAgaWYgKCFtb2RpZmllZFNpbmNlICYmICFub25lTWF0Y2gpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIEFsd2F5cyByZXR1cm4gc3RhbGUgd2hlbiBDYWNoZS1Db250cm9sOiBuby1jYWNoZVxuICAvLyB0byBzdXBwb3J0IGVuZC10by1lbmQgcmVsb2FkIHJlcXVlc3RzXG4gIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMyNjE2I3NlY3Rpb24tMTQuOS40XG4gIHZhciBjYWNoZUNvbnRyb2wgPSByZXFIZWFkZXJzWydjYWNoZS1jb250cm9sJ11cbiAgaWYgKGNhY2hlQ29udHJvbCAmJiBDQUNIRV9DT05UUk9MX05PX0NBQ0hFX1JFR0VYUC50ZXN0KGNhY2hlQ29udHJvbCkpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIGlmLW5vbmUtbWF0Y2hcbiAgaWYgKG5vbmVNYXRjaCAmJiBub25lTWF0Y2ggIT09ICcqJykge1xuICAgIHZhciBldGFnID0gcmVzSGVhZGVyc1snZXRhZyddXG5cbiAgICBpZiAoIWV0YWcpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHZhciBldGFnU3RhbGUgPSB0cnVlXG4gICAgdmFyIG1hdGNoZXMgPSBwYXJzZVRva2VuTGlzdChub25lTWF0Y2gpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXRjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBtYXRjaGVzW2ldXG4gICAgICBpZiAobWF0Y2ggPT09IGV0YWcgfHwgbWF0Y2ggPT09ICdXLycgKyBldGFnIHx8ICdXLycgKyBtYXRjaCA9PT0gZXRhZykge1xuICAgICAgICBldGFnU3RhbGUgPSBmYWxzZVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChldGFnU3RhbGUpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIC8vIGlmLW1vZGlmaWVkLXNpbmNlXG4gIGlmIChtb2RpZmllZFNpbmNlKSB7XG4gICAgdmFyIGxhc3RNb2RpZmllZCA9IHJlc0hlYWRlcnNbJ2xhc3QtbW9kaWZpZWQnXVxuICAgIHZhciBtb2RpZmllZFN0YWxlID0gIWxhc3RNb2RpZmllZCB8fCAhKHBhcnNlSHR0cERhdGUobGFzdE1vZGlmaWVkKSA8PSBwYXJzZUh0dHBEYXRlKG1vZGlmaWVkU2luY2UpKVxuXG4gICAgaWYgKG1vZGlmaWVkU3RhbGUpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlXG59XG5cbi8qKlxuICogUGFyc2UgYW4gSFRUUCBEYXRlIGludG8gYSBudW1iZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGRhdGVcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VIdHRwRGF0ZSAoZGF0ZSkge1xuICB2YXIgdGltZXN0YW1wID0gZGF0ZSAmJiBEYXRlLnBhcnNlKGRhdGUpXG5cbiAgLy8gaXN0YW5idWwgaWdub3JlIG5leHQ6IGd1YXJkIGFnYWluc3QgZGF0ZS5qcyBEYXRlLnBhcnNlIHBhdGNoaW5nXG4gIHJldHVybiB0eXBlb2YgdGltZXN0YW1wID09PSAnbnVtYmVyJ1xuICAgID8gdGltZXN0YW1wXG4gICAgOiBOYU5cbn1cblxuLyoqXG4gKiBQYXJzZSBhIEhUVFAgdG9rZW4gbGlzdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlVG9rZW5MaXN0IChzdHIpIHtcbiAgdmFyIGVuZCA9IDBcbiAgdmFyIGxpc3QgPSBbXVxuICB2YXIgc3RhcnQgPSAwXG5cbiAgLy8gZ2F0aGVyIHRva2Vuc1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gc3RyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgc3dpdGNoIChzdHIuY2hhckNvZGVBdChpKSkge1xuICAgICAgY2FzZSAweDIwOiAvKiAgICovXG4gICAgICAgIGlmIChzdGFydCA9PT0gZW5kKSB7XG4gICAgICAgICAgc3RhcnQgPSBlbmQgPSBpICsgMVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDB4MmM6IC8qICwgKi9cbiAgICAgICAgbGlzdC5wdXNoKHN0ci5zdWJzdHJpbmcoc3RhcnQsIGVuZCkpXG4gICAgICAgIHN0YXJ0ID0gZW5kID0gaSArIDFcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVuZCA9IGkgKyAxXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgLy8gZmluYWwgdG9rZW5cbiAgbGlzdC5wdXNoKHN0ci5zdWJzdHJpbmcoc3RhcnQsIGVuZCkpXG5cbiAgcmV0dXJuIGxpc3Rcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBjbyA9IHJlcXVpcmUoJ2NvJylcbmNvbnN0IGNvbXBvc2UgPSByZXF1aXJlKCdrb2EtY29tcG9zZScpXG5cbm1vZHVsZS5leHBvcnRzID0gY29udmVydFxuXG5mdW5jdGlvbiBjb252ZXJ0IChtdykge1xuICBpZiAodHlwZW9mIG13ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWlkZGxld2FyZSBtdXN0IGJlIGEgZnVuY3Rpb24nKVxuICB9XG4gIGlmIChtdy5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnR2VuZXJhdG9yRnVuY3Rpb24nKSB7XG4gICAgLy8gYXNzdW1lIGl0J3MgUHJvbWlzZS1iYXNlZCBtaWRkbGV3YXJlXG4gICAgcmV0dXJuIG13XG4gIH1cbiAgY29uc3QgY29udmVydGVkID0gZnVuY3Rpb24gKGN0eCwgbmV4dCkge1xuICAgIHJldHVybiBjby5jYWxsKGN0eCwgbXcuY2FsbChjdHgsIGNyZWF0ZUdlbmVyYXRvcihuZXh0KSkpXG4gIH1cbiAgY29udmVydGVkLl9uYW1lID0gbXcuX25hbWUgfHwgbXcubmFtZVxuICByZXR1cm4gY29udmVydGVkXG59XG5cbmZ1bmN0aW9uICogY3JlYXRlR2VuZXJhdG9yIChuZXh0KSB7XG4gIHJldHVybiB5aWVsZCBuZXh0KClcbn1cblxuLy8gY29udmVydC5jb21wb3NlKG13LCBtdywgbXcpXG4vLyBjb252ZXJ0LmNvbXBvc2UoW213LCBtdywgbXddKVxuY29udmVydC5jb21wb3NlID0gZnVuY3Rpb24gKGFycikge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGFyciA9IEFycmF5LmZyb20oYXJndW1lbnRzKVxuICB9XG4gIHJldHVybiBjb21wb3NlKGFyci5tYXAoY29udmVydCkpXG59XG5cbmNvbnZlcnQuYmFjayA9IGZ1bmN0aW9uIChtdykge1xuICBpZiAodHlwZW9mIG13ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWlkZGxld2FyZSBtdXN0IGJlIGEgZnVuY3Rpb24nKVxuICB9XG4gIGlmIChtdy5jb25zdHJ1Y3Rvci5uYW1lID09PSAnR2VuZXJhdG9yRnVuY3Rpb24nKSB7XG4gICAgLy8gYXNzdW1lIGl0J3MgZ2VuZXJhdG9yIG1pZGRsZXdhcmVcbiAgICByZXR1cm4gbXdcbiAgfVxuICBjb25zdCBjb252ZXJ0ZWQgPSBmdW5jdGlvbiAqIChuZXh0KSB7XG4gICAgbGV0IGN0eCA9IHRoaXNcbiAgICBsZXQgY2FsbGVkID0gZmFsc2VcbiAgICAvLyBubyBuZWVkIHRyeS4uLmNhdGNoIGhlcmUsIGl0J3Mgb2sgZXZlbiBgbXcoKWAgdGhyb3cgZXhjZXB0aW9uXG4gICAgeWllbGQgUHJvbWlzZS5yZXNvbHZlKG13KGN0eCwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGNhbGxlZCkge1xuICAgICAgICAvLyBndWFyZCBhZ2FpbnN0IG11bHRpcGxlIG5leHQoKSBjYWxsc1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20va29hanMvY29tcG9zZS9ibG9iLzRlM2U5NmJhZjU4YjgxN2Q3MWJkNDRhOGMwZDc4YmI0MjYyM2FhOTUvaW5kZXguanMjTDM2XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ25leHQoKSBjYWxsZWQgbXVsdGlwbGUgdGltZXMnKSlcbiAgICAgIH1cbiAgICAgIGNhbGxlZCA9IHRydWVcbiAgICAgIHJldHVybiBjby5jYWxsKGN0eCwgbmV4dClcbiAgICB9KSlcbiAgfVxuICBjb252ZXJ0ZWQuX25hbWUgPSBtdy5fbmFtZSB8fCBtdy5uYW1lXG4gIHJldHVybiBjb252ZXJ0ZWRcbn1cbiIsIlxuLyoqXG4gKiBzbGljZSgpIHJlZmVyZW5jZS5cbiAqL1xuXG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbi8qKlxuICogRXhwb3NlIGBjb2AuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBjb1snZGVmYXVsdCddID0gY28uY28gPSBjbztcblxuLyoqXG4gKiBXcmFwIHRoZSBnaXZlbiBnZW5lcmF0b3IgYGZuYCBpbnRvIGFcbiAqIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHByb21pc2UuXG4gKiBUaGlzIGlzIGEgc2VwYXJhdGUgZnVuY3Rpb24gc28gdGhhdFxuICogZXZlcnkgYGNvKClgIGNhbGwgZG9lc24ndCBjcmVhdGUgYSBuZXcsXG4gKiB1bm5lY2Vzc2FyeSBjbG9zdXJlLlxuICpcbiAqIEBwYXJhbSB7R2VuZXJhdG9yRnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuY28ud3JhcCA9IGZ1bmN0aW9uIChmbikge1xuICBjcmVhdGVQcm9taXNlLl9fZ2VuZXJhdG9yRnVuY3Rpb25fXyA9IGZuO1xuICByZXR1cm4gY3JlYXRlUHJvbWlzZTtcbiAgZnVuY3Rpb24gY3JlYXRlUHJvbWlzZSgpIHtcbiAgICByZXR1cm4gY28uY2FsbCh0aGlzLCBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxufTtcblxuLyoqXG4gKiBFeGVjdXRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24gb3IgYSBnZW5lcmF0b3JcbiAqIGFuZCByZXR1cm4gYSBwcm9taXNlLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtQcm9taXNlfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjbyhnZW4pIHtcbiAgdmFyIGN0eCA9IHRoaXM7XG4gIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXG5cbiAgLy8gd2Ugd3JhcCBldmVyeXRoaW5nIGluIGEgcHJvbWlzZSB0byBhdm9pZCBwcm9taXNlIGNoYWluaW5nLFxuICAvLyB3aGljaCBsZWFkcyB0byBtZW1vcnkgbGVhayBlcnJvcnMuXG4gIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vdGovY28vaXNzdWVzLzE4MFxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgaWYgKHR5cGVvZiBnZW4gPT09ICdmdW5jdGlvbicpIGdlbiA9IGdlbi5hcHBseShjdHgsIGFyZ3MpO1xuICAgIGlmICghZ2VuIHx8IHR5cGVvZiBnZW4ubmV4dCAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHJlc29sdmUoZ2VuKTtcblxuICAgIG9uRnVsZmlsbGVkKCk7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge01peGVkfSByZXNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgZnVuY3Rpb24gb25GdWxmaWxsZWQocmVzKSB7XG4gICAgICB2YXIgcmV0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0ID0gZ2VuLm5leHQocmVzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICAgIG5leHQocmV0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgZnVuY3Rpb24gb25SZWplY3RlZChlcnIpIHtcbiAgICAgIHZhciByZXQ7XG4gICAgICB0cnkge1xuICAgICAgICByZXQgPSBnZW4udGhyb3coZXJyKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICAgIG5leHQocmV0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG5leHQgdmFsdWUgaW4gdGhlIGdlbmVyYXRvcixcbiAgICAgKiByZXR1cm4gYSBwcm9taXNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJldFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG5cbiAgICBmdW5jdGlvbiBuZXh0KHJldCkge1xuICAgICAgaWYgKHJldC5kb25lKSByZXR1cm4gcmVzb2x2ZShyZXQudmFsdWUpO1xuICAgICAgdmFyIHZhbHVlID0gdG9Qcm9taXNlLmNhbGwoY3R4LCByZXQudmFsdWUpO1xuICAgICAgaWYgKHZhbHVlICYmIGlzUHJvbWlzZSh2YWx1ZSkpIHJldHVybiB2YWx1ZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKTtcbiAgICAgIHJldHVybiBvblJlamVjdGVkKG5ldyBUeXBlRXJyb3IoJ1lvdSBtYXkgb25seSB5aWVsZCBhIGZ1bmN0aW9uLCBwcm9taXNlLCBnZW5lcmF0b3IsIGFycmF5LCBvciBvYmplY3QsICdcbiAgICAgICAgKyAnYnV0IHRoZSBmb2xsb3dpbmcgb2JqZWN0IHdhcyBwYXNzZWQ6IFwiJyArIFN0cmluZyhyZXQudmFsdWUpICsgJ1wiJykpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQ29udmVydCBhIGB5aWVsZGBlZCB2YWx1ZSBpbnRvIGEgcHJvbWlzZS5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSBvYmpcbiAqIEByZXR1cm4ge1Byb21pc2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiB0b1Byb21pc2Uob2JqKSB7XG4gIGlmICghb2JqKSByZXR1cm4gb2JqO1xuICBpZiAoaXNQcm9taXNlKG9iaikpIHJldHVybiBvYmo7XG4gIGlmIChpc0dlbmVyYXRvckZ1bmN0aW9uKG9iaikgfHwgaXNHZW5lcmF0b3Iob2JqKSkgcmV0dXJuIGNvLmNhbGwodGhpcywgb2JqKTtcbiAgaWYgKCdmdW5jdGlvbicgPT0gdHlwZW9mIG9iaikgcmV0dXJuIHRodW5rVG9Qcm9taXNlLmNhbGwodGhpcywgb2JqKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkgcmV0dXJuIGFycmF5VG9Qcm9taXNlLmNhbGwodGhpcywgb2JqKTtcbiAgaWYgKGlzT2JqZWN0KG9iaikpIHJldHVybiBvYmplY3RUb1Byb21pc2UuY2FsbCh0aGlzLCBvYmopO1xuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYSB0aHVuayB0byBhIHByb21pc2UuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn1cbiAqIEByZXR1cm4ge1Byb21pc2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiB0aHVua1RvUHJvbWlzZShmbikge1xuICB2YXIgY3R4ID0gdGhpcztcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmbi5jYWxsKGN0eCwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHJlcyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHJlc29sdmUocmVzKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ29udmVydCBhbiBhcnJheSBvZiBcInlpZWxkYWJsZXNcIiB0byBhIHByb21pc2UuXG4gKiBVc2VzIGBQcm9taXNlLmFsbCgpYCBpbnRlcm5hbGx5LlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IG9ialxuICogQHJldHVybiB7UHJvbWlzZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGFycmF5VG9Qcm9taXNlKG9iaikge1xuICByZXR1cm4gUHJvbWlzZS5hbGwob2JqLm1hcCh0b1Byb21pc2UsIHRoaXMpKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIG9iamVjdCBvZiBcInlpZWxkYWJsZXNcIiB0byBhIHByb21pc2UuXG4gKiBVc2VzIGBQcm9taXNlLmFsbCgpYCBpbnRlcm5hbGx5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge1Byb21pc2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBvYmplY3RUb1Byb21pc2Uob2JqKXtcbiAgdmFyIHJlc3VsdHMgPSBuZXcgb2JqLmNvbnN0cnVjdG9yKCk7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgdmFyIHByb21pc2VzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIHZhciBwcm9taXNlID0gdG9Qcm9taXNlLmNhbGwodGhpcywgb2JqW2tleV0pO1xuICAgIGlmIChwcm9taXNlICYmIGlzUHJvbWlzZShwcm9taXNlKSkgZGVmZXIocHJvbWlzZSwga2V5KTtcbiAgICBlbHNlIHJlc3VsdHNba2V5XSA9IG9ialtrZXldO1xuICB9XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGRlZmVyKHByb21pc2UsIGtleSkge1xuICAgIC8vIHByZWRlZmluZSB0aGUga2V5IGluIHRoZSByZXN1bHRcbiAgICByZXN1bHRzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgcHJvbWlzZXMucHVzaChwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgcmVzdWx0c1trZXldID0gcmVzO1xuICAgIH0pKTtcbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGBvYmpgIGlzIGEgcHJvbWlzZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaXNQcm9taXNlKG9iaikge1xuICByZXR1cm4gJ2Z1bmN0aW9uJyA9PSB0eXBlb2Ygb2JqLnRoZW47XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYG9iamAgaXMgYSBnZW5lcmF0b3IuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gb2JqXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaXNHZW5lcmF0b3Iob2JqKSB7XG4gIHJldHVybiAnZnVuY3Rpb24nID09IHR5cGVvZiBvYmoubmV4dCAmJiAnZnVuY3Rpb24nID09IHR5cGVvZiBvYmoudGhyb3c7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYG9iamAgaXMgYSBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gb2JqXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGlzR2VuZXJhdG9yRnVuY3Rpb24ob2JqKSB7XG4gIHZhciBjb25zdHJ1Y3RvciA9IG9iai5jb25zdHJ1Y3RvcjtcbiAgaWYgKCFjb25zdHJ1Y3RvcikgcmV0dXJuIGZhbHNlO1xuICBpZiAoJ0dlbmVyYXRvckZ1bmN0aW9uJyA9PT0gY29uc3RydWN0b3IubmFtZSB8fCAnR2VuZXJhdG9yRnVuY3Rpb24nID09PSBjb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSkgcmV0dXJuIHRydWU7XG4gIHJldHVybiBpc0dlbmVyYXRvcihjb25zdHJ1Y3Rvci5wcm90b3R5cGUpO1xufVxuXG4vKipcbiAqIENoZWNrIGZvciBwbGFpbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiBPYmplY3QgPT0gdmFsLmNvbnN0cnVjdG9yO1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IFByb21pc2UgPSByZXF1aXJlKCdhbnktcHJvbWlzZScpXG5cbi8qKlxuICogRXhwb3NlIGNvbXBvc2l0b3IuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBjb21wb3NlXG5cbi8qKlxuICogQ29tcG9zZSBgbWlkZGxld2FyZWAgcmV0dXJuaW5nXG4gKiBhIGZ1bGx5IHZhbGlkIG1pZGRsZXdhcmUgY29tcHJpc2VkXG4gKiBvZiBhbGwgdGhvc2Ugd2hpY2ggYXJlIHBhc3NlZC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBtaWRkbGV3YXJlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY29tcG9zZSAobWlkZGxld2FyZSkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkobWlkZGxld2FyZSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ01pZGRsZXdhcmUgc3RhY2sgbXVzdCBiZSBhbiBhcnJheSEnKVxuICBmb3IgKGNvbnN0IGZuIG9mIG1pZGRsZXdhcmUpIHtcbiAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdNaWRkbGV3YXJlIG11c3QgYmUgY29tcG9zZWQgb2YgZnVuY3Rpb25zIScpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjb250ZXh0LCBuZXh0KSB7XG4gICAgLy8gbGFzdCBjYWxsZWQgbWlkZGxld2FyZSAjXG4gICAgbGV0IGluZGV4ID0gLTFcbiAgICByZXR1cm4gZGlzcGF0Y2goMClcbiAgICBmdW5jdGlvbiBkaXNwYXRjaCAoaSkge1xuICAgICAgaWYgKGkgPD0gaW5kZXgpIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ25leHQoKSBjYWxsZWQgbXVsdGlwbGUgdGltZXMnKSlcbiAgICAgIGluZGV4ID0gaVxuICAgICAgbGV0IGZuID0gbWlkZGxld2FyZVtpXVxuICAgICAgaWYgKGkgPT09IG1pZGRsZXdhcmUubGVuZ3RoKSBmbiA9IG5leHRcbiAgICAgIGlmICghZm4pIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmbihjb250ZXh0LCBmdW5jdGlvbiBuZXh0ICgpIHtcbiAgICAgICAgICByZXR1cm4gZGlzcGF0Y2goaSArIDEpXG4gICAgICAgIH0pKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcmVnaXN0ZXInKSgpLlByb21pc2VcbiIsIlwidXNlIHN0cmljdFwiXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbG9hZGVyJykoZ2xvYmFsLCBsb2FkSW1wbGVtZW50YXRpb24pO1xuXG4vKipcbiAqIE5vZGUuanMgdmVyc2lvbiBvZiBsb2FkSW1wbGVtZW50YXRpb24uXG4gKlxuICogUmVxdWlyZXMgdGhlIGdpdmVuIGltcGxlbWVudGF0aW9uIGFuZCByZXR1cm5zIHRoZSByZWdpc3RyYXRpb25cbiAqIGNvbnRhaW5pbmcge1Byb21pc2UsIGltcGxlbWVudGF0aW9ufVxuICpcbiAqIElmIGltcGxlbWVudGF0aW9uIGlzIHVuZGVmaW5lZCBvciBnbG9iYWwuUHJvbWlzZSwgbG9hZHMgaXRcbiAqIE90aGVyd2lzZSB1c2VzIHJlcXVpcmVcbiAqL1xuZnVuY3Rpb24gbG9hZEltcGxlbWVudGF0aW9uKGltcGxlbWVudGF0aW9uKXtcbiAgdmFyIGltcGwgPSBudWxsXG5cbiAgaWYoc2hvdWxkUHJlZmVyR2xvYmFsUHJvbWlzZShpbXBsZW1lbnRhdGlvbikpe1xuICAgIC8vIGlmIG5vIGltcGxlbWVudGF0aW9uIG9yIGVudiBzcGVjaWZpZWQgdXNlIGdsb2JhbC5Qcm9taXNlXG4gICAgaW1wbCA9IHtcbiAgICAgIFByb21pc2U6IGdsb2JhbC5Qcm9taXNlLFxuICAgICAgaW1wbGVtZW50YXRpb246ICdnbG9iYWwuUHJvbWlzZSdcbiAgICB9XG4gIH0gZWxzZSBpZihpbXBsZW1lbnRhdGlvbil7XG4gICAgLy8gaWYgaW1wbGVtZW50YXRpb24gc3BlY2lmaWVkLCByZXF1aXJlIGl0XG4gICAgdmFyIGxpYiA9IHJlcXVpcmUoaW1wbGVtZW50YXRpb24pXG4gICAgaW1wbCA9IHtcbiAgICAgIFByb21pc2U6IGxpYi5Qcm9taXNlIHx8IGxpYixcbiAgICAgIGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvblxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyB0cnkgdG8gYXV0byBkZXRlY3QgaW1wbGVtZW50YXRpb24uIFRoaXMgaXMgbm9uLWRldGVybWluaXN0aWNcbiAgICAvLyBhbmQgc2hvdWxkIHByZWZlciBvdGhlciBicmFuY2hlcywgYnV0IHRoaXMgaXMgb3VyIGxhc3QgY2hhbmNlXG4gICAgLy8gdG8gbG9hZCBzb21ldGhpbmcgd2l0aG91dCB0aHJvd2luZyBlcnJvclxuICAgIGltcGwgPSB0cnlBdXRvRGV0ZWN0KClcbiAgfVxuXG4gIGlmKGltcGwgPT09IG51bGwpe1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgYW55LXByb21pc2UgaW1wbGVtZW50YXRpb24gbm9yJytcbiAgICAgICcgZ2xvYmFsLlByb21pc2UuIFlvdSBtdXN0IGluc3RhbGwgcG9seWZpbGwgb3IgY2FsbCcrXG4gICAgICAnIHJlcXVpcmUoXCJhbnktcHJvbWlzZS9yZWdpc3RlclwiKSB3aXRoIHlvdXIgcHJlZmVycmVkJytcbiAgICAgICcgaW1wbGVtZW50YXRpb24sIGUuZy4gcmVxdWlyZShcImFueS1wcm9taXNlL3JlZ2lzdGVyL2JsdWViaXJkXCIpJytcbiAgICAgICcgb24gYXBwbGljYXRpb24gbG9hZCBwcmlvciB0byBhbnkgcmVxdWlyZShcImFueS1wcm9taXNlXCIpLicpXG4gIH1cblxuICByZXR1cm4gaW1wbFxufVxuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGdsb2JhbC5Qcm9taXNlIHNob3VsZCBiZSBwcmVmZXJyZWQgaWYgYW4gaW1wbGVtZW50YXRpb25cbiAqIGhhcyBub3QgYmVlbiByZWdpc3RlcmVkLlxuICovXG5mdW5jdGlvbiBzaG91bGRQcmVmZXJHbG9iYWxQcm9taXNlKGltcGxlbWVudGF0aW9uKXtcbiAgaWYoaW1wbGVtZW50YXRpb24pe1xuICAgIHJldHVybiBpbXBsZW1lbnRhdGlvbiA9PT0gJ2dsb2JhbC5Qcm9taXNlJ1xuICB9IGVsc2UgaWYodHlwZW9mIGdsb2JhbC5Qcm9taXNlICE9PSAndW5kZWZpbmVkJyl7XG4gICAgLy8gTG9hZCBnbG9iYWwgcHJvbWlzZSBpZiBpbXBsZW1lbnRhdGlvbiBub3Qgc3BlY2lmaWVkXG4gICAgLy8gVmVyc2lvbnMgPCAwLjExIGRpZCBub3QgaGF2ZSBnbG9iYWwgUHJvbWlzZVxuICAgIC8vIERvIG5vdCB1c2UgZm9yIHZlcnNpb24gPCAwLjEyIGFzIHZlcnNpb24gMC4xMSBjb250YWluZWQgYnVnZ3kgdmVyc2lvbnNcbiAgICB2YXIgdmVyc2lvbiA9ICgvdihcXGQrKVxcLihcXGQrKVxcLihcXGQrKS8pLmV4ZWMocHJvY2Vzcy52ZXJzaW9uKVxuICAgIHJldHVybiAhKHZlcnNpb24gJiYgK3ZlcnNpb25bMV0gPT0gMCAmJiArdmVyc2lvblsyXSA8IDEyKVxuICB9XG5cbiAgLy8gZG8gbm90IGhhdmUgZ2xvYmFsLlByb21pc2Ugb3IgYW5vdGhlciBpbXBsZW1lbnRhdGlvbiB3YXMgc3BlY2lmaWVkXG4gIHJldHVybiBmYWxzZVxufVxuXG4vKipcbiAqIExvb2sgZm9yIGNvbW1vbiBsaWJzIGFzIGxhc3QgcmVzb3J0IHRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0XG4gKiB0aGlzIHdpbGwgcmV0dXJuIGEgZGVzaXJlZCBpbXBsZW1lbnRhdGlvbiBvciBldmVuIGJlIGRldGVybWluaXN0aWMuXG4gKiBUaGUgcHJpb3JpdHkgaXMgYWxzbyBuZWFybHkgYXJiaXRyYXJ5LiBXZSBhcmUgb25seSBkb2luZyB0aGlzXG4gKiBmb3Igb2xkZXIgdmVyc2lvbnMgb2YgTm9kZS5qcyA8MC4xMiB0aGF0IGRvIG5vdCBoYXZlIGEgcmVhc29uYWJsZVxuICogZ2xvYmFsLlByb21pc2UgaW1wbGVtZW50YXRpb24gYW5kIHdlIHRoZSB1c2VyIGhhcyBub3QgcmVnaXN0ZXJlZFxuICogdGhlIHByZWZlcmVuY2UuIFRoaXMgcHJlc2VydmVzIHRoZSBiZWhhdmlvciBvZiBhbnktcHJvbWlzZSA8PSAwLjFcbiAqIGFuZCBtYXkgYmUgZGVwcmVjYXRlZCBvciByZW1vdmVkIGluIHRoZSBmdXR1cmVcbiAqL1xuZnVuY3Rpb24gdHJ5QXV0b0RldGVjdCgpe1xuICB2YXIgbGlicyA9IFtcbiAgICAgIFwiZXM2LXByb21pc2VcIixcbiAgICAgIFwicHJvbWlzZVwiLFxuICAgICAgXCJuYXRpdmUtcHJvbWlzZS1vbmx5XCIsXG4gICAgICBcImJsdWViaXJkXCIsXG4gICAgICBcInJzdnBcIixcbiAgICAgIFwid2hlblwiLFxuICAgICAgXCJxXCIsXG4gICAgICBcInBpbmtpZVwiLFxuICAgICAgXCJsaWVcIixcbiAgICAgIFwidm93XCJdXG4gIHZhciBpID0gMCwgbGVuID0gbGlicy5sZW5ndGhcbiAgZm9yKDsgaSA8IGxlbjsgaSsrKXtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGxvYWRJbXBsZW1lbnRhdGlvbihsaWJzW2ldKVxuICAgIH0gY2F0Y2goZSl7fVxuICB9XG4gIHJldHVybiBudWxsXG59XG4iLCJcInVzZSBzdHJpY3RcIlxuICAgIC8vIGdsb2JhbCBrZXkgZm9yIHVzZXIgcHJlZmVycmVkIHJlZ2lzdHJhdGlvblxudmFyIFJFR0lTVFJBVElPTl9LRVkgPSAnQEBhbnktcHJvbWlzZS9SRUdJU1RSQVRJT04nLFxuICAgIC8vIFByaW9yIHJlZ2lzdHJhdGlvbiAocHJlZmVycmVkIG9yIGRldGVjdGVkKVxuICAgIHJlZ2lzdGVyZWQgPSBudWxsXG5cbi8qKlxuICogUmVnaXN0ZXJzIHRoZSBnaXZlbiBpbXBsZW1lbnRhdGlvbi4gIEFuIGltcGxlbWVudGF0aW9uIG11c3RcbiAqIGJlIHJlZ2lzdGVyZWQgcHJpb3IgdG8gYW55IGNhbGwgdG8gYHJlcXVpcmUoXCJhbnktcHJvbWlzZVwiKWAsXG4gKiB0eXBpY2FsbHkgb24gYXBwbGljYXRpb24gbG9hZC5cbiAqXG4gKiBJZiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMsIHdpbGwgcmV0dXJuIHJlZ2lzdHJhdGlvbiBpblxuICogZm9sbG93aW5nIHByaW9yaXR5OlxuICpcbiAqIEZvciBOb2RlLmpzOlxuICpcbiAqIDEuIFByZXZpb3VzIHJlZ2lzdHJhdGlvblxuICogMi4gZ2xvYmFsLlByb21pc2UgaWYgbm9kZS5qcyB2ZXJzaW9uID49IDAuMTJcbiAqIDMuIEF1dG8gZGV0ZWN0ZWQgcHJvbWlzZSBiYXNlZCBvbiBmaXJzdCBzdWNlc3NmdWwgcmVxdWlyZSBvZlxuICogICAga25vd24gcHJvbWlzZSBsaWJyYXJpZXMuIE5vdGUgdGhpcyBpcyBhIGxhc3QgcmVzb3J0LCBhcyB0aGVcbiAqICAgIGxvYWRlZCBsaWJyYXJ5IGlzIG5vbi1kZXRlcm1pbmlzdGljLiBub2RlLmpzID49IDAuMTIgd2lsbFxuICogICAgYWx3YXlzIHVzZSBnbG9iYWwuUHJvbWlzZSBvdmVyIHRoaXMgcHJpb3JpdHkgbGlzdC5cbiAqIDQuIFRocm93cyBlcnJvci5cbiAqXG4gKiBGb3IgQnJvd3NlcjpcbiAqXG4gKiAxLiBQcmV2aW91cyByZWdpc3RyYXRpb25cbiAqIDIuIHdpbmRvdy5Qcm9taXNlXG4gKiAzLiBUaHJvd3MgZXJyb3IuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiBQcm9taXNlOiBEZXNpcmVkIFByb21pc2UgY29uc3RydWN0b3JcbiAqIGdsb2JhbDogQm9vbGVhbiAtIFNob3VsZCB0aGUgcmVnaXN0cmF0aW9uIGJlIGNhY2hlZCBpbiBhIGdsb2JhbCB2YXJpYWJsZSB0b1xuICogYWxsb3cgY3Jvc3MgZGVwZW5kZW5jeS9idW5kbGUgcmVnaXN0cmF0aW9uPyAgKGRlZmF1bHQgdHJ1ZSlcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihyb290LCBsb2FkSW1wbGVtZW50YXRpb24pe1xuICByZXR1cm4gZnVuY3Rpb24gcmVnaXN0ZXIoaW1wbGVtZW50YXRpb24sIG9wdHMpe1xuICAgIGltcGxlbWVudGF0aW9uID0gaW1wbGVtZW50YXRpb24gfHwgbnVsbFxuICAgIG9wdHMgPSBvcHRzIHx8IHt9XG4gICAgLy8gZ2xvYmFsIHJlZ2lzdHJhdGlvbiB1bmxlc3MgZXhwbGljaXRseSAge2dsb2JhbDogZmFsc2V9IGluIG9wdGlvbnMgKGRlZmF1bHQgdHJ1ZSlcbiAgICB2YXIgcmVnaXN0ZXJHbG9iYWwgPSBvcHRzLmdsb2JhbCAhPT0gZmFsc2U7XG5cbiAgICAvLyBsb2FkIGFueSBwcmV2aW91cyBnbG9iYWwgcmVnaXN0cmF0aW9uXG4gICAgaWYocmVnaXN0ZXJlZCA9PT0gbnVsbCAmJiByZWdpc3Rlckdsb2JhbCl7XG4gICAgICByZWdpc3RlcmVkID0gcm9vdFtSRUdJU1RSQVRJT05fS0VZXSB8fCBudWxsXG4gICAgfVxuXG4gICAgaWYocmVnaXN0ZXJlZCAhPT0gbnVsbFxuICAgICAgICAmJiBpbXBsZW1lbnRhdGlvbiAhPT0gbnVsbFxuICAgICAgICAmJiByZWdpc3RlcmVkLmltcGxlbWVudGF0aW9uICE9PSBpbXBsZW1lbnRhdGlvbil7XG4gICAgICAvLyBUaHJvdyBlcnJvciBpZiBhdHRlbXB0aW5nIHRvIHJlZGVmaW5lIGltcGxlbWVudGF0aW9uXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FueS1wcm9taXNlIGFscmVhZHkgZGVmaW5lZCBhcyBcIicrcmVnaXN0ZXJlZC5pbXBsZW1lbnRhdGlvbitcbiAgICAgICAgJ1wiLiAgWW91IGNhbiBvbmx5IHJlZ2lzdGVyIGFuIGltcGxlbWVudGF0aW9uIGJlZm9yZSB0aGUgZmlyc3QgJytcbiAgICAgICAgJyBjYWxsIHRvIHJlcXVpcmUoXCJhbnktcHJvbWlzZVwiKSBhbmQgYW4gaW1wbGVtZW50YXRpb24gY2Fubm90IGJlIGNoYW5nZWQnKVxuICAgIH1cblxuICAgIGlmKHJlZ2lzdGVyZWQgPT09IG51bGwpe1xuICAgICAgLy8gdXNlIHByb3ZpZGVkIGltcGxlbWVudGF0aW9uXG4gICAgICBpZihpbXBsZW1lbnRhdGlvbiAhPT0gbnVsbCAmJiB0eXBlb2Ygb3B0cy5Qcm9taXNlICE9PSAndW5kZWZpbmVkJyl7XG4gICAgICAgIHJlZ2lzdGVyZWQgPSB7XG4gICAgICAgICAgUHJvbWlzZTogb3B0cy5Qcm9taXNlLFxuICAgICAgICAgIGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvblxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZXF1aXJlIGltcGxlbWVudGF0aW9uIGlmIGltcGxlbWVudGF0aW9uIGlzIHNwZWNpZmllZCBidXQgbm90IHByb3ZpZGVkXG4gICAgICAgIHJlZ2lzdGVyZWQgPSBsb2FkSW1wbGVtZW50YXRpb24oaW1wbGVtZW50YXRpb24pXG4gICAgICB9XG5cbiAgICAgIGlmKHJlZ2lzdGVyR2xvYmFsKXtcbiAgICAgICAgLy8gcmVnaXN0ZXIgcHJlZmVyZW5jZSBnbG9iYWxseSBpbiBjYXNlIG11bHRpcGxlIGluc3RhbGxhdGlvbnNcbiAgICAgICAgcm9vdFtSRUdJU1RSQVRJT05fS0VZXSA9IHJlZ2lzdGVyZWRcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVnaXN0ZXJlZFxuICB9XG59XG4iLCJmdW5jdGlvbiB3ZWJwYWNrRW1wdHlDb250ZXh0KHJlcSkge1xuXHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0dGhyb3cgZTtcbn1cbndlYnBhY2tFbXB0eUNvbnRleHQua2V5cyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gW107IH07XG53ZWJwYWNrRW1wdHlDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrRW1wdHlDb250ZXh0O1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrRW1wdHlDb250ZXh0O1xud2VicGFja0VtcHR5Q29udGV4dC5pZCA9IDEwNDsiLCJcclxuaW1wb3J0ICogYXMgaHR0cCBmcm9tICdodHRwJztcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGFwcDogYW55LCBzb2NrZXQpIHtcclxuICBjb25zdCBzZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcihhcHAuY2FsbGJhY2soKSk7XHJcbiAgY29uc3QgaW8gPSBzb2NrZXQoc2VydmVyLCB7XHJcbiAgICBwYXRoOiAnL3NvY2tldCcsXHJcbiAgICBzZXJ2ZUNsaWVudDogZmFsc2UsXHJcbiAgICBwaW5nSW50ZXJ2YWw6IDEwMDAwLFxyXG4gICAgcGluZ1RpbWVvdXQ6IDUwMDAsXHJcbiAgICBjb29raWU6IGZhbHNlXHJcbiAgfSk7XHJcbiAgLy8gbWlkZGxld2FyZVxyXG4gIGlvLnVzZSgoc29ja2V0OiBhbnksIG5leHQ6IGFueSkgPT4ge1xyXG4gICAgbmV4dCgpO1xyXG4gIH0pO1xyXG5cclxuICBpby5vbignY29ubmVjdGlvbicsIGZ1bmN0aW9uIChzb2NrZXQ6IGFueSkge1xyXG4gIH0pO1xyXG5cclxuICBpby5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyOkVycm9yKSB7XHJcbiAgfSk7XHJcblxyXG4gIHNlcnZlci5saXN0ZW4oMzAwNilcclxufSIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xudmFyIHJlYWQgPSByZXF1aXJlKCdmcycpLnJlYWRGaWxlU3luYztcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIGV4aXN0cyA9IHJlcXVpcmUoJ2ZzJykuZXhpc3RzU3luYztcbnZhciBlbmdpbmUgPSByZXF1aXJlKCdlbmdpbmUuaW8nKTtcbnZhciBjbGllbnRWZXJzaW9uID0gcmVxdWlyZSgnc29ja2V0LmlvLWNsaWVudC9wYWNrYWdlLmpzb24nKS52ZXJzaW9uO1xudmFyIENsaWVudCA9IHJlcXVpcmUoJy4vY2xpZW50Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbnZhciBOYW1lc3BhY2UgPSByZXF1aXJlKCcuL25hbWVzcGFjZScpO1xudmFyIFBhcmVudE5hbWVzcGFjZSA9IHJlcXVpcmUoJy4vcGFyZW50LW5hbWVzcGFjZScpO1xudmFyIEFkYXB0ZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tYWRhcHRlcicpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pbzpzZXJ2ZXInKTtcbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlcnZlcjtcblxuLyoqXG4gKiBTb2NrZXQuSU8gY2xpZW50IHNvdXJjZS5cbiAqL1xuXG52YXIgY2xpZW50U291cmNlID0gdW5kZWZpbmVkO1xudmFyIGNsaWVudFNvdXJjZU1hcCA9IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBTZXJ2ZXIgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtodHRwLlNlcnZlcnxOdW1iZXJ8T2JqZWN0fSBzcnYgaHR0cCBzZXJ2ZXIsIHBvcnQgb3Igb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBTZXJ2ZXIoc3J2LCBvcHRzKXtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNlcnZlcikpIHJldHVybiBuZXcgU2VydmVyKHNydiwgb3B0cyk7XG4gIGlmICgnb2JqZWN0JyA9PSB0eXBlb2Ygc3J2ICYmIHNydiBpbnN0YW5jZW9mIE9iamVjdCAmJiAhc3J2Lmxpc3Rlbikge1xuICAgIG9wdHMgPSBzcnY7XG4gICAgc3J2ID0gbnVsbDtcbiAgfVxuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgdGhpcy5uc3BzID0ge307XG4gIHRoaXMucGFyZW50TnNwcyA9IG5ldyBNYXAoKTtcbiAgdGhpcy5wYXRoKG9wdHMucGF0aCB8fCAnL3NvY2tldC5pbycpO1xuICB0aGlzLnNlcnZlQ2xpZW50KGZhbHNlICE9PSBvcHRzLnNlcnZlQ2xpZW50KTtcbiAgdGhpcy5wYXJzZXIgPSBvcHRzLnBhcnNlciB8fCBwYXJzZXI7XG4gIHRoaXMuZW5jb2RlciA9IG5ldyB0aGlzLnBhcnNlci5FbmNvZGVyKCk7XG4gIHRoaXMuYWRhcHRlcihvcHRzLmFkYXB0ZXIgfHwgQWRhcHRlcik7XG4gIHRoaXMub3JpZ2lucyhvcHRzLm9yaWdpbnMgfHwgJyo6KicpO1xuICB0aGlzLnNvY2tldHMgPSB0aGlzLm9mKCcvJyk7XG4gIGlmIChzcnYpIHRoaXMuYXR0YWNoKHNydiwgb3B0cyk7XG59XG5cbi8qKlxuICogU2VydmVyIHJlcXVlc3QgdmVyaWZpY2F0aW9uIGZ1bmN0aW9uLCB0aGF0IGNoZWNrcyBmb3IgYWxsb3dlZCBvcmlnaW5zXG4gKlxuICogQHBhcmFtIHtodHRwLkluY29taW5nTWVzc2FnZX0gcmVxIHJlcXVlc3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aXRoIHRoZSByZXN1bHQ6IGBmbihlcnIsIHN1Y2Nlc3MpYFxuICovXG5cblNlcnZlci5wcm90b3R5cGUuY2hlY2tSZXF1ZXN0ID0gZnVuY3Rpb24ocmVxLCBmbikge1xuICB2YXIgb3JpZ2luID0gcmVxLmhlYWRlcnMub3JpZ2luIHx8IHJlcS5oZWFkZXJzLnJlZmVyZXI7XG5cbiAgLy8gZmlsZTovLyBVUkxzIHByb2R1Y2UgYSBudWxsIE9yaWdpbiB3aGljaCBjYW4ndCBiZSBhdXRob3JpemVkIHZpYSBlY2hvLWJhY2tcbiAgaWYgKCdudWxsJyA9PSBvcmlnaW4gfHwgbnVsbCA9PSBvcmlnaW4pIG9yaWdpbiA9ICcqJztcblxuICBpZiAoISFvcmlnaW4gJiYgdHlwZW9mKHRoaXMuX29yaWdpbnMpID09ICdmdW5jdGlvbicpIHJldHVybiB0aGlzLl9vcmlnaW5zKG9yaWdpbiwgZm4pO1xuICBpZiAodGhpcy5fb3JpZ2lucy5pbmRleE9mKCcqOionKSAhPT0gLTEpIHJldHVybiBmbihudWxsLCB0cnVlKTtcbiAgaWYgKG9yaWdpbikge1xuICAgIHRyeSB7XG4gICAgICB2YXIgcGFydHMgPSB1cmwucGFyc2Uob3JpZ2luKTtcbiAgICAgIHZhciBkZWZhdWx0UG9ydCA9ICdodHRwczonID09IHBhcnRzLnByb3RvY29sID8gNDQzIDogODA7XG4gICAgICBwYXJ0cy5wb3J0ID0gcGFydHMucG9ydCAhPSBudWxsXG4gICAgICAgID8gcGFydHMucG9ydFxuICAgICAgICA6IGRlZmF1bHRQb3J0O1xuICAgICAgdmFyIG9rID1cbiAgICAgICAgfnRoaXMuX29yaWdpbnMuaW5kZXhPZihwYXJ0cy5wcm90b2NvbCArICcvLycgKyBwYXJ0cy5ob3N0bmFtZSArICc6JyArIHBhcnRzLnBvcnQpIHx8XG4gICAgICAgIH50aGlzLl9vcmlnaW5zLmluZGV4T2YocGFydHMuaG9zdG5hbWUgKyAnOicgKyBwYXJ0cy5wb3J0KSB8fFxuICAgICAgICB+dGhpcy5fb3JpZ2lucy5pbmRleE9mKHBhcnRzLmhvc3RuYW1lICsgJzoqJykgfHxcbiAgICAgICAgfnRoaXMuX29yaWdpbnMuaW5kZXhPZignKjonICsgcGFydHMucG9ydCk7XG4gICAgICBkZWJ1Zygnb3JpZ2luICVzIGlzICVzdmFsaWQnLCBvcmlnaW4sICEhb2sgPyAnJyA6ICdub3QgJyk7XG4gICAgICByZXR1cm4gZm4obnVsbCwgISFvayk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICB9XG4gIH1cbiAgZm4obnVsbCwgZmFsc2UpO1xufTtcblxuLyoqXG4gKiBTZXRzL2dldHMgd2hldGhlciBjbGllbnQgY29kZSBpcyBiZWluZyBzZXJ2ZWQuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSB2IHdoZXRoZXIgdG8gc2VydmUgY2xpZW50IGNvZGVcbiAqIEByZXR1cm4ge1NlcnZlcnxCb29sZWFufSBzZWxmIHdoZW4gc2V0dGluZyBvciB2YWx1ZSB3aGVuIGdldHRpbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU2VydmVyLnByb3RvdHlwZS5zZXJ2ZUNsaWVudCA9IGZ1bmN0aW9uKHYpe1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9zZXJ2ZUNsaWVudDtcbiAgdGhpcy5fc2VydmVDbGllbnQgPSB2O1xuICB2YXIgcmVzb2x2ZVBhdGggPSBmdW5jdGlvbihmaWxlKXtcbiAgICB2YXIgZmlsZXBhdGggPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi8uLi8uLi8nLCBmaWxlKTtcbiAgICBpZiAoZXhpc3RzKGZpbGVwYXRoKSkge1xuICAgICAgcmV0dXJuIGZpbGVwYXRoO1xuICAgIH1cbiAgICByZXR1cm4gcmVxdWlyZS5yZXNvbHZlKGZpbGUpO1xuICB9O1xuICBpZiAodiAmJiAhY2xpZW50U291cmNlKSB7XG4gICAgY2xpZW50U291cmNlID0gcmVhZChyZXNvbHZlUGF0aCggJ3NvY2tldC5pby1jbGllbnQvZGlzdC9zb2NrZXQuaW8uanMnKSwgJ3V0Zi04Jyk7XG4gICAgdHJ5IHtcbiAgICAgIGNsaWVudFNvdXJjZU1hcCA9IHJlYWQocmVzb2x2ZVBhdGgoICdzb2NrZXQuaW8tY2xpZW50L2Rpc3Qvc29ja2V0LmlvLmpzLm1hcCcpLCAndXRmLTgnKTtcbiAgICB9IGNhdGNoKGVycikge1xuICAgICAgZGVidWcoJ2NvdWxkIG5vdCBsb2FkIHNvdXJjZW1hcCBmaWxlJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBPbGQgc2V0dGluZ3MgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gKi9cblxudmFyIG9sZFNldHRpbmdzID0ge1xuICBcInRyYW5zcG9ydHNcIjogXCJ0cmFuc3BvcnRzXCIsXG4gIFwiaGVhcnRiZWF0IHRpbWVvdXRcIjogXCJwaW5nVGltZW91dFwiLFxuICBcImhlYXJ0YmVhdCBpbnRlcnZhbFwiOiBcInBpbmdJbnRlcnZhbFwiLFxuICBcImRlc3Ryb3kgYnVmZmVyIHNpemVcIjogXCJtYXhIdHRwQnVmZmVyU2l6ZVwiXG59O1xuXG4vKipcbiAqIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU2VydmVyLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihrZXksIHZhbCl7XG4gIGlmICgnYXV0aG9yaXphdGlvbicgPT0ga2V5ICYmIHZhbCkge1xuICAgIHRoaXMudXNlKGZ1bmN0aW9uKHNvY2tldCwgbmV4dCkge1xuICAgICAgdmFsKHNvY2tldC5yZXF1ZXN0LCBmdW5jdGlvbihlcnIsIGF1dGhvcml6ZWQpIHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIG5leHQobmV3IEVycm9yKGVycikpO1xuICAgICAgICBpZiAoIWF1dGhvcml6ZWQpIHJldHVybiBuZXh0KG5ldyBFcnJvcignTm90IGF1dGhvcml6ZWQnKSk7XG4gICAgICAgIG5leHQoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCdvcmlnaW5zJyA9PSBrZXkgJiYgdmFsKSB7XG4gICAgdGhpcy5vcmlnaW5zKHZhbCk7XG4gIH0gZWxzZSBpZiAoJ3Jlc291cmNlJyA9PSBrZXkpIHtcbiAgICB0aGlzLnBhdGgodmFsKTtcbiAgfSBlbHNlIGlmIChvbGRTZXR0aW5nc1trZXldICYmIHRoaXMuZWlvW29sZFNldHRpbmdzW2tleV1dKSB7XG4gICAgdGhpcy5laW9bb2xkU2V0dGluZ3Nba2V5XV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5lcnJvcignT3B0aW9uICVzIGlzIG5vdCB2YWxpZC4gUGxlYXNlIHJlZmVyIHRvIHRoZSBSRUFETUUuJywga2V5KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBFeGVjdXRlcyB0aGUgbWlkZGxld2FyZSBmb3IgYW4gaW5jb21pbmcgbmFtZXNwYWNlIG5vdCBhbHJlYWR5IGNyZWF0ZWQgb24gdGhlIHNlcnZlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBuYW1lIG9mIGluY29taW5nIG5hbWVzcGFjZVxuICogQHBhcmFtIHtPYmplY3R9IHF1ZXJ5IHRoZSBxdWVyeSBwYXJhbWV0ZXJzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBjYWxsYmFja1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU2VydmVyLnByb3RvdHlwZS5jaGVja05hbWVzcGFjZSA9IGZ1bmN0aW9uKG5hbWUsIHF1ZXJ5LCBmbil7XG4gIGlmICh0aGlzLnBhcmVudE5zcHMuc2l6ZSA9PT0gMCkgcmV0dXJuIGZuKGZhbHNlKTtcblxuICBjb25zdCBrZXlzSXRlcmF0b3IgPSB0aGlzLnBhcmVudE5zcHMua2V5cygpO1xuXG4gIGNvbnN0IHJ1biA9ICgpID0+IHtcbiAgICBsZXQgbmV4dEZuID0ga2V5c0l0ZXJhdG9yLm5leHQoKTtcbiAgICBpZiAobmV4dEZuLmRvbmUpIHtcbiAgICAgIHJldHVybiBmbihmYWxzZSk7XG4gICAgfVxuICAgIG5leHRGbi52YWx1ZShuYW1lLCBxdWVyeSwgKGVyciwgYWxsb3cpID0+IHtcbiAgICAgIGlmIChlcnIgfHzCoCFhbGxvdykge1xuICAgICAgICBydW4oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZuKHRoaXMucGFyZW50TnNwcy5nZXQobmV4dEZuLnZhbHVlKS5jcmVhdGVDaGlsZChuYW1lKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgcnVuKCk7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGNsaWVudCBzZXJ2aW5nIHBhdGguXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHYgcGF0aG5hbWVcbiAqIEByZXR1cm4ge1NlcnZlcnxTdHJpbmd9IHNlbGYgd2hlbiBzZXR0aW5nIG9yIHZhbHVlIHdoZW4gZ2V0dGluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TZXJ2ZXIucHJvdG90eXBlLnBhdGggPSBmdW5jdGlvbih2KXtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcGF0aDtcbiAgdGhpcy5fcGF0aCA9IHYucmVwbGFjZSgvXFwvJC8sICcnKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGFkYXB0ZXIgZm9yIHJvb21zLlxuICpcbiAqIEBwYXJhbSB7QWRhcHRlcn0gdiBwYXRobmFtZVxuICogQHJldHVybiB7U2VydmVyfEFkYXB0ZXJ9IHNlbGYgd2hlbiBzZXR0aW5nIG9yIHZhbHVlIHdoZW4gZ2V0dGluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TZXJ2ZXIucHJvdG90eXBlLmFkYXB0ZXIgPSBmdW5jdGlvbih2KXtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fYWRhcHRlcjtcbiAgdGhpcy5fYWRhcHRlciA9IHY7XG4gIGZvciAodmFyIGkgaW4gdGhpcy5uc3BzKSB7XG4gICAgaWYgKHRoaXMubnNwcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgdGhpcy5uc3BzW2ldLmluaXRBZGFwdGVyKCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBhbGxvd2VkIG9yaWdpbnMgZm9yIHJlcXVlc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfFN0cmluZ1tdfSB2IG9yaWdpbnNcbiAqIEByZXR1cm4ge1NlcnZlcnxBZGFwdGVyfSBzZWxmIHdoZW4gc2V0dGluZyBvciB2YWx1ZSB3aGVuIGdldHRpbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU2VydmVyLnByb3RvdHlwZS5vcmlnaW5zID0gZnVuY3Rpb24odil7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX29yaWdpbnM7XG5cbiAgdGhpcy5fb3JpZ2lucyA9IHY7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBdHRhY2hlcyBzb2NrZXQuaW8gdG8gYSBzZXJ2ZXIgb3IgcG9ydC5cbiAqXG4gKiBAcGFyYW0ge2h0dHAuU2VydmVyfE51bWJlcn0gc2VydmVyIG9yIHBvcnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIHBhc3NlZCB0byBlbmdpbmUuaW9cbiAqIEByZXR1cm4ge1NlcnZlcn0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TZXJ2ZXIucHJvdG90eXBlLmxpc3RlbiA9XG5TZXJ2ZXIucHJvdG90eXBlLmF0dGFjaCA9IGZ1bmN0aW9uKHNydiwgb3B0cyl7XG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBzcnYpIHtcbiAgICB2YXIgbXNnID0gJ1lvdSBhcmUgdHJ5aW5nIHRvIGF0dGFjaCBzb2NrZXQuaW8gdG8gYW4gZXhwcmVzcyAnICtcbiAgICAncmVxdWVzdCBoYW5kbGVyIGZ1bmN0aW9uLiBQbGVhc2UgcGFzcyBhIGh0dHAuU2VydmVyIGluc3RhbmNlLic7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gIH1cblxuICAvLyBoYW5kbGUgYSBwb3J0IGFzIGEgc3RyaW5nXG4gIGlmIChOdW1iZXIoc3J2KSA9PSBzcnYpIHtcbiAgICBzcnYgPSBOdW1iZXIoc3J2KTtcbiAgfVxuXG4gIGlmICgnbnVtYmVyJyA9PSB0eXBlb2Ygc3J2KSB7XG4gICAgZGVidWcoJ2NyZWF0aW5nIGh0dHAgc2VydmVyIGFuZCBiaW5kaW5nIHRvICVkJywgc3J2KTtcbiAgICB2YXIgcG9ydCA9IHNydjtcbiAgICBzcnYgPSBodHRwLlNlcnZlcihmdW5jdGlvbihyZXEsIHJlcyl7XG4gICAgICByZXMud3JpdGVIZWFkKDQwNCk7XG4gICAgICByZXMuZW5kKCk7XG4gICAgfSk7XG4gICAgc3J2Lmxpc3Rlbihwb3J0KTtcblxuICB9XG5cbiAgLy8gc2V0IGVuZ2luZS5pbyBwYXRoIHRvIGAvc29ja2V0LmlvYFxuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgb3B0cy5wYXRoID0gb3B0cy5wYXRoIHx8IHRoaXMucGF0aCgpO1xuICAvLyBzZXQgb3JpZ2lucyB2ZXJpZmljYXRpb25cbiAgb3B0cy5hbGxvd1JlcXVlc3QgPSBvcHRzLmFsbG93UmVxdWVzdCB8fCB0aGlzLmNoZWNrUmVxdWVzdC5iaW5kKHRoaXMpO1xuXG4gIGlmICh0aGlzLnNvY2tldHMuZm5zLmxlbmd0aCA+IDApIHtcbiAgICB0aGlzLmluaXRFbmdpbmUoc3J2LCBvcHRzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGNvbm5lY3RQYWNrZXQgPSB7IHR5cGU6IHBhcnNlci5DT05ORUNULCBuc3A6ICcvJyB9O1xuICB0aGlzLmVuY29kZXIuZW5jb2RlKGNvbm5lY3RQYWNrZXQsIGZ1bmN0aW9uIChlbmNvZGVkUGFja2V0KXtcbiAgICAvLyB0aGUgQ09OTkVDVCBwYWNrZXQgd2lsbCBiZSBtZXJnZWQgd2l0aCBFbmdpbmUuSU8gaGFuZHNoYWtlLFxuICAgIC8vIHRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHJvdW5kIHRyaXBzXG4gICAgb3B0cy5pbml0aWFsUGFja2V0ID0gZW5jb2RlZFBhY2tldDtcblxuICAgIHNlbGYuaW5pdEVuZ2luZShzcnYsIG9wdHMpO1xuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemUgZW5naW5lXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgcGFzc2VkIHRvIGVuZ2luZS5pb1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU2VydmVyLnByb3RvdHlwZS5pbml0RW5naW5lID0gZnVuY3Rpb24oc3J2LCBvcHRzKXtcbiAgLy8gaW5pdGlhbGl6ZSBlbmdpbmVcbiAgZGVidWcoJ2NyZWF0aW5nIGVuZ2luZS5pbyBpbnN0YW5jZSB3aXRoIG9wdHMgJWonLCBvcHRzKTtcbiAgdGhpcy5laW8gPSBlbmdpbmUuYXR0YWNoKHNydiwgb3B0cyk7XG5cbiAgLy8gYXR0YWNoIHN0YXRpYyBmaWxlIHNlcnZpbmdcbiAgaWYgKHRoaXMuX3NlcnZlQ2xpZW50KSB0aGlzLmF0dGFjaFNlcnZlKHNydik7XG5cbiAgLy8gRXhwb3J0IGh0dHAgc2VydmVyXG4gIHRoaXMuaHR0cFNlcnZlciA9IHNydjtcblxuICAvLyBiaW5kIHRvIGVuZ2luZSBldmVudHNcbiAgdGhpcy5iaW5kKHRoaXMuZWlvKTtcbn07XG5cbi8qKlxuICogQXR0YWNoZXMgdGhlIHN0YXRpYyBmaWxlIHNlcnZpbmcuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxodHRwLlNlcnZlcn0gc3J2IGh0dHAgc2VydmVyXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5TZXJ2ZXIucHJvdG90eXBlLmF0dGFjaFNlcnZlID0gZnVuY3Rpb24oc3J2KXtcbiAgZGVidWcoJ2F0dGFjaGluZyBjbGllbnQgc2VydmluZyByZXEgaGFuZGxlcicpO1xuICB2YXIgdXJsID0gdGhpcy5fcGF0aCArICcvc29ja2V0LmlvLmpzJztcbiAgdmFyIHVybE1hcCA9IHRoaXMuX3BhdGggKyAnL3NvY2tldC5pby5qcy5tYXAnO1xuICB2YXIgZXZzID0gc3J2Lmxpc3RlbmVycygncmVxdWVzdCcpLnNsaWNlKDApO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHNydi5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlcXVlc3QnKTtcbiAgc3J2Lm9uKCdyZXF1ZXN0JywgZnVuY3Rpb24ocmVxLCByZXMpIHtcbiAgICBpZiAoMCA9PT0gcmVxLnVybC5pbmRleE9mKHVybE1hcCkpIHtcbiAgICAgIHNlbGYuc2VydmVNYXAocmVxLCByZXMpO1xuICAgIH0gZWxzZSBpZiAoMCA9PT0gcmVxLnVybC5pbmRleE9mKHVybCkpIHtcbiAgICAgIHNlbGYuc2VydmUocmVxLCByZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBldnNbaV0uY2FsbChzcnYsIHJlcSwgcmVzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKiBIYW5kbGVzIGEgcmVxdWVzdCBzZXJ2aW5nIGAvc29ja2V0LmlvLmpzYFxuICpcbiAqIEBwYXJhbSB7aHR0cC5SZXF1ZXN0fSByZXFcbiAqIEBwYXJhbSB7aHR0cC5SZXNwb25zZX0gcmVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5TZXJ2ZXIucHJvdG90eXBlLnNlcnZlID0gZnVuY3Rpb24ocmVxLCByZXMpe1xuICAvLyBQZXIgdGhlIHN0YW5kYXJkLCBFVGFncyBtdXN0IGJlIHF1b3RlZDpcbiAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzIjc2VjdGlvbi0yLjNcbiAgdmFyIGV4cGVjdGVkRXRhZyA9ICdcIicgKyBjbGllbnRWZXJzaW9uICsgJ1wiJztcblxuICB2YXIgZXRhZyA9IHJlcS5oZWFkZXJzWydpZi1ub25lLW1hdGNoJ107XG4gIGlmIChldGFnKSB7XG4gICAgaWYgKGV4cGVjdGVkRXRhZyA9PSBldGFnKSB7XG4gICAgICBkZWJ1Zygnc2VydmUgY2xpZW50IDMwNCcpO1xuICAgICAgcmVzLndyaXRlSGVhZCgzMDQpO1xuICAgICAgcmVzLmVuZCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGRlYnVnKCdzZXJ2ZSBjbGllbnQgc291cmNlJyk7XG4gIHJlcy5zZXRIZWFkZXIoXCJDYWNoZS1Db250cm9sXCIsIFwicHVibGljLCBtYXgtYWdlPTBcIik7XG4gIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qYXZhc2NyaXB0Jyk7XG4gIHJlcy5zZXRIZWFkZXIoJ0VUYWcnLCBleHBlY3RlZEV0YWcpO1xuICByZXMud3JpdGVIZWFkKDIwMCk7XG4gIHJlcy5lbmQoY2xpZW50U291cmNlKTtcbn07XG5cbi8qKlxuICogSGFuZGxlcyBhIHJlcXVlc3Qgc2VydmluZyBgL3NvY2tldC5pby5qcy5tYXBgXG4gKlxuICogQHBhcmFtIHtodHRwLlJlcXVlc3R9IHJlcVxuICogQHBhcmFtIHtodHRwLlJlc3BvbnNlfSByZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNlcnZlci5wcm90b3R5cGUuc2VydmVNYXAgPSBmdW5jdGlvbihyZXEsIHJlcyl7XG4gIC8vIFBlciB0aGUgc3RhbmRhcmQsIEVUYWdzIG11c3QgYmUgcXVvdGVkOlxuICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMiNzZWN0aW9uLTIuM1xuICB2YXIgZXhwZWN0ZWRFdGFnID0gJ1wiJyArIGNsaWVudFZlcnNpb24gKyAnXCInO1xuXG4gIHZhciBldGFnID0gcmVxLmhlYWRlcnNbJ2lmLW5vbmUtbWF0Y2gnXTtcbiAgaWYgKGV0YWcpIHtcbiAgICBpZiAoZXhwZWN0ZWRFdGFnID09IGV0YWcpIHtcbiAgICAgIGRlYnVnKCdzZXJ2ZSBjbGllbnQgMzA0Jyk7XG4gICAgICByZXMud3JpdGVIZWFkKDMwNCk7XG4gICAgICByZXMuZW5kKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgZGVidWcoJ3NlcnZlIGNsaWVudCBzb3VyY2VtYXAnKTtcbiAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgcmVzLnNldEhlYWRlcignRVRhZycsIGV4cGVjdGVkRXRhZyk7XG4gIHJlcy53cml0ZUhlYWQoMjAwKTtcbiAgcmVzLmVuZChjbGllbnRTb3VyY2VNYXApO1xufTtcblxuLyoqXG4gKiBCaW5kcyBzb2NrZXQuaW8gdG8gYW4gZW5naW5lLmlvIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7ZW5naW5lLlNlcnZlcn0gZW5naW5lIGVuZ2luZS5pbyAob3IgY29tcGF0aWJsZSkgc2VydmVyXG4gKiBAcmV0dXJuIHtTZXJ2ZXJ9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU2VydmVyLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24oZW5naW5lKXtcbiAgdGhpcy5lbmdpbmUgPSBlbmdpbmU7XG4gIHRoaXMuZW5naW5lLm9uKCdjb25uZWN0aW9uJywgdGhpcy5vbmNvbm5lY3Rpb24uYmluZCh0aGlzKSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBlYWNoIGluY29taW5nIHRyYW5zcG9ydCBjb25uZWN0aW9uLlxuICpcbiAqIEBwYXJhbSB7ZW5naW5lLlNvY2tldH0gY29ublxuICogQHJldHVybiB7U2VydmVyfSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNlcnZlci5wcm90b3R5cGUub25jb25uZWN0aW9uID0gZnVuY3Rpb24oY29ubil7XG4gIGRlYnVnKCdpbmNvbWluZyBjb25uZWN0aW9uIHdpdGggaWQgJXMnLCBjb25uLmlkKTtcbiAgdmFyIGNsaWVudCA9IG5ldyBDbGllbnQodGhpcywgY29ubik7XG4gIGNsaWVudC5jb25uZWN0KCcvJyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBMb29rcyB1cCBhIG5hbWVzcGFjZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB8RnVuY3Rpb259IG5hbWUgbnNwIG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtmbl0gb3B0aW9uYWwsIG5zcCBgY29ubmVjdGlvbmAgZXYgaGFuZGxlclxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TZXJ2ZXIucHJvdG90eXBlLm9mID0gZnVuY3Rpb24obmFtZSwgZm4pe1xuICBpZiAodHlwZW9mIG5hbWUgPT09ICdmdW5jdGlvbicgfHzCoG5hbWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICBjb25zdCBwYXJlbnROc3AgPSBuZXcgUGFyZW50TmFtZXNwYWNlKHRoaXMpO1xuICAgIGRlYnVnKCdpbml0aWFsaXppbmcgcGFyZW50IG5hbWVzcGFjZSAlcycsIHBhcmVudE5zcC5uYW1lKTtcbiAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMucGFyZW50TnNwcy5zZXQobmFtZSwgcGFyZW50TnNwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wYXJlbnROc3BzLnNldCgobnNwLCBjb25uLCBuZXh0KSA9PiBuZXh0KG51bGwsIG5hbWUudGVzdChuc3ApKSwgcGFyZW50TnNwKTtcbiAgICB9XG4gICAgaWYgKGZuKSBwYXJlbnROc3Aub24oJ2Nvbm5lY3QnLCBmbik7XG4gICAgcmV0dXJuIHBhcmVudE5zcDtcbiAgfVxuXG4gIGlmIChTdHJpbmcobmFtZSlbMF0gIT09ICcvJykgbmFtZSA9ICcvJyArIG5hbWU7XG5cbiAgdmFyIG5zcCA9IHRoaXMubnNwc1tuYW1lXTtcbiAgaWYgKCFuc3ApIHtcbiAgICBkZWJ1ZygnaW5pdGlhbGl6aW5nIG5hbWVzcGFjZSAlcycsIG5hbWUpO1xuICAgIG5zcCA9IG5ldyBOYW1lc3BhY2UodGhpcywgbmFtZSk7XG4gICAgdGhpcy5uc3BzW25hbWVdID0gbnNwO1xuICB9XG4gIGlmIChmbikgbnNwLm9uKCdjb25uZWN0JywgZm4pO1xuICByZXR1cm4gbnNwO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgc2VydmVyIGNvbm5lY3Rpb25cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZm5dIG9wdGlvbmFsLCBjYWxsZWQgYXMgYGZuKFtlcnJdKWAgb24gZXJyb3IgT1IgYWxsIGNvbm5zIGNsb3NlZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TZXJ2ZXIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oZm4pe1xuICBmb3IgKHZhciBpZCBpbiB0aGlzLm5zcHNbJy8nXS5zb2NrZXRzKSB7XG4gICAgaWYgKHRoaXMubnNwc1snLyddLnNvY2tldHMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICB0aGlzLm5zcHNbJy8nXS5zb2NrZXRzW2lkXS5vbmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5lbmdpbmUuY2xvc2UoKTtcblxuICBpZiAodGhpcy5odHRwU2VydmVyKSB7XG4gICAgdGhpcy5odHRwU2VydmVyLmNsb3NlKGZuKTtcbiAgfSBlbHNlIHtcbiAgICBmbiAmJiBmbigpO1xuICB9XG59O1xuXG4vKipcbiAqIEV4cG9zZSBtYWluIG5hbWVzcGFjZSAoLykuXG4gKi9cblxudmFyIGVtaXR0ZXJNZXRob2RzID0gT2JqZWN0LmtleXMoRW1pdHRlci5wcm90b3R5cGUpLmZpbHRlcihmdW5jdGlvbihrZXkpe1xuICByZXR1cm4gdHlwZW9mIEVtaXR0ZXIucHJvdG90eXBlW2tleV0gPT09ICdmdW5jdGlvbic7XG59KTtcblxuZW1pdHRlck1ldGhvZHMuY29uY2F0KFsndG8nLCAnaW4nLCAndXNlJywgJ3NlbmQnLCAnd3JpdGUnLCAnY2xpZW50cycsICdjb21wcmVzcycsICdiaW5hcnknXSkuZm9yRWFjaChmdW5jdGlvbihmbil7XG4gIFNlcnZlci5wcm90b3R5cGVbZm5dID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcy5zb2NrZXRzW2ZuXS5hcHBseSh0aGlzLnNvY2tldHMsIGFyZ3VtZW50cyk7XG4gIH07XG59KTtcblxuTmFtZXNwYWNlLmZsYWdzLmZvckVhY2goZnVuY3Rpb24oZmxhZyl7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTZXJ2ZXIucHJvdG90eXBlLCBmbGFnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuc29ja2V0cy5mbGFncyA9IHRoaXMuc29ja2V0cy5mbGFncyB8fCB7fTtcbiAgICAgIHRoaXMuc29ja2V0cy5mbGFnc1tmbGFnXSA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0pO1xufSk7XG5cbi8qKlxuICogQkMgd2l0aCBgaW8ubGlzdGVuYFxuICovXG5cblNlcnZlci5saXN0ZW4gPSBTZXJ2ZXI7XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5cbi8qKlxuICogSW52b2tpbmcgdGhlIGxpYnJhcnkgYXMgYSBmdW5jdGlvbiBkZWxlZ2F0ZXMgdG8gYXR0YWNoIGlmIHRoZSBmaXJzdCBhcmd1bWVudFxuICogaXMgYW4gYGh0dHAuU2VydmVyYC5cbiAqXG4gKiBJZiB0aGVyZSBhcmUgbm8gYXJndW1lbnRzIG9yIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBhbiBvcHRpb25zIG9iamVjdCwgdGhlblxuICogYSBuZXcgU2VydmVyIGluc3RhbmNlIGlzIHJldHVybmVkLlxuICpcbiAqIEBwYXJhbSB7aHR0cC5TZXJ2ZXJ9IHNlcnZlciAoaWYgc3BlY2lmaWVkLCB3aWxsIGJlIGF0dGFjaGVkIHRvIGJ5IHRoZSBuZXcgU2VydmVyIGluc3RhbmNlKVxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge1NlcnZlcn0gZW5naW5lIHNlcnZlclxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIGJhY2t3YXJkcyBjb21wYXRpYmxlIHVzZSBhcyBgLmF0dGFjaGBcbiAgLy8gaWYgZmlyc3QgYXJndW1lbnQgaXMgYW4gaHR0cCBzZXJ2ZXJcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggJiYgYXJndW1lbnRzWzBdIGluc3RhbmNlb2YgaHR0cC5TZXJ2ZXIpIHtcbiAgICByZXR1cm4gYXR0YWNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICAvLyBpZiBmaXJzdCBhcmd1bWVudCBpcyBub3QgYW4gaHR0cCBzZXJ2ZXIsIHRoZW4ganVzdCBtYWtlIGEgcmVndWxhciBlaW8gc2VydmVyXG4gIHJldHVybiBleHBvcnRzLlNlcnZlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufTtcblxuLyoqXG4gKiBQcm90b2NvbCByZXZpc2lvbiBudW1iZXIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gMTtcblxuLyoqXG4gKiBFeHBvc2UgU2VydmVyIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5TZXJ2ZXIgPSByZXF1aXJlKCcuL3NlcnZlcicpO1xuXG4vKipcbiAqIEV4cG9zZSBTb2NrZXQgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLlNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG5cbi8qKlxuICogRXhwb3NlIFRyYW5zcG9ydCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi90cmFuc3BvcnQnKTtcblxuLyoqXG4gKiBFeHBvc2UgbXV0YWJsZSBsaXN0IG9mIGF2YWlsYWJsZSB0cmFuc3BvcnRzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy50cmFuc3BvcnRzID0gcmVxdWlyZSgnLi90cmFuc3BvcnRzJyk7XG5cbi8qKlxuICogRXhwb3J0cyBwYXJzZXIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGh0dHAuU2VydmVyIGV4Y2x1c2l2ZWx5IHVzZWQgZm9yIFdTIHVwZ3JhZGVzLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBwb3J0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge1NlcnZlcn0gd2Vic29ja2V0LmlvIHNlcnZlclxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmxpc3RlbiA9IGxpc3RlbjtcblxuZnVuY3Rpb24gbGlzdGVuIChwb3J0LCBvcHRpb25zLCBmbikge1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIG9wdGlvbnMpIHtcbiAgICBmbiA9IG9wdGlvbnM7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIHNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgIHJlcy53cml0ZUhlYWQoNTAxKTtcbiAgICByZXMuZW5kKCdOb3QgSW1wbGVtZW50ZWQnKTtcbiAgfSk7XG5cbiAgLy8gY3JlYXRlIGVuZ2luZSBzZXJ2ZXJcbiAgdmFyIGVuZ2luZSA9IGV4cG9ydHMuYXR0YWNoKHNlcnZlciwgb3B0aW9ucyk7XG4gIGVuZ2luZS5odHRwU2VydmVyID0gc2VydmVyO1xuXG4gIHNlcnZlci5saXN0ZW4ocG9ydCwgZm4pO1xuXG4gIHJldHVybiBlbmdpbmU7XG59XG5cbi8qKlxuICogQ2FwdHVyZXMgdXBncmFkZSByZXF1ZXN0cyBmb3IgYSBodHRwLlNlcnZlci5cbiAqXG4gKiBAcGFyYW0ge2h0dHAuU2VydmVyfSBzZXJ2ZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtTZXJ2ZXJ9IGVuZ2luZSBzZXJ2ZXJcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5hdHRhY2ggPSBhdHRhY2g7XG5cbmZ1bmN0aW9uIGF0dGFjaCAoc2VydmVyLCBvcHRpb25zKSB7XG4gIHZhciBlbmdpbmUgPSBuZXcgZXhwb3J0cy5TZXJ2ZXIob3B0aW9ucyk7XG4gIGVuZ2luZS5hdHRhY2goc2VydmVyLCBvcHRpb25zKTtcbiAgcmV0dXJuIGVuZ2luZTtcbn1cbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBxcyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJyk7XG52YXIgcGFyc2UgPSByZXF1aXJlKCd1cmwnKS5wYXJzZTtcbnZhciBiYXNlNjRpZCA9IHJlcXVpcmUoJ2Jhc2U2NGlkJyk7XG52YXIgdHJhbnNwb3J0cyA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0cycpO1xudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbnZhciBTb2NrZXQgPSByZXF1aXJlKCcuL3NvY2tldCcpO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUnKTtcbnZhciBjb29raWVNb2QgPSByZXF1aXJlKCdjb29raWUnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlcnZlcjtcblxuLyoqXG4gKiBTZXJ2ZXIgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gU2VydmVyIChvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTZXJ2ZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBTZXJ2ZXIob3B0cyk7XG4gIH1cblxuICB0aGlzLmNsaWVudHMgPSB7fTtcbiAgdGhpcy5jbGllbnRzQ291bnQgPSAwO1xuXG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIHRoaXMud3NFbmdpbmUgPSBvcHRzLndzRW5naW5lIHx8IHByb2Nlc3MuZW52LkVJT19XU19FTkdJTkUgfHwgJ3dzJztcbiAgdGhpcy5waW5nVGltZW91dCA9IG9wdHMucGluZ1RpbWVvdXQgfHwgNTAwMDtcbiAgdGhpcy5waW5nSW50ZXJ2YWwgPSBvcHRzLnBpbmdJbnRlcnZhbCB8fCAyNTAwMDtcbiAgdGhpcy51cGdyYWRlVGltZW91dCA9IG9wdHMudXBncmFkZVRpbWVvdXQgfHwgMTAwMDA7XG4gIHRoaXMubWF4SHR0cEJ1ZmZlclNpemUgPSBvcHRzLm1heEh0dHBCdWZmZXJTaXplIHx8IDEwRTc7XG4gIHRoaXMudHJhbnNwb3J0cyA9IG9wdHMudHJhbnNwb3J0cyB8fCBPYmplY3Qua2V5cyh0cmFuc3BvcnRzKTtcbiAgdGhpcy5hbGxvd1VwZ3JhZGVzID0gZmFsc2UgIT09IG9wdHMuYWxsb3dVcGdyYWRlcztcbiAgdGhpcy5hbGxvd1JlcXVlc3QgPSBvcHRzLmFsbG93UmVxdWVzdDtcbiAgdGhpcy5jb29raWUgPSBmYWxzZSAhPT0gb3B0cy5jb29raWUgPyAob3B0cy5jb29raWUgfHwgJ2lvJykgOiBmYWxzZTtcbiAgdGhpcy5jb29raWVQYXRoID0gZmFsc2UgIT09IG9wdHMuY29va2llUGF0aCA/IChvcHRzLmNvb2tpZVBhdGggfHwgJy8nKSA6IGZhbHNlO1xuICB0aGlzLmNvb2tpZUh0dHBPbmx5ID0gZmFsc2UgIT09IG9wdHMuY29va2llSHR0cE9ubHk7XG4gIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSBmYWxzZSAhPT0gb3B0cy5wZXJNZXNzYWdlRGVmbGF0ZSA/IChvcHRzLnBlck1lc3NhZ2VEZWZsYXRlIHx8IHRydWUpIDogZmFsc2U7XG4gIHRoaXMuaHR0cENvbXByZXNzaW9uID0gZmFsc2UgIT09IG9wdHMuaHR0cENvbXByZXNzaW9uID8gKG9wdHMuaHR0cENvbXByZXNzaW9uIHx8IHt9KSA6IGZhbHNlO1xuICB0aGlzLmluaXRpYWxQYWNrZXQgPSBvcHRzLmluaXRpYWxQYWNrZXQ7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8vIGluaXRpYWxpemUgY29tcHJlc3Npb24gb3B0aW9uc1xuICBbJ3Blck1lc3NhZ2VEZWZsYXRlJywgJ2h0dHBDb21wcmVzc2lvbiddLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICB2YXIgY29tcHJlc3Npb24gPSBzZWxmW3R5cGVdO1xuICAgIGlmICh0cnVlID09PSBjb21wcmVzc2lvbikgc2VsZlt0eXBlXSA9IGNvbXByZXNzaW9uID0ge307XG4gICAgaWYgKGNvbXByZXNzaW9uICYmIG51bGwgPT0gY29tcHJlc3Npb24udGhyZXNob2xkKSB7XG4gICAgICBjb21wcmVzc2lvbi50aHJlc2hvbGQgPSAxMDI0O1xuICAgIH1cbiAgfSk7XG5cbiAgdGhpcy5pbml0KCk7XG59XG5cbi8qKlxuICogUHJvdG9jb2wgZXJyb3JzIG1hcHBpbmdzLlxuICovXG5cblNlcnZlci5lcnJvcnMgPSB7XG4gIFVOS05PV05fVFJBTlNQT1JUOiAwLFxuICBVTktOT1dOX1NJRDogMSxcbiAgQkFEX0hBTkRTSEFLRV9NRVRIT0Q6IDIsXG4gIEJBRF9SRVFVRVNUOiAzLFxuICBGT1JCSURERU46IDRcbn07XG5cblNlcnZlci5lcnJvck1lc3NhZ2VzID0ge1xuICAwOiAnVHJhbnNwb3J0IHVua25vd24nLFxuICAxOiAnU2Vzc2lvbiBJRCB1bmtub3duJyxcbiAgMjogJ0JhZCBoYW5kc2hha2UgbWV0aG9kJyxcbiAgMzogJ0JhZCByZXF1ZXN0JyxcbiAgNDogJ0ZvcmJpZGRlbidcbn07XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBFdmVudEVtaXR0ZXIuXG4gKi9cblxudXRpbC5pbmhlcml0cyhTZXJ2ZXIsIEV2ZW50RW1pdHRlcik7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB3ZWJzb2NrZXQgc2VydmVyXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU2VydmVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIX50aGlzLnRyYW5zcG9ydHMuaW5kZXhPZignd2Vic29ja2V0JykpIHJldHVybjtcblxuICBpZiAodGhpcy53cykgdGhpcy53cy5jbG9zZSgpO1xuXG4gIHZhciB3c01vZHVsZTtcbiAgc3dpdGNoICh0aGlzLndzRW5naW5lKSB7XG4gICAgY2FzZSAndXdzJzogd3NNb2R1bGUgPSByZXF1aXJlKCd1d3MnKTsgYnJlYWs7XG4gICAgY2FzZSAnd3MnOiB3c01vZHVsZSA9IHJlcXVpcmUoJ3dzJyk7IGJyZWFrO1xuICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5rbm93biB3c0VuZ2luZScpO1xuICB9XG4gIHRoaXMud3MgPSBuZXcgd3NNb2R1bGUuU2VydmVyKHtcbiAgICBub1NlcnZlcjogdHJ1ZSxcbiAgICBjbGllbnRUcmFja2luZzogZmFsc2UsXG4gICAgcGVyTWVzc2FnZURlZmxhdGU6IHRoaXMucGVyTWVzc2FnZURlZmxhdGUsXG4gICAgbWF4UGF5bG9hZDogdGhpcy5tYXhIdHRwQnVmZmVyU2l6ZVxuICB9KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIGxpc3Qgb2YgYXZhaWxhYmxlIHRyYW5zcG9ydHMgZm9yIHVwZ3JhZGUgZ2l2ZW4gYSBjZXJ0YWluIHRyYW5zcG9ydC5cbiAqXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU2VydmVyLnByb3RvdHlwZS51cGdyYWRlcyA9IGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgaWYgKCF0aGlzLmFsbG93VXBncmFkZXMpIHJldHVybiBbXTtcbiAgcmV0dXJuIHRyYW5zcG9ydHNbdHJhbnNwb3J0XS51cGdyYWRlc1RvIHx8IFtdO1xufTtcblxuLyoqXG4gKiBWZXJpZmllcyBhIHJlcXVlc3QuXG4gKlxuICogQHBhcmFtIHtodHRwLkluY29taW5nTWVzc2FnZX1cbiAqIEByZXR1cm4ge0Jvb2xlYW59IHdoZXRoZXIgdGhlIHJlcXVlc3QgaXMgdmFsaWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNlcnZlci5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gKHJlcSwgdXBncmFkZSwgZm4pIHtcbiAgLy8gdHJhbnNwb3J0IGNoZWNrXG4gIHZhciB0cmFuc3BvcnQgPSByZXEuX3F1ZXJ5LnRyYW5zcG9ydDtcbiAgaWYgKCF+dGhpcy50cmFuc3BvcnRzLmluZGV4T2YodHJhbnNwb3J0KSkge1xuICAgIGRlYnVnKCd1bmtub3duIHRyYW5zcG9ydCBcIiVzXCInLCB0cmFuc3BvcnQpO1xuICAgIHJldHVybiBmbihTZXJ2ZXIuZXJyb3JzLlVOS05PV05fVFJBTlNQT1JULCBmYWxzZSk7XG4gIH1cblxuICAvLyAnT3JpZ2luJyBoZWFkZXIgY2hlY2tcbiAgdmFyIGlzT3JpZ2luSW52YWxpZCA9IGNoZWNrSW52YWxpZEhlYWRlckNoYXIocmVxLmhlYWRlcnMub3JpZ2luKTtcbiAgaWYgKGlzT3JpZ2luSW52YWxpZCkge1xuICAgIHJlcS5oZWFkZXJzLm9yaWdpbiA9IG51bGw7XG4gICAgZGVidWcoJ29yaWdpbiBoZWFkZXIgaW52YWxpZCcpO1xuICAgIHJldHVybiBmbihTZXJ2ZXIuZXJyb3JzLkJBRF9SRVFVRVNULCBmYWxzZSk7XG4gIH1cblxuICAvLyBzaWQgY2hlY2tcbiAgdmFyIHNpZCA9IHJlcS5fcXVlcnkuc2lkO1xuICBpZiAoc2lkKSB7XG4gICAgaWYgKCF0aGlzLmNsaWVudHMuaGFzT3duUHJvcGVydHkoc2lkKSkge1xuICAgICAgZGVidWcoJ3Vua25vd24gc2lkIFwiJXNcIicsIHNpZCk7XG4gICAgICByZXR1cm4gZm4oU2VydmVyLmVycm9ycy5VTktOT1dOX1NJRCwgZmFsc2UpO1xuICAgIH1cbiAgICBpZiAoIXVwZ3JhZGUgJiYgdGhpcy5jbGllbnRzW3NpZF0udHJhbnNwb3J0Lm5hbWUgIT09IHRyYW5zcG9ydCkge1xuICAgICAgZGVidWcoJ2JhZCByZXF1ZXN0OiB1bmV4cGVjdGVkIHRyYW5zcG9ydCB3aXRob3V0IHVwZ3JhZGUnKTtcbiAgICAgIHJldHVybiBmbihTZXJ2ZXIuZXJyb3JzLkJBRF9SRVFVRVNULCBmYWxzZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGhhbmRzaGFrZSBpcyBHRVQgb25seVxuICAgIGlmICgnR0VUJyAhPT0gcmVxLm1ldGhvZCkgcmV0dXJuIGZuKFNlcnZlci5lcnJvcnMuQkFEX0hBTkRTSEFLRV9NRVRIT0QsIGZhbHNlKTtcbiAgICBpZiAoIXRoaXMuYWxsb3dSZXF1ZXN0KSByZXR1cm4gZm4obnVsbCwgdHJ1ZSk7XG4gICAgcmV0dXJuIHRoaXMuYWxsb3dSZXF1ZXN0KHJlcSwgZm4pO1xuICB9XG5cbiAgZm4obnVsbCwgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIFByZXBhcmVzIGEgcmVxdWVzdCBieSBwcm9jZXNzaW5nIHRoZSBxdWVyeSBzdHJpbmcuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU2VydmVyLnByb3RvdHlwZS5wcmVwYXJlID0gZnVuY3Rpb24gKHJlcSkge1xuICAvLyB0cnkgdG8gbGV2ZXJhZ2UgcHJlLWV4aXN0aW5nIGByZXEuX3F1ZXJ5YCAoZS5nOiBmcm9tIGNvbm5lY3QpXG4gIGlmICghcmVxLl9xdWVyeSkge1xuICAgIHJlcS5fcXVlcnkgPSB+cmVxLnVybC5pbmRleE9mKCc/JykgPyBxcy5wYXJzZShwYXJzZShyZXEudXJsKS5xdWVyeSkgOiB7fTtcbiAgfVxufTtcblxuLyoqXG4gKiBDbG9zZXMgYWxsIGNsaWVudHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5TZXJ2ZXIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2xvc2luZyBhbGwgb3BlbiBjbGllbnRzJyk7XG4gIGZvciAodmFyIGkgaW4gdGhpcy5jbGllbnRzKSB7XG4gICAgaWYgKHRoaXMuY2xpZW50cy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgdGhpcy5jbGllbnRzW2ldLmNsb3NlKHRydWUpO1xuICAgIH1cbiAgfVxuICBpZiAodGhpcy53cykge1xuICAgIGRlYnVnKCdjbG9zaW5nIHdlYlNvY2tldFNlcnZlcicpO1xuICAgIHRoaXMud3MuY2xvc2UoKTtcbiAgICAvLyBkb24ndCBkZWxldGUgdGhpcy53cyBiZWNhdXNlIGl0IGNhbiBiZSB1c2VkIGFnYWluIGlmIHRoZSBodHRwIHNlcnZlciBzdGFydHMgbGlzdGVuaW5nIGFnYWluXG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgYW4gRW5naW5lLklPIEhUVFAgcmVxdWVzdC5cbiAqXG4gKiBAcGFyYW0ge2h0dHAuSW5jb21pbmdNZXNzYWdlfSByZXF1ZXN0XG4gKiBAcGFyYW0ge2h0dHAuU2VydmVyUmVzcG9uc2V8aHR0cC5PdXRnb2luZ01lc3NhZ2V9IHJlc3BvbnNlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNlcnZlci5wcm90b3R5cGUuaGFuZGxlUmVxdWVzdCA9IGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICBkZWJ1ZygnaGFuZGxpbmcgXCIlc1wiIGh0dHAgcmVxdWVzdCBcIiVzXCInLCByZXEubWV0aG9kLCByZXEudXJsKTtcbiAgdGhpcy5wcmVwYXJlKHJlcSk7XG4gIHJlcS5yZXMgPSByZXM7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnZlcmlmeShyZXEsIGZhbHNlLCBmdW5jdGlvbiAoZXJyLCBzdWNjZXNzKSB7XG4gICAgaWYgKCFzdWNjZXNzKSB7XG4gICAgICBzZW5kRXJyb3JNZXNzYWdlKHJlcSwgcmVzLCBlcnIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChyZXEuX3F1ZXJ5LnNpZCkge1xuICAgICAgZGVidWcoJ3NldHRpbmcgbmV3IHJlcXVlc3QgZm9yIGV4aXN0aW5nIGNsaWVudCcpO1xuICAgICAgc2VsZi5jbGllbnRzW3JlcS5fcXVlcnkuc2lkXS50cmFuc3BvcnQub25SZXF1ZXN0KHJlcSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYuaGFuZHNoYWtlKHJlcS5fcXVlcnkudHJhbnNwb3J0LCByZXEpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIFNlbmRzIGFuIEVuZ2luZS5JTyBFcnJvciBNZXNzYWdlXG4gKlxuICogQHBhcmFtIHtodHRwLlNlcnZlclJlc3BvbnNlfSByZXNwb25zZVxuICogQHBhcmFtIHtjb2RlfSBlcnJvciBjb2RlXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZW5kRXJyb3JNZXNzYWdlIChyZXEsIHJlcywgY29kZSkge1xuICB2YXIgaGVhZGVycyA9IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9O1xuXG4gIHZhciBpc0ZvcmJpZGRlbiA9ICFTZXJ2ZXIuZXJyb3JNZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eShjb2RlKTtcbiAgaWYgKGlzRm9yYmlkZGVuKSB7XG4gICAgcmVzLndyaXRlSGVhZCg0MDMsIGhlYWRlcnMpO1xuICAgIHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgY29kZTogU2VydmVyLmVycm9ycy5GT1JCSURERU4sXG4gICAgICBtZXNzYWdlOiBjb2RlIHx8IFNlcnZlci5lcnJvck1lc3NhZ2VzW1NlcnZlci5lcnJvcnMuRk9SQklEREVOXVxuICAgIH0pKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHJlcS5oZWFkZXJzLm9yaWdpbikge1xuICAgIGhlYWRlcnNbJ0FjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzJ10gPSAndHJ1ZSc7XG4gICAgaGVhZGVyc1snQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJ10gPSByZXEuaGVhZGVycy5vcmlnaW47XG4gIH0gZWxzZSB7XG4gICAgaGVhZGVyc1snQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJ10gPSAnKic7XG4gIH1cbiAgaWYgKHJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmVzLndyaXRlSGVhZCg0MDAsIGhlYWRlcnMpO1xuICAgIHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgY29kZTogY29kZSxcbiAgICAgIG1lc3NhZ2U6IFNlcnZlci5lcnJvck1lc3NhZ2VzW2NvZGVdXG4gICAgfSkpO1xuICB9XG59XG5cbi8qKlxuICogZ2VuZXJhdGUgYSBzb2NrZXQgaWQuXG4gKiBPdmVyd3JpdGUgdGhpcyBtZXRob2QgdG8gZ2VuZXJhdGUgeW91ciBjdXN0b20gc29ja2V0IGlkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlcXVlc3Qgb2JqZWN0XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNlcnZlci5wcm90b3R5cGUuZ2VuZXJhdGVJZCA9IGZ1bmN0aW9uIChyZXEpIHtcbiAgcmV0dXJuIGJhc2U2NGlkLmdlbmVyYXRlSWQoKTtcbn07XG5cbi8qKlxuICogSGFuZHNoYWtlcyBhIG5ldyBjbGllbnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRyYW5zcG9ydCBuYW1lXG4gKiBAcGFyYW0ge09iamVjdH0gcmVxdWVzdCBvYmplY3RcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNlcnZlci5wcm90b3R5cGUuaGFuZHNoYWtlID0gZnVuY3Rpb24gKHRyYW5zcG9ydE5hbWUsIHJlcSkge1xuICB2YXIgaWQgPSB0aGlzLmdlbmVyYXRlSWQocmVxKTtcblxuICBkZWJ1ZygnaGFuZHNoYWtpbmcgY2xpZW50IFwiJXNcIicsIGlkKTtcblxuICB0cnkge1xuICAgIHZhciB0cmFuc3BvcnQgPSBuZXcgdHJhbnNwb3J0c1t0cmFuc3BvcnROYW1lXShyZXEpO1xuICAgIGlmICgncG9sbGluZycgPT09IHRyYW5zcG9ydE5hbWUpIHtcbiAgICAgIHRyYW5zcG9ydC5tYXhIdHRwQnVmZmVyU2l6ZSA9IHRoaXMubWF4SHR0cEJ1ZmZlclNpemU7XG4gICAgICB0cmFuc3BvcnQuaHR0cENvbXByZXNzaW9uID0gdGhpcy5odHRwQ29tcHJlc3Npb247XG4gICAgfSBlbHNlIGlmICgnd2Vic29ja2V0JyA9PT0gdHJhbnNwb3J0TmFtZSkge1xuICAgICAgdHJhbnNwb3J0LnBlck1lc3NhZ2VEZWZsYXRlID0gdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZTtcbiAgICB9XG5cbiAgICBpZiAocmVxLl9xdWVyeSAmJiByZXEuX3F1ZXJ5LmI2NCkge1xuICAgICAgdHJhbnNwb3J0LnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zcG9ydC5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgZGVidWcoJ2Vycm9yIGhhbmRzaGFraW5nIHRvIHRyYW5zcG9ydCBcIiVzXCInLCB0cmFuc3BvcnROYW1lKTtcbiAgICBzZW5kRXJyb3JNZXNzYWdlKHJlcSwgcmVxLnJlcywgU2VydmVyLmVycm9ycy5CQURfUkVRVUVTVCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBzb2NrZXQgPSBuZXcgU29ja2V0KGlkLCB0aGlzLCB0cmFuc3BvcnQsIHJlcSk7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAoZmFsc2UgIT09IHRoaXMuY29va2llKSB7XG4gICAgdHJhbnNwb3J0Lm9uKCdoZWFkZXJzJywgZnVuY3Rpb24gKGhlYWRlcnMpIHtcbiAgICAgIGhlYWRlcnNbJ1NldC1Db29raWUnXSA9IGNvb2tpZU1vZC5zZXJpYWxpemUoc2VsZi5jb29raWUsIGlkLFxuICAgICAgICB7XG4gICAgICAgICAgcGF0aDogc2VsZi5jb29raWVQYXRoLFxuICAgICAgICAgIGh0dHBPbmx5OiBzZWxmLmNvb2tpZVBhdGggPyBzZWxmLmNvb2tpZUh0dHBPbmx5IDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICB0cmFuc3BvcnQub25SZXF1ZXN0KHJlcSk7XG5cbiAgdGhpcy5jbGllbnRzW2lkXSA9IHNvY2tldDtcbiAgdGhpcy5jbGllbnRzQ291bnQrKztcblxuICBzb2NrZXQub25jZSgnY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVsZXRlIHNlbGYuY2xpZW50c1tpZF07XG4gICAgc2VsZi5jbGllbnRzQ291bnQtLTtcbiAgfSk7XG5cbiAgdGhpcy5lbWl0KCdjb25uZWN0aW9uJywgc29ja2V0KTtcbn07XG5cbi8qKlxuICogSGFuZGxlcyBhbiBFbmdpbmUuSU8gSFRUUCBVcGdyYWRlLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU2VydmVyLnByb3RvdHlwZS5oYW5kbGVVcGdyYWRlID0gZnVuY3Rpb24gKHJlcSwgc29ja2V0LCB1cGdyYWRlSGVhZCkge1xuICB0aGlzLnByZXBhcmUocmVxKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMudmVyaWZ5KHJlcSwgdHJ1ZSwgZnVuY3Rpb24gKGVyciwgc3VjY2Vzcykge1xuICAgIGlmICghc3VjY2Vzcykge1xuICAgICAgYWJvcnRDb25uZWN0aW9uKHNvY2tldCwgZXJyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaGVhZCA9IEJ1ZmZlci5mcm9tKHVwZ3JhZGVIZWFkKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpXG4gICAgdXBncmFkZUhlYWQgPSBudWxsO1xuXG4gICAgLy8gZGVsZWdhdGUgdG8gd3NcbiAgICBzZWxmLndzLmhhbmRsZVVwZ3JhZGUocmVxLCBzb2NrZXQsIGhlYWQsIGZ1bmN0aW9uIChjb25uKSB7XG4gICAgICBzZWxmLm9uV2ViU29ja2V0KHJlcSwgY29ubik7XG4gICAgfSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHdzLmlvIGNvbm5lY3Rpb24uXG4gKlxuICogQHBhcmFtIHt3cy5Tb2NrZXR9IHdlYnNvY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU2VydmVyLnByb3RvdHlwZS5vbldlYlNvY2tldCA9IGZ1bmN0aW9uIChyZXEsIHNvY2tldCkge1xuICBzb2NrZXQub24oJ2Vycm9yJywgb25VcGdyYWRlRXJyb3IpO1xuXG4gIGlmICh0cmFuc3BvcnRzW3JlcS5fcXVlcnkudHJhbnNwb3J0XSAhPT0gdW5kZWZpbmVkICYmICF0cmFuc3BvcnRzW3JlcS5fcXVlcnkudHJhbnNwb3J0XS5wcm90b3R5cGUuaGFuZGxlc1VwZ3JhZGVzKSB7XG4gICAgZGVidWcoJ3RyYW5zcG9ydCBkb2VzbnQgaGFuZGxlIHVwZ3JhZGVkIHJlcXVlc3RzJyk7XG4gICAgc29ja2V0LmNsb3NlKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gZ2V0IGNsaWVudCBpZFxuICB2YXIgaWQgPSByZXEuX3F1ZXJ5LnNpZDtcblxuICAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSB3cy5Tb2NrZXRcbiAgcmVxLndlYnNvY2tldCA9IHNvY2tldDtcblxuICBpZiAoaWQpIHtcbiAgICB2YXIgY2xpZW50ID0gdGhpcy5jbGllbnRzW2lkXTtcbiAgICBpZiAoIWNsaWVudCkge1xuICAgICAgZGVidWcoJ3VwZ3JhZGUgYXR0ZW1wdCBmb3IgY2xvc2VkIGNsaWVudCcpO1xuICAgICAgc29ja2V0LmNsb3NlKCk7XG4gICAgfSBlbHNlIGlmIChjbGllbnQudXBncmFkaW5nKSB7XG4gICAgICBkZWJ1ZygndHJhbnNwb3J0IGhhcyBhbHJlYWR5IGJlZW4gdHJ5aW5nIHRvIHVwZ3JhZGUnKTtcbiAgICAgIHNvY2tldC5jbG9zZSgpO1xuICAgIH0gZWxzZSBpZiAoY2xpZW50LnVwZ3JhZGVkKSB7XG4gICAgICBkZWJ1ZygndHJhbnNwb3J0IGhhZCBhbHJlYWR5IGJlZW4gdXBncmFkZWQnKTtcbiAgICAgIHNvY2tldC5jbG9zZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1ZygndXBncmFkaW5nIGV4aXN0aW5nIHRyYW5zcG9ydCcpO1xuXG4gICAgICAvLyB0cmFuc3BvcnQgZXJyb3IgaGFuZGxpbmcgdGFrZXMgb3ZlclxuICAgICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uVXBncmFkZUVycm9yKTtcblxuICAgICAgdmFyIHRyYW5zcG9ydCA9IG5ldyB0cmFuc3BvcnRzW3JlcS5fcXVlcnkudHJhbnNwb3J0XShyZXEpO1xuICAgICAgaWYgKHJlcS5fcXVlcnkgJiYgcmVxLl9xdWVyeS5iNjQpIHtcbiAgICAgICAgdHJhbnNwb3J0LnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc3BvcnQuc3VwcG9ydHNCaW5hcnkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgdHJhbnNwb3J0LnBlck1lc3NhZ2VEZWZsYXRlID0gdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZTtcbiAgICAgIGNsaWVudC5tYXliZVVwZ3JhZGUodHJhbnNwb3J0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gdHJhbnNwb3J0IGVycm9yIGhhbmRsaW5nIHRha2VzIG92ZXJcbiAgICBzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25VcGdyYWRlRXJyb3IpO1xuXG4gICAgdGhpcy5oYW5kc2hha2UocmVxLl9xdWVyeS50cmFuc3BvcnQsIHJlcSk7XG4gIH1cblxuICBmdW5jdGlvbiBvblVwZ3JhZGVFcnJvciAoKSB7XG4gICAgZGVidWcoJ3dlYnNvY2tldCBlcnJvciBiZWZvcmUgdXBncmFkZScpO1xuICAgIC8vIHNvY2tldC5jbG9zZSgpIG5vdCBuZWVkZWRcbiAgfVxufTtcblxuLyoqXG4gKiBDYXB0dXJlcyB1cGdyYWRlIHJlcXVlc3RzIGZvciBhIGh0dHAuU2VydmVyLlxuICpcbiAqIEBwYXJhbSB7aHR0cC5TZXJ2ZXJ9IHNlcnZlclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU2VydmVyLnByb3RvdHlwZS5hdHRhY2ggPSBmdW5jdGlvbiAoc2VydmVyLCBvcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBwYXRoID0gKG9wdGlvbnMucGF0aCB8fCAnL2VuZ2luZS5pbycpLnJlcGxhY2UoL1xcLyQvLCAnJyk7XG5cbiAgdmFyIGRlc3Ryb3lVcGdyYWRlVGltZW91dCA9IG9wdGlvbnMuZGVzdHJveVVwZ3JhZGVUaW1lb3V0IHx8IDEwMDA7XG5cbiAgLy8gbm9ybWFsaXplIHBhdGhcbiAgcGF0aCArPSAnLyc7XG5cbiAgZnVuY3Rpb24gY2hlY2sgKHJlcSkge1xuICAgIGlmICgnT1BUSU9OUycgPT09IHJlcS5tZXRob2QgJiYgZmFsc2UgPT09IG9wdGlvbnMuaGFuZGxlUHJlZmxpZ2h0UmVxdWVzdCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aCA9PT0gcmVxLnVybC5zdWJzdHIoMCwgcGF0aC5sZW5ndGgpO1xuICB9XG5cbiAgLy8gY2FjaGUgYW5kIGNsZWFuIHVwIGxpc3RlbmVyc1xuICB2YXIgbGlzdGVuZXJzID0gc2VydmVyLmxpc3RlbmVycygncmVxdWVzdCcpLnNsaWNlKDApO1xuICBzZXJ2ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZXF1ZXN0Jyk7XG4gIHNlcnZlci5vbignY2xvc2UnLCBzZWxmLmNsb3NlLmJpbmQoc2VsZikpO1xuICBzZXJ2ZXIub24oJ2xpc3RlbmluZycsIHNlbGYuaW5pdC5iaW5kKHNlbGYpKTtcblxuICAvLyBhZGQgcmVxdWVzdCBoYW5kbGVyXG4gIHNlcnZlci5vbigncmVxdWVzdCcsIGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgIGlmIChjaGVjayhyZXEpKSB7XG4gICAgICBkZWJ1ZygnaW50ZXJjZXB0aW5nIHJlcXVlc3QgZm9yIHBhdGggXCIlc1wiJywgcGF0aCk7XG4gICAgICBpZiAoJ09QVElPTlMnID09PSByZXEubWV0aG9kICYmICdmdW5jdGlvbicgPT09IHR5cGVvZiBvcHRpb25zLmhhbmRsZVByZWZsaWdodFJlcXVlc3QpIHtcbiAgICAgICAgb3B0aW9ucy5oYW5kbGVQcmVmbGlnaHRSZXF1ZXN0LmNhbGwoc2VydmVyLCByZXEsIHJlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLmhhbmRsZVJlcXVlc3QocmVxLCByZXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VydmVyLCByZXEsIHJlcyk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpZiAofnNlbGYudHJhbnNwb3J0cy5pbmRleE9mKCd3ZWJzb2NrZXQnKSkge1xuICAgIHNlcnZlci5vbigndXBncmFkZScsIGZ1bmN0aW9uIChyZXEsIHNvY2tldCwgaGVhZCkge1xuICAgICAgaWYgKGNoZWNrKHJlcSkpIHtcbiAgICAgICAgc2VsZi5oYW5kbGVVcGdyYWRlKHJlcSwgc29ja2V0LCBoZWFkKTtcbiAgICAgIH0gZWxzZSBpZiAoZmFsc2UgIT09IG9wdGlvbnMuZGVzdHJveVVwZ3JhZGUpIHtcbiAgICAgICAgLy8gZGVmYXVsdCBub2RlIGJlaGF2aW9yIGlzIHRvIGRpc2Nvbm5lY3Qgd2hlbiBubyBoYW5kbGVyc1xuICAgICAgICAvLyBidXQgYnkgYWRkaW5nIGEgaGFuZGxlciwgd2UgcHJldmVudCB0aGF0XG4gICAgICAgIC8vIGFuZCBpZiBubyBlaW8gdGhpbmcgaGFuZGxlcyB0aGUgdXBncmFkZVxuICAgICAgICAvLyB0aGVuIHRoZSBzb2NrZXQgbmVlZHMgdG8gZGllIVxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoc29ja2V0LndyaXRhYmxlICYmIHNvY2tldC5ieXRlc1dyaXR0ZW4gPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHNvY2tldC5lbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGRlc3Ryb3lVcGdyYWRlVGltZW91dCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2xvc2VzIHRoZSBjb25uZWN0aW9uXG4gKlxuICogQHBhcmFtIHtuZXQuU29ja2V0fSBzb2NrZXRcbiAqIEBwYXJhbSB7Y29kZX0gZXJyb3IgY29kZVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gYWJvcnRDb25uZWN0aW9uIChzb2NrZXQsIGNvZGUpIHtcbiAgaWYgKHNvY2tldC53cml0YWJsZSkge1xuICAgIHZhciBtZXNzYWdlID0gU2VydmVyLmVycm9yTWVzc2FnZXMuaGFzT3duUHJvcGVydHkoY29kZSkgPyBTZXJ2ZXIuZXJyb3JNZXNzYWdlc1tjb2RlXSA6IFN0cmluZyhjb2RlIHx8ICcnKTtcbiAgICB2YXIgbGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgobWVzc2FnZSk7XG4gICAgc29ja2V0LndyaXRlKFxuICAgICAgJ0hUVFAvMS4xIDQwMCBCYWQgUmVxdWVzdFxcclxcbicgK1xuICAgICAgJ0Nvbm5lY3Rpb246IGNsb3NlXFxyXFxuJyArXG4gICAgICAnQ29udGVudC10eXBlOiB0ZXh0L2h0bWxcXHJcXG4nICtcbiAgICAgICdDb250ZW50LUxlbmd0aDogJyArIGxlbmd0aCArICdcXHJcXG4nICtcbiAgICAgICdcXHJcXG4nICtcbiAgICAgIG1lc3NhZ2VcbiAgICApO1xuICB9XG4gIHNvY2tldC5kZXN0cm95KCk7XG59XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbi8qKlxuICogRnJvbSBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi92OC40LjAvbGliL19odHRwX2NvbW1vbi5qcyNMMzAzLUwzNTRcbiAqXG4gKiBUcnVlIGlmIHZhbCBjb250YWlucyBhbiBpbnZhbGlkIGZpZWxkLXZjaGFyXG4gKiAgZmllbGQtdmFsdWUgICAgPSAqKCBmaWVsZC1jb250ZW50IC8gb2JzLWZvbGQgKVxuICogIGZpZWxkLWNvbnRlbnQgID0gZmllbGQtdmNoYXIgWyAxKiggU1AgLyBIVEFCICkgZmllbGQtdmNoYXIgXVxuICogIGZpZWxkLXZjaGFyICAgID0gVkNIQVIgLyBvYnMtdGV4dFxuICpcbiAqIGNoZWNrSW52YWxpZEhlYWRlckNoYXIoKSBpcyBjdXJyZW50bHkgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlIGJ5IHY4LFxuICogc28gdGFrZSBjYXJlIHdoZW4gbWFraW5nIGNoYW5nZXMgdG8gdGhlIGltcGxlbWVudGF0aW9uIHNvIHRoYXQgdGhlIHNvdXJjZVxuICogY29kZSBzaXplIGRvZXMgbm90IGV4Y2VlZCB2OCdzIGRlZmF1bHQgbWF4X2lubGluZWRfc291cmNlX3NpemUgc2V0dGluZy5cbiAqKi9cbnZhciB2YWxpZEhkckNoYXJzID0gW1xuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAwLCAwLCAvLyAwIC0gMTVcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgLy8gMTYgLSAzMVxuICAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAvLyAzMiAtIDQ3XG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIC8vIDQ4IC0gNjNcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLy8gNjQgLSA3OVxuICAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAvLyA4MCAtIDk1XG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIC8vIDk2IC0gMTExXG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAsIC8vIDExMiAtIDEyN1xuICAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAvLyAxMjggLi4uXG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsXG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsXG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsXG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsXG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsXG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsXG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEgIC8vIC4uLiAyNTVcbl07XG5cbmZ1bmN0aW9uIGNoZWNrSW52YWxpZEhlYWRlckNoYXIodmFsKSB7XG4gIHZhbCArPSAnJztcbiAgaWYgKHZhbC5sZW5ndGggPCAxKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKCF2YWxpZEhkckNoYXJzW3ZhbC5jaGFyQ29kZUF0KDApXSkge1xuICAgIGRlYnVnKCdpbnZhbGlkIGhlYWRlciwgaW5kZXggMCwgY2hhciBcIiVzXCInLCB2YWwuY2hhckNvZGVBdCgwKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbC5sZW5ndGggPCAyKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKCF2YWxpZEhkckNoYXJzW3ZhbC5jaGFyQ29kZUF0KDEpXSkge1xuICAgIGRlYnVnKCdpbnZhbGlkIGhlYWRlciwgaW5kZXggMSwgY2hhciBcIiVzXCInLCB2YWwuY2hhckNvZGVBdCgxKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbC5sZW5ndGggPCAzKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKCF2YWxpZEhkckNoYXJzW3ZhbC5jaGFyQ29kZUF0KDIpXSkge1xuICAgIGRlYnVnKCdpbnZhbGlkIGhlYWRlciwgaW5kZXggMiwgY2hhciBcIiVzXCInLCB2YWwuY2hhckNvZGVBdCgyKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbC5sZW5ndGggPCA0KVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKCF2YWxpZEhkckNoYXJzW3ZhbC5jaGFyQ29kZUF0KDMpXSkge1xuICAgIGRlYnVnKCdpbnZhbGlkIGhlYWRlciwgaW5kZXggMywgY2hhciBcIiVzXCInLCB2YWwuY2hhckNvZGVBdCgzKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDQ7IGkgPCB2YWwubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoIXZhbGlkSGRyQ2hhcnNbdmFsLmNoYXJDb2RlQXQoaSldKSB7XG4gICAgICBkZWJ1ZygnaW52YWxpZCBoZWFkZXIsIGluZGV4IFwiJWlcIiwgY2hhciBcIiVzXCInLCBpLCB2YWwuY2hhckNvZGVBdChpKSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuIiwiLyohXG4gKiBiYXNlNjRpZCB2MC4xLjBcbiAqL1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5cbi8qKlxuICogQ29uc3RydWN0b3JcbiAqL1xuXG52YXIgQmFzZTY0SWQgPSBmdW5jdGlvbigpIHsgfTtcblxuLyoqXG4gKiBHZXQgcmFuZG9tIGJ5dGVzXG4gKlxuICogVXNlcyBhIGJ1ZmZlciBpZiBhdmFpbGFibGUsIGZhbGxzIGJhY2sgdG8gY3J5cHRvLnJhbmRvbUJ5dGVzXG4gKi9cblxuQmFzZTY0SWQucHJvdG90eXBlLmdldFJhbmRvbUJ5dGVzID0gZnVuY3Rpb24oYnl0ZXMpIHtcblxuICB2YXIgQlVGRkVSX1NJWkUgPSA0MDk2XG4gIHZhciBzZWxmID0gdGhpczsgIFxuICBcbiAgYnl0ZXMgPSBieXRlcyB8fCAxMjtcblxuICBpZiAoYnl0ZXMgPiBCVUZGRVJfU0laRSkge1xuICAgIHJldHVybiBjcnlwdG8ucmFuZG9tQnl0ZXMoYnl0ZXMpO1xuICB9XG4gIFxuICB2YXIgYnl0ZXNJbkJ1ZmZlciA9IHBhcnNlSW50KEJVRkZFUl9TSVpFL2J5dGVzKTtcbiAgdmFyIHRocmVzaG9sZCA9IHBhcnNlSW50KGJ5dGVzSW5CdWZmZXIqMC44NSk7XG5cbiAgaWYgKCF0aHJlc2hvbGQpIHtcbiAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKGJ5dGVzKTtcbiAgfVxuXG4gIGlmICh0aGlzLmJ5dGVzQnVmZmVySW5kZXggPT0gbnVsbCkge1xuICAgICB0aGlzLmJ5dGVzQnVmZmVySW5kZXggPSAtMTtcbiAgfVxuXG4gIGlmICh0aGlzLmJ5dGVzQnVmZmVySW5kZXggPT0gYnl0ZXNJbkJ1ZmZlcikge1xuICAgIHRoaXMuYnl0ZXNCdWZmZXIgPSBudWxsO1xuICAgIHRoaXMuYnl0ZXNCdWZmZXJJbmRleCA9IC0xO1xuICB9XG5cbiAgLy8gTm8gYnVmZmVyZWQgYnl0ZXMgYXZhaWxhYmxlIG9yIGluZGV4IGFib3ZlIHRocmVzaG9sZFxuICBpZiAodGhpcy5ieXRlc0J1ZmZlckluZGV4ID09IC0xIHx8IHRoaXMuYnl0ZXNCdWZmZXJJbmRleCA+IHRocmVzaG9sZCkge1xuICAgICBcbiAgICBpZiAoIXRoaXMuaXNHZW5lcmF0aW5nQnl0ZXMpIHtcbiAgICAgIHRoaXMuaXNHZW5lcmF0aW5nQnl0ZXMgPSB0cnVlO1xuICAgICAgY3J5cHRvLnJhbmRvbUJ5dGVzKEJVRkZFUl9TSVpFLCBmdW5jdGlvbihlcnIsIGJ5dGVzKSB7XG4gICAgICAgIHNlbGYuYnl0ZXNCdWZmZXIgPSBieXRlcztcbiAgICAgICAgc2VsZi5ieXRlc0J1ZmZlckluZGV4ID0gMDtcbiAgICAgICAgc2VsZi5pc0dlbmVyYXRpbmdCeXRlcyA9IGZhbHNlO1xuICAgICAgfSk7IFxuICAgIH1cbiAgICBcbiAgICAvLyBGYWxsIGJhY2sgdG8gc3luYyBjYWxsIHdoZW4gbm8gYnVmZmVyZWQgYnl0ZXMgYXJlIGF2YWlsYWJsZVxuICAgIGlmICh0aGlzLmJ5dGVzQnVmZmVySW5kZXggPT0gLTEpIHtcbiAgICAgIHJldHVybiBjcnlwdG8ucmFuZG9tQnl0ZXMoYnl0ZXMpO1xuICAgIH1cbiAgfVxuICBcbiAgdmFyIHJlc3VsdCA9IHRoaXMuYnl0ZXNCdWZmZXIuc2xpY2UoYnl0ZXMqdGhpcy5ieXRlc0J1ZmZlckluZGV4LCBieXRlcyoodGhpcy5ieXRlc0J1ZmZlckluZGV4KzEpKTsgXG4gIHRoaXMuYnl0ZXNCdWZmZXJJbmRleCsrOyBcbiAgXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgYmFzZTY0IGlkXG4gKlxuICogKE9yaWdpbmFsIHZlcnNpb24gZnJvbSBzb2NrZXQuaW8gPGh0dHA6Ly9zb2NrZXQuaW8+KVxuICovXG5cbkJhc2U2NElkLnByb3RvdHlwZS5nZW5lcmF0ZUlkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcmFuZCA9IEJ1ZmZlci5hbGxvYygxNSk7IC8vIG11bHRpcGxlIG9mIDMgZm9yIGJhc2U2NFxuICBpZiAoIXJhbmQud3JpdGVJbnQzMkJFKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKE1hdGgucmFuZG9tKCkgKiBNYXRoLnJhbmRvbSgpICogRGF0ZS5ub3coKSB8IDApLnRvU3RyaW5nKClcbiAgICAgICsgTWF0aC5hYnMoTWF0aC5yYW5kb20oKSAqIE1hdGgucmFuZG9tKCkgKiBEYXRlLm5vdygpIHwgMCkudG9TdHJpbmcoKTtcbiAgfVxuICB0aGlzLnNlcXVlbmNlTnVtYmVyID0gKHRoaXMuc2VxdWVuY2VOdW1iZXIgKyAxKSB8IDA7XG4gIHJhbmQud3JpdGVJbnQzMkJFKHRoaXMuc2VxdWVuY2VOdW1iZXIsIDExKTtcbiAgaWYgKGNyeXB0by5yYW5kb21CeXRlcykge1xuICAgIHRoaXMuZ2V0UmFuZG9tQnl0ZXMoMTIpLmNvcHkocmFuZCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbm90IHNlY3VyZSBmb3Igbm9kZSAwLjRcbiAgICBbMCwgNCwgOF0uZm9yRWFjaChmdW5jdGlvbihpKSB7XG4gICAgICByYW5kLndyaXRlSW50MzJCRShNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMiwgMzIpIHwgMCwgaSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHJhbmQudG9TdHJpbmcoJ2Jhc2U2NCcpLnJlcGxhY2UoL1xcLy9nLCAnXycpLnJlcGxhY2UoL1xcKy9nLCAnLScpO1xufTtcblxuLyoqXG4gKiBFeHBvcnRcbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBuZXcgQmFzZTY0SWQoKTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBQb2xsaW5nID0gcmVxdWlyZSgnLi9wb2xsaW5nJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFhIUjtcblxuLyoqXG4gKiBBamF4IHBvbGxpbmcgdHJhbnNwb3J0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gWEhSIChyZXEpIHtcbiAgUG9sbGluZy5jYWxsKHRoaXMsIHJlcSk7XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBQb2xsaW5nLlxuICovXG5cbnV0aWwuaW5oZXJpdHMoWEhSLCBQb2xsaW5nKTtcblxuLyoqXG4gKiBPdmVycmlkZXMgYG9uUmVxdWVzdGAgdG8gaGFuZGxlIGBPUFRJT05TYC4uXG4gKlxuICogQHBhcmFtIHtodHRwLkluY29taW5nTWVzc2FnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblhIUi5wcm90b3R5cGUub25SZXF1ZXN0ID0gZnVuY3Rpb24gKHJlcSkge1xuICBpZiAoJ09QVElPTlMnID09PSByZXEubWV0aG9kKSB7XG4gICAgdmFyIHJlcyA9IHJlcS5yZXM7XG4gICAgdmFyIGhlYWRlcnMgPSB0aGlzLmhlYWRlcnMocmVxKTtcbiAgICBoZWFkZXJzWydBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJ10gPSAnQ29udGVudC1UeXBlJztcbiAgICByZXMud3JpdGVIZWFkKDIwMCwgaGVhZGVycyk7XG4gICAgcmVzLmVuZCgpO1xuICB9IGVsc2Uge1xuICAgIFBvbGxpbmcucHJvdG90eXBlLm9uUmVxdWVzdC5jYWxsKHRoaXMsIHJlcSk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBoZWFkZXJzIGZvciBhIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7aHR0cC5JbmNvbWluZ01lc3NhZ2V9IHJlcXVlc3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBleHRyYSBoZWFkZXJzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5YSFIucHJvdG90eXBlLmhlYWRlcnMgPSBmdW5jdGlvbiAocmVxLCBoZWFkZXJzKSB7XG4gIGhlYWRlcnMgPSBoZWFkZXJzIHx8IHt9O1xuXG4gIGlmIChyZXEuaGVhZGVycy5vcmlnaW4pIHtcbiAgICBoZWFkZXJzWydBY2Nlc3MtQ29udHJvbC1BbGxvdy1DcmVkZW50aWFscyddID0gJ3RydWUnO1xuICAgIGhlYWRlcnNbJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbiddID0gcmVxLmhlYWRlcnMub3JpZ2luO1xuICB9IGVsc2Uge1xuICAgIGhlYWRlcnNbJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbiddID0gJyonO1xuICB9XG5cbiAgcmV0dXJuIFBvbGxpbmcucHJvdG90eXBlLmhlYWRlcnMuY2FsbCh0aGlzLCByZXEsIGhlYWRlcnMpO1xufTtcbiIsIi8qISBodHRwczovL210aHMuYmUvdXRmOGpzIHYyLjEuMiBieSBAbWF0aGlhcyAqL1xuXG52YXIgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcblxuLy8gVGFrZW4gZnJvbSBodHRwczovL210aHMuYmUvcHVueWNvZGVcbmZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdHZhciBvdXRwdXQgPSBbXTtcblx0dmFyIGNvdW50ZXIgPSAwO1xuXHR2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblx0dmFyIHZhbHVlO1xuXHR2YXIgZXh0cmE7XG5cdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0dmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuXHRcdFx0ZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIGxvdyBzdXJyb2dhdGVcblx0XHRcdFx0b3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZSBuZXh0XG5cdFx0XHRcdC8vIGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHRcdGNvdW50ZXItLTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gb3V0cHV0O1xufVxuXG4vLyBUYWtlbiBmcm9tIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZVxuZnVuY3Rpb24gdWNzMmVuY29kZShhcnJheSkge1xuXHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHR2YXIgaW5kZXggPSAtMTtcblx0dmFyIHZhbHVlO1xuXHR2YXIgb3V0cHV0ID0gJyc7XG5cdHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG5cdFx0dmFsdWUgPSBhcnJheVtpbmRleF07XG5cdFx0aWYgKHZhbHVlID4gMHhGRkZGKSB7XG5cdFx0XHR2YWx1ZSAtPSAweDEwMDAwO1xuXHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG5cdFx0XHR2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG5cdFx0fVxuXHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUpO1xuXHR9XG5cdHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50LCBzdHJpY3QpIHtcblx0aWYgKGNvZGVQb2ludCA+PSAweEQ4MDAgJiYgY29kZVBvaW50IDw9IDB4REZGRikge1xuXHRcdGlmIChzdHJpY3QpIHtcblx0XHRcdHRocm93IEVycm9yKFxuXHRcdFx0XHQnTG9uZSBzdXJyb2dhdGUgVSsnICsgY29kZVBvaW50LnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpICtcblx0XHRcdFx0JyBpcyBub3QgYSBzY2FsYXIgdmFsdWUnXG5cdFx0XHQpO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuIHRydWU7XG59XG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuZnVuY3Rpb24gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIHNoaWZ0KSB7XG5cdHJldHVybiBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gc2hpZnQpICYgMHgzRikgfCAweDgwKTtcbn1cblxuZnVuY3Rpb24gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCwgc3RyaWN0KSB7XG5cdGlmICgoY29kZVBvaW50ICYgMHhGRkZGRkY4MCkgPT0gMCkgeyAvLyAxLWJ5dGUgc2VxdWVuY2Vcblx0XHRyZXR1cm4gc3RyaW5nRnJvbUNoYXJDb2RlKGNvZGVQb2ludCk7XG5cdH1cblx0dmFyIHN5bWJvbCA9ICcnO1xuXHRpZiAoKGNvZGVQb2ludCAmIDB4RkZGRkY4MDApID09IDApIHsgLy8gMi1ieXRlIHNlcXVlbmNlXG5cdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDYpICYgMHgxRikgfCAweEMwKTtcblx0fVxuXHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkZGMDAwMCkgPT0gMCkgeyAvLyAzLWJ5dGUgc2VxdWVuY2Vcblx0XHRpZiAoIWNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50LCBzdHJpY3QpKSB7XG5cdFx0XHRjb2RlUG9pbnQgPSAweEZGRkQ7XG5cdFx0fVxuXHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiAxMikgJiAweDBGKSB8IDB4RTApO1xuXHRcdHN5bWJvbCArPSBjcmVhdGVCeXRlKGNvZGVQb2ludCwgNik7XG5cdH1cblx0ZWxzZSBpZiAoKGNvZGVQb2ludCAmIDB4RkZFMDAwMDApID09IDApIHsgLy8gNC1ieXRlIHNlcXVlbmNlXG5cdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDE4KSAmIDB4MDcpIHwgMHhGMCk7XG5cdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCAxMik7XG5cdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCA2KTtcblx0fVxuXHRzeW1ib2wgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKChjb2RlUG9pbnQgJiAweDNGKSB8IDB4ODApO1xuXHRyZXR1cm4gc3ltYm9sO1xufVxuXG5mdW5jdGlvbiB1dGY4ZW5jb2RlKHN0cmluZywgb3B0cykge1xuXHRvcHRzID0gb3B0cyB8fCB7fTtcblx0dmFyIHN0cmljdCA9IGZhbHNlICE9PSBvcHRzLnN0cmljdDtcblxuXHR2YXIgY29kZVBvaW50cyA9IHVjczJkZWNvZGUoc3RyaW5nKTtcblx0dmFyIGxlbmd0aCA9IGNvZGVQb2ludHMubGVuZ3RoO1xuXHR2YXIgaW5kZXggPSAtMTtcblx0dmFyIGNvZGVQb2ludDtcblx0dmFyIGJ5dGVTdHJpbmcgPSAnJztcblx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHRjb2RlUG9pbnQgPSBjb2RlUG9pbnRzW2luZGV4XTtcblx0XHRieXRlU3RyaW5nICs9IGVuY29kZUNvZGVQb2ludChjb2RlUG9pbnQsIHN0cmljdCk7XG5cdH1cblx0cmV0dXJuIGJ5dGVTdHJpbmc7XG59XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5mdW5jdGlvbiByZWFkQ29udGludWF0aW9uQnl0ZSgpIHtcblx0aWYgKGJ5dGVJbmRleCA+PSBieXRlQ291bnQpIHtcblx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBieXRlIGluZGV4Jyk7XG5cdH1cblxuXHR2YXIgY29udGludWF0aW9uQnl0ZSA9IGJ5dGVBcnJheVtieXRlSW5kZXhdICYgMHhGRjtcblx0Ynl0ZUluZGV4Kys7XG5cblx0aWYgKChjb250aW51YXRpb25CeXRlICYgMHhDMCkgPT0gMHg4MCkge1xuXHRcdHJldHVybiBjb250aW51YXRpb25CeXRlICYgMHgzRjtcblx0fVxuXG5cdC8vIElmIHdlIGVuZCB1cCBoZXJlLCBpdOKAmXMgbm90IGEgY29udGludWF0aW9uIGJ5dGVcblx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlU3ltYm9sKHN0cmljdCkge1xuXHR2YXIgYnl0ZTE7XG5cdHZhciBieXRlMjtcblx0dmFyIGJ5dGUzO1xuXHR2YXIgYnl0ZTQ7XG5cdHZhciBjb2RlUG9pbnQ7XG5cblx0aWYgKGJ5dGVJbmRleCA+IGJ5dGVDb3VudCkge1xuXHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGJ5dGUgaW5kZXgnKTtcblx0fVxuXG5cdGlmIChieXRlSW5kZXggPT0gYnl0ZUNvdW50KSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gUmVhZCBmaXJzdCBieXRlXG5cdGJ5dGUxID0gYnl0ZUFycmF5W2J5dGVJbmRleF0gJiAweEZGO1xuXHRieXRlSW5kZXgrKztcblxuXHQvLyAxLWJ5dGUgc2VxdWVuY2UgKG5vIGNvbnRpbnVhdGlvbiBieXRlcylcblx0aWYgKChieXRlMSAmIDB4ODApID09IDApIHtcblx0XHRyZXR1cm4gYnl0ZTE7XG5cdH1cblxuXHQvLyAyLWJ5dGUgc2VxdWVuY2Vcblx0aWYgKChieXRlMSAmIDB4RTApID09IDB4QzApIHtcblx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MUYpIDw8IDYpIHwgYnl0ZTI7XG5cdFx0aWYgKGNvZGVQb2ludCA+PSAweDgwKSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xuXHRcdH1cblx0fVxuXG5cdC8vIDMtYnl0ZSBzZXF1ZW5jZSAobWF5IGluY2x1ZGUgdW5wYWlyZWQgc3Vycm9nYXRlcylcblx0aWYgKChieXRlMSAmIDB4RjApID09IDB4RTApIHtcblx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Ynl0ZTMgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDBGKSA8PCAxMikgfCAoYnl0ZTIgPDwgNikgfCBieXRlMztcblx0XHRpZiAoY29kZVBvaW50ID49IDB4MDgwMCkge1xuXHRcdFx0cmV0dXJuIGNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50LCBzdHJpY3QpID8gY29kZVBvaW50IDogMHhGRkZEO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xuXHRcdH1cblx0fVxuXG5cdC8vIDQtYnl0ZSBzZXF1ZW5jZVxuXHRpZiAoKGJ5dGUxICYgMHhGOCkgPT0gMHhGMCkge1xuXHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRieXRlMyA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Ynl0ZTQgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDA3KSA8PCAweDEyKSB8IChieXRlMiA8PCAweDBDKSB8XG5cdFx0XHQoYnl0ZTMgPDwgMHgwNikgfCBieXRlNDtcblx0XHRpZiAoY29kZVBvaW50ID49IDB4MDEwMDAwICYmIGNvZGVQb2ludCA8PSAweDEwRkZGRikge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludDtcblx0XHR9XG5cdH1cblxuXHR0aHJvdyBFcnJvcignSW52YWxpZCBVVEYtOCBkZXRlY3RlZCcpO1xufVxuXG52YXIgYnl0ZUFycmF5O1xudmFyIGJ5dGVDb3VudDtcbnZhciBieXRlSW5kZXg7XG5mdW5jdGlvbiB1dGY4ZGVjb2RlKGJ5dGVTdHJpbmcsIG9wdHMpIHtcblx0b3B0cyA9IG9wdHMgfHwge307XG5cdHZhciBzdHJpY3QgPSBmYWxzZSAhPT0gb3B0cy5zdHJpY3Q7XG5cblx0Ynl0ZUFycmF5ID0gdWNzMmRlY29kZShieXRlU3RyaW5nKTtcblx0Ynl0ZUNvdW50ID0gYnl0ZUFycmF5Lmxlbmd0aDtcblx0Ynl0ZUluZGV4ID0gMDtcblx0dmFyIGNvZGVQb2ludHMgPSBbXTtcblx0dmFyIHRtcDtcblx0d2hpbGUgKCh0bXAgPSBkZWNvZGVTeW1ib2woc3RyaWN0KSkgIT09IGZhbHNlKSB7XG5cdFx0Y29kZVBvaW50cy5wdXNoKHRtcCk7XG5cdH1cblx0cmV0dXJuIHVjczJlbmNvZGUoY29kZVBvaW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHR2ZXJzaW9uOiAnMi4xLjInLFxuXHRlbmNvZGU6IHV0ZjhlbmNvZGUsXG5cdGRlY29kZTogdXRmOGRlY29kZVxufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBhZnRlclxuXG5mdW5jdGlvbiBhZnRlcihjb3VudCwgY2FsbGJhY2ssIGVycl9jYikge1xuICAgIHZhciBiYWlsID0gZmFsc2VcbiAgICBlcnJfY2IgPSBlcnJfY2IgfHwgbm9vcFxuICAgIHByb3h5LmNvdW50ID0gY291bnRcblxuICAgIHJldHVybiAoY291bnQgPT09IDApID8gY2FsbGJhY2soKSA6IHByb3h5XG5cbiAgICBmdW5jdGlvbiBwcm94eShlcnIsIHJlc3VsdCkge1xuICAgICAgICBpZiAocHJveHkuY291bnQgPD0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhZnRlciBjYWxsZWQgdG9vIG1hbnkgdGltZXMnKVxuICAgICAgICB9XG4gICAgICAgIC0tcHJveHkuY291bnRcblxuICAgICAgICAvLyBhZnRlciBmaXJzdCBlcnJvciwgcmVzdCBhcmUgcGFzc2VkIHRvIGVycl9jYlxuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBiYWlsID0gdHJ1ZVxuICAgICAgICAgICAgY2FsbGJhY2soZXJyKVxuICAgICAgICAgICAgLy8gZnV0dXJlIGVycm9yIGNhbGxiYWNrcyB3aWxsIGdvIHRvIGVycm9yIGhhbmRsZXJcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZXJyX2NiXG4gICAgICAgIH0gZWxzZSBpZiAocHJveHkuY291bnQgPT09IDAgJiYgIWJhaWwpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdClcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4iLCJcbi8qKlxuICogR2V0cyB0aGUga2V5cyBmb3IgYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm4ge0FycmF5fSBrZXlzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMgKG9iail7XG4gIHZhciBhcnIgPSBbXTtcbiAgdmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoaGFzLmNhbGwob2JqLCBpKSkge1xuICAgICAgYXJyLnB1c2goaSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnI7XG59O1xuIiwiLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICovXG5cbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSBsb2NhbHN0b3JhZ2UoKTtcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbXG5cdCcjMDAwMENDJyxcblx0JyMwMDAwRkYnLFxuXHQnIzAwMzNDQycsXG5cdCcjMDAzM0ZGJyxcblx0JyMwMDY2Q0MnLFxuXHQnIzAwNjZGRicsXG5cdCcjMDA5OUNDJyxcblx0JyMwMDk5RkYnLFxuXHQnIzAwQ0MwMCcsXG5cdCcjMDBDQzMzJyxcblx0JyMwMENDNjYnLFxuXHQnIzAwQ0M5OScsXG5cdCcjMDBDQ0NDJyxcblx0JyMwMENDRkYnLFxuXHQnIzMzMDBDQycsXG5cdCcjMzMwMEZGJyxcblx0JyMzMzMzQ0MnLFxuXHQnIzMzMzNGRicsXG5cdCcjMzM2NkNDJyxcblx0JyMzMzY2RkYnLFxuXHQnIzMzOTlDQycsXG5cdCcjMzM5OUZGJyxcblx0JyMzM0NDMDAnLFxuXHQnIzMzQ0MzMycsXG5cdCcjMzNDQzY2Jyxcblx0JyMzM0NDOTknLFxuXHQnIzMzQ0NDQycsXG5cdCcjMzNDQ0ZGJyxcblx0JyM2NjAwQ0MnLFxuXHQnIzY2MDBGRicsXG5cdCcjNjYzM0NDJyxcblx0JyM2NjMzRkYnLFxuXHQnIzY2Q0MwMCcsXG5cdCcjNjZDQzMzJyxcblx0JyM5OTAwQ0MnLFxuXHQnIzk5MDBGRicsXG5cdCcjOTkzM0NDJyxcblx0JyM5OTMzRkYnLFxuXHQnIzk5Q0MwMCcsXG5cdCcjOTlDQzMzJyxcblx0JyNDQzAwMDAnLFxuXHQnI0NDMDAzMycsXG5cdCcjQ0MwMDY2Jyxcblx0JyNDQzAwOTknLFxuXHQnI0NDMDBDQycsXG5cdCcjQ0MwMEZGJyxcblx0JyNDQzMzMDAnLFxuXHQnI0NDMzMzMycsXG5cdCcjQ0MzMzY2Jyxcblx0JyNDQzMzOTknLFxuXHQnI0NDMzNDQycsXG5cdCcjQ0MzM0ZGJyxcblx0JyNDQzY2MDAnLFxuXHQnI0NDNjYzMycsXG5cdCcjQ0M5OTAwJyxcblx0JyNDQzk5MzMnLFxuXHQnI0NDQ0MwMCcsXG5cdCcjQ0NDQzMzJyxcblx0JyNGRjAwMDAnLFxuXHQnI0ZGMDAzMycsXG5cdCcjRkYwMDY2Jyxcblx0JyNGRjAwOTknLFxuXHQnI0ZGMDBDQycsXG5cdCcjRkYwMEZGJyxcblx0JyNGRjMzMDAnLFxuXHQnI0ZGMzMzMycsXG5cdCcjRkYzMzY2Jyxcblx0JyNGRjMzOTknLFxuXHQnI0ZGMzNDQycsXG5cdCcjRkYzM0ZGJyxcblx0JyNGRjY2MDAnLFxuXHQnI0ZGNjYzMycsXG5cdCcjRkY5OTAwJyxcblx0JyNGRjk5MzMnLFxuXHQnI0ZGQ0MwMCcsXG5cdCcjRkZDQzMzJ1xuXTtcblxuLyoqXG4gKiBDdXJyZW50bHkgb25seSBXZWJLaXQtYmFzZWQgV2ViIEluc3BlY3RvcnMsIEZpcmVmb3ggPj0gdjMxLFxuICogYW5kIHRoZSBGaXJlYnVnIGV4dGVuc2lvbiAoYW55IEZpcmVmb3ggdmVyc2lvbikgYXJlIGtub3duXG4gKiB0byBzdXBwb3J0IFwiJWNcIiBDU1MgY3VzdG9taXphdGlvbnMuXG4gKlxuICogVE9ETzogYWRkIGEgYGxvY2FsU3RvcmFnZWAgdmFyaWFibGUgdG8gZXhwbGljaXRseSBlbmFibGUvZGlzYWJsZSBjb2xvcnNcbiAqL1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuXHQvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG5cdC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG5cdC8vIGV4cGxpY2l0bHlcblx0aWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmICh3aW5kb3cucHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInIHx8IHdpbmRvdy5wcm9jZXNzLl9fbndqcykpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cblx0aWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gSXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcblx0Ly8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcblx0cmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG5cdFx0Ly8gSXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuXHRcdCh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG5cdFx0Ly8gSXMgZmlyZWZveCA+PSB2MzE/XG5cdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG5cdFx0Ly8gRG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuXHRcdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG5cdGFyZ3NbMF0gPSAodGhpcy51c2VDb2xvcnMgPyAnJWMnIDogJycpICtcblx0XHR0aGlzLm5hbWVzcGFjZSArXG5cdFx0KHRoaXMudXNlQ29sb3JzID8gJyAlYycgOiAnICcpICtcblx0XHRhcmdzWzBdICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnJWMgJyA6ICcgJykgK1xuXHRcdCcrJyArIG1vZHVsZS5leHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cblx0aWYgKCF0aGlzLnVzZUNvbG9ycykge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGNvbnN0IGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuXHRhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKTtcblxuXHQvLyBUaGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuXHQvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG5cdC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuXHRsZXQgaW5kZXggPSAwO1xuXHRsZXQgbGFzdEMgPSAwO1xuXHRhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgbWF0Y2ggPT4ge1xuXHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpbmRleCsrO1xuXHRcdGlmIChtYXRjaCA9PT0gJyVjJykge1xuXHRcdFx0Ly8gV2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG5cdFx0XHQvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuXHRcdFx0bGFzdEMgPSBpbmRleDtcblx0XHR9XG5cdH0pO1xuXG5cdGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmxvZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gbG9nKC4uLmFyZ3MpIHtcblx0Ly8gVGhpcyBoYWNrZXJ5IGlzIHJlcXVpcmVkIGZvciBJRTgvOSwgd2hlcmVcblx0Ly8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24gZG9lc24ndCBoYXZlICdhcHBseSdcblx0cmV0dXJuIHR5cGVvZiBjb25zb2xlID09PSAnb2JqZWN0JyAmJlxuXHRcdGNvbnNvbGUubG9nICYmXG5cdFx0Y29uc29sZS5sb2coLi4uYXJncyk7XG59XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcblx0dHJ5IHtcblx0XHRpZiAobmFtZXNwYWNlcykge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnNldEl0ZW0oJ2RlYnVnJywgbmFtZXNwYWNlcyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuXHRcdH1cblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbG9hZCgpIHtcblx0bGV0IHI7XG5cdHRyeSB7XG5cdFx0ciA9IGV4cG9ydHMuc3RvcmFnZS5nZXRJdGVtKCdkZWJ1ZycpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxuXG5cdC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcblx0aWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG5cdFx0ciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuXHR9XG5cblx0cmV0dXJuIHI7XG59XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuXHR0cnkge1xuXHRcdC8vIFRWTUxLaXQgKEFwcGxlIFRWIEpTIFJ1bnRpbWUpIGRvZXMgbm90IGhhdmUgYSB3aW5kb3cgb2JqZWN0LCBqdXN0IGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHRcblx0XHQvLyBUaGUgQnJvd3NlciBhbHNvIGhhcyBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0LlxuXHRcdHJldHVybiBsb2NhbFN0b3JhZ2U7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9jb21tb24nKShleHBvcnRzKTtcblxuY29uc3Qge2Zvcm1hdHRlcnN9ID0gbW9kdWxlLmV4cG9ydHM7XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uICh2KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdHJldHVybiAnW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06ICcgKyBlcnJvci5tZXNzYWdlO1xuXHR9XG59O1xuIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB3ID0gZCAqIDc7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbCkpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKC0/KD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnd2Vla3MnOlxuICAgIGNhc2UgJ3dlZWsnOlxuICAgIGNhc2UgJ3cnOlxuICAgICAgcmV0dXJuIG4gKiB3O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBkLCAnZGF5Jyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgaCwgJ2hvdXInKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBtLCAnbWludXRlJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgcywgJ3NlY29uZCcpO1xuICB9XG4gIHJldHVybiBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbXNBYnMsIG4sIG5hbWUpIHtcbiAgdmFyIGlzUGx1cmFsID0gbXNBYnMgPj0gbiAqIDEuNTtcbiAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBuKSArICcgJyArIG5hbWUgKyAoaXNQbHVyYWwgPyAncycgOiAnJyk7XG59XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuY29uc3QgdHR5ID0gcmVxdWlyZSgndHR5Jyk7XG5jb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIE5vZGUuanMgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICovXG5cbmV4cG9ydHMuaW5pdCA9IGluaXQ7XG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFs2LCAyLCAzLCA0LCA1LCAxXTtcblxudHJ5IHtcblx0Ly8gT3B0aW9uYWwgZGVwZW5kZW5jeSAoYXMgaW4sIGRvZXNuJ3QgbmVlZCB0byBiZSBpbnN0YWxsZWQsIE5PVCBsaWtlIG9wdGlvbmFsRGVwZW5kZW5jaWVzIGluIHBhY2thZ2UuanNvbilcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llc1xuXHRjb25zdCBzdXBwb3J0c0NvbG9yID0gcmVxdWlyZSgnc3VwcG9ydHMtY29sb3InKTtcblxuXHRpZiAoc3VwcG9ydHNDb2xvciAmJiAoc3VwcG9ydHNDb2xvci5zdGRlcnIgfHwgc3VwcG9ydHNDb2xvcikubGV2ZWwgPj0gMikge1xuXHRcdGV4cG9ydHMuY29sb3JzID0gW1xuXHRcdFx0MjAsXG5cdFx0XHQyMSxcblx0XHRcdDI2LFxuXHRcdFx0MjcsXG5cdFx0XHQzMixcblx0XHRcdDMzLFxuXHRcdFx0MzgsXG5cdFx0XHQzOSxcblx0XHRcdDQwLFxuXHRcdFx0NDEsXG5cdFx0XHQ0Mixcblx0XHRcdDQzLFxuXHRcdFx0NDQsXG5cdFx0XHQ0NSxcblx0XHRcdDU2LFxuXHRcdFx0NTcsXG5cdFx0XHQ2Mixcblx0XHRcdDYzLFxuXHRcdFx0NjgsXG5cdFx0XHQ2OSxcblx0XHRcdDc0LFxuXHRcdFx0NzUsXG5cdFx0XHQ3Nixcblx0XHRcdDc3LFxuXHRcdFx0NzgsXG5cdFx0XHQ3OSxcblx0XHRcdDgwLFxuXHRcdFx0ODEsXG5cdFx0XHQ5Mixcblx0XHRcdDkzLFxuXHRcdFx0OTgsXG5cdFx0XHQ5OSxcblx0XHRcdDExMixcblx0XHRcdDExMyxcblx0XHRcdDEyOCxcblx0XHRcdDEyOSxcblx0XHRcdDEzNCxcblx0XHRcdDEzNSxcblx0XHRcdDE0OCxcblx0XHRcdDE0OSxcblx0XHRcdDE2MCxcblx0XHRcdDE2MSxcblx0XHRcdDE2Mixcblx0XHRcdDE2Myxcblx0XHRcdDE2NCxcblx0XHRcdDE2NSxcblx0XHRcdDE2Nixcblx0XHRcdDE2Nyxcblx0XHRcdDE2OCxcblx0XHRcdDE2OSxcblx0XHRcdDE3MCxcblx0XHRcdDE3MSxcblx0XHRcdDE3Mixcblx0XHRcdDE3Myxcblx0XHRcdDE3OCxcblx0XHRcdDE3OSxcblx0XHRcdDE4NCxcblx0XHRcdDE4NSxcblx0XHRcdDE5Nixcblx0XHRcdDE5Nyxcblx0XHRcdDE5OCxcblx0XHRcdDE5OSxcblx0XHRcdDIwMCxcblx0XHRcdDIwMSxcblx0XHRcdDIwMixcblx0XHRcdDIwMyxcblx0XHRcdDIwNCxcblx0XHRcdDIwNSxcblx0XHRcdDIwNixcblx0XHRcdDIwNyxcblx0XHRcdDIwOCxcblx0XHRcdDIwOSxcblx0XHRcdDIxNCxcblx0XHRcdDIxNSxcblx0XHRcdDIyMCxcblx0XHRcdDIyMVxuXHRcdF07XG5cdH1cbn0gY2F0Y2ggKGVycm9yKSB7XG5cdC8vIFN3YWxsb3cgLSB3ZSBvbmx5IGNhcmUgaWYgYHN1cHBvcnRzLWNvbG9yYCBpcyBhdmFpbGFibGU7IGl0IGRvZXNuJ3QgaGF2ZSB0byBiZS5cbn1cblxuLyoqXG4gKiBCdWlsZCB1cCB0aGUgZGVmYXVsdCBgaW5zcGVjdE9wdHNgIG9iamVjdCBmcm9tIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG4gKlxuICogICAkIERFQlVHX0NPTE9SUz1ubyBERUJVR19ERVBUSD0xMCBERUJVR19TSE9XX0hJRERFTj1lbmFibGVkIG5vZGUgc2NyaXB0LmpzXG4gKi9cblxuZXhwb3J0cy5pbnNwZWN0T3B0cyA9IE9iamVjdC5rZXlzKHByb2Nlc3MuZW52KS5maWx0ZXIoa2V5ID0+IHtcblx0cmV0dXJuIC9eZGVidWdfL2kudGVzdChrZXkpO1xufSkucmVkdWNlKChvYmosIGtleSkgPT4ge1xuXHQvLyBDYW1lbC1jYXNlXG5cdGNvbnN0IHByb3AgPSBrZXlcblx0XHQuc3Vic3RyaW5nKDYpXG5cdFx0LnRvTG93ZXJDYXNlKClcblx0XHQucmVwbGFjZSgvXyhbYS16XSkvZywgKF8sIGspID0+IHtcblx0XHRcdHJldHVybiBrLnRvVXBwZXJDYXNlKCk7XG5cdFx0fSk7XG5cblx0Ly8gQ29lcmNlIHN0cmluZyB2YWx1ZSBpbnRvIEpTIHZhbHVlXG5cdGxldCB2YWwgPSBwcm9jZXNzLmVudltrZXldO1xuXHRpZiAoL14oeWVzfG9ufHRydWV8ZW5hYmxlZCkkL2kudGVzdCh2YWwpKSB7XG5cdFx0dmFsID0gdHJ1ZTtcblx0fSBlbHNlIGlmICgvXihub3xvZmZ8ZmFsc2V8ZGlzYWJsZWQpJC9pLnRlc3QodmFsKSkge1xuXHRcdHZhbCA9IGZhbHNlO1xuXHR9IGVsc2UgaWYgKHZhbCA9PT0gJ251bGwnKSB7XG5cdFx0dmFsID0gbnVsbDtcblx0fSBlbHNlIHtcblx0XHR2YWwgPSBOdW1iZXIodmFsKTtcblx0fVxuXG5cdG9ialtwcm9wXSA9IHZhbDtcblx0cmV0dXJuIG9iajtcbn0sIHt9KTtcblxuLyoqXG4gKiBJcyBzdGRvdXQgYSBUVFk/IENvbG9yZWQgb3V0cHV0IGlzIGVuYWJsZWQgd2hlbiBgdHJ1ZWAuXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuXHRyZXR1cm4gJ2NvbG9ycycgaW4gZXhwb3J0cy5pbnNwZWN0T3B0cyA/XG5cdFx0Qm9vbGVhbihleHBvcnRzLmluc3BlY3RPcHRzLmNvbG9ycykgOlxuXHRcdHR0eS5pc2F0dHkocHJvY2Vzcy5zdGRlcnIuZmQpO1xufVxuXG4vKipcbiAqIEFkZHMgQU5TSSBjb2xvciBlc2NhcGUgY29kZXMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuXHRjb25zdCB7bmFtZXNwYWNlOiBuYW1lLCB1c2VDb2xvcnN9ID0gdGhpcztcblxuXHRpZiAodXNlQ29sb3JzKSB7XG5cdFx0Y29uc3QgYyA9IHRoaXMuY29sb3I7XG5cdFx0Y29uc3QgY29sb3JDb2RlID0gJ1xcdTAwMUJbMycgKyAoYyA8IDggPyBjIDogJzg7NTsnICsgYyk7XG5cdFx0Y29uc3QgcHJlZml4ID0gYCAgJHtjb2xvckNvZGV9OzFtJHtuYW1lfSBcXHUwMDFCWzBtYDtcblxuXHRcdGFyZ3NbMF0gPSBwcmVmaXggKyBhcmdzWzBdLnNwbGl0KCdcXG4nKS5qb2luKCdcXG4nICsgcHJlZml4KTtcblx0XHRhcmdzLnB1c2goY29sb3JDb2RlICsgJ20rJyArIG1vZHVsZS5leHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZikgKyAnXFx1MDAxQlswbScpO1xuXHR9IGVsc2Uge1xuXHRcdGFyZ3NbMF0gPSBnZXREYXRlKCkgKyBuYW1lICsgJyAnICsgYXJnc1swXTtcblx0fVxufVxuXG5mdW5jdGlvbiBnZXREYXRlKCkge1xuXHRpZiAoZXhwb3J0cy5pbnNwZWN0T3B0cy5oaWRlRGF0ZSkge1xuXHRcdHJldHVybiAnJztcblx0fVxuXHRyZXR1cm4gbmV3IERhdGUoKS50b0lTT1N0cmluZygpICsgJyAnO1xufVxuXG4vKipcbiAqIEludm9rZXMgYHV0aWwuZm9ybWF0KClgIHdpdGggdGhlIHNwZWNpZmllZCBhcmd1bWVudHMgYW5kIHdyaXRlcyB0byBzdGRlcnIuXG4gKi9cblxuZnVuY3Rpb24gbG9nKC4uLmFyZ3MpIHtcblx0cmV0dXJuIHByb2Nlc3Muc3RkZXJyLndyaXRlKHV0aWwuZm9ybWF0KC4uLmFyZ3MpICsgJ1xcbicpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG5cdGlmIChuYW1lc3BhY2VzKSB7XG5cdFx0cHJvY2Vzcy5lbnYuREVCVUcgPSBuYW1lc3BhY2VzO1xuXHR9IGVsc2Uge1xuXHRcdC8vIElmIHlvdSBzZXQgYSBwcm9jZXNzLmVudiBmaWVsZCB0byBudWxsIG9yIHVuZGVmaW5lZCwgaXQgZ2V0cyBjYXN0IHRvIHRoZVxuXHRcdC8vIHN0cmluZyAnbnVsbCcgb3IgJ3VuZGVmaW5lZCcuIEp1c3QgZGVsZXRlIGluc3RlYWQuXG5cdFx0ZGVsZXRlIHByb2Nlc3MuZW52LkRFQlVHO1xuXHR9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcblx0cmV0dXJuIHByb2Nlc3MuZW52LkRFQlVHO1xufVxuXG4vKipcbiAqIEluaXQgbG9naWMgZm9yIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuICpcbiAqIENyZWF0ZSBhIG5ldyBgaW5zcGVjdE9wdHNgIG9iamVjdCBpbiBjYXNlIGB1c2VDb2xvcnNgIGlzIHNldFxuICogZGlmZmVyZW50bHkgZm9yIGEgcGFydGljdWxhciBgZGVidWdgIGluc3RhbmNlLlxuICovXG5cbmZ1bmN0aW9uIGluaXQoZGVidWcpIHtcblx0ZGVidWcuaW5zcGVjdE9wdHMgPSB7fTtcblxuXHRjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZXhwb3J0cy5pbnNwZWN0T3B0cyk7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuXHRcdGRlYnVnLmluc3BlY3RPcHRzW2tleXNbaV1dID0gZXhwb3J0cy5pbnNwZWN0T3B0c1trZXlzW2ldXTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29tbW9uJykoZXhwb3J0cyk7XG5cbmNvbnN0IHtmb3JtYXR0ZXJzfSA9IG1vZHVsZS5leHBvcnRzO1xuXG4vKipcbiAqIE1hcCAlbyB0byBgdXRpbC5pbnNwZWN0KClgLCBhbGwgb24gYSBzaW5nbGUgbGluZS5cbiAqL1xuXG5mb3JtYXR0ZXJzLm8gPSBmdW5jdGlvbiAodikge1xuXHR0aGlzLmluc3BlY3RPcHRzLmNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuXHRyZXR1cm4gdXRpbC5pbnNwZWN0KHYsIHRoaXMuaW5zcGVjdE9wdHMpXG5cdFx0LnJlcGxhY2UoL1xccypcXG5cXHMqL2csICcgJyk7XG59O1xuXG4vKipcbiAqIE1hcCAlTyB0byBgdXRpbC5pbnNwZWN0KClgLCBhbGxvd2luZyBtdWx0aXBsZSBsaW5lcyBpZiBuZWVkZWQuXG4gKi9cblxuZm9ybWF0dGVycy5PID0gZnVuY3Rpb24gKHYpIHtcblx0dGhpcy5pbnNwZWN0T3B0cy5jb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblx0cmV0dXJuIHV0aWwuaW5zcGVjdCh2LCB0aGlzLmluc3BlY3RPcHRzKTtcbn07XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgUG9sbGluZyA9IHJlcXVpcmUoJy4vcG9sbGluZycpO1xudmFyIHFzID0gcmVxdWlyZSgncXVlcnlzdHJpbmcnKTtcbnZhciByRG91YmxlU2xhc2hlcyA9IC9cXFxcXFxcXG4vZztcbnZhciByU2xhc2hlcyA9IC8oXFxcXCk/XFxcXG4vZztcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gSlNPTlA7XG5cbi8qKlxuICogSlNPTi1QIHBvbGxpbmcgdHJhbnNwb3J0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gSlNPTlAgKHJlcSkge1xuICBQb2xsaW5nLmNhbGwodGhpcywgcmVxKTtcblxuICB0aGlzLmhlYWQgPSAnX19fZWlvWycgKyAocmVxLl9xdWVyeS5qIHx8ICcnKS5yZXBsYWNlKC9bXjAtOV0vZywgJycpICsgJ10oJztcbiAgdGhpcy5mb290ID0gJyk7Jztcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFBvbGxpbmcuXG4gKi9cblxudXRpbC5pbmhlcml0cyhKU09OUCwgUG9sbGluZyk7XG5cbi8qKlxuICogSGFuZGxlcyBpbmNvbWluZyBkYXRhLlxuICogRHVlIHRvIGEgYnVnIGluIFxcbiBoYW5kbGluZyBieSBicm93c2Vycywgd2UgZXhwZWN0IGEgZXNjYXBlZCBzdHJpbmcuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuSlNPTlAucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIC8vIHdlIGxldmVyYWdlIHRoZSBxcyBtb2R1bGUgc28gdGhhdCB3ZSBnZXQgYnVpbHQtaW4gRG9TIHByb3RlY3Rpb25cbiAgLy8gYW5kIHRoZSBmYXN0IGFsdGVybmF0aXZlIHRvIGRlY29kZVVSSUNvbXBvbmVudFxuICBkYXRhID0gcXMucGFyc2UoZGF0YSkuZDtcbiAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgZGF0YSkge1xuICAgIC8vIGNsaWVudCB3aWxsIHNlbmQgYWxyZWFkeSBlc2NhcGVkIG5ld2xpbmVzIGFzIFxcXFxcXFxcbiBhbmQgbmV3bGluZXMgYXMgXFxcXG5cbiAgICAvLyBcXFxcbiBtdXN0IGJlIHJlcGxhY2VkIHdpdGggXFxuIGFuZCBcXFxcXFxcXG4gd2l0aCBcXFxcblxuICAgIGRhdGEgPSBkYXRhLnJlcGxhY2UoclNsYXNoZXMsIGZ1bmN0aW9uIChtYXRjaCwgc2xhc2hlcykge1xuICAgICAgcmV0dXJuIHNsYXNoZXMgPyBtYXRjaCA6ICdcXG4nO1xuICAgIH0pO1xuICAgIFBvbGxpbmcucHJvdG90eXBlLm9uRGF0YS5jYWxsKHRoaXMsIGRhdGEucmVwbGFjZShyRG91YmxlU2xhc2hlcywgJ1xcXFxuJykpO1xuICB9XG59O1xuXG4vKipcbiAqIFBlcmZvcm1zIHRoZSB3cml0ZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5KU09OUC5wcm90b3R5cGUuZG9Xcml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAvLyB3ZSBtdXN0IG91dHB1dCB2YWxpZCBqYXZhc2NyaXB0LCBub3QgdmFsaWQganNvblxuICAvLyBzZWU6IGh0dHA6Ly90aW1lbGVzc3JlcG8uY29tL2pzb24taXNudC1hLWphdmFzY3JpcHQtc3Vic2V0XG4gIHZhciBqcyA9IEpTT04uc3RyaW5naWZ5KGRhdGEpXG4gICAgLnJlcGxhY2UoL1xcdTIwMjgvZywgJ1xcXFx1MjAyOCcpXG4gICAgLnJlcGxhY2UoL1xcdTIwMjkvZywgJ1xcXFx1MjAyOScpO1xuXG4gIC8vIHByZXBhcmUgcmVzcG9uc2VcbiAgZGF0YSA9IHRoaXMuaGVhZCArIGpzICsgdGhpcy5mb290O1xuXG4gIFBvbGxpbmcucHJvdG90eXBlLmRvV3JpdGUuY2FsbCh0aGlzLCBkYXRhLCBvcHRpb25zLCBjYWxsYmFjayk7XG59O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4uL3RyYW5zcG9ydCcpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lOndzJyk7XG5cbi8qKlxuICogRXhwb3J0IHRoZSBjb25zdHJ1Y3Rvci5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYlNvY2tldDtcblxuLyoqXG4gKiBXZWJTb2NrZXQgdHJhbnNwb3J0XG4gKlxuICogQHBhcmFtIHtodHRwLkluY29taW5nTWVzc2FnZX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gV2ViU29ja2V0IChyZXEpIHtcbiAgVHJhbnNwb3J0LmNhbGwodGhpcywgcmVxKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnNvY2tldCA9IHJlcS53ZWJzb2NrZXQ7XG4gIHRoaXMuc29ja2V0Lm9uKCdtZXNzYWdlJywgdGhpcy5vbkRhdGEuYmluZCh0aGlzKSk7XG4gIHRoaXMuc29ja2V0Lm9uY2UoJ2Nsb3NlJywgdGhpcy5vbkNsb3NlLmJpbmQodGhpcykpO1xuICB0aGlzLnNvY2tldC5vbignZXJyb3InLCB0aGlzLm9uRXJyb3IuYmluZCh0aGlzKSk7XG4gIHRoaXMuc29ja2V0Lm9uKCdoZWFkZXJzJywgb25IZWFkZXJzKTtcbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIG9uSGVhZGVycyAoaGVhZGVycykge1xuICAgIHNlbGYuZW1pdCgnaGVhZGVycycsIGhlYWRlcnMpO1xuICB9XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBUcmFuc3BvcnQuXG4gKi9cblxudXRpbC5pbmhlcml0cyhXZWJTb2NrZXQsIFRyYW5zcG9ydCk7XG5cbi8qKlxuICogVHJhbnNwb3J0IG5hbWVcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbldlYlNvY2tldC5wcm90b3R5cGUubmFtZSA9ICd3ZWJzb2NrZXQnO1xuXG4vKipcbiAqIEFkdmVydGlzZSB1cGdyYWRlIHN1cHBvcnQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5XZWJTb2NrZXQucHJvdG90eXBlLmhhbmRsZXNVcGdyYWRlcyA9IHRydWU7XG5cbi8qKlxuICogQWR2ZXJ0aXNlIGZyYW1pbmcgc3VwcG9ydC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbldlYlNvY2tldC5wcm90b3R5cGUuc3VwcG9ydHNGcmFtaW5nID0gdHJ1ZTtcblxuLyoqXG4gKiBQcm9jZXNzZXMgdGhlIGluY29taW5nIGRhdGEuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGVuY29kZWQgcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XZWJTb2NrZXQucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIGRlYnVnKCdyZWNlaXZlZCBcIiVzXCInLCBkYXRhKTtcbiAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkRhdGEuY2FsbCh0aGlzLCBkYXRhKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0IHBheWxvYWQuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV2ViU29ja2V0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKHBhY2tldHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwYWNrZXQgPSBwYWNrZXRzW2ldO1xuICAgIHBhcnNlci5lbmNvZGVQYWNrZXQocGFja2V0LCBzZWxmLnN1cHBvcnRzQmluYXJ5LCBzZW5kKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbmQgKGRhdGEpIHtcbiAgICBkZWJ1Zygnd3JpdGluZyBcIiVzXCInLCBkYXRhKTtcblxuICAgIC8vIGFsd2F5cyBjcmVhdGVzIGEgbmV3IG9iamVjdCBzaW5jZSB3cyBtb2RpZmllcyBpdFxuICAgIHZhciBvcHRzID0ge307XG4gICAgaWYgKHBhY2tldC5vcHRpb25zKSB7XG4gICAgICBvcHRzLmNvbXByZXNzID0gcGFja2V0Lm9wdGlvbnMuY29tcHJlc3M7XG4gICAgfVxuXG4gICAgaWYgKHNlbGYucGVyTWVzc2FnZURlZmxhdGUpIHtcbiAgICAgIHZhciBsZW4gPSAnc3RyaW5nJyA9PT0gdHlwZW9mIGRhdGEgPyBCdWZmZXIuYnl0ZUxlbmd0aChkYXRhKSA6IGRhdGEubGVuZ3RoO1xuICAgICAgaWYgKGxlbiA8IHNlbGYucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7XG4gICAgICAgIG9wdHMuY29tcHJlc3MgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxmLndyaXRhYmxlID0gZmFsc2U7XG4gICAgc2VsZi5zb2NrZXQuc2VuZChkYXRhLCBvcHRzLCBvbkVuZCk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkVuZCAoZXJyKSB7XG4gICAgaWYgKGVycikgcmV0dXJuIHNlbGYub25FcnJvcignd3JpdGUgZXJyb3InLCBlcnIuc3RhY2spO1xuICAgIHNlbGYud3JpdGFibGUgPSB0cnVlO1xuICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIHRyYW5zcG9ydC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XZWJTb2NrZXQucHJvdG90eXBlLmRvQ2xvc2UgPSBmdW5jdGlvbiAoZm4pIHtcbiAgZGVidWcoJ2Nsb3NpbmcnKTtcbiAgdGhpcy5zb2NrZXQuY2xvc2UoKTtcbiAgZm4gJiYgZm4oKTtcbn07XG4iLCIvKiFcbiAqIGNvb2tpZVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBSb21hbiBTaHR5bG1hblxuICogQ29weXJpZ2h0KGMpIDIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5leHBvcnRzLnNlcmlhbGl6ZSA9IHNlcmlhbGl6ZTtcblxuLyoqXG4gKiBNb2R1bGUgdmFyaWFibGVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgZGVjb2RlID0gZGVjb2RlVVJJQ29tcG9uZW50O1xudmFyIGVuY29kZSA9IGVuY29kZVVSSUNvbXBvbmVudDtcbnZhciBwYWlyU3BsaXRSZWdFeHAgPSAvOyAqLztcblxuLyoqXG4gKiBSZWdFeHAgdG8gbWF0Y2ggZmllbGQtY29udGVudCBpbiBSRkMgNzIzMCBzZWMgMy4yXG4gKlxuICogZmllbGQtY29udGVudCA9IGZpZWxkLXZjaGFyIFsgMSooIFNQIC8gSFRBQiApIGZpZWxkLXZjaGFyIF1cbiAqIGZpZWxkLXZjaGFyICAgPSBWQ0hBUiAvIG9icy10ZXh0XG4gKiBvYnMtdGV4dCAgICAgID0gJXg4MC1GRlxuICovXG5cbnZhciBmaWVsZENvbnRlbnRSZWdFeHAgPSAvXltcXHUwMDA5XFx1MDAyMC1cXHUwMDdlXFx1MDA4MC1cXHUwMGZmXSskLztcblxuLyoqXG4gKiBQYXJzZSBhIGNvb2tpZSBoZWFkZXIuXG4gKlxuICogUGFyc2UgdGhlIGdpdmVuIGNvb2tpZSBoZWFkZXIgc3RyaW5nIGludG8gYW4gb2JqZWN0XG4gKiBUaGUgb2JqZWN0IGhhcyB0aGUgdmFyaW91cyBjb29raWVzIGFzIGtleXMobmFtZXMpID0+IHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge29iamVjdH1cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgc3RyIG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgfVxuXG4gIHZhciBvYmogPSB7fVxuICB2YXIgb3B0ID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHBhaXJzID0gc3RyLnNwbGl0KHBhaXJTcGxpdFJlZ0V4cCk7XG4gIHZhciBkZWMgPSBvcHQuZGVjb2RlIHx8IGRlY29kZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHBhaXIgPSBwYWlyc1tpXTtcbiAgICB2YXIgZXFfaWR4ID0gcGFpci5pbmRleE9mKCc9Jyk7XG5cbiAgICAvLyBza2lwIHRoaW5ncyB0aGF0IGRvbid0IGxvb2sgbGlrZSBrZXk9dmFsdWVcbiAgICBpZiAoZXFfaWR4IDwgMCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGtleSA9IHBhaXIuc3Vic3RyKDAsIGVxX2lkeCkudHJpbSgpXG4gICAgdmFyIHZhbCA9IHBhaXIuc3Vic3RyKCsrZXFfaWR4LCBwYWlyLmxlbmd0aCkudHJpbSgpO1xuXG4gICAgLy8gcXVvdGVkIHZhbHVlc1xuICAgIGlmICgnXCInID09IHZhbFswXSkge1xuICAgICAgdmFsID0gdmFsLnNsaWNlKDEsIC0xKTtcbiAgICB9XG5cbiAgICAvLyBvbmx5IGFzc2lnbiBvbmNlXG4gICAgaWYgKHVuZGVmaW5lZCA9PSBvYmpba2V5XSkge1xuICAgICAgb2JqW2tleV0gPSB0cnlEZWNvZGUodmFsLCBkZWMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogU2VyaWFsaXplIGRhdGEgaW50byBhIGNvb2tpZSBoZWFkZXIuXG4gKlxuICogU2VyaWFsaXplIHRoZSBhIG5hbWUgdmFsdWUgcGFpciBpbnRvIGEgY29va2llIHN0cmluZyBzdWl0YWJsZSBmb3JcbiAqIGh0dHAgaGVhZGVycy4gQW4gb3B0aW9uYWwgb3B0aW9ucyBvYmplY3Qgc3BlY2lmaWVkIGNvb2tpZSBwYXJhbWV0ZXJzLlxuICpcbiAqIHNlcmlhbGl6ZSgnZm9vJywgJ2JhcicsIHsgaHR0cE9ubHk6IHRydWUgfSlcbiAqICAgPT4gXCJmb289YmFyOyBodHRwT25seVwiXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWxcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBzZXJpYWxpemUobmFtZSwgdmFsLCBvcHRpb25zKSB7XG4gIHZhciBvcHQgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgZW5jID0gb3B0LmVuY29kZSB8fCBlbmNvZGU7XG5cbiAgaWYgKHR5cGVvZiBlbmMgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gZW5jb2RlIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIGlmICghZmllbGRDb250ZW50UmVnRXhwLnRlc3QobmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBuYW1lIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHZhciB2YWx1ZSA9IGVuYyh2YWwpO1xuXG4gIGlmICh2YWx1ZSAmJiAhZmllbGRDb250ZW50UmVnRXhwLnRlc3QodmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgdmFsIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHZhciBzdHIgPSBuYW1lICsgJz0nICsgdmFsdWU7XG5cbiAgaWYgKG51bGwgIT0gb3B0Lm1heEFnZSkge1xuICAgIHZhciBtYXhBZ2UgPSBvcHQubWF4QWdlIC0gMDtcbiAgICBpZiAoaXNOYU4obWF4QWdlKSkgdGhyb3cgbmV3IEVycm9yKCdtYXhBZ2Ugc2hvdWxkIGJlIGEgTnVtYmVyJyk7XG4gICAgc3RyICs9ICc7IE1heC1BZ2U9JyArIE1hdGguZmxvb3IobWF4QWdlKTtcbiAgfVxuXG4gIGlmIChvcHQuZG9tYWluKSB7XG4gICAgaWYgKCFmaWVsZENvbnRlbnRSZWdFeHAudGVzdChvcHQuZG9tYWluKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIGRvbWFpbiBpcyBpbnZhbGlkJyk7XG4gICAgfVxuXG4gICAgc3RyICs9ICc7IERvbWFpbj0nICsgb3B0LmRvbWFpbjtcbiAgfVxuXG4gIGlmIChvcHQucGF0aCkge1xuICAgIGlmICghZmllbGRDb250ZW50UmVnRXhwLnRlc3Qob3B0LnBhdGgpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gcGF0aCBpcyBpbnZhbGlkJyk7XG4gICAgfVxuXG4gICAgc3RyICs9ICc7IFBhdGg9JyArIG9wdC5wYXRoO1xuICB9XG5cbiAgaWYgKG9wdC5leHBpcmVzKSB7XG4gICAgaWYgKHR5cGVvZiBvcHQuZXhwaXJlcy50b1VUQ1N0cmluZyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIGV4cGlyZXMgaXMgaW52YWxpZCcpO1xuICAgIH1cblxuICAgIHN0ciArPSAnOyBFeHBpcmVzPScgKyBvcHQuZXhwaXJlcy50b1VUQ1N0cmluZygpO1xuICB9XG5cbiAgaWYgKG9wdC5odHRwT25seSkge1xuICAgIHN0ciArPSAnOyBIdHRwT25seSc7XG4gIH1cblxuICBpZiAob3B0LnNlY3VyZSkge1xuICAgIHN0ciArPSAnOyBTZWN1cmUnO1xuICB9XG5cbiAgaWYgKG9wdC5zYW1lU2l0ZSkge1xuICAgIHZhciBzYW1lU2l0ZSA9IHR5cGVvZiBvcHQuc2FtZVNpdGUgPT09ICdzdHJpbmcnXG4gICAgICA/IG9wdC5zYW1lU2l0ZS50b0xvd2VyQ2FzZSgpIDogb3B0LnNhbWVTaXRlO1xuXG4gICAgc3dpdGNoIChzYW1lU2l0ZSkge1xuICAgICAgY2FzZSB0cnVlOlxuICAgICAgICBzdHIgKz0gJzsgU2FtZVNpdGU9U3RyaWN0JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdsYXgnOlxuICAgICAgICBzdHIgKz0gJzsgU2FtZVNpdGU9TGF4JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzdHJpY3QnOlxuICAgICAgICBzdHIgKz0gJzsgU2FtZVNpdGU9U3RyaWN0JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gc2FtZVNpdGUgaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHI7XG59XG5cbi8qKlxuICogVHJ5IGRlY29kaW5nIGEgc3RyaW5nIHVzaW5nIGEgZGVjb2RpbmcgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHBhcmFtIHtmdW5jdGlvbn0gZGVjb2RlXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHRyeURlY29kZShzdHIsIGRlY29kZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGUoc3RyKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgV2ViU29ja2V0ID0gcmVxdWlyZSgnLi9saWIvd2Vic29ja2V0Jyk7XG5cbldlYlNvY2tldC5jcmVhdGVXZWJTb2NrZXRTdHJlYW0gPSByZXF1aXJlKCcuL2xpYi9zdHJlYW0nKTtcbldlYlNvY2tldC5TZXJ2ZXIgPSByZXF1aXJlKCcuL2xpYi93ZWJzb2NrZXQtc2VydmVyJyk7XG5XZWJTb2NrZXQuUmVjZWl2ZXIgPSByZXF1aXJlKCcuL2xpYi9yZWNlaXZlcicpO1xuV2ViU29ja2V0LlNlbmRlciA9IHJlcXVpcmUoJy4vbGliL3NlbmRlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYlNvY2tldDtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImh0dHBzXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInRsc1wiKTsiLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGtEb25lID0gU3ltYm9sKCdrRG9uZScpO1xuY29uc3Qga1J1biA9IFN5bWJvbCgna1J1bicpO1xuXG4vKipcbiAqIEEgdmVyeSBzaW1wbGUgam9iIHF1ZXVlIHdpdGggYWRqdXN0YWJsZSBjb25jdXJyZW5jeS4gQWRhcHRlZCBmcm9tXG4gKiBodHRwczovL2dpdGh1Yi5jb20vU1RSTUwvYXN5bmMtbGltaXRlclxuICovXG5jbGFzcyBMaW1pdGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgYExpbWl0ZXJgLlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gY29uY3VycmVuY3kgVGhlIG1heGltdW0gbnVtYmVyIG9mIGpvYnMgYWxsb3dlZCB0byBydW5cbiAgICogICAgIGNvbmN1cnJlbnRseVxuICAgKi9cbiAgY29uc3RydWN0b3IoY29uY3VycmVuY3kpIHtcbiAgICB0aGlzW2tEb25lXSA9ICgpID0+IHtcbiAgICAgIHRoaXMucGVuZGluZy0tO1xuICAgICAgdGhpc1trUnVuXSgpO1xuICAgIH07XG4gICAgdGhpcy5jb25jdXJyZW5jeSA9IGNvbmN1cnJlbmN5IHx8IEluZmluaXR5O1xuICAgIHRoaXMuam9icyA9IFtdO1xuICAgIHRoaXMucGVuZGluZyA9IDA7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIGpvYiB0byB0aGUgcXVldWUuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGFkZChqb2IpIHtcbiAgICB0aGlzLmpvYnMucHVzaChqb2IpO1xuICAgIHRoaXNba1J1bl0oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgam9iIGZyb20gdGhlIHF1ZXVlIGFuZCBydW5zIGl0IGlmIHBvc3NpYmxlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgW2tSdW5dKCkge1xuICAgIGlmICh0aGlzLnBlbmRpbmcgPT09IHRoaXMuY29uY3VycmVuY3kpIHJldHVybjtcblxuICAgIGlmICh0aGlzLmpvYnMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBqb2IgPSB0aGlzLmpvYnMuc2hpZnQoKTtcblxuICAgICAgdGhpcy5wZW5kaW5nKys7XG4gICAgICBqb2IodGhpc1trRG9uZV0pO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExpbWl0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGFuIGV2ZW50LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEV2ZW50IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBgRXZlbnRgLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCBBIHJlZmVyZW5jZSB0byB0aGUgdGFyZ2V0IHRvIHdoaWNoIHRoZSBldmVudCB3YXMgZGlzcGF0Y2hlZFxuICAgKi9cbiAgY29uc3RydWN0b3IodHlwZSwgdGFyZ2V0KSB7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgfVxufVxuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIG1lc3NhZ2UgZXZlbnQuXG4gKlxuICogQGV4dGVuZHMgRXZlbnRcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIE1lc3NhZ2VFdmVudCBleHRlbmRzIEV2ZW50IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBgTWVzc2FnZUV2ZW50YC5cbiAgICpcbiAgICogQHBhcmFtIHsoU3RyaW5nfEJ1ZmZlcnxBcnJheUJ1ZmZlcnxCdWZmZXJbXSl9IGRhdGEgVGhlIHJlY2VpdmVkIGRhdGFcbiAgICogQHBhcmFtIHtXZWJTb2NrZXR9IHRhcmdldCBBIHJlZmVyZW5jZSB0byB0aGUgdGFyZ2V0IHRvIHdoaWNoIHRoZSBldmVudCB3YXMgZGlzcGF0Y2hlZFxuICAgKi9cbiAgY29uc3RydWN0b3IoZGF0YSwgdGFyZ2V0KSB7XG4gICAgc3VwZXIoJ21lc3NhZ2UnLCB0YXJnZXQpO1xuXG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgfVxufVxuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIGNsb3NlIGV2ZW50LlxuICpcbiAqIEBleHRlbmRzIEV2ZW50XG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBDbG9zZUV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGBDbG9zZUV2ZW50YC5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGNvZGUgVGhlIHN0YXR1cyBjb2RlIGV4cGxhaW5pbmcgd2h5IHRoZSBjb25uZWN0aW9uIGlzIGJlaW5nIGNsb3NlZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcmVhc29uIEEgaHVtYW4tcmVhZGFibGUgc3RyaW5nIGV4cGxhaW5pbmcgd2h5IHRoZSBjb25uZWN0aW9uIGlzIGNsb3NpbmdcbiAgICogQHBhcmFtIHtXZWJTb2NrZXR9IHRhcmdldCBBIHJlZmVyZW5jZSB0byB0aGUgdGFyZ2V0IHRvIHdoaWNoIHRoZSBldmVudCB3YXMgZGlzcGF0Y2hlZFxuICAgKi9cbiAgY29uc3RydWN0b3IoY29kZSwgcmVhc29uLCB0YXJnZXQpIHtcbiAgICBzdXBlcignY2xvc2UnLCB0YXJnZXQpO1xuXG4gICAgdGhpcy53YXNDbGVhbiA9IHRhcmdldC5fY2xvc2VGcmFtZVJlY2VpdmVkICYmIHRhcmdldC5fY2xvc2VGcmFtZVNlbnQ7XG4gICAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgfVxufVxuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhbiBvcGVuIGV2ZW50LlxuICpcbiAqIEBleHRlbmRzIEV2ZW50XG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBPcGVuRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgYE9wZW5FdmVudGAuXG4gICAqXG4gICAqIEBwYXJhbSB7V2ViU29ja2V0fSB0YXJnZXQgQSByZWZlcmVuY2UgdG8gdGhlIHRhcmdldCB0byB3aGljaCB0aGUgZXZlbnQgd2FzIGRpc3BhdGNoZWRcbiAgICovXG4gIGNvbnN0cnVjdG9yKHRhcmdldCkge1xuICAgIHN1cGVyKCdvcGVuJywgdGFyZ2V0KTtcbiAgfVxufVxuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhbiBlcnJvciBldmVudC5cbiAqXG4gKiBAZXh0ZW5kcyBFdmVudFxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgRXJyb3JFdmVudCBleHRlbmRzIEV2ZW50IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBgRXJyb3JFdmVudGAuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlcnJvciBUaGUgZXJyb3IgdGhhdCBnZW5lcmF0ZWQgdGhpcyBldmVudFxuICAgKiBAcGFyYW0ge1dlYlNvY2tldH0gdGFyZ2V0IEEgcmVmZXJlbmNlIHRvIHRoZSB0YXJnZXQgdG8gd2hpY2ggdGhlIGV2ZW50IHdhcyBkaXNwYXRjaGVkXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlcnJvciwgdGFyZ2V0KSB7XG4gICAgc3VwZXIoJ2Vycm9yJywgdGFyZ2V0KTtcblxuICAgIHRoaXMubWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG4gICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBwcm92aWRlcyBtZXRob2RzIGZvciBlbXVsYXRpbmcgdGhlIGBFdmVudFRhcmdldGAgaW50ZXJmYWNlLiBJdCdzIG5vdFxuICogbWVhbnQgdG8gYmUgdXNlZCBkaXJlY3RseS5cbiAqXG4gKiBAbWl4aW5cbiAqL1xuY29uc3QgRXZlbnRUYXJnZXQgPSB7XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhbiBldmVudCBsaXN0ZW5lci5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGV2ZW50IHR5cGUgdG8gbGlzdGVuIGZvclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgdG8gYWRkXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGFkZEV2ZW50TGlzdGVuZXIobWV0aG9kLCBsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHJldHVybjtcblxuICAgIGZ1bmN0aW9uIG9uTWVzc2FnZShkYXRhKSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIG5ldyBNZXNzYWdlRXZlbnQoZGF0YSwgdGhpcykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uQ2xvc2UoY29kZSwgbWVzc2FnZSkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBuZXcgQ2xvc2VFdmVudChjb2RlLCBtZXNzYWdlLCB0aGlzKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25FcnJvcihlcnJvcikge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBuZXcgRXJyb3JFdmVudChlcnJvciwgdGhpcykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uT3BlbigpIHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgbmV3IE9wZW5FdmVudCh0aGlzKSk7XG4gICAgfVxuXG4gICAgaWYgKG1ldGhvZCA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICBvbk1lc3NhZ2UuX2xpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgICB0aGlzLm9uKG1ldGhvZCwgb25NZXNzYWdlKTtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ2Nsb3NlJykge1xuICAgICAgb25DbG9zZS5fbGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgICAgIHRoaXMub24obWV0aG9kLCBvbkNsb3NlKTtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ2Vycm9yJykge1xuICAgICAgb25FcnJvci5fbGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgICAgIHRoaXMub24obWV0aG9kLCBvbkVycm9yKTtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ29wZW4nKSB7XG4gICAgICBvbk9wZW4uX2xpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgICB0aGlzLm9uKG1ldGhvZCwgb25PcGVuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbihtZXRob2QsIGxpc3RlbmVyKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBldmVudCBsaXN0ZW5lci5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGV2ZW50IHR5cGUgdG8gcmVtb3ZlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB0byByZW1vdmVcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihtZXRob2QsIGxpc3RlbmVyKSB7XG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMobWV0aG9kKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobGlzdGVuZXJzW2ldID09PSBsaXN0ZW5lciB8fCBsaXN0ZW5lcnNbaV0uX2xpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKG1ldGhvZCwgbGlzdGVuZXJzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRUYXJnZXQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHsgRHVwbGV4IH0gPSByZXF1aXJlKCdzdHJlYW0nKTtcblxuLyoqXG4gKiBFbWl0cyB0aGUgYCdjbG9zZSdgIGV2ZW50IG9uIGEgc3RyZWFtLlxuICpcbiAqIEBwYXJhbSB7c3RyZWFtLkR1cGxleH0gVGhlIHN0cmVhbS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVtaXRDbG9zZShzdHJlYW0pIHtcbiAgc3RyZWFtLmVtaXQoJ2Nsb3NlJyk7XG59XG5cbi8qKlxuICogVGhlIGxpc3RlbmVyIG9mIHRoZSBgJ2VuZCdgIGV2ZW50LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGR1cGxleE9uRW5kKCkge1xuICBpZiAoIXRoaXMuZGVzdHJveWVkICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQpIHtcbiAgICB0aGlzLmRlc3Ryb3koKTtcbiAgfVxufVxuXG4vKipcbiAqIFRoZSBsaXN0ZW5lciBvZiB0aGUgYCdlcnJvcidgIGV2ZW50LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGR1cGxleE9uRXJyb3IoZXJyKSB7XG4gIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgZHVwbGV4T25FcnJvcik7XG4gIHRoaXMuZGVzdHJveSgpO1xuICBpZiAodGhpcy5saXN0ZW5lckNvdW50KCdlcnJvcicpID09PSAwKSB7XG4gICAgLy8gRG8gbm90IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvci5cbiAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgfVxufVxuXG4vKipcbiAqIFdyYXBzIGEgYFdlYlNvY2tldGAgaW4gYSBkdXBsZXggc3RyZWFtLlxuICpcbiAqIEBwYXJhbSB7V2ViU29ja2V0fSB3cyBUaGUgYFdlYlNvY2tldGAgdG8gd3JhcFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgVGhlIG9wdGlvbnMgZm9yIHRoZSBgRHVwbGV4YCBjb25zdHJ1Y3RvclxuICogQHJldHVybiB7c3RyZWFtLkR1cGxleH0gVGhlIGR1cGxleCBzdHJlYW1cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlV2ViU29ja2V0U3RyZWFtKHdzLCBvcHRpb25zKSB7XG4gIGxldCByZXN1bWVPblJlY2VpdmVyRHJhaW4gPSB0cnVlO1xuXG4gIGZ1bmN0aW9uIHJlY2VpdmVyT25EcmFpbigpIHtcbiAgICBpZiAocmVzdW1lT25SZWNlaXZlckRyYWluKSB3cy5fc29ja2V0LnJlc3VtZSgpO1xuICB9XG5cbiAgaWYgKHdzLnJlYWR5U3RhdGUgPT09IHdzLkNPTk5FQ1RJTkcpIHtcbiAgICB3cy5vbmNlKCdvcGVuJywgZnVuY3Rpb24gb3BlbigpIHtcbiAgICAgIHdzLl9yZWNlaXZlci5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2RyYWluJyk7XG4gICAgICB3cy5fcmVjZWl2ZXIub24oJ2RyYWluJywgcmVjZWl2ZXJPbkRyYWluKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB3cy5fcmVjZWl2ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCdkcmFpbicpO1xuICAgIHdzLl9yZWNlaXZlci5vbignZHJhaW4nLCByZWNlaXZlck9uRHJhaW4pO1xuICB9XG5cbiAgY29uc3QgZHVwbGV4ID0gbmV3IER1cGxleCh7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBhdXRvRGVzdHJveTogZmFsc2UsXG4gICAgZW1pdENsb3NlOiBmYWxzZSxcbiAgICBvYmplY3RNb2RlOiBmYWxzZSxcbiAgICB3cml0YWJsZU9iamVjdE1vZGU6IGZhbHNlXG4gIH0pO1xuXG4gIHdzLm9uKCdtZXNzYWdlJywgZnVuY3Rpb24gbWVzc2FnZShtc2cpIHtcbiAgICBpZiAoIWR1cGxleC5wdXNoKG1zZykpIHtcbiAgICAgIHJlc3VtZU9uUmVjZWl2ZXJEcmFpbiA9IGZhbHNlO1xuICAgICAgd3MuX3NvY2tldC5wYXVzZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgd3Mub25jZSgnZXJyb3InLCBmdW5jdGlvbiBlcnJvcihlcnIpIHtcbiAgICBpZiAoZHVwbGV4LmRlc3Ryb3llZCkgcmV0dXJuO1xuXG4gICAgZHVwbGV4LmRlc3Ryb3koZXJyKTtcbiAgfSk7XG5cbiAgd3Mub25jZSgnY2xvc2UnLCBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICBpZiAoZHVwbGV4LmRlc3Ryb3llZCkgcmV0dXJuO1xuXG4gICAgZHVwbGV4LnB1c2gobnVsbCk7XG4gIH0pO1xuXG4gIGR1cGxleC5fZGVzdHJveSA9IGZ1bmN0aW9uKGVyciwgY2FsbGJhY2spIHtcbiAgICBpZiAod3MucmVhZHlTdGF0ZSA9PT0gd3MuQ0xPU0VEKSB7XG4gICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0Q2xvc2UsIGR1cGxleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuXG4gICAgd3Mub25jZSgnZXJyb3InLCBmdW5jdGlvbiBlcnJvcihlcnIpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBjYWxsYmFjayhlcnIpO1xuICAgIH0pO1xuXG4gICAgd3Mub25jZSgnY2xvc2UnLCBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICAgIGlmICghY2FsbGVkKSBjYWxsYmFjayhlcnIpO1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0Q2xvc2UsIGR1cGxleCk7XG4gICAgfSk7XG4gICAgd3MudGVybWluYXRlKCk7XG4gIH07XG5cbiAgZHVwbGV4Ll9maW5hbCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgaWYgKHdzLnJlYWR5U3RhdGUgPT09IHdzLkNPTk5FQ1RJTkcpIHtcbiAgICAgIHdzLm9uY2UoJ29wZW4nLCBmdW5jdGlvbiBvcGVuKCkge1xuICAgICAgICBkdXBsZXguX2ZpbmFsKGNhbGxiYWNrKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSB2YWx1ZSBvZiB0aGUgYF9zb2NrZXRgIHByb3BlcnR5IGlzIGBudWxsYCBpdCBtZWFucyB0aGF0IGB3c2AgaXMgYVxuICAgIC8vIGNsaWVudCB3ZWJzb2NrZXQgYW5kIHRoZSBoYW5kc2hha2UgZmFpbGVkLiBJbiBmYWN0LCB3aGVuIHRoaXMgaGFwcGVucywgYVxuICAgIC8vIHNvY2tldCBpcyBuZXZlciBhc3NpZ25lZCB0byB0aGUgd2Vic29ja2V0LiBXYWl0IGZvciB0aGUgYCdlcnJvcidgIGV2ZW50XG4gICAgLy8gdGhhdCB3aWxsIGJlIGVtaXR0ZWQgYnkgdGhlIHdlYnNvY2tldC5cbiAgICBpZiAod3MuX3NvY2tldCA9PT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgaWYgKHdzLl9zb2NrZXQuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQpIHtcbiAgICAgIGlmIChkdXBsZXguX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCkgZHVwbGV4LmRlc3Ryb3koKTtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdzLl9zb2NrZXQub25jZSgnZmluaXNoJywgZnVuY3Rpb24gZmluaXNoKCkge1xuICAgICAgICAvLyBgZHVwbGV4YCBpcyBub3QgZGVzdHJveWVkIGhlcmUgYmVjYXVzZSB0aGUgYCdlbmQnYCBldmVudCB3aWxsIGJlXG4gICAgICAgIC8vIGVtaXR0ZWQgb24gYGR1cGxleGAgYWZ0ZXIgdGhpcyBgJ2ZpbmlzaCdgIGV2ZW50LiBUaGUgRU9GIHNpZ25hbGluZ1xuICAgICAgICAvLyBgbnVsbGAgY2h1bmsgaXMsIGluIGZhY3QsIHB1c2hlZCB3aGVuIHRoZSB3ZWJzb2NrZXQgZW1pdHMgYCdjbG9zZSdgLlxuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfSk7XG4gICAgICB3cy5jbG9zZSgpO1xuICAgIH1cbiAgfTtcblxuICBkdXBsZXguX3JlYWQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAod3MucmVhZHlTdGF0ZSA9PT0gd3MuT1BFTiAmJiAhcmVzdW1lT25SZWNlaXZlckRyYWluKSB7XG4gICAgICByZXN1bWVPblJlY2VpdmVyRHJhaW4gPSB0cnVlO1xuICAgICAgaWYgKCF3cy5fcmVjZWl2ZXIuX3dyaXRhYmxlU3RhdGUubmVlZERyYWluKSB3cy5fc29ja2V0LnJlc3VtZSgpO1xuICAgIH1cbiAgfTtcblxuICBkdXBsZXguX3dyaXRlID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgIGlmICh3cy5yZWFkeVN0YXRlID09PSB3cy5DT05ORUNUSU5HKSB7XG4gICAgICB3cy5vbmNlKCdvcGVuJywgZnVuY3Rpb24gb3BlbigpIHtcbiAgICAgICAgZHVwbGV4Ll93cml0ZShjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdzLnNlbmQoY2h1bmssIGNhbGxiYWNrKTtcbiAgfTtcblxuICBkdXBsZXgub24oJ2VuZCcsIGR1cGxleE9uRW5kKTtcbiAgZHVwbGV4Lm9uKCdlcnJvcicsIGR1cGxleE9uRXJyb3IpO1xuICByZXR1cm4gZHVwbGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVdlYlNvY2tldFN0cmVhbTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5jb25zdCB7IGNyZWF0ZUhhc2ggfSA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuY29uc3QgeyBjcmVhdGVTZXJ2ZXIsIFNUQVRVU19DT0RFUyB9ID0gcmVxdWlyZSgnaHR0cCcpO1xuXG5jb25zdCBQZXJNZXNzYWdlRGVmbGF0ZSA9IHJlcXVpcmUoJy4vcGVybWVzc2FnZS1kZWZsYXRlJyk7XG5jb25zdCBXZWJTb2NrZXQgPSByZXF1aXJlKCcuL3dlYnNvY2tldCcpO1xuY29uc3QgeyBmb3JtYXQsIHBhcnNlIH0gPSByZXF1aXJlKCcuL2V4dGVuc2lvbicpO1xuY29uc3QgeyBHVUlEIH0gPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuXG5jb25zdCBrZXlSZWdleCA9IC9eWysvMC05QS1aYS16XXsyMn09PSQvO1xuY29uc3Qga1VzZWRCeVdlYlNvY2tldFNlcnZlciA9IFN5bWJvbCgna1VzZWRCeVdlYlNvY2tldFNlcnZlcicpO1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIFdlYlNvY2tldCBzZXJ2ZXIuXG4gKlxuICogQGV4dGVuZHMgRXZlbnRFbWl0dGVyXG4gKi9cbmNsYXNzIFdlYlNvY2tldFNlcnZlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBgV2ViU29ja2V0U2VydmVyYCBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQ29uZmlndXJhdGlvbiBvcHRpb25zXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmJhY2tsb2cgVGhlIG1heGltdW0gbGVuZ3RoIG9mIHRoZSBxdWV1ZSBvZiBwZW5kaW5nXG4gICAqICAgICBjb25uZWN0aW9uc1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMuY2xpZW50VHJhY2tpbmcgU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIHRyYWNrXG4gICAqICAgICBjbGllbnRzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdGlvbnMuaGFuZGxlUHJvdG9jb2xzIEEgaG9vayB0byBoYW5kbGUgcHJvdG9jb2xzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmhvc3QgVGhlIGhvc3RuYW1lIHdoZXJlIHRvIGJpbmQgdGhlIHNlcnZlclxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5tYXhQYXlsb2FkIFRoZSBtYXhpbXVtIGFsbG93ZWQgbWVzc2FnZSBzaXplXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5ub1NlcnZlciBFbmFibGUgbm8gc2VydmVyIG1vZGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMucGF0aCBBY2NlcHQgb25seSBjb25uZWN0aW9ucyBtYXRjaGluZyB0aGlzIHBhdGhcbiAgICogQHBhcmFtIHsoQm9vbGVhbnxPYmplY3QpfSBvcHRpb25zLnBlck1lc3NhZ2VEZWZsYXRlIEVuYWJsZS9kaXNhYmxlXG4gICAqICAgICBwZXJtZXNzYWdlLWRlZmxhdGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMucG9ydCBUaGUgcG9ydCB3aGVyZSB0byBiaW5kIHRoZSBzZXJ2ZXJcbiAgICogQHBhcmFtIHtodHRwLlNlcnZlcn0gb3B0aW9ucy5zZXJ2ZXIgQSBwcmUtY3JlYXRlZCBIVFRQL1Mgc2VydmVyIHRvIHVzZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLnZlcmlmeUNsaWVudCBBIGhvb2sgdG8gcmVqZWN0IGNvbm5lY3Rpb25zXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIEEgbGlzdGVuZXIgZm9yIHRoZSBgbGlzdGVuaW5nYCBldmVudFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICBzdXBlcigpO1xuXG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIG1heFBheWxvYWQ6IDEwMCAqIDEwMjQgKiAxMDI0LFxuICAgICAgcGVyTWVzc2FnZURlZmxhdGU6IGZhbHNlLFxuICAgICAgaGFuZGxlUHJvdG9jb2xzOiBudWxsLFxuICAgICAgY2xpZW50VHJhY2tpbmc6IHRydWUsXG4gICAgICB2ZXJpZnlDbGllbnQ6IG51bGwsXG4gICAgICBub1NlcnZlcjogZmFsc2UsXG4gICAgICBiYWNrbG9nOiBudWxsLCAvLyB1c2UgZGVmYXVsdCAoNTExIGFzIGltcGxlbWVudGVkIGluIG5ldC5qcylcbiAgICAgIHNlcnZlcjogbnVsbCxcbiAgICAgIGhvc3Q6IG51bGwsXG4gICAgICBwYXRoOiBudWxsLFxuICAgICAgcG9ydDogbnVsbCxcbiAgICAgIC4uLm9wdGlvbnNcbiAgICB9O1xuXG4gICAgaWYgKG9wdGlvbnMucG9ydCA9PSBudWxsICYmICFvcHRpb25zLnNlcnZlciAmJiAhb3B0aW9ucy5ub1NlcnZlcikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ09uZSBvZiB0aGUgXCJwb3J0XCIsIFwic2VydmVyXCIsIG9yIFwibm9TZXJ2ZXJcIiBvcHRpb25zIG11c3QgYmUgc3BlY2lmaWVkJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5wb3J0ICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3NlcnZlciA9IGNyZWF0ZVNlcnZlcigocmVxLCByZXMpID0+IHtcbiAgICAgICAgY29uc3QgYm9keSA9IFNUQVRVU19DT0RFU1s0MjZdO1xuXG4gICAgICAgIHJlcy53cml0ZUhlYWQoNDI2LCB7XG4gICAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogYm9keS5sZW5ndGgsXG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICd0ZXh0L3BsYWluJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmVzLmVuZChib2R5KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fc2VydmVyLmxpc3RlbihcbiAgICAgICAgb3B0aW9ucy5wb3J0LFxuICAgICAgICBvcHRpb25zLmhvc3QsXG4gICAgICAgIG9wdGlvbnMuYmFja2xvZyxcbiAgICAgICAgY2FsbGJhY2tcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLnNlcnZlcikge1xuICAgICAgaWYgKG9wdGlvbnMuc2VydmVyW2tVc2VkQnlXZWJTb2NrZXRTZXJ2ZXJdKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnVGhlIEhUVFAvUyBzZXJ2ZXIgaXMgYWxyZWFkeSBiZWluZyB1c2VkIGJ5IGFub3RoZXIgV2ViU29ja2V0IHNlcnZlcidcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucy5zZXJ2ZXJba1VzZWRCeVdlYlNvY2tldFNlcnZlcl0gPSB0cnVlO1xuICAgICAgdGhpcy5fc2VydmVyID0gb3B0aW9ucy5zZXJ2ZXI7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3NlcnZlcikge1xuICAgICAgdGhpcy5fcmVtb3ZlTGlzdGVuZXJzID0gYWRkTGlzdGVuZXJzKHRoaXMuX3NlcnZlciwge1xuICAgICAgICBsaXN0ZW5pbmc6IHRoaXMuZW1pdC5iaW5kKHRoaXMsICdsaXN0ZW5pbmcnKSxcbiAgICAgICAgZXJyb3I6IHRoaXMuZW1pdC5iaW5kKHRoaXMsICdlcnJvcicpLFxuICAgICAgICB1cGdyYWRlOiAocmVxLCBzb2NrZXQsIGhlYWQpID0+IHtcbiAgICAgICAgICB0aGlzLmhhbmRsZVVwZ3JhZGUocmVxLCBzb2NrZXQsIGhlYWQsICh3cykgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdjb25uZWN0aW9uJywgd3MsIHJlcSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnBlck1lc3NhZ2VEZWZsYXRlID09PSB0cnVlKSBvcHRpb25zLnBlck1lc3NhZ2VEZWZsYXRlID0ge307XG4gICAgaWYgKG9wdGlvbnMuY2xpZW50VHJhY2tpbmcpIHRoaXMuY2xpZW50cyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGJvdW5kIGFkZHJlc3MsIHRoZSBhZGRyZXNzIGZhbWlseSBuYW1lLCBhbmQgcG9ydCBvZiB0aGUgc2VydmVyXG4gICAqIGFzIHJlcG9ydGVkIGJ5IHRoZSBvcGVyYXRpbmcgc3lzdGVtIGlmIGxpc3RlbmluZyBvbiBhbiBJUCBzb2NrZXQuXG4gICAqIElmIHRoZSBzZXJ2ZXIgaXMgbGlzdGVuaW5nIG9uIGEgcGlwZSBvciBVTklYIGRvbWFpbiBzb2NrZXQsIHRoZSBuYW1lIGlzXG4gICAqIHJldHVybmVkIGFzIGEgc3RyaW5nLlxuICAgKlxuICAgKiBAcmV0dXJuIHsoT2JqZWN0fFN0cmluZ3xudWxsKX0gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlcnZlclxuICAgKiBAcHVibGljXG4gICAqL1xuICBhZGRyZXNzKCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMubm9TZXJ2ZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHNlcnZlciBpcyBvcGVyYXRpbmcgaW4gXCJub1NlcnZlclwiIG1vZGUnKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX3NlcnZlcikgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHRoaXMuX3NlcnZlci5hZGRyZXNzKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2UgdGhlIHNlcnZlci5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgQ2FsbGJhY2tcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgY2xvc2UoY2IpIHtcbiAgICBpZiAoY2IpIHRoaXMub25jZSgnY2xvc2UnLCBjYik7XG5cbiAgICAvL1xuICAgIC8vIFRlcm1pbmF0ZSBhbGwgYXNzb2NpYXRlZCBjbGllbnRzLlxuICAgIC8vXG4gICAgaWYgKHRoaXMuY2xpZW50cykge1xuICAgICAgZm9yIChjb25zdCBjbGllbnQgb2YgdGhpcy5jbGllbnRzKSBjbGllbnQudGVybWluYXRlKCk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2VydmVyID0gdGhpcy5fc2VydmVyO1xuXG4gICAgaWYgKHNlcnZlcikge1xuICAgICAgdGhpcy5fcmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgICB0aGlzLl9yZW1vdmVMaXN0ZW5lcnMgPSB0aGlzLl9zZXJ2ZXIgPSBudWxsO1xuXG4gICAgICAvL1xuICAgICAgLy8gQ2xvc2UgdGhlIGh0dHAgc2VydmVyIGlmIGl0IHdhcyBpbnRlcm5hbGx5IGNyZWF0ZWQuXG4gICAgICAvL1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5wb3J0ICE9IG51bGwpIHtcbiAgICAgICAgc2VydmVyLmNsb3NlKCgpID0+IHRoaXMuZW1pdCgnY2xvc2UnKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIHNlcnZlcltrVXNlZEJ5V2ViU29ja2V0U2VydmVyXTtcbiAgICB9XG5cbiAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRDbG9zZSwgdGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogU2VlIGlmIGEgZ2l2ZW4gcmVxdWVzdCBzaG91bGQgYmUgaGFuZGxlZCBieSB0aGlzIHNlcnZlciBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHtodHRwLkluY29taW5nTWVzc2FnZX0gcmVxIFJlcXVlc3Qgb2JqZWN0IHRvIGluc3BlY3RcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSByZXF1ZXN0IGlzIHZhbGlkLCBlbHNlIGBmYWxzZWBcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc2hvdWxkSGFuZGxlKHJlcSkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMucGF0aCkge1xuICAgICAgY29uc3QgaW5kZXggPSByZXEudXJsLmluZGV4T2YoJz8nKTtcbiAgICAgIGNvbnN0IHBhdGhuYW1lID0gaW5kZXggIT09IC0xID8gcmVxLnVybC5zbGljZSgwLCBpbmRleCkgOiByZXEudXJsO1xuXG4gICAgICBpZiAocGF0aG5hbWUgIT09IHRoaXMub3B0aW9ucy5wYXRoKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIGEgSFRUUCBVcGdyYWRlIHJlcXVlc3QuXG4gICAqXG4gICAqIEBwYXJhbSB7aHR0cC5JbmNvbWluZ01lc3NhZ2V9IHJlcSBUaGUgcmVxdWVzdCBvYmplY3RcbiAgICogQHBhcmFtIHtuZXQuU29ja2V0fSBzb2NrZXQgVGhlIG5ldHdvcmsgc29ja2V0IGJldHdlZW4gdGhlIHNlcnZlciBhbmQgY2xpZW50XG4gICAqIEBwYXJhbSB7QnVmZmVyfSBoZWFkIFRoZSBmaXJzdCBwYWNrZXQgb2YgdGhlIHVwZ3JhZGVkIHN0cmVhbVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiBDYWxsYmFja1xuICAgKiBAcHVibGljXG4gICAqL1xuICBoYW5kbGVVcGdyYWRlKHJlcSwgc29ja2V0LCBoZWFkLCBjYikge1xuICAgIHNvY2tldC5vbignZXJyb3InLCBzb2NrZXRPbkVycm9yKTtcblxuICAgIGNvbnN0IGtleSA9XG4gICAgICByZXEuaGVhZGVyc1snc2VjLXdlYnNvY2tldC1rZXknXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gcmVxLmhlYWRlcnNbJ3NlYy13ZWJzb2NrZXQta2V5J10udHJpbSgpXG4gICAgICAgIDogZmFsc2U7XG4gICAgY29uc3QgdmVyc2lvbiA9ICtyZXEuaGVhZGVyc1snc2VjLXdlYnNvY2tldC12ZXJzaW9uJ107XG4gICAgY29uc3QgZXh0ZW5zaW9ucyA9IHt9O1xuXG4gICAgaWYgKFxuICAgICAgcmVxLm1ldGhvZCAhPT0gJ0dFVCcgfHxcbiAgICAgIHJlcS5oZWFkZXJzLnVwZ3JhZGUudG9Mb3dlckNhc2UoKSAhPT0gJ3dlYnNvY2tldCcgfHxcbiAgICAgICFrZXkgfHxcbiAgICAgICFrZXlSZWdleC50ZXN0KGtleSkgfHxcbiAgICAgICh2ZXJzaW9uICE9PSA4ICYmIHZlcnNpb24gIT09IDEzKSB8fFxuICAgICAgIXRoaXMuc2hvdWxkSGFuZGxlKHJlcSlcbiAgICApIHtcbiAgICAgIHJldHVybiBhYm9ydEhhbmRzaGFrZShzb2NrZXQsIDQwMCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wZXJNZXNzYWdlRGVmbGF0ZSkge1xuICAgICAgY29uc3QgcGVyTWVzc2FnZURlZmxhdGUgPSBuZXcgUGVyTWVzc2FnZURlZmxhdGUoXG4gICAgICAgIHRoaXMub3B0aW9ucy5wZXJNZXNzYWdlRGVmbGF0ZSxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICAgdGhpcy5vcHRpb25zLm1heFBheWxvYWRcbiAgICAgICk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG9mZmVycyA9IHBhcnNlKHJlcS5oZWFkZXJzWydzZWMtd2Vic29ja2V0LWV4dGVuc2lvbnMnXSk7XG5cbiAgICAgICAgaWYgKG9mZmVyc1tQZXJNZXNzYWdlRGVmbGF0ZS5leHRlbnNpb25OYW1lXSkge1xuICAgICAgICAgIHBlck1lc3NhZ2VEZWZsYXRlLmFjY2VwdChvZmZlcnNbUGVyTWVzc2FnZURlZmxhdGUuZXh0ZW5zaW9uTmFtZV0pO1xuICAgICAgICAgIGV4dGVuc2lvbnNbUGVyTWVzc2FnZURlZmxhdGUuZXh0ZW5zaW9uTmFtZV0gPSBwZXJNZXNzYWdlRGVmbGF0ZTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiBhYm9ydEhhbmRzaGFrZShzb2NrZXQsIDQwMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBPcHRpb25hbGx5IGNhbGwgZXh0ZXJuYWwgY2xpZW50IHZlcmlmaWNhdGlvbiBoYW5kbGVyLlxuICAgIC8vXG4gICAgaWYgKHRoaXMub3B0aW9ucy52ZXJpZnlDbGllbnQpIHtcbiAgICAgIGNvbnN0IGluZm8gPSB7XG4gICAgICAgIG9yaWdpbjpcbiAgICAgICAgICByZXEuaGVhZGVyc1tgJHt2ZXJzaW9uID09PSA4ID8gJ3NlYy13ZWJzb2NrZXQtb3JpZ2luJyA6ICdvcmlnaW4nfWBdLFxuICAgICAgICBzZWN1cmU6ICEhKHJlcS5jb25uZWN0aW9uLmF1dGhvcml6ZWQgfHwgcmVxLmNvbm5lY3Rpb24uZW5jcnlwdGVkKSxcbiAgICAgICAgcmVxXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnZlcmlmeUNsaWVudC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnZlcmlmeUNsaWVudChpbmZvLCAodmVyaWZpZWQsIGNvZGUsIG1lc3NhZ2UsIGhlYWRlcnMpID0+IHtcbiAgICAgICAgICBpZiAoIXZlcmlmaWVkKSB7XG4gICAgICAgICAgICByZXR1cm4gYWJvcnRIYW5kc2hha2Uoc29ja2V0LCBjb2RlIHx8IDQwMSwgbWVzc2FnZSwgaGVhZGVycyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5jb21wbGV0ZVVwZ3JhZGUoa2V5LCBleHRlbnNpb25zLCByZXEsIHNvY2tldCwgaGVhZCwgY2IpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy52ZXJpZnlDbGllbnQoaW5mbykpIHJldHVybiBhYm9ydEhhbmRzaGFrZShzb2NrZXQsIDQwMSk7XG4gICAgfVxuXG4gICAgdGhpcy5jb21wbGV0ZVVwZ3JhZGUoa2V5LCBleHRlbnNpb25zLCByZXEsIHNvY2tldCwgaGVhZCwgY2IpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZ3JhZGUgdGhlIGNvbm5lY3Rpb24gdG8gV2ViU29ja2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IFRoZSB2YWx1ZSBvZiB0aGUgYFNlYy1XZWJTb2NrZXQtS2V5YCBoZWFkZXJcbiAgICogQHBhcmFtIHtPYmplY3R9IGV4dGVuc2lvbnMgVGhlIGFjY2VwdGVkIGV4dGVuc2lvbnNcbiAgICogQHBhcmFtIHtodHRwLkluY29taW5nTWVzc2FnZX0gcmVxIFRoZSByZXF1ZXN0IG9iamVjdFxuICAgKiBAcGFyYW0ge25ldC5Tb2NrZXR9IHNvY2tldCBUaGUgbmV0d29yayBzb2NrZXQgYmV0d2VlbiB0aGUgc2VydmVyIGFuZCBjbGllbnRcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGhlYWQgVGhlIGZpcnN0IHBhY2tldCBvZiB0aGUgdXBncmFkZWQgc3RyZWFtXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIENhbGxiYWNrXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb21wbGV0ZVVwZ3JhZGUoa2V5LCBleHRlbnNpb25zLCByZXEsIHNvY2tldCwgaGVhZCwgY2IpIHtcbiAgICAvL1xuICAgIC8vIERlc3Ryb3kgdGhlIHNvY2tldCBpZiB0aGUgY2xpZW50IGhhcyBhbHJlYWR5IHNlbnQgYSBGSU4gcGFja2V0LlxuICAgIC8vXG4gICAgaWYgKCFzb2NrZXQucmVhZGFibGUgfHwgIXNvY2tldC53cml0YWJsZSkgcmV0dXJuIHNvY2tldC5kZXN0cm95KCk7XG5cbiAgICBjb25zdCBkaWdlc3QgPSBjcmVhdGVIYXNoKCdzaGExJylcbiAgICAgIC51cGRhdGUoa2V5ICsgR1VJRClcbiAgICAgIC5kaWdlc3QoJ2Jhc2U2NCcpO1xuXG4gICAgY29uc3QgaGVhZGVycyA9IFtcbiAgICAgICdIVFRQLzEuMSAxMDEgU3dpdGNoaW5nIFByb3RvY29scycsXG4gICAgICAnVXBncmFkZTogd2Vic29ja2V0JyxcbiAgICAgICdDb25uZWN0aW9uOiBVcGdyYWRlJyxcbiAgICAgIGBTZWMtV2ViU29ja2V0LUFjY2VwdDogJHtkaWdlc3R9YFxuICAgIF07XG5cbiAgICBjb25zdCB3cyA9IG5ldyBXZWJTb2NrZXQobnVsbCk7XG4gICAgbGV0IHByb3RvY29sID0gcmVxLmhlYWRlcnNbJ3NlYy13ZWJzb2NrZXQtcHJvdG9jb2wnXTtcblxuICAgIGlmIChwcm90b2NvbCkge1xuICAgICAgcHJvdG9jb2wgPSBwcm90b2NvbC50cmltKCkuc3BsaXQoLyAqLCAqLyk7XG5cbiAgICAgIC8vXG4gICAgICAvLyBPcHRpb25hbGx5IGNhbGwgZXh0ZXJuYWwgcHJvdG9jb2wgc2VsZWN0aW9uIGhhbmRsZXIuXG4gICAgICAvL1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5oYW5kbGVQcm90b2NvbHMpIHtcbiAgICAgICAgcHJvdG9jb2wgPSB0aGlzLm9wdGlvbnMuaGFuZGxlUHJvdG9jb2xzKHByb3RvY29sLCByZXEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvdG9jb2wgPSBwcm90b2NvbFswXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb3RvY29sKSB7XG4gICAgICAgIGhlYWRlcnMucHVzaChgU2VjLVdlYlNvY2tldC1Qcm90b2NvbDogJHtwcm90b2NvbH1gKTtcbiAgICAgICAgd3MucHJvdG9jb2wgPSBwcm90b2NvbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZXh0ZW5zaW9uc1tQZXJNZXNzYWdlRGVmbGF0ZS5leHRlbnNpb25OYW1lXSkge1xuICAgICAgY29uc3QgcGFyYW1zID0gZXh0ZW5zaW9uc1tQZXJNZXNzYWdlRGVmbGF0ZS5leHRlbnNpb25OYW1lXS5wYXJhbXM7XG4gICAgICBjb25zdCB2YWx1ZSA9IGZvcm1hdCh7XG4gICAgICAgIFtQZXJNZXNzYWdlRGVmbGF0ZS5leHRlbnNpb25OYW1lXTogW3BhcmFtc11cbiAgICAgIH0pO1xuICAgICAgaGVhZGVycy5wdXNoKGBTZWMtV2ViU29ja2V0LUV4dGVuc2lvbnM6ICR7dmFsdWV9YCk7XG4gICAgICB3cy5fZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnM7XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBBbGxvdyBleHRlcm5hbCBtb2RpZmljYXRpb24vaW5zcGVjdGlvbiBvZiBoYW5kc2hha2UgaGVhZGVycy5cbiAgICAvL1xuICAgIHRoaXMuZW1pdCgnaGVhZGVycycsIGhlYWRlcnMsIHJlcSk7XG5cbiAgICBzb2NrZXQud3JpdGUoaGVhZGVycy5jb25jYXQoJ1xcclxcbicpLmpvaW4oJ1xcclxcbicpKTtcbiAgICBzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgc29ja2V0T25FcnJvcik7XG5cbiAgICB3cy5zZXRTb2NrZXQoc29ja2V0LCBoZWFkLCB0aGlzLm9wdGlvbnMubWF4UGF5bG9hZCk7XG5cbiAgICBpZiAodGhpcy5jbGllbnRzKSB7XG4gICAgICB0aGlzLmNsaWVudHMuYWRkKHdzKTtcbiAgICAgIHdzLm9uKCdjbG9zZScsICgpID0+IHRoaXMuY2xpZW50cy5kZWxldGUod3MpKTtcbiAgICB9XG5cbiAgICBjYih3cyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXZWJTb2NrZXRTZXJ2ZXI7XG5cbi8qKlxuICogQWRkIGV2ZW50IGxpc3RlbmVycyBvbiBhbiBgRXZlbnRFbWl0dGVyYCB1c2luZyBhIG1hcCBvZiA8ZXZlbnQsIGxpc3RlbmVyPlxuICogcGFpcnMuXG4gKlxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IHNlcnZlciBUaGUgZXZlbnQgZW1pdHRlclxuICogQHBhcmFtIHtPYmplY3QuPFN0cmluZywgRnVuY3Rpb24+fSBtYXAgVGhlIGxpc3RlbmVycyB0byBhZGRcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRoYXQgd2lsbCByZW1vdmUgdGhlIGFkZGVkIGxpc3RlbmVycyB3aGVuIGNhbGxlZFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYWRkTGlzdGVuZXJzKHNlcnZlciwgbWFwKSB7XG4gIGZvciAoY29uc3QgZXZlbnQgb2YgT2JqZWN0LmtleXMobWFwKSkgc2VydmVyLm9uKGV2ZW50LCBtYXBbZXZlbnRdKTtcblxuICByZXR1cm4gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXJzKCkge1xuICAgIGZvciAoY29uc3QgZXZlbnQgb2YgT2JqZWN0LmtleXMobWFwKSkge1xuICAgICAgc2VydmVyLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBtYXBbZXZlbnRdKTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogRW1pdCBhIGAnY2xvc2UnYCBldmVudCBvbiBhbiBgRXZlbnRFbWl0dGVyYC5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gc2VydmVyIFRoZSBldmVudCBlbWl0dGVyXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbWl0Q2xvc2Uoc2VydmVyKSB7XG4gIHNlcnZlci5lbWl0KCdjbG9zZScpO1xufVxuXG4vKipcbiAqIEhhbmRsZSBwcmVtYXR1cmUgc29ja2V0IGVycm9ycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzb2NrZXRPbkVycm9yKCkge1xuICB0aGlzLmRlc3Ryb3koKTtcbn1cblxuLyoqXG4gKiBDbG9zZSB0aGUgY29ubmVjdGlvbiB3aGVuIHByZWNvbmRpdGlvbnMgYXJlIG5vdCBmdWxmaWxsZWQuXG4gKlxuICogQHBhcmFtIHtuZXQuU29ja2V0fSBzb2NrZXQgVGhlIHNvY2tldCBvZiB0aGUgdXBncmFkZSByZXF1ZXN0XG4gKiBAcGFyYW0ge051bWJlcn0gY29kZSBUaGUgSFRUUCByZXNwb25zZSBzdGF0dXMgY29kZVxuICogQHBhcmFtIHtTdHJpbmd9IFttZXNzYWdlXSBUaGUgSFRUUCByZXNwb25zZSBib2R5XG4gKiBAcGFyYW0ge09iamVjdH0gW2hlYWRlcnNdIEFkZGl0aW9uYWwgSFRUUCByZXNwb25zZSBoZWFkZXJzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhYm9ydEhhbmRzaGFrZShzb2NrZXQsIGNvZGUsIG1lc3NhZ2UsIGhlYWRlcnMpIHtcbiAgaWYgKHNvY2tldC53cml0YWJsZSkge1xuICAgIG1lc3NhZ2UgPSBtZXNzYWdlIHx8IFNUQVRVU19DT0RFU1tjb2RlXTtcbiAgICBoZWFkZXJzID0ge1xuICAgICAgQ29ubmVjdGlvbjogJ2Nsb3NlJyxcbiAgICAgICdDb250ZW50LXR5cGUnOiAndGV4dC9odG1sJyxcbiAgICAgICdDb250ZW50LUxlbmd0aCc6IEJ1ZmZlci5ieXRlTGVuZ3RoKG1lc3NhZ2UpLFxuICAgICAgLi4uaGVhZGVyc1xuICAgIH07XG5cbiAgICBzb2NrZXQud3JpdGUoXG4gICAgICBgSFRUUC8xLjEgJHtjb2RlfSAke1NUQVRVU19DT0RFU1tjb2RlXX1cXHJcXG5gICtcbiAgICAgICAgT2JqZWN0LmtleXMoaGVhZGVycylcbiAgICAgICAgICAubWFwKChoKSA9PiBgJHtofTogJHtoZWFkZXJzW2hdfWApXG4gICAgICAgICAgLmpvaW4oJ1xcclxcbicpICtcbiAgICAgICAgJ1xcclxcblxcclxcbicgK1xuICAgICAgICBtZXNzYWdlXG4gICAgKTtcbiAgfVxuXG4gIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBzb2NrZXRPbkVycm9yKTtcbiAgc29ja2V0LmRlc3Ryb3koKTtcbn1cbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW86Y2xpZW50Jyk7XG52YXIgdXJsID0gcmVxdWlyZSgndXJsJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBDbGllbnQ7XG5cbi8qKlxuICogQ2xpZW50IGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7U2VydmVyfSBzZXJ2ZXIgaW5zdGFuY2VcbiAqIEBwYXJhbSB7U29ja2V0fSBjb25uXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBDbGllbnQoc2VydmVyLCBjb25uKXtcbiAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gIHRoaXMuY29ubiA9IGNvbm47XG4gIHRoaXMuZW5jb2RlciA9IHNlcnZlci5lbmNvZGVyO1xuICB0aGlzLmRlY29kZXIgPSBuZXcgc2VydmVyLnBhcnNlci5EZWNvZGVyKCk7XG4gIHRoaXMuaWQgPSBjb25uLmlkO1xuICB0aGlzLnJlcXVlc3QgPSBjb25uLnJlcXVlc3Q7XG4gIHRoaXMuc2V0dXAoKTtcbiAgdGhpcy5zb2NrZXRzID0ge307XG4gIHRoaXMubnNwcyA9IHt9O1xuICB0aGlzLmNvbm5lY3RCdWZmZXIgPSBbXTtcbn1cblxuLyoqXG4gKiBTZXRzIHVwIGV2ZW50IGxpc3RlbmVycy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5DbGllbnQucHJvdG90eXBlLnNldHVwID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5vbmNsb3NlID0gdGhpcy5vbmNsb3NlLmJpbmQodGhpcyk7XG4gIHRoaXMub25kYXRhID0gdGhpcy5vbmRhdGEuYmluZCh0aGlzKTtcbiAgdGhpcy5vbmVycm9yID0gdGhpcy5vbmVycm9yLmJpbmQodGhpcyk7XG4gIHRoaXMub25kZWNvZGVkID0gdGhpcy5vbmRlY29kZWQuYmluZCh0aGlzKTtcblxuICB0aGlzLmRlY29kZXIub24oJ2RlY29kZWQnLCB0aGlzLm9uZGVjb2RlZCk7XG4gIHRoaXMuY29ubi5vbignZGF0YScsIHRoaXMub25kYXRhKTtcbiAgdGhpcy5jb25uLm9uKCdlcnJvcicsIHRoaXMub25lcnJvcik7XG4gIHRoaXMuY29ubi5vbignY2xvc2UnLCB0aGlzLm9uY2xvc2UpO1xufTtcblxuLyoqXG4gKiBDb25uZWN0cyBhIGNsaWVudCB0byBhIG5hbWVzcGFjZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBxdWVyeSB0aGUgcXVlcnkgcGFyYW1ldGVyc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQ2xpZW50LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24obmFtZSwgcXVlcnkpe1xuICBpZiAodGhpcy5zZXJ2ZXIubnNwc1tuYW1lXSkge1xuICAgIGRlYnVnKCdjb25uZWN0aW5nIHRvIG5hbWVzcGFjZSAlcycsIG5hbWUpO1xuICAgIHJldHVybiB0aGlzLmRvQ29ubmVjdChuYW1lLCBxdWVyeSk7XG4gIH1cblxuICB0aGlzLnNlcnZlci5jaGVja05hbWVzcGFjZShuYW1lLCBxdWVyeSwgKGR5bmFtaWNOc3ApID0+IHtcbiAgICBpZiAoZHluYW1pY05zcCkge1xuICAgICAgZGVidWcoJ2R5bmFtaWMgbmFtZXNwYWNlICVzIHdhcyBjcmVhdGVkJywgZHluYW1pY05zcC5uYW1lKTtcbiAgICAgIHRoaXMuZG9Db25uZWN0KG5hbWUsIHF1ZXJ5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ2NyZWF0aW9uIG9mIG5hbWVzcGFjZSAlcyB3YXMgZGVuaWVkJywgbmFtZSk7XG4gICAgICB0aGlzLnBhY2tldCh7IHR5cGU6IHBhcnNlci5FUlJPUiwgbnNwOiBuYW1lLCBkYXRhOiAnSW52YWxpZCBuYW1lc3BhY2UnIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIENvbm5lY3RzIGEgY2xpZW50IHRvIGEgbmFtZXNwYWNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG5hbWVzcGFjZVxuICogQHBhcmFtIHtTdHJpbmd9IHF1ZXJ5IHRoZSBxdWVyeSBwYXJhbWV0ZXJzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5DbGllbnQucHJvdG90eXBlLmRvQ29ubmVjdCA9IGZ1bmN0aW9uKG5hbWUsIHF1ZXJ5KXtcbiAgdmFyIG5zcCA9IHRoaXMuc2VydmVyLm9mKG5hbWUpO1xuXG4gIGlmICgnLycgIT0gbmFtZSAmJiAhdGhpcy5uc3BzWycvJ10pIHtcbiAgICB0aGlzLmNvbm5lY3RCdWZmZXIucHVzaChuYW1lKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzb2NrZXQgPSBuc3AuYWRkKHRoaXMsIHF1ZXJ5LCBmdW5jdGlvbigpe1xuICAgIHNlbGYuc29ja2V0c1tzb2NrZXQuaWRdID0gc29ja2V0O1xuICAgIHNlbGYubnNwc1tuc3AubmFtZV0gPSBzb2NrZXQ7XG5cbiAgICBpZiAoJy8nID09IG5zcC5uYW1lICYmIHNlbGYuY29ubmVjdEJ1ZmZlci5sZW5ndGggPiAwKSB7XG4gICAgICBzZWxmLmNvbm5lY3RCdWZmZXIuZm9yRWFjaChzZWxmLmNvbm5lY3QsIHNlbGYpO1xuICAgICAgc2VsZi5jb25uZWN0QnVmZmVyID0gW107XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogRGlzY29ubmVjdHMgZnJvbSBhbGwgbmFtZXNwYWNlcyBhbmQgY2xvc2VzIHRyYW5zcG9ydC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5DbGllbnQucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbigpe1xuICBmb3IgKHZhciBpZCBpbiB0aGlzLnNvY2tldHMpIHtcbiAgICBpZiAodGhpcy5zb2NrZXRzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgdGhpcy5zb2NrZXRzW2lkXS5kaXNjb25uZWN0KCk7XG4gICAgfVxuICB9XG4gIHRoaXMuc29ja2V0cyA9IHt9O1xuICB0aGlzLmNsb3NlKCk7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgYSBzb2NrZXQuIENhbGxlZCBieSBlYWNoIGBTb2NrZXRgLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkNsaWVudC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oc29ja2V0KXtcbiAgaWYgKHRoaXMuc29ja2V0cy5oYXNPd25Qcm9wZXJ0eShzb2NrZXQuaWQpKSB7XG4gICAgdmFyIG5zcCA9IHRoaXMuc29ja2V0c1tzb2NrZXQuaWRdLm5zcC5uYW1lO1xuICAgIGRlbGV0ZSB0aGlzLnNvY2tldHNbc29ja2V0LmlkXTtcbiAgICBkZWxldGUgdGhpcy5uc3BzW25zcF07XG4gIH0gZWxzZSB7XG4gICAgZGVidWcoJ2lnbm9yaW5nIHJlbW92ZSBmb3IgJXMnLCBzb2NrZXQuaWQpO1xuICB9XG59O1xuXG4vKipcbiAqIENsb3NlcyB0aGUgdW5kZXJseWluZyBjb25uZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkNsaWVudC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpe1xuICBpZiAoJ29wZW4nID09IHRoaXMuY29ubi5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ2ZvcmNpbmcgdHJhbnNwb3J0IGNsb3NlJyk7XG4gICAgdGhpcy5jb25uLmNsb3NlKCk7XG4gICAgdGhpcy5vbmNsb3NlKCdmb3JjZWQgc2VydmVyIGNsb3NlJyk7XG4gIH1cbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0IHRvIHRoZSB0cmFuc3BvcnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5DbGllbnQucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCwgb3B0cyl7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLy8gdGhpcyB3cml0ZXMgdG8gdGhlIGFjdHVhbCBjb25uZWN0aW9uXG4gIGZ1bmN0aW9uIHdyaXRlVG9FbmdpbmUoZW5jb2RlZFBhY2tldHMpIHtcbiAgICBpZiAob3B0cy52b2xhdGlsZSAmJiAhc2VsZi5jb25uLnRyYW5zcG9ydC53cml0YWJsZSkgcmV0dXJuO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW5jb2RlZFBhY2tldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHNlbGYuY29ubi53cml0ZShlbmNvZGVkUGFja2V0c1tpXSwgeyBjb21wcmVzczogb3B0cy5jb21wcmVzcyB9KTtcbiAgICB9XG4gIH1cblxuICBpZiAoJ29wZW4nID09IHRoaXMuY29ubi5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3dyaXRpbmcgcGFja2V0ICVqJywgcGFja2V0KTtcbiAgICBpZiAoIW9wdHMucHJlRW5jb2RlZCkgeyAvLyBub3QgYnJvYWRjYXN0aW5nLCBuZWVkIHRvIGVuY29kZVxuICAgICAgdGhpcy5lbmNvZGVyLmVuY29kZShwYWNrZXQsIHdyaXRlVG9FbmdpbmUpOyAvLyBlbmNvZGUsIHRoZW4gd3JpdGUgcmVzdWx0cyB0byBlbmdpbmVcbiAgICB9IGVsc2UgeyAvLyBhIGJyb2FkY2FzdCBwcmUtZW5jb2RlcyBhIHBhY2tldFxuICAgICAgd3JpdGVUb0VuZ2luZShwYWNrZXQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBkZWJ1ZygnaWdub3JpbmcgcGFja2V0IHdyaXRlICVqJywgcGFja2V0KTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBpbmNvbWluZyB0cmFuc3BvcnQgZGF0YS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5DbGllbnQucHJvdG90eXBlLm9uZGF0YSA9IGZ1bmN0aW9uKGRhdGEpe1xuICAvLyB0cnkvY2F0Y2ggaXMgbmVlZGVkIGZvciBwcm90b2NvbCB2aW9sYXRpb25zIChHSC0xODgwKVxuICB0cnkge1xuICAgIHRoaXMuZGVjb2Rlci5hZGQoZGF0YSk7XG4gIH0gY2F0Y2goZSkge1xuICAgIHRoaXMub25lcnJvcihlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBwYXJzZXIgZnVsbHkgZGVjb2RlcyBhIHBhY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5DbGllbnQucHJvdG90eXBlLm9uZGVjb2RlZCA9IGZ1bmN0aW9uKHBhY2tldCkge1xuICBpZiAocGFyc2VyLkNPTk5FQ1QgPT0gcGFja2V0LnR5cGUpIHtcbiAgICB0aGlzLmNvbm5lY3QodXJsLnBhcnNlKHBhY2tldC5uc3ApLnBhdGhuYW1lLCB1cmwucGFyc2UocGFja2V0Lm5zcCwgdHJ1ZSkucXVlcnkpO1xuICB9IGVsc2Uge1xuICAgIHZhciBzb2NrZXQgPSB0aGlzLm5zcHNbcGFja2V0Lm5zcF07XG4gICAgaWYgKHNvY2tldCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgc29ja2V0Lm9ucGFja2V0KHBhY2tldCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ25vIHNvY2tldCBmb3IgbmFtZXNwYWNlICVzJywgcGFja2V0Lm5zcCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgYW4gZXJyb3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGVyciBvYmplY3RcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkNsaWVudC5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uKGVycil7XG4gIGZvciAodmFyIGlkIGluIHRoaXMuc29ja2V0cykge1xuICAgIGlmICh0aGlzLnNvY2tldHMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICB0aGlzLnNvY2tldHNbaWRdLm9uZXJyb3IoZXJyKTtcbiAgICB9XG4gIH1cbiAgdGhpcy5jb25uLmNsb3NlKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBjbG9zZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVhc29uXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5DbGllbnQucHJvdG90eXBlLm9uY2xvc2UgPSBmdW5jdGlvbihyZWFzb24pe1xuICBkZWJ1ZygnY2xpZW50IGNsb3NlIHdpdGggcmVhc29uICVzJywgcmVhc29uKTtcblxuICAvLyBpZ25vcmUgYSBwb3RlbnRpYWwgc3Vic2VxdWVudCBgY2xvc2VgIGV2ZW50XG4gIHRoaXMuZGVzdHJveSgpO1xuXG4gIC8vIGBuc3BzYCBhbmQgYHNvY2tldHNgIGFyZSBjbGVhbmVkIHVwIHNlYW1sZXNzbHlcbiAgZm9yICh2YXIgaWQgaW4gdGhpcy5zb2NrZXRzKSB7XG4gICAgaWYgKHRoaXMuc29ja2V0cy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgIHRoaXMuc29ja2V0c1tpZF0ub25jbG9zZShyZWFzb24pO1xuICAgIH1cbiAgfVxuICB0aGlzLnNvY2tldHMgPSB7fTtcblxuICB0aGlzLmRlY29kZXIuZGVzdHJveSgpOyAvLyBjbGVhbiB1cCBkZWNvZGVyXG59O1xuXG4vKipcbiAqIENsZWFucyB1cCBldmVudCBsaXN0ZW5lcnMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQ2xpZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5jb25uLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgdGhpcy5vbmRhdGEpO1xuICB0aGlzLmNvbm4ucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5vbmVycm9yKTtcbiAgdGhpcy5jb25uLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIHRoaXMub25jbG9zZSk7XG4gIHRoaXMuZGVjb2Rlci5yZW1vdmVMaXN0ZW5lcignZGVjb2RlZCcsIHRoaXMub25kZWNvZGVkKTtcbn07XG4iLCIvKipcbiAqIERldGVjdCBFbGVjdHJvbiByZW5kZXJlciAvIG53anMgcHJvY2Vzcywgd2hpY2ggaXMgbm9kZSwgYnV0IHdlIHNob3VsZFxuICogdHJlYXQgYXMgYSBicm93c2VyLlxuICovXG5cbmlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHwgcHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInIHx8IHByb2Nlc3MuYnJvd3NlciA9PT0gdHJ1ZSB8fCBwcm9jZXNzLl9fbndqcykge1xuXHRtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vYnJvd3Nlci5qcycpO1xufSBlbHNlIHtcblx0bW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL25vZGUuanMnKTtcbn1cbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuXHQnIzAwMDBDQycsXG5cdCcjMDAwMEZGJyxcblx0JyMwMDMzQ0MnLFxuXHQnIzAwMzNGRicsXG5cdCcjMDA2NkNDJyxcblx0JyMwMDY2RkYnLFxuXHQnIzAwOTlDQycsXG5cdCcjMDA5OUZGJyxcblx0JyMwMENDMDAnLFxuXHQnIzAwQ0MzMycsXG5cdCcjMDBDQzY2Jyxcblx0JyMwMENDOTknLFxuXHQnIzAwQ0NDQycsXG5cdCcjMDBDQ0ZGJyxcblx0JyMzMzAwQ0MnLFxuXHQnIzMzMDBGRicsXG5cdCcjMzMzM0NDJyxcblx0JyMzMzMzRkYnLFxuXHQnIzMzNjZDQycsXG5cdCcjMzM2NkZGJyxcblx0JyMzMzk5Q0MnLFxuXHQnIzMzOTlGRicsXG5cdCcjMzNDQzAwJyxcblx0JyMzM0NDMzMnLFxuXHQnIzMzQ0M2NicsXG5cdCcjMzNDQzk5Jyxcblx0JyMzM0NDQ0MnLFxuXHQnIzMzQ0NGRicsXG5cdCcjNjYwMENDJyxcblx0JyM2NjAwRkYnLFxuXHQnIzY2MzNDQycsXG5cdCcjNjYzM0ZGJyxcblx0JyM2NkNDMDAnLFxuXHQnIzY2Q0MzMycsXG5cdCcjOTkwMENDJyxcblx0JyM5OTAwRkYnLFxuXHQnIzk5MzNDQycsXG5cdCcjOTkzM0ZGJyxcblx0JyM5OUNDMDAnLFxuXHQnIzk5Q0MzMycsXG5cdCcjQ0MwMDAwJyxcblx0JyNDQzAwMzMnLFxuXHQnI0NDMDA2NicsXG5cdCcjQ0MwMDk5Jyxcblx0JyNDQzAwQ0MnLFxuXHQnI0NDMDBGRicsXG5cdCcjQ0MzMzAwJyxcblx0JyNDQzMzMzMnLFxuXHQnI0NDMzM2NicsXG5cdCcjQ0MzMzk5Jyxcblx0JyNDQzMzQ0MnLFxuXHQnI0NDMzNGRicsXG5cdCcjQ0M2NjAwJyxcblx0JyNDQzY2MzMnLFxuXHQnI0NDOTkwMCcsXG5cdCcjQ0M5OTMzJyxcblx0JyNDQ0NDMDAnLFxuXHQnI0NDQ0MzMycsXG5cdCcjRkYwMDAwJyxcblx0JyNGRjAwMzMnLFxuXHQnI0ZGMDA2NicsXG5cdCcjRkYwMDk5Jyxcblx0JyNGRjAwQ0MnLFxuXHQnI0ZGMDBGRicsXG5cdCcjRkYzMzAwJyxcblx0JyNGRjMzMzMnLFxuXHQnI0ZGMzM2NicsXG5cdCcjRkYzMzk5Jyxcblx0JyNGRjMzQ0MnLFxuXHQnI0ZGMzNGRicsXG5cdCcjRkY2NjAwJyxcblx0JyNGRjY2MzMnLFxuXHQnI0ZGOTkwMCcsXG5cdCcjRkY5OTMzJyxcblx0JyNGRkNDMDAnLFxuXHQnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcblx0Ly8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuXHQvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuXHQvLyBleHBsaWNpdGx5XG5cdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiAod2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJyB8fCB3aW5kb3cucHJvY2Vzcy5fX253anMpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvLyBJbnRlcm5ldCBFeHBsb3JlciBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydCBjb2xvcnMuXG5cdGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIElzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG5cdC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG5cdHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuXHRcdC8vIElzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcblx0XHQodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuXHRcdC8vIElzIGZpcmVmb3ggPj0gdjMxP1xuXHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuXHRcdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuXHRcdC8vIERvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuXHRhcmdzWzBdID0gKHRoaXMudXNlQ29sb3JzID8gJyVjJyA6ICcnKSArXG5cdFx0dGhpcy5uYW1lc3BhY2UgK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKSArXG5cdFx0YXJnc1swXSArXG5cdFx0KHRoaXMudXNlQ29sb3JzID8gJyVjICcgOiAnICcpICtcblx0XHQnKycgKyBtb2R1bGUuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG5cdGlmICghdGhpcy51c2VDb2xvcnMpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25zdCBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcblx0YXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0Jyk7XG5cblx0Ly8gVGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcblx0Ly8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuXHQvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cblx0bGV0IGluZGV4ID0gMDtcblx0bGV0IGxhc3RDID0gMDtcblx0YXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIG1hdGNoID0+IHtcblx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aW5kZXgrKztcblx0XHRpZiAobWF0Y2ggPT09ICclYycpIHtcblx0XHRcdC8vIFdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuXHRcdFx0Ly8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcblx0XHRcdGxhc3RDID0gaW5kZXg7XG5cdFx0fVxuXHR9KTtcblxuXHRhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGxvZyguLi5hcmdzKSB7XG5cdC8vIFRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG5cdC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG5cdHJldHVybiB0eXBlb2YgY29uc29sZSA9PT0gJ29iamVjdCcgJiZcblx0XHRjb25zb2xlLmxvZyAmJlxuXHRcdGNvbnNvbGUubG9nKC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG5cdHRyeSB7XG5cdFx0aWYgKG5hbWVzcGFjZXMpIHtcblx0XHRcdGV4cG9ydHMuc3RvcmFnZS5zZXRJdGVtKCdkZWJ1ZycsIG5hbWVzcGFjZXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcblx0XHR9XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGxvYWQoKSB7XG5cdGxldCByO1xuXHR0cnkge1xuXHRcdHIgPSBleHBvcnRzLnN0b3JhZ2UuZ2V0SXRlbSgnZGVidWcnKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cblxuXHQvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG5cdGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuXHRcdHIgPSBwcm9jZXNzLmVudi5ERUJVRztcblx0fVxuXG5cdHJldHVybiByO1xufVxuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcblx0dHJ5IHtcblx0XHQvLyBUVk1MS2l0IChBcHBsZSBUViBKUyBSdW50aW1lKSBkb2VzIG5vdCBoYXZlIGEgd2luZG93IG9iamVjdCwganVzdCBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0XG5cdFx0Ly8gVGhlIEJyb3dzZXIgYWxzbyBoYXMgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dC5cblx0XHRyZXR1cm4gbG9jYWxTdG9yYWdlO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29tbW9uJykoZXhwb3J0cyk7XG5cbmNvbnN0IHtmb3JtYXR0ZXJzfSA9IG1vZHVsZS5leHBvcnRzO1xuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbiAodikge1xuXHR0cnkge1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRyZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyb3IubWVzc2FnZTtcblx0fVxufTtcbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgdyA9IGQgKiA3O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWwpKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigtPyg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8d2Vla3M/fHd8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ3dlZWtzJzpcbiAgICBjYXNlICd3ZWVrJzpcbiAgICBjYXNlICd3JzpcbiAgICAgIHJldHVybiBuICogdztcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgZCwgJ2RheScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGgsICdob3VyJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgbSwgJ21pbnV0ZScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIHMsICdzZWNvbmQnKTtcbiAgfVxuICByZXR1cm4gbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG1zQWJzLCBuLCBuYW1lKSB7XG4gIHZhciBpc1BsdXJhbCA9IG1zQWJzID49IG4gKiAxLjU7XG4gIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbikgKyAnICcgKyBuYW1lICsgKGlzUGx1cmFsID8gJ3MnIDogJycpO1xufVxuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbmNvbnN0IHR0eSA9IHJlcXVpcmUoJ3R0eScpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBOb2RlLmpzIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5leHBvcnRzLmluaXQgPSBpbml0O1xuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbNiwgMiwgMywgNCwgNSwgMV07XG5cbnRyeSB7XG5cdC8vIE9wdGlvbmFsIGRlcGVuZGVuY3kgKGFzIGluLCBkb2Vzbid0IG5lZWQgdG8gYmUgaW5zdGFsbGVkLCBOT1QgbGlrZSBvcHRpb25hbERlcGVuZGVuY2llcyBpbiBwYWNrYWdlLmpzb24pXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcblx0Y29uc3Qgc3VwcG9ydHNDb2xvciA9IHJlcXVpcmUoJ3N1cHBvcnRzLWNvbG9yJyk7XG5cblx0aWYgKHN1cHBvcnRzQ29sb3IgJiYgKHN1cHBvcnRzQ29sb3Iuc3RkZXJyIHx8IHN1cHBvcnRzQ29sb3IpLmxldmVsID49IDIpIHtcblx0XHRleHBvcnRzLmNvbG9ycyA9IFtcblx0XHRcdDIwLFxuXHRcdFx0MjEsXG5cdFx0XHQyNixcblx0XHRcdDI3LFxuXHRcdFx0MzIsXG5cdFx0XHQzMyxcblx0XHRcdDM4LFxuXHRcdFx0MzksXG5cdFx0XHQ0MCxcblx0XHRcdDQxLFxuXHRcdFx0NDIsXG5cdFx0XHQ0Myxcblx0XHRcdDQ0LFxuXHRcdFx0NDUsXG5cdFx0XHQ1Nixcblx0XHRcdDU3LFxuXHRcdFx0NjIsXG5cdFx0XHQ2Myxcblx0XHRcdDY4LFxuXHRcdFx0NjksXG5cdFx0XHQ3NCxcblx0XHRcdDc1LFxuXHRcdFx0NzYsXG5cdFx0XHQ3Nyxcblx0XHRcdDc4LFxuXHRcdFx0NzksXG5cdFx0XHQ4MCxcblx0XHRcdDgxLFxuXHRcdFx0OTIsXG5cdFx0XHQ5Myxcblx0XHRcdDk4LFxuXHRcdFx0OTksXG5cdFx0XHQxMTIsXG5cdFx0XHQxMTMsXG5cdFx0XHQxMjgsXG5cdFx0XHQxMjksXG5cdFx0XHQxMzQsXG5cdFx0XHQxMzUsXG5cdFx0XHQxNDgsXG5cdFx0XHQxNDksXG5cdFx0XHQxNjAsXG5cdFx0XHQxNjEsXG5cdFx0XHQxNjIsXG5cdFx0XHQxNjMsXG5cdFx0XHQxNjQsXG5cdFx0XHQxNjUsXG5cdFx0XHQxNjYsXG5cdFx0XHQxNjcsXG5cdFx0XHQxNjgsXG5cdFx0XHQxNjksXG5cdFx0XHQxNzAsXG5cdFx0XHQxNzEsXG5cdFx0XHQxNzIsXG5cdFx0XHQxNzMsXG5cdFx0XHQxNzgsXG5cdFx0XHQxNzksXG5cdFx0XHQxODQsXG5cdFx0XHQxODUsXG5cdFx0XHQxOTYsXG5cdFx0XHQxOTcsXG5cdFx0XHQxOTgsXG5cdFx0XHQxOTksXG5cdFx0XHQyMDAsXG5cdFx0XHQyMDEsXG5cdFx0XHQyMDIsXG5cdFx0XHQyMDMsXG5cdFx0XHQyMDQsXG5cdFx0XHQyMDUsXG5cdFx0XHQyMDYsXG5cdFx0XHQyMDcsXG5cdFx0XHQyMDgsXG5cdFx0XHQyMDksXG5cdFx0XHQyMTQsXG5cdFx0XHQyMTUsXG5cdFx0XHQyMjAsXG5cdFx0XHQyMjFcblx0XHRdO1xuXHR9XG59IGNhdGNoIChlcnJvcikge1xuXHQvLyBTd2FsbG93IC0gd2Ugb25seSBjYXJlIGlmIGBzdXBwb3J0cy1jb2xvcmAgaXMgYXZhaWxhYmxlOyBpdCBkb2Vzbid0IGhhdmUgdG8gYmUuXG59XG5cbi8qKlxuICogQnVpbGQgdXAgdGhlIGRlZmF1bHQgYGluc3BlY3RPcHRzYCBvYmplY3QgZnJvbSB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzLlxuICpcbiAqICAgJCBERUJVR19DT0xPUlM9bm8gREVCVUdfREVQVEg9MTAgREVCVUdfU0hPV19ISURERU49ZW5hYmxlZCBub2RlIHNjcmlwdC5qc1xuICovXG5cbmV4cG9ydHMuaW5zcGVjdE9wdHMgPSBPYmplY3Qua2V5cyhwcm9jZXNzLmVudikuZmlsdGVyKGtleSA9PiB7XG5cdHJldHVybiAvXmRlYnVnXy9pLnRlc3Qoa2V5KTtcbn0pLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcblx0Ly8gQ2FtZWwtY2FzZVxuXHRjb25zdCBwcm9wID0ga2V5XG5cdFx0LnN1YnN0cmluZyg2KVxuXHRcdC50b0xvd2VyQ2FzZSgpXG5cdFx0LnJlcGxhY2UoL18oW2Etel0pL2csIChfLCBrKSA9PiB7XG5cdFx0XHRyZXR1cm4gay50b1VwcGVyQ2FzZSgpO1xuXHRcdH0pO1xuXG5cdC8vIENvZXJjZSBzdHJpbmcgdmFsdWUgaW50byBKUyB2YWx1ZVxuXHRsZXQgdmFsID0gcHJvY2Vzcy5lbnZba2V5XTtcblx0aWYgKC9eKHllc3xvbnx0cnVlfGVuYWJsZWQpJC9pLnRlc3QodmFsKSkge1xuXHRcdHZhbCA9IHRydWU7XG5cdH0gZWxzZSBpZiAoL14obm98b2ZmfGZhbHNlfGRpc2FibGVkKSQvaS50ZXN0KHZhbCkpIHtcblx0XHR2YWwgPSBmYWxzZTtcblx0fSBlbHNlIGlmICh2YWwgPT09ICdudWxsJykge1xuXHRcdHZhbCA9IG51bGw7XG5cdH0gZWxzZSB7XG5cdFx0dmFsID0gTnVtYmVyKHZhbCk7XG5cdH1cblxuXHRvYmpbcHJvcF0gPSB2YWw7XG5cdHJldHVybiBvYmo7XG59LCB7fSk7XG5cbi8qKlxuICogSXMgc3Rkb3V0IGEgVFRZPyBDb2xvcmVkIG91dHB1dCBpcyBlbmFibGVkIHdoZW4gYHRydWVgLlxuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcblx0cmV0dXJuICdjb2xvcnMnIGluIGV4cG9ydHMuaW5zcGVjdE9wdHMgP1xuXHRcdEJvb2xlYW4oZXhwb3J0cy5pbnNwZWN0T3B0cy5jb2xvcnMpIDpcblx0XHR0dHkuaXNhdHR5KHByb2Nlc3Muc3RkZXJyLmZkKTtcbn1cblxuLyoqXG4gKiBBZGRzIEFOU0kgY29sb3IgZXNjYXBlIGNvZGVzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcblx0Y29uc3Qge25hbWVzcGFjZTogbmFtZSwgdXNlQ29sb3JzfSA9IHRoaXM7XG5cblx0aWYgKHVzZUNvbG9ycykge1xuXHRcdGNvbnN0IGMgPSB0aGlzLmNvbG9yO1xuXHRcdGNvbnN0IGNvbG9yQ29kZSA9ICdcXHUwMDFCWzMnICsgKGMgPCA4ID8gYyA6ICc4OzU7JyArIGMpO1xuXHRcdGNvbnN0IHByZWZpeCA9IGAgICR7Y29sb3JDb2RlfTsxbSR7bmFtZX0gXFx1MDAxQlswbWA7XG5cblx0XHRhcmdzWzBdID0gcHJlZml4ICsgYXJnc1swXS5zcGxpdCgnXFxuJykuam9pbignXFxuJyArIHByZWZpeCk7XG5cdFx0YXJncy5wdXNoKGNvbG9yQ29kZSArICdtKycgKyBtb2R1bGUuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpICsgJ1xcdTAwMUJbMG0nKTtcblx0fSBlbHNlIHtcblx0XHRhcmdzWzBdID0gZ2V0RGF0ZSgpICsgbmFtZSArICcgJyArIGFyZ3NbMF07XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2V0RGF0ZSgpIHtcblx0aWYgKGV4cG9ydHMuaW5zcGVjdE9wdHMuaGlkZURhdGUpIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblx0cmV0dXJuIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSArICcgJztcbn1cblxuLyoqXG4gKiBJbnZva2VzIGB1dGlsLmZvcm1hdCgpYCB3aXRoIHRoZSBzcGVjaWZpZWQgYXJndW1lbnRzIGFuZCB3cml0ZXMgdG8gc3RkZXJyLlxuICovXG5cbmZ1bmN0aW9uIGxvZyguLi5hcmdzKSB7XG5cdHJldHVybiBwcm9jZXNzLnN0ZGVyci53cml0ZSh1dGlsLmZvcm1hdCguLi5hcmdzKSArICdcXG4nKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHRpZiAobmFtZXNwYWNlcykge1xuXHRcdHByb2Nlc3MuZW52LkRFQlVHID0gbmFtZXNwYWNlcztcblx0fSBlbHNlIHtcblx0XHQvLyBJZiB5b3Ugc2V0IGEgcHJvY2Vzcy5lbnYgZmllbGQgdG8gbnVsbCBvciB1bmRlZmluZWQsIGl0IGdldHMgY2FzdCB0byB0aGVcblx0XHQvLyBzdHJpbmcgJ251bGwnIG9yICd1bmRlZmluZWQnLiBKdXN0IGRlbGV0ZSBpbnN0ZWFkLlxuXHRcdGRlbGV0ZSBwcm9jZXNzLmVudi5ERUJVRztcblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG5cdHJldHVybiBwcm9jZXNzLmVudi5ERUJVRztcbn1cblxuLyoqXG4gKiBJbml0IGxvZ2ljIGZvciBgZGVidWdgIGluc3RhbmNlcy5cbiAqXG4gKiBDcmVhdGUgYSBuZXcgYGluc3BlY3RPcHRzYCBvYmplY3QgaW4gY2FzZSBgdXNlQ29sb3JzYCBpcyBzZXRcbiAqIGRpZmZlcmVudGx5IGZvciBhIHBhcnRpY3VsYXIgYGRlYnVnYCBpbnN0YW5jZS5cbiAqL1xuXG5mdW5jdGlvbiBpbml0KGRlYnVnKSB7XG5cdGRlYnVnLmluc3BlY3RPcHRzID0ge307XG5cblx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGV4cG9ydHMuaW5zcGVjdE9wdHMpO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0XHRkZWJ1Zy5pbnNwZWN0T3B0c1trZXlzW2ldXSA9IGV4cG9ydHMuaW5zcGVjdE9wdHNba2V5c1tpXV07XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xuXG5jb25zdCB7Zm9ybWF0dGVyc30gPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBNYXAgJW8gdG8gYHV0aWwuaW5zcGVjdCgpYCwgYWxsIG9uIGEgc2luZ2xlIGxpbmUuXG4gKi9cblxuZm9ybWF0dGVycy5vID0gZnVuY3Rpb24gKHYpIHtcblx0dGhpcy5pbnNwZWN0T3B0cy5jb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblx0cmV0dXJuIHV0aWwuaW5zcGVjdCh2LCB0aGlzLmluc3BlY3RPcHRzKVxuXHRcdC5yZXBsYWNlKC9cXHMqXFxuXFxzKi9nLCAnICcpO1xufTtcblxuLyoqXG4gKiBNYXAgJU8gdG8gYHV0aWwuaW5zcGVjdCgpYCwgYWxsb3dpbmcgbXVsdGlwbGUgbGluZXMgaWYgbmVlZGVkLlxuICovXG5cbmZvcm1hdHRlcnMuTyA9IGZ1bmN0aW9uICh2KSB7XG5cdHRoaXMuaW5zcGVjdE9wdHMuY29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG5cdHJldHVybiB1dGlsLmluc3BlY3QodiwgdGhpcy5pbnNwZWN0T3B0cyk7XG59O1xuIiwiXHJcbi8qKlxyXG4gKiBFeHBvc2UgYEVtaXR0ZXJgLlxyXG4gKi9cclxuXHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG4gIG1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemUgYSBuZXcgYEVtaXR0ZXJgLlxyXG4gKlxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEVtaXR0ZXIob2JqKSB7XHJcbiAgaWYgKG9iaikgcmV0dXJuIG1peGluKG9iaik7XHJcbn07XHJcblxyXG4vKipcclxuICogTWl4aW4gdGhlIGVtaXR0ZXIgcHJvcGVydGllcy5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9ialxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG1peGluKG9iaikge1xyXG4gIGZvciAodmFyIGtleSBpbiBFbWl0dGVyLnByb3RvdHlwZSkge1xyXG4gICAgb2JqW2tleV0gPSBFbWl0dGVyLnByb3RvdHlwZVtrZXldO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG4vKipcclxuICogTGlzdGVuIG9uIHRoZSBnaXZlbiBgZXZlbnRgIHdpdGggYGZuYC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub24gPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgKHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdKVxyXG4gICAgLnB1c2goZm4pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgYW4gYGV2ZW50YCBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgaW52b2tlZCBhIHNpbmdsZVxyXG4gKiB0aW1lIHRoZW4gYXV0b21hdGljYWxseSByZW1vdmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICBmdW5jdGlvbiBvbigpIHtcclxuICAgIHRoaXMub2ZmKGV2ZW50LCBvbik7XHJcbiAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH1cclxuXHJcbiAgb24uZm4gPSBmbjtcclxuICB0aGlzLm9uKGV2ZW50LCBvbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBnaXZlbiBjYWxsYmFjayBmb3IgYGV2ZW50YCBvciBhbGxcclxuICogcmVnaXN0ZXJlZCBjYWxsYmFja3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9mZiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG5cclxuICAvLyBhbGxcclxuICBpZiAoMCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB7fTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gc3BlY2lmaWMgZXZlbnRcclxuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICBpZiAoIWNhbGxiYWNrcykgcmV0dXJuIHRoaXM7XHJcblxyXG4gIC8vIHJlbW92ZSBhbGwgaGFuZGxlcnNcclxuICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gcmVtb3ZlIHNwZWNpZmljIGhhbmRsZXJcclxuICB2YXIgY2I7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcclxuICAgIGNiID0gY2FsbGJhY2tzW2ldO1xyXG4gICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcclxuICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVtaXQgYGV2ZW50YCB3aXRoIHRoZSBnaXZlbiBhcmdzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtNaXhlZH0gLi4uXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcclxuICAgICwgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuXHJcbiAgaWYgKGNhbGxiYWNrcykge1xyXG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xyXG4gICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gYXJyYXkgb2YgY2FsbGJhY2tzIGZvciBgZXZlbnRgLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7QXJyYXl9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB0aGlzIGVtaXR0ZXIgaGFzIGBldmVudGAgaGFuZGxlcnMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICByZXR1cm4gISEgdGhpcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aDtcclxufTtcclxuIiwiLypnbG9iYWwgQmxvYixGaWxlKi9cblxuLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzXG4gKi9cblxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG52YXIgaXNCdWYgPSByZXF1aXJlKCcuL2lzLWJ1ZmZlcicpO1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciB3aXRoTmF0aXZlQmxvYiA9IHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChCbG9iKSA9PT0gJ1tvYmplY3QgQmxvYkNvbnN0cnVjdG9yXScpO1xudmFyIHdpdGhOYXRpdmVGaWxlID0gdHlwZW9mIEZpbGUgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBGaWxlICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEZpbGUpID09PSAnW29iamVjdCBGaWxlQ29uc3RydWN0b3JdJyk7XG5cbi8qKlxuICogUmVwbGFjZXMgZXZlcnkgQnVmZmVyIHwgQXJyYXlCdWZmZXIgaW4gcGFja2V0IHdpdGggYSBudW1iZXJlZCBwbGFjZWhvbGRlci5cbiAqIEFueXRoaW5nIHdpdGggYmxvYnMgb3IgZmlsZXMgc2hvdWxkIGJlIGZlZCB0aHJvdWdoIHJlbW92ZUJsb2JzIGJlZm9yZSBjb21pbmdcbiAqIGhlcmUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIHNvY2tldC5pbyBldmVudCBwYWNrZXRcbiAqIEByZXR1cm4ge09iamVjdH0gd2l0aCBkZWNvbnN0cnVjdGVkIHBhY2tldCBhbmQgbGlzdCBvZiBidWZmZXJzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZGVjb25zdHJ1Y3RQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQpIHtcbiAgdmFyIGJ1ZmZlcnMgPSBbXTtcbiAgdmFyIHBhY2tldERhdGEgPSBwYWNrZXQuZGF0YTtcbiAgdmFyIHBhY2sgPSBwYWNrZXQ7XG4gIHBhY2suZGF0YSA9IF9kZWNvbnN0cnVjdFBhY2tldChwYWNrZXREYXRhLCBidWZmZXJzKTtcbiAgcGFjay5hdHRhY2htZW50cyA9IGJ1ZmZlcnMubGVuZ3RoOyAvLyBudW1iZXIgb2YgYmluYXJ5ICdhdHRhY2htZW50cydcbiAgcmV0dXJuIHtwYWNrZXQ6IHBhY2ssIGJ1ZmZlcnM6IGJ1ZmZlcnN9O1xufTtcblxuZnVuY3Rpb24gX2RlY29uc3RydWN0UGFja2V0KGRhdGEsIGJ1ZmZlcnMpIHtcbiAgaWYgKCFkYXRhKSByZXR1cm4gZGF0YTtcblxuICBpZiAoaXNCdWYoZGF0YSkpIHtcbiAgICB2YXIgcGxhY2Vob2xkZXIgPSB7IF9wbGFjZWhvbGRlcjogdHJ1ZSwgbnVtOiBidWZmZXJzLmxlbmd0aCB9O1xuICAgIGJ1ZmZlcnMucHVzaChkYXRhKTtcbiAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhKSkge1xuICAgIHZhciBuZXdEYXRhID0gbmV3IEFycmF5KGRhdGEubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5ld0RhdGFbaV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSwgYnVmZmVycyk7XG4gICAgfVxuICAgIHJldHVybiBuZXdEYXRhO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJiAhKGRhdGEgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgIHZhciBuZXdEYXRhID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgIG5ld0RhdGFba2V5XSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3RGF0YTtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBSZWNvbnN0cnVjdHMgYSBiaW5hcnkgcGFja2V0IGZyb20gaXRzIHBsYWNlaG9sZGVyIHBhY2tldCBhbmQgYnVmZmVyc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBldmVudCBwYWNrZXQgd2l0aCBwbGFjZWhvbGRlcnNcbiAqIEBwYXJhbSB7QXJyYXl9IGJ1ZmZlcnMgLSBiaW5hcnkgYnVmZmVycyB0byBwdXQgaW4gcGxhY2Vob2xkZXIgcG9zaXRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY29uc3RydWN0ZWQgcGFja2V0XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMucmVjb25zdHJ1Y3RQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQsIGJ1ZmZlcnMpIHtcbiAgcGFja2V0LmRhdGEgPSBfcmVjb25zdHJ1Y3RQYWNrZXQocGFja2V0LmRhdGEsIGJ1ZmZlcnMpO1xuICBwYWNrZXQuYXR0YWNobWVudHMgPSB1bmRlZmluZWQ7IC8vIG5vIGxvbmdlciB1c2VmdWxcbiAgcmV0dXJuIHBhY2tldDtcbn07XG5cbmZ1bmN0aW9uIF9yZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gIGlmICghZGF0YSkgcmV0dXJuIGRhdGE7XG5cbiAgaWYgKGRhdGEgJiYgZGF0YS5fcGxhY2Vob2xkZXIpIHtcbiAgICByZXR1cm4gYnVmZmVyc1tkYXRhLm51bV07IC8vIGFwcHJvcHJpYXRlIGJ1ZmZlciAoc2hvdWxkIGJlIG5hdHVyYWwgb3JkZXIgYW55d2F5KVxuICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRhdGFbaV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSwgYnVmZmVycyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0Jykge1xuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICBkYXRhW2tleV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBBc3luY2hyb25vdXNseSByZW1vdmVzIEJsb2JzIG9yIEZpbGVzIGZyb20gZGF0YSB2aWFcbiAqIEZpbGVSZWFkZXIncyByZWFkQXNBcnJheUJ1ZmZlciBtZXRob2QuIFVzZWQgYmVmb3JlIGVuY29kaW5nXG4gKiBkYXRhIGFzIG1zZ3BhY2suIENhbGxzIGNhbGxiYWNrIHdpdGggdGhlIGJsb2JsZXNzIGRhdGEuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLnJlbW92ZUJsb2JzID0gZnVuY3Rpb24oZGF0YSwgY2FsbGJhY2spIHtcbiAgZnVuY3Rpb24gX3JlbW92ZUJsb2JzKG9iaiwgY3VyS2V5LCBjb250YWluaW5nT2JqZWN0KSB7XG4gICAgaWYgKCFvYmopIHJldHVybiBvYmo7XG5cbiAgICAvLyBjb252ZXJ0IGFueSBibG9iXG4gICAgaWYgKCh3aXRoTmF0aXZlQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fFxuICAgICAgICAod2l0aE5hdGl2ZUZpbGUgJiYgb2JqIGluc3RhbmNlb2YgRmlsZSkpIHtcbiAgICAgIHBlbmRpbmdCbG9icysrO1xuXG4gICAgICAvLyBhc3luYyBmaWxlcmVhZGVyXG4gICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkgeyAvLyB0aGlzLnJlc3VsdCA9PSBhcnJheWJ1ZmZlclxuICAgICAgICBpZiAoY29udGFpbmluZ09iamVjdCkge1xuICAgICAgICAgIGNvbnRhaW5pbmdPYmplY3RbY3VyS2V5XSA9IHRoaXMucmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGJsb2JsZXNzRGF0YSA9IHRoaXMucmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgbm90aGluZyBwZW5kaW5nIGl0cyBjYWxsYmFjayB0aW1lXG4gICAgICAgIGlmKCEgLS1wZW5kaW5nQmxvYnMpIHtcbiAgICAgICAgICBjYWxsYmFjayhibG9ibGVzc0RhdGEpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKG9iaik7IC8vIGJsb2IgLT4gYXJyYXlidWZmZXJcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqKSkgeyAvLyBoYW5kbGUgYXJyYXlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIF9yZW1vdmVCbG9icyhvYmpbaV0sIGksIG9iaik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAhaXNCdWYob2JqKSkgeyAvLyBhbmQgb2JqZWN0XG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgIF9yZW1vdmVCbG9icyhvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBwZW5kaW5nQmxvYnMgPSAwO1xuICB2YXIgYmxvYmxlc3NEYXRhID0gZGF0YTtcbiAgX3JlbW92ZUJsb2JzKGJsb2JsZXNzRGF0YSk7XG4gIGlmICghcGVuZGluZ0Jsb2JzKSB7XG4gICAgY2FsbGJhY2soYmxvYmxlc3NEYXRhKTtcbiAgfVxufTtcbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuXHQnIzAwMDBDQycsXG5cdCcjMDAwMEZGJyxcblx0JyMwMDMzQ0MnLFxuXHQnIzAwMzNGRicsXG5cdCcjMDA2NkNDJyxcblx0JyMwMDY2RkYnLFxuXHQnIzAwOTlDQycsXG5cdCcjMDA5OUZGJyxcblx0JyMwMENDMDAnLFxuXHQnIzAwQ0MzMycsXG5cdCcjMDBDQzY2Jyxcblx0JyMwMENDOTknLFxuXHQnIzAwQ0NDQycsXG5cdCcjMDBDQ0ZGJyxcblx0JyMzMzAwQ0MnLFxuXHQnIzMzMDBGRicsXG5cdCcjMzMzM0NDJyxcblx0JyMzMzMzRkYnLFxuXHQnIzMzNjZDQycsXG5cdCcjMzM2NkZGJyxcblx0JyMzMzk5Q0MnLFxuXHQnIzMzOTlGRicsXG5cdCcjMzNDQzAwJyxcblx0JyMzM0NDMzMnLFxuXHQnIzMzQ0M2NicsXG5cdCcjMzNDQzk5Jyxcblx0JyMzM0NDQ0MnLFxuXHQnIzMzQ0NGRicsXG5cdCcjNjYwMENDJyxcblx0JyM2NjAwRkYnLFxuXHQnIzY2MzNDQycsXG5cdCcjNjYzM0ZGJyxcblx0JyM2NkNDMDAnLFxuXHQnIzY2Q0MzMycsXG5cdCcjOTkwMENDJyxcblx0JyM5OTAwRkYnLFxuXHQnIzk5MzNDQycsXG5cdCcjOTkzM0ZGJyxcblx0JyM5OUNDMDAnLFxuXHQnIzk5Q0MzMycsXG5cdCcjQ0MwMDAwJyxcblx0JyNDQzAwMzMnLFxuXHQnI0NDMDA2NicsXG5cdCcjQ0MwMDk5Jyxcblx0JyNDQzAwQ0MnLFxuXHQnI0NDMDBGRicsXG5cdCcjQ0MzMzAwJyxcblx0JyNDQzMzMzMnLFxuXHQnI0NDMzM2NicsXG5cdCcjQ0MzMzk5Jyxcblx0JyNDQzMzQ0MnLFxuXHQnI0NDMzNGRicsXG5cdCcjQ0M2NjAwJyxcblx0JyNDQzY2MzMnLFxuXHQnI0NDOTkwMCcsXG5cdCcjQ0M5OTMzJyxcblx0JyNDQ0NDMDAnLFxuXHQnI0NDQ0MzMycsXG5cdCcjRkYwMDAwJyxcblx0JyNGRjAwMzMnLFxuXHQnI0ZGMDA2NicsXG5cdCcjRkYwMDk5Jyxcblx0JyNGRjAwQ0MnLFxuXHQnI0ZGMDBGRicsXG5cdCcjRkYzMzAwJyxcblx0JyNGRjMzMzMnLFxuXHQnI0ZGMzM2NicsXG5cdCcjRkYzMzk5Jyxcblx0JyNGRjMzQ0MnLFxuXHQnI0ZGMzNGRicsXG5cdCcjRkY2NjAwJyxcblx0JyNGRjY2MzMnLFxuXHQnI0ZGOTkwMCcsXG5cdCcjRkY5OTMzJyxcblx0JyNGRkNDMDAnLFxuXHQnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcblx0Ly8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuXHQvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuXHQvLyBleHBsaWNpdGx5XG5cdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiAod2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJyB8fCB3aW5kb3cucHJvY2Vzcy5fX253anMpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvLyBJbnRlcm5ldCBFeHBsb3JlciBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydCBjb2xvcnMuXG5cdGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIElzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG5cdC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG5cdHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuXHRcdC8vIElzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcblx0XHQodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuXHRcdC8vIElzIGZpcmVmb3ggPj0gdjMxP1xuXHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuXHRcdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuXHRcdC8vIERvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuXHRhcmdzWzBdID0gKHRoaXMudXNlQ29sb3JzID8gJyVjJyA6ICcnKSArXG5cdFx0dGhpcy5uYW1lc3BhY2UgK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKSArXG5cdFx0YXJnc1swXSArXG5cdFx0KHRoaXMudXNlQ29sb3JzID8gJyVjICcgOiAnICcpICtcblx0XHQnKycgKyBtb2R1bGUuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG5cdGlmICghdGhpcy51c2VDb2xvcnMpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25zdCBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcblx0YXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0Jyk7XG5cblx0Ly8gVGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcblx0Ly8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuXHQvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cblx0bGV0IGluZGV4ID0gMDtcblx0bGV0IGxhc3RDID0gMDtcblx0YXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIG1hdGNoID0+IHtcblx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aW5kZXgrKztcblx0XHRpZiAobWF0Y2ggPT09ICclYycpIHtcblx0XHRcdC8vIFdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuXHRcdFx0Ly8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcblx0XHRcdGxhc3RDID0gaW5kZXg7XG5cdFx0fVxuXHR9KTtcblxuXHRhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGxvZyguLi5hcmdzKSB7XG5cdC8vIFRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG5cdC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG5cdHJldHVybiB0eXBlb2YgY29uc29sZSA9PT0gJ29iamVjdCcgJiZcblx0XHRjb25zb2xlLmxvZyAmJlxuXHRcdGNvbnNvbGUubG9nKC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG5cdHRyeSB7XG5cdFx0aWYgKG5hbWVzcGFjZXMpIHtcblx0XHRcdGV4cG9ydHMuc3RvcmFnZS5zZXRJdGVtKCdkZWJ1ZycsIG5hbWVzcGFjZXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcblx0XHR9XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGxvYWQoKSB7XG5cdGxldCByO1xuXHR0cnkge1xuXHRcdHIgPSBleHBvcnRzLnN0b3JhZ2UuZ2V0SXRlbSgnZGVidWcnKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cblxuXHQvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG5cdGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuXHRcdHIgPSBwcm9jZXNzLmVudi5ERUJVRztcblx0fVxuXG5cdHJldHVybiByO1xufVxuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcblx0dHJ5IHtcblx0XHQvLyBUVk1MS2l0IChBcHBsZSBUViBKUyBSdW50aW1lKSBkb2VzIG5vdCBoYXZlIGEgd2luZG93IG9iamVjdCwganVzdCBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0XG5cdFx0Ly8gVGhlIEJyb3dzZXIgYWxzbyBoYXMgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dC5cblx0XHRyZXR1cm4gbG9jYWxTdG9yYWdlO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29tbW9uJykoZXhwb3J0cyk7XG5cbmNvbnN0IHtmb3JtYXR0ZXJzfSA9IG1vZHVsZS5leHBvcnRzO1xuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbiAodikge1xuXHR0cnkge1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRyZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyb3IubWVzc2FnZTtcblx0fVxufTtcbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgdyA9IGQgKiA3O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWwpKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigtPyg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8d2Vla3M/fHd8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ3dlZWtzJzpcbiAgICBjYXNlICd3ZWVrJzpcbiAgICBjYXNlICd3JzpcbiAgICAgIHJldHVybiBuICogdztcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgZCwgJ2RheScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGgsICdob3VyJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgbSwgJ21pbnV0ZScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIHMsICdzZWNvbmQnKTtcbiAgfVxuICByZXR1cm4gbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG1zQWJzLCBuLCBuYW1lKSB7XG4gIHZhciBpc1BsdXJhbCA9IG1zQWJzID49IG4gKiAxLjU7XG4gIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbikgKyAnICcgKyBuYW1lICsgKGlzUGx1cmFsID8gJ3MnIDogJycpO1xufVxuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbmNvbnN0IHR0eSA9IHJlcXVpcmUoJ3R0eScpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBOb2RlLmpzIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5leHBvcnRzLmluaXQgPSBpbml0O1xuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbNiwgMiwgMywgNCwgNSwgMV07XG5cbnRyeSB7XG5cdC8vIE9wdGlvbmFsIGRlcGVuZGVuY3kgKGFzIGluLCBkb2Vzbid0IG5lZWQgdG8gYmUgaW5zdGFsbGVkLCBOT1QgbGlrZSBvcHRpb25hbERlcGVuZGVuY2llcyBpbiBwYWNrYWdlLmpzb24pXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcblx0Y29uc3Qgc3VwcG9ydHNDb2xvciA9IHJlcXVpcmUoJ3N1cHBvcnRzLWNvbG9yJyk7XG5cblx0aWYgKHN1cHBvcnRzQ29sb3IgJiYgKHN1cHBvcnRzQ29sb3Iuc3RkZXJyIHx8IHN1cHBvcnRzQ29sb3IpLmxldmVsID49IDIpIHtcblx0XHRleHBvcnRzLmNvbG9ycyA9IFtcblx0XHRcdDIwLFxuXHRcdFx0MjEsXG5cdFx0XHQyNixcblx0XHRcdDI3LFxuXHRcdFx0MzIsXG5cdFx0XHQzMyxcblx0XHRcdDM4LFxuXHRcdFx0MzksXG5cdFx0XHQ0MCxcblx0XHRcdDQxLFxuXHRcdFx0NDIsXG5cdFx0XHQ0Myxcblx0XHRcdDQ0LFxuXHRcdFx0NDUsXG5cdFx0XHQ1Nixcblx0XHRcdDU3LFxuXHRcdFx0NjIsXG5cdFx0XHQ2Myxcblx0XHRcdDY4LFxuXHRcdFx0NjksXG5cdFx0XHQ3NCxcblx0XHRcdDc1LFxuXHRcdFx0NzYsXG5cdFx0XHQ3Nyxcblx0XHRcdDc4LFxuXHRcdFx0NzksXG5cdFx0XHQ4MCxcblx0XHRcdDgxLFxuXHRcdFx0OTIsXG5cdFx0XHQ5Myxcblx0XHRcdDk4LFxuXHRcdFx0OTksXG5cdFx0XHQxMTIsXG5cdFx0XHQxMTMsXG5cdFx0XHQxMjgsXG5cdFx0XHQxMjksXG5cdFx0XHQxMzQsXG5cdFx0XHQxMzUsXG5cdFx0XHQxNDgsXG5cdFx0XHQxNDksXG5cdFx0XHQxNjAsXG5cdFx0XHQxNjEsXG5cdFx0XHQxNjIsXG5cdFx0XHQxNjMsXG5cdFx0XHQxNjQsXG5cdFx0XHQxNjUsXG5cdFx0XHQxNjYsXG5cdFx0XHQxNjcsXG5cdFx0XHQxNjgsXG5cdFx0XHQxNjksXG5cdFx0XHQxNzAsXG5cdFx0XHQxNzEsXG5cdFx0XHQxNzIsXG5cdFx0XHQxNzMsXG5cdFx0XHQxNzgsXG5cdFx0XHQxNzksXG5cdFx0XHQxODQsXG5cdFx0XHQxODUsXG5cdFx0XHQxOTYsXG5cdFx0XHQxOTcsXG5cdFx0XHQxOTgsXG5cdFx0XHQxOTksXG5cdFx0XHQyMDAsXG5cdFx0XHQyMDEsXG5cdFx0XHQyMDIsXG5cdFx0XHQyMDMsXG5cdFx0XHQyMDQsXG5cdFx0XHQyMDUsXG5cdFx0XHQyMDYsXG5cdFx0XHQyMDcsXG5cdFx0XHQyMDgsXG5cdFx0XHQyMDksXG5cdFx0XHQyMTQsXG5cdFx0XHQyMTUsXG5cdFx0XHQyMjAsXG5cdFx0XHQyMjFcblx0XHRdO1xuXHR9XG59IGNhdGNoIChlcnJvcikge1xuXHQvLyBTd2FsbG93IC0gd2Ugb25seSBjYXJlIGlmIGBzdXBwb3J0cy1jb2xvcmAgaXMgYXZhaWxhYmxlOyBpdCBkb2Vzbid0IGhhdmUgdG8gYmUuXG59XG5cbi8qKlxuICogQnVpbGQgdXAgdGhlIGRlZmF1bHQgYGluc3BlY3RPcHRzYCBvYmplY3QgZnJvbSB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzLlxuICpcbiAqICAgJCBERUJVR19DT0xPUlM9bm8gREVCVUdfREVQVEg9MTAgREVCVUdfU0hPV19ISURERU49ZW5hYmxlZCBub2RlIHNjcmlwdC5qc1xuICovXG5cbmV4cG9ydHMuaW5zcGVjdE9wdHMgPSBPYmplY3Qua2V5cyhwcm9jZXNzLmVudikuZmlsdGVyKGtleSA9PiB7XG5cdHJldHVybiAvXmRlYnVnXy9pLnRlc3Qoa2V5KTtcbn0pLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcblx0Ly8gQ2FtZWwtY2FzZVxuXHRjb25zdCBwcm9wID0ga2V5XG5cdFx0LnN1YnN0cmluZyg2KVxuXHRcdC50b0xvd2VyQ2FzZSgpXG5cdFx0LnJlcGxhY2UoL18oW2Etel0pL2csIChfLCBrKSA9PiB7XG5cdFx0XHRyZXR1cm4gay50b1VwcGVyQ2FzZSgpO1xuXHRcdH0pO1xuXG5cdC8vIENvZXJjZSBzdHJpbmcgdmFsdWUgaW50byBKUyB2YWx1ZVxuXHRsZXQgdmFsID0gcHJvY2Vzcy5lbnZba2V5XTtcblx0aWYgKC9eKHllc3xvbnx0cnVlfGVuYWJsZWQpJC9pLnRlc3QodmFsKSkge1xuXHRcdHZhbCA9IHRydWU7XG5cdH0gZWxzZSBpZiAoL14obm98b2ZmfGZhbHNlfGRpc2FibGVkKSQvaS50ZXN0KHZhbCkpIHtcblx0XHR2YWwgPSBmYWxzZTtcblx0fSBlbHNlIGlmICh2YWwgPT09ICdudWxsJykge1xuXHRcdHZhbCA9IG51bGw7XG5cdH0gZWxzZSB7XG5cdFx0dmFsID0gTnVtYmVyKHZhbCk7XG5cdH1cblxuXHRvYmpbcHJvcF0gPSB2YWw7XG5cdHJldHVybiBvYmo7XG59LCB7fSk7XG5cbi8qKlxuICogSXMgc3Rkb3V0IGEgVFRZPyBDb2xvcmVkIG91dHB1dCBpcyBlbmFibGVkIHdoZW4gYHRydWVgLlxuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcblx0cmV0dXJuICdjb2xvcnMnIGluIGV4cG9ydHMuaW5zcGVjdE9wdHMgP1xuXHRcdEJvb2xlYW4oZXhwb3J0cy5pbnNwZWN0T3B0cy5jb2xvcnMpIDpcblx0XHR0dHkuaXNhdHR5KHByb2Nlc3Muc3RkZXJyLmZkKTtcbn1cblxuLyoqXG4gKiBBZGRzIEFOU0kgY29sb3IgZXNjYXBlIGNvZGVzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcblx0Y29uc3Qge25hbWVzcGFjZTogbmFtZSwgdXNlQ29sb3JzfSA9IHRoaXM7XG5cblx0aWYgKHVzZUNvbG9ycykge1xuXHRcdGNvbnN0IGMgPSB0aGlzLmNvbG9yO1xuXHRcdGNvbnN0IGNvbG9yQ29kZSA9ICdcXHUwMDFCWzMnICsgKGMgPCA4ID8gYyA6ICc4OzU7JyArIGMpO1xuXHRcdGNvbnN0IHByZWZpeCA9IGAgICR7Y29sb3JDb2RlfTsxbSR7bmFtZX0gXFx1MDAxQlswbWA7XG5cblx0XHRhcmdzWzBdID0gcHJlZml4ICsgYXJnc1swXS5zcGxpdCgnXFxuJykuam9pbignXFxuJyArIHByZWZpeCk7XG5cdFx0YXJncy5wdXNoKGNvbG9yQ29kZSArICdtKycgKyBtb2R1bGUuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpICsgJ1xcdTAwMUJbMG0nKTtcblx0fSBlbHNlIHtcblx0XHRhcmdzWzBdID0gZ2V0RGF0ZSgpICsgbmFtZSArICcgJyArIGFyZ3NbMF07XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2V0RGF0ZSgpIHtcblx0aWYgKGV4cG9ydHMuaW5zcGVjdE9wdHMuaGlkZURhdGUpIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblx0cmV0dXJuIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSArICcgJztcbn1cblxuLyoqXG4gKiBJbnZva2VzIGB1dGlsLmZvcm1hdCgpYCB3aXRoIHRoZSBzcGVjaWZpZWQgYXJndW1lbnRzIGFuZCB3cml0ZXMgdG8gc3RkZXJyLlxuICovXG5cbmZ1bmN0aW9uIGxvZyguLi5hcmdzKSB7XG5cdHJldHVybiBwcm9jZXNzLnN0ZGVyci53cml0ZSh1dGlsLmZvcm1hdCguLi5hcmdzKSArICdcXG4nKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHRpZiAobmFtZXNwYWNlcykge1xuXHRcdHByb2Nlc3MuZW52LkRFQlVHID0gbmFtZXNwYWNlcztcblx0fSBlbHNlIHtcblx0XHQvLyBJZiB5b3Ugc2V0IGEgcHJvY2Vzcy5lbnYgZmllbGQgdG8gbnVsbCBvciB1bmRlZmluZWQsIGl0IGdldHMgY2FzdCB0byB0aGVcblx0XHQvLyBzdHJpbmcgJ251bGwnIG9yICd1bmRlZmluZWQnLiBKdXN0IGRlbGV0ZSBpbnN0ZWFkLlxuXHRcdGRlbGV0ZSBwcm9jZXNzLmVudi5ERUJVRztcblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG5cdHJldHVybiBwcm9jZXNzLmVudi5ERUJVRztcbn1cblxuLyoqXG4gKiBJbml0IGxvZ2ljIGZvciBgZGVidWdgIGluc3RhbmNlcy5cbiAqXG4gKiBDcmVhdGUgYSBuZXcgYGluc3BlY3RPcHRzYCBvYmplY3QgaW4gY2FzZSBgdXNlQ29sb3JzYCBpcyBzZXRcbiAqIGRpZmZlcmVudGx5IGZvciBhIHBhcnRpY3VsYXIgYGRlYnVnYCBpbnN0YW5jZS5cbiAqL1xuXG5mdW5jdGlvbiBpbml0KGRlYnVnKSB7XG5cdGRlYnVnLmluc3BlY3RPcHRzID0ge307XG5cblx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGV4cG9ydHMuaW5zcGVjdE9wdHMpO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0XHRkZWJ1Zy5pbnNwZWN0T3B0c1trZXlzW2ldXSA9IGV4cG9ydHMuaW5zcGVjdE9wdHNba2V5c1tpXV07XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xuXG5jb25zdCB7Zm9ybWF0dGVyc30gPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBNYXAgJW8gdG8gYHV0aWwuaW5zcGVjdCgpYCwgYWxsIG9uIGEgc2luZ2xlIGxpbmUuXG4gKi9cblxuZm9ybWF0dGVycy5vID0gZnVuY3Rpb24gKHYpIHtcblx0dGhpcy5pbnNwZWN0T3B0cy5jb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblx0cmV0dXJuIHV0aWwuaW5zcGVjdCh2LCB0aGlzLmluc3BlY3RPcHRzKVxuXHRcdC5yZXBsYWNlKC9cXHMqXFxuXFxzKi9nLCAnICcpO1xufTtcblxuLyoqXG4gKiBNYXAgJU8gdG8gYHV0aWwuaW5zcGVjdCgpYCwgYWxsb3dpbmcgbXVsdGlwbGUgbGluZXMgaWYgbmVlZGVkLlxuICovXG5cbmZvcm1hdHRlcnMuTyA9IGZ1bmN0aW9uICh2KSB7XG5cdHRoaXMuaW5zcGVjdE9wdHMuY29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG5cdHJldHVybiB1dGlsLmluc3BlY3QodiwgdGhpcy5pbnNwZWN0T3B0cyk7XG59O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIGhhc0JpbiA9IHJlcXVpcmUoJ2hhcy1iaW5hcnkyJyk7XG52YXIgdXJsID0gcmVxdWlyZSgndXJsJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW86c29ja2V0Jyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gU29ja2V0O1xuXG4vKipcbiAqIEJsYWNrbGlzdGVkIGV2ZW50cy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZXZlbnRzID0gW1xuICAnZXJyb3InLFxuICAnY29ubmVjdCcsXG4gICdkaXNjb25uZWN0JyxcbiAgJ2Rpc2Nvbm5lY3RpbmcnLFxuICAnbmV3TGlzdGVuZXInLFxuICAncmVtb3ZlTGlzdGVuZXInXG5dO1xuXG4vKipcbiAqIEZsYWdzLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbnZhciBmbGFncyA9IFtcbiAgJ2pzb24nLFxuICAndm9sYXRpbGUnLFxuICAnYnJvYWRjYXN0JyxcbiAgJ2xvY2FsJ1xuXTtcblxuLyoqXG4gKiBgRXZlbnRFbWl0dGVyI2VtaXRgIHJlZmVyZW5jZS5cbiAqL1xuXG52YXIgZW1pdCA9IEVtaXR0ZXIucHJvdG90eXBlLmVtaXQ7XG5cbi8qKlxuICogSW50ZXJmYWNlIHRvIGEgYENsaWVudGAgZm9yIGEgZ2l2ZW4gYE5hbWVzcGFjZWAuXG4gKlxuICogQHBhcmFtIHtOYW1lc3BhY2V9IG5zcFxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBTb2NrZXQobnNwLCBjbGllbnQsIHF1ZXJ5KXtcbiAgdGhpcy5uc3AgPSBuc3A7XG4gIHRoaXMuc2VydmVyID0gbnNwLnNlcnZlcjtcbiAgdGhpcy5hZGFwdGVyID0gdGhpcy5uc3AuYWRhcHRlcjtcbiAgdGhpcy5pZCA9IG5zcC5uYW1lICE9PSAnLycgPyBuc3AubmFtZSArICcjJyArIGNsaWVudC5pZCA6IGNsaWVudC5pZDtcbiAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIHRoaXMuY29ubiA9IGNsaWVudC5jb25uO1xuICB0aGlzLnJvb21zID0ge307XG4gIHRoaXMuYWNrcyA9IHt9O1xuICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuaGFuZHNoYWtlID0gdGhpcy5idWlsZEhhbmRzaGFrZShxdWVyeSk7XG4gIHRoaXMuZm5zID0gW107XG4gIHRoaXMuZmxhZ3MgPSB7fTtcbiAgdGhpcy5fcm9vbXMgPSBbXTtcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIGBFdmVudEVtaXR0ZXJgLlxuICovXG5cblNvY2tldC5wcm90b3R5cGUuX19wcm90b19fID0gRW1pdHRlci5wcm90b3R5cGU7XG5cbi8qKlxuICogQXBwbHkgZmxhZ3MgZnJvbSBgU29ja2V0YC5cbiAqL1xuXG5mbGFncy5mb3JFYWNoKGZ1bmN0aW9uKGZsYWcpe1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU29ja2V0LnByb3RvdHlwZSwgZmxhZywge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmZsYWdzW2ZsYWddID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSk7XG59KTtcblxuLyoqXG4gKiBgcmVxdWVzdGAgZW5naW5lLmlvIHNob3J0Y3V0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNvY2tldC5wcm90b3R5cGUsICdyZXF1ZXN0Jywge1xuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNvbm4ucmVxdWVzdDtcbiAgfVxufSk7XG5cbi8qKlxuICogQnVpbGRzIHRoZSBgaGFuZHNoYWtlYCBCQyBvYmplY3RcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmJ1aWxkSGFuZHNoYWtlID0gZnVuY3Rpb24ocXVlcnkpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGZ1bmN0aW9uIGJ1aWxkUXVlcnkoKXtcbiAgICB2YXIgcmVxdWVzdFF1ZXJ5ID0gdXJsLnBhcnNlKHNlbGYucmVxdWVzdC51cmwsIHRydWUpLnF1ZXJ5O1xuICAgIC8vaWYgc29ja2V0LXNwZWNpZmljIHF1ZXJ5IGV4aXN0LCByZXBsYWNlIHF1ZXJ5IHN0cmluZ3MgaW4gcmVxdWVzdFF1ZXJ5XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHF1ZXJ5LCByZXF1ZXN0UXVlcnkpO1xuICB9XG4gIHJldHVybiB7XG4gICAgaGVhZGVyczogdGhpcy5yZXF1ZXN0LmhlYWRlcnMsXG4gICAgdGltZTogKG5ldyBEYXRlKSArICcnLFxuICAgIGFkZHJlc3M6IHRoaXMuY29ubi5yZW1vdGVBZGRyZXNzLFxuICAgIHhkb21haW46ICEhdGhpcy5yZXF1ZXN0LmhlYWRlcnMub3JpZ2luLFxuICAgIHNlY3VyZTogISF0aGlzLnJlcXVlc3QuY29ubmVjdGlvbi5lbmNyeXB0ZWQsXG4gICAgaXNzdWVkOiArKG5ldyBEYXRlKSxcbiAgICB1cmw6IHRoaXMucmVxdWVzdC51cmwsXG4gICAgcXVlcnk6IGJ1aWxkUXVlcnkoKVxuICB9O1xufTtcblxuLyoqXG4gKiBFbWl0cyB0byB0aGlzIGNsaWVudC5cbiAqXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXYpe1xuICBpZiAofmV4cG9ydHMuZXZlbnRzLmluZGV4T2YoZXYpKSB7XG4gICAgZW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICB2YXIgcGFja2V0ID0ge1xuICAgIHR5cGU6ICh0aGlzLmZsYWdzLmJpbmFyeSAhPT0gdW5kZWZpbmVkID8gdGhpcy5mbGFncy5iaW5hcnkgOiBoYXNCaW4oYXJncykpID8gcGFyc2VyLkJJTkFSWV9FVkVOVCA6IHBhcnNlci5FVkVOVCxcbiAgICBkYXRhOiBhcmdzXG4gIH07XG5cbiAgLy8gYWNjZXNzIGxhc3QgYXJndW1lbnQgdG8gc2VlIGlmIGl0J3MgYW4gQUNLIGNhbGxiYWNrXG4gIGlmICh0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHRoaXMuX3Jvb21zLmxlbmd0aCB8fCB0aGlzLmZsYWdzLmJyb2FkY2FzdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYWxsYmFja3MgYXJlIG5vdCBzdXBwb3J0ZWQgd2hlbiBicm9hZGNhc3RpbmcnKTtcbiAgICB9XG5cbiAgICBkZWJ1ZygnZW1pdHRpbmcgcGFja2V0IHdpdGggYWNrIGlkICVkJywgdGhpcy5uc3AuaWRzKTtcbiAgICB0aGlzLmFja3NbdGhpcy5uc3AuaWRzXSA9IGFyZ3MucG9wKCk7XG4gICAgcGFja2V0LmlkID0gdGhpcy5uc3AuaWRzKys7XG4gIH1cblxuICB2YXIgcm9vbXMgPSB0aGlzLl9yb29tcy5zbGljZSgwKTtcbiAgdmFyIGZsYWdzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5mbGFncyk7XG5cbiAgLy8gcmVzZXQgZmxhZ3NcbiAgdGhpcy5fcm9vbXMgPSBbXTtcbiAgdGhpcy5mbGFncyA9IHt9O1xuXG4gIGlmIChyb29tcy5sZW5ndGggfHwgZmxhZ3MuYnJvYWRjYXN0KSB7XG4gICAgdGhpcy5hZGFwdGVyLmJyb2FkY2FzdChwYWNrZXQsIHtcbiAgICAgIGV4Y2VwdDogW3RoaXMuaWRdLFxuICAgICAgcm9vbXM6IHJvb21zLFxuICAgICAgZmxhZ3M6IGZsYWdzXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlzcGF0Y2ggcGFja2V0XG4gICAgdGhpcy5wYWNrZXQocGFja2V0LCBmbGFncyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFRhcmdldHMgYSByb29tIHdoZW4gYnJvYWRjYXN0aW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS50byA9XG5Tb2NrZXQucHJvdG90eXBlLmluID0gZnVuY3Rpb24obmFtZSl7XG4gIGlmICghfnRoaXMuX3Jvb21zLmluZGV4T2YobmFtZSkpIHRoaXMuX3Jvb21zLnB1c2gobmFtZSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBhIGBtZXNzYWdlYCBldmVudC5cbiAqXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZW5kID1cblNvY2tldC5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbigpe1xuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gIGFyZ3MudW5zaGlmdCgnbWVzc2FnZScpO1xuICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBXcml0ZXMgYSBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIG9wdGlvbnNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUucGFja2V0ID0gZnVuY3Rpb24ocGFja2V0LCBvcHRzKXtcbiAgcGFja2V0Lm5zcCA9IHRoaXMubnNwLm5hbWU7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICBvcHRzLmNvbXByZXNzID0gZmFsc2UgIT09IG9wdHMuY29tcHJlc3M7XG4gIHRoaXMuY2xpZW50LnBhY2tldChwYWNrZXQsIG9wdHMpO1xufTtcblxuLyoqXG4gKiBKb2lucyBhIHJvb20uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IHJvb20gb3IgYXJyYXkgb2Ygcm9vbXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIG9wdGlvbmFsLCBjYWxsYmFja1xuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbihyb29tcywgZm4pe1xuICBkZWJ1Zygnam9pbmluZyByb29tICVzJywgcm9vbXMpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGlmICghQXJyYXkuaXNBcnJheShyb29tcykpIHtcbiAgICByb29tcyA9IFtyb29tc107XG4gIH1cbiAgcm9vbXMgPSByb29tcy5maWx0ZXIoZnVuY3Rpb24gKHJvb20pIHtcbiAgICByZXR1cm4gIXNlbGYucm9vbXMuaGFzT3duUHJvcGVydHkocm9vbSk7XG4gIH0pO1xuICBpZiAoIXJvb21zLmxlbmd0aCkge1xuICAgIGZuICYmIGZuKG51bGwpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHRoaXMuYWRhcHRlci5hZGRBbGwodGhpcy5pZCwgcm9vbXMsIGZ1bmN0aW9uKGVycil7XG4gICAgaWYgKGVycikgcmV0dXJuIGZuICYmIGZuKGVycik7XG4gICAgZGVidWcoJ2pvaW5lZCByb29tICVzJywgcm9vbXMpO1xuICAgIHJvb21zLmZvckVhY2goZnVuY3Rpb24gKHJvb20pIHtcbiAgICAgIHNlbGYucm9vbXNbcm9vbV0gPSByb29tO1xuICAgIH0pO1xuICAgIGZuICYmIGZuKG51bGwpO1xuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIExlYXZlcyBhIHJvb20uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJvb21cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIG9wdGlvbmFsLCBjYWxsYmFja1xuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmxlYXZlID0gZnVuY3Rpb24ocm9vbSwgZm4pe1xuICBkZWJ1ZygnbGVhdmUgcm9vbSAlcycsIHJvb20pO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuYWRhcHRlci5kZWwodGhpcy5pZCwgcm9vbSwgZnVuY3Rpb24oZXJyKXtcbiAgICBpZiAoZXJyKSByZXR1cm4gZm4gJiYgZm4oZXJyKTtcbiAgICBkZWJ1ZygnbGVmdCByb29tICVzJywgcm9vbSk7XG4gICAgZGVsZXRlIHNlbGYucm9vbXNbcm9vbV07XG4gICAgZm4gJiYgZm4obnVsbCk7XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogTGVhdmUgYWxsIHJvb21zLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUubGVhdmVBbGwgPSBmdW5jdGlvbigpe1xuICB0aGlzLmFkYXB0ZXIuZGVsQWxsKHRoaXMuaWQpO1xuICB0aGlzLnJvb21zID0ge307XG59O1xuXG4vKipcbiAqIENhbGxlZCBieSBgTmFtZXNwYWNlYCB1cG9uIHN1Y2Nlc3NmdWxcbiAqIG1pZGRsZXdhcmUgZXhlY3V0aW9uIChpZTogYXV0aG9yaXphdGlvbikuXG4gKiBTb2NrZXQgaXMgYWRkZWQgdG8gbmFtZXNwYWNlIGFycmF5IGJlZm9yZVxuICogY2FsbCB0byBqb2luLCBzbyBhZGFwdGVycyBjYW4gYWNjZXNzIGl0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25jb25uZWN0ID0gZnVuY3Rpb24oKXtcbiAgZGVidWcoJ3NvY2tldCBjb25uZWN0ZWQgLSB3cml0aW5nIHBhY2tldCcpO1xuICB0aGlzLm5zcC5jb25uZWN0ZWRbdGhpcy5pZF0gPSB0aGlzO1xuICB0aGlzLmpvaW4odGhpcy5pZCk7XG4gIHZhciBza2lwID0gdGhpcy5uc3AubmFtZSA9PT0gJy8nICYmIHRoaXMubnNwLmZucy5sZW5ndGggPT09IDA7XG4gIGlmIChza2lwKSB7XG4gICAgZGVidWcoJ3BhY2tldCBhbHJlYWR5IHNlbnQgaW4gaW5pdGlhbCBoYW5kc2hha2UnKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnBhY2tldCh7IHR5cGU6IHBhcnNlci5DT05ORUNUIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIGVhY2ggcGFja2V0LiBDYWxsZWQgYnkgYENsaWVudGAuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbnBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCl7XG4gIGRlYnVnKCdnb3QgcGFja2V0ICVqJywgcGFja2V0KTtcbiAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgIGNhc2UgcGFyc2VyLkVWRU5UOlxuICAgICAgdGhpcy5vbmV2ZW50KHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkJJTkFSWV9FVkVOVDpcbiAgICAgIHRoaXMub25ldmVudChwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5BQ0s6XG4gICAgICB0aGlzLm9uYWNrKHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkJJTkFSWV9BQ0s6XG4gICAgICB0aGlzLm9uYWNrKHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkRJU0NPTk5FQ1Q6XG4gICAgICB0aGlzLm9uZGlzY29ubmVjdCgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5FUlJPUjpcbiAgICAgIHRoaXMub25lcnJvcihuZXcgRXJyb3IocGFja2V0LmRhdGEpKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBldmVudCBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCBvYmplY3RcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25ldmVudCA9IGZ1bmN0aW9uKHBhY2tldCl7XG4gIHZhciBhcmdzID0gcGFja2V0LmRhdGEgfHwgW107XG4gIGRlYnVnKCdlbWl0dGluZyBldmVudCAlaicsIGFyZ3MpO1xuXG4gIGlmIChudWxsICE9IHBhY2tldC5pZCkge1xuICAgIGRlYnVnKCdhdHRhY2hpbmcgYWNrIGNhbGxiYWNrIHRvIGV2ZW50Jyk7XG4gICAgYXJncy5wdXNoKHRoaXMuYWNrKHBhY2tldC5pZCkpO1xuICB9XG5cbiAgdGhpcy5kaXNwYXRjaChhcmdzKTtcbn07XG5cbi8qKlxuICogUHJvZHVjZXMgYW4gYWNrIGNhbGxiYWNrIHRvIGVtaXQgd2l0aCBhbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgcGFja2V0IGlkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmFjayA9IGZ1bmN0aW9uKGlkKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc2VudCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICAvLyBwcmV2ZW50IGRvdWJsZSBjYWxsYmFja3NcbiAgICBpZiAoc2VudCkgcmV0dXJuO1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICBkZWJ1Zygnc2VuZGluZyBhY2sgJWonLCBhcmdzKTtcblxuICAgIHNlbGYucGFja2V0KHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIHR5cGU6IGhhc0JpbihhcmdzKSA/IHBhcnNlci5CSU5BUllfQUNLIDogcGFyc2VyLkFDSyxcbiAgICAgIGRhdGE6IGFyZ3NcbiAgICB9KTtcblxuICAgIHNlbnQgPSB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhY2sgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25hY2sgPSBmdW5jdGlvbihwYWNrZXQpe1xuICB2YXIgYWNrID0gdGhpcy5hY2tzW3BhY2tldC5pZF07XG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBhY2spIHtcbiAgICBkZWJ1ZygnY2FsbGluZyBhY2sgJXMgd2l0aCAlaicsIHBhY2tldC5pZCwgcGFja2V0LmRhdGEpO1xuICAgIGFjay5hcHBseSh0aGlzLCBwYWNrZXQuZGF0YSk7XG4gICAgZGVsZXRlIHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICB9IGVsc2Uge1xuICAgIGRlYnVnKCdiYWQgYWNrICVzJywgcGFja2V0LmlkKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBjbGllbnQgZGlzY29ubmVjdCBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmRpc2Nvbm5lY3QgPSBmdW5jdGlvbigpe1xuICBkZWJ1ZygnZ290IGRpc2Nvbm5lY3QgcGFja2V0Jyk7XG4gIHRoaXMub25jbG9zZSgnY2xpZW50IG5hbWVzcGFjZSBkaXNjb25uZWN0Jyk7XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgYSBjbGllbnQgZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24oZXJyKXtcbiAgaWYgKHRoaXMubGlzdGVuZXJzKCdlcnJvcicpLmxlbmd0aCkge1xuICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoJ01pc3NpbmcgZXJyb3IgaGFuZGxlciBvbiBgc29ja2V0YC4nKTtcbiAgICBjb25zb2xlLmVycm9yKGVyci5zdGFjayk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gY2xvc2luZy4gQ2FsbGVkIGJ5IGBDbGllbnRgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByZWFzb25cbiAqIEB0aHJvdyB7RXJyb3J9IG9wdGlvbmFsIGVycm9yIG9iamVjdFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24ocmVhc29uKXtcbiAgaWYgKCF0aGlzLmNvbm5lY3RlZCkgcmV0dXJuIHRoaXM7XG4gIGRlYnVnKCdjbG9zaW5nIHNvY2tldCAtIHJlYXNvbiAlcycsIHJlYXNvbik7XG4gIHRoaXMuZW1pdCgnZGlzY29ubmVjdGluZycsIHJlYXNvbik7XG4gIHRoaXMubGVhdmVBbGwoKTtcbiAgdGhpcy5uc3AucmVtb3ZlKHRoaXMpO1xuICB0aGlzLmNsaWVudC5yZW1vdmUodGhpcyk7XG4gIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgZGVsZXRlIHRoaXMubnNwLmNvbm5lY3RlZFt0aGlzLmlkXTtcbiAgdGhpcy5lbWl0KCdkaXNjb25uZWN0JywgcmVhc29uKTtcbn07XG5cbi8qKlxuICogUHJvZHVjZXMgYW4gYGVycm9yYCBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGVyciBlcnJvciBvYmplY3RcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbihlcnIpe1xuICB0aGlzLnBhY2tldCh7IHR5cGU6IHBhcnNlci5FUlJPUiwgZGF0YTogZXJyIH0pO1xufTtcblxuLyoqXG4gKiBEaXNjb25uZWN0cyB0aGlzIGNsaWVudC5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGNsb3NlIGlmIGB0cnVlYCwgY2xvc2VzIHRoZSB1bmRlcmx5aW5nIGNvbm5lY3Rpb25cbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbihjbG9zZSl7XG4gIGlmICghdGhpcy5jb25uZWN0ZWQpIHJldHVybiB0aGlzO1xuICBpZiAoY2xvc2UpIHtcbiAgICB0aGlzLmNsaWVudC5kaXNjb25uZWN0KCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5wYWNrZXQoeyB0eXBlOiBwYXJzZXIuRElTQ09OTkVDVCB9KTtcbiAgICB0aGlzLm9uY2xvc2UoJ3NlcnZlciBuYW1lc3BhY2UgZGlzY29ubmVjdCcpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjb21wcmVzcyBmbGFnLlxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gY29tcHJlc3MgaWYgYHRydWVgLCBjb21wcmVzc2VzIHRoZSBzZW5kaW5nIGRhdGFcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNvbXByZXNzID0gZnVuY3Rpb24oY29tcHJlc3Mpe1xuICB0aGlzLmZsYWdzLmNvbXByZXNzID0gY29tcHJlc3M7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBiaW5hcnkgZmxhZ1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gRW5jb2RlIGFzIGlmIGl0IGhhcyBiaW5hcnkgZGF0YSBpZiBgdHJ1ZWAsIEVuY29kZSBhcyBpZiBpdCBkb2VzbnQgaGF2ZSBiaW5hcnkgZGF0YSBpZiBgZmFsc2VgXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuIFNvY2tldC5wcm90b3R5cGUuYmluYXJ5ID0gZnVuY3Rpb24gKGJpbmFyeSkge1xuICAgdGhpcy5mbGFncy5iaW5hcnkgPSBiaW5hcnk7XG4gICByZXR1cm4gdGhpcztcbiB9O1xuXG4vKipcbiAqIERpc3BhdGNoIGluY29taW5nIGV2ZW50IHRvIHNvY2tldCBsaXN0ZW5lcnMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZXZlbnQgdGhhdCB3aWxsIGdldCBlbWl0dGVkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmRpc3BhdGNoID0gZnVuY3Rpb24oZXZlbnQpe1xuICBkZWJ1ZygnZGlzcGF0Y2hpbmcgYW4gZXZlbnQgJWonLCBldmVudCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgZnVuY3Rpb24gZGlzcGF0Y2hTb2NrZXQoZXJyKSB7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpe1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gc2VsZi5lcnJvcihlcnIuZGF0YSB8fCBlcnIubWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBlbWl0LmFwcGx5KHNlbGYsIGV2ZW50KTtcbiAgICB9KTtcbiAgfVxuICB0aGlzLnJ1bihldmVudCwgZGlzcGF0Y2hTb2NrZXQpO1xufTtcblxuLyoqXG4gKiBTZXRzIHVwIHNvY2tldCBtaWRkbGV3YXJlLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1pZGRsZXdhcmUgZnVuY3Rpb24gKGV2ZW50LCBuZXh0KVxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24oZm4pe1xuICB0aGlzLmZucy5wdXNoKGZuKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEV4ZWN1dGVzIHRoZSBtaWRkbGV3YXJlIGZvciBhbiBpbmNvbWluZyBldmVudC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBldmVudCB0aGF0IHdpbGwgZ2V0IGVtaXR0ZWRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGxhc3QgZm4gY2FsbCBpbiB0aGUgbWlkZGxld2FyZVxuICogQGFwaSBwcml2YXRlXG4gKi9cblNvY2tldC5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcbiAgdmFyIGZucyA9IHRoaXMuZm5zLnNsaWNlKDApO1xuICBpZiAoIWZucy5sZW5ndGgpIHJldHVybiBmbihudWxsKTtcblxuICBmdW5jdGlvbiBydW4oaSl7XG4gICAgZm5zW2ldKGV2ZW50LCBmdW5jdGlvbihlcnIpe1xuICAgICAgLy8gdXBvbiBlcnJvciwgc2hvcnQtY2lyY3VpdFxuICAgICAgaWYgKGVycikgcmV0dXJuIGZuKGVycik7XG5cbiAgICAgIC8vIGlmIG5vIG1pZGRsZXdhcmUgbGVmdCwgc3VtbW9uIGNhbGxiYWNrXG4gICAgICBpZiAoIWZuc1tpICsgMV0pIHJldHVybiBmbihudWxsKTtcblxuICAgICAgLy8gZ28gb24gdG8gbmV4dFxuICAgICAgcnVuKGkgKyAxKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bigwKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IE5hbWVzcGFjZSA9IHJlcXVpcmUoJy4vbmFtZXNwYWNlJyk7XG5cbmxldCBjb3VudCA9IDA7XG5cbmNsYXNzIFBhcmVudE5hbWVzcGFjZSBleHRlbmRzIE5hbWVzcGFjZSB7XG5cbiAgY29uc3RydWN0b3Ioc2VydmVyKSB7XG4gICAgc3VwZXIoc2VydmVyLCAnL18nICsgKGNvdW50KyspKTtcbiAgICB0aGlzLmNoaWxkcmVuID0gbmV3IFNldCgpO1xuICB9XG5cbiAgaW5pdEFkYXB0ZXIoKSB7fVxuXG4gIGVtaXQoKSB7XG4gICAgY29uc3QgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2gobnNwID0+IHtcbiAgICAgIG5zcC5yb29tcyA9IHRoaXMucm9vbXM7XG4gICAgICBuc3AuZmxhZ3MgPSB0aGlzLmZsYWdzO1xuICAgICAgbnNwLmVtaXQuYXBwbHkobnNwLCBhcmdzKTtcbiAgICB9KTtcbiAgICB0aGlzLnJvb21zID0gW107XG4gICAgdGhpcy5mbGFncyA9IHt9O1xuICB9XG5cbiAgY3JlYXRlQ2hpbGQobmFtZSkge1xuICAgIGNvbnN0IG5hbWVzcGFjZSA9IG5ldyBOYW1lc3BhY2UodGhpcy5zZXJ2ZXIsIG5hbWUpO1xuICAgIG5hbWVzcGFjZS5mbnMgPSB0aGlzLmZucy5zbGljZSgwKTtcbiAgICB0aGlzLmxpc3RlbmVycygnY29ubmVjdCcpLmZvckVhY2gobGlzdGVuZXIgPT4gbmFtZXNwYWNlLm9uKCdjb25uZWN0JywgbGlzdGVuZXIpKTtcbiAgICB0aGlzLmxpc3RlbmVycygnY29ubmVjdGlvbicpLmZvckVhY2gobGlzdGVuZXIgPT4gbmFtZXNwYWNlLm9uKCdjb25uZWN0aW9uJywgbGlzdGVuZXIpKTtcbiAgICB0aGlzLmNoaWxkcmVuLmFkZChuYW1lc3BhY2UpO1xuICAgIHRoaXMuc2VydmVyLm5zcHNbbmFtZV0gPSBuYW1lc3BhY2U7XG4gICAgcmV0dXJuIG5hbWVzcGFjZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhcmVudE5hbWVzcGFjZTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQWRhcHRlcjtcblxuLyoqXG4gKiBNZW1vcnkgYWRhcHRlciBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge05hbWVzcGFjZX0gbnNwXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEFkYXB0ZXIobnNwKXtcbiAgdGhpcy5uc3AgPSBuc3A7XG4gIHRoaXMucm9vbXMgPSB7fTtcbiAgdGhpcy5zaWRzID0ge307XG4gIHRoaXMuZW5jb2RlciA9IG5zcC5zZXJ2ZXIuZW5jb2Rlcjtcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIGBFdmVudEVtaXR0ZXJgLlxuICovXG5cbkFkYXB0ZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IEVtaXR0ZXIucHJvdG90eXBlO1xuXG4vKipcbiAqIEFkZHMgYSBzb2NrZXQgdG8gYSByb29tLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzb2NrZXQgaWRcbiAqIEBwYXJhbSB7U3RyaW5nfSByb29tIG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFkYXB0ZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKGlkLCByb29tLCBmbil7XG4gIHJldHVybiB0aGlzLmFkZEFsbChpZCwgWyByb29tIF0sIGZuKTtcbn07XG5cbi8qKlxuICogQWRkcyBhIHNvY2tldCB0byBhIGxpc3Qgb2Ygcm9vbS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc29ja2V0IGlkXG4gKiBAcGFyYW0ge1N0cmluZ30gcm9vbXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFkYXB0ZXIucHJvdG90eXBlLmFkZEFsbCA9IGZ1bmN0aW9uKGlkLCByb29tcywgZm4pe1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJvb21zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHJvb20gPSByb29tc1tpXTtcbiAgICB0aGlzLnNpZHNbaWRdID0gdGhpcy5zaWRzW2lkXSB8fCB7fTtcbiAgICB0aGlzLnNpZHNbaWRdW3Jvb21dID0gdHJ1ZTtcbiAgICB0aGlzLnJvb21zW3Jvb21dID0gdGhpcy5yb29tc1tyb29tXSB8fCBSb29tKCk7XG4gICAgdGhpcy5yb29tc1tyb29tXS5hZGQoaWQpO1xuICB9XG4gIGlmIChmbikgcHJvY2Vzcy5uZXh0VGljayhmbi5iaW5kKG51bGwsIG51bGwpKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyBhIHNvY2tldCBmcm9tIGEgcm9vbS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc29ja2V0IGlkXG4gKiBAcGFyYW0ge1N0cmluZ30gcm9vbSBuYW1lXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5BZGFwdGVyLnByb3RvdHlwZS5kZWwgPSBmdW5jdGlvbihpZCwgcm9vbSwgZm4pe1xuICBpZiAodGhpcy5zaWRzW2lkXSkgZGVsZXRlIHRoaXMuc2lkc1tpZF1bcm9vbV07XG5cbiAgaWYgKHRoaXMucm9vbXMuaGFzT3duUHJvcGVydHkocm9vbSkpIHtcbiAgICB0aGlzLnJvb21zW3Jvb21dLmRlbChpZCk7XG4gICAgaWYgKHRoaXMucm9vbXNbcm9vbV0ubGVuZ3RoID09PSAwKSBkZWxldGUgdGhpcy5yb29tc1tyb29tXTtcbiAgfVxuXG4gIGlmIChmbikgcHJvY2Vzcy5uZXh0VGljayhmbi5iaW5kKG51bGwsIG51bGwpKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyBhIHNvY2tldCBmcm9tIGFsbCByb29tcyBpdCdzIGpvaW5lZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc29ja2V0IGlkXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5BZGFwdGVyLnByb3RvdHlwZS5kZWxBbGwgPSBmdW5jdGlvbihpZCwgZm4pe1xuICB2YXIgcm9vbXMgPSB0aGlzLnNpZHNbaWRdO1xuICBpZiAocm9vbXMpIHtcbiAgICBmb3IgKHZhciByb29tIGluIHJvb21zKSB7XG4gICAgICBpZiAodGhpcy5yb29tcy5oYXNPd25Qcm9wZXJ0eShyb29tKSkge1xuICAgICAgICB0aGlzLnJvb21zW3Jvb21dLmRlbChpZCk7XG4gICAgICAgIGlmICh0aGlzLnJvb21zW3Jvb21dLmxlbmd0aCA9PT0gMCkgZGVsZXRlIHRoaXMucm9vbXNbcm9vbV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGRlbGV0ZSB0aGlzLnNpZHNbaWRdO1xuXG4gIGlmIChmbikgcHJvY2Vzcy5uZXh0VGljayhmbi5iaW5kKG51bGwsIG51bGwpKTtcbn07XG5cbi8qKlxuICogQnJvYWRjYXN0cyBhIHBhY2tldC5cbiAqXG4gKiBPcHRpb25zOlxuICogIC0gYGZsYWdzYCB7T2JqZWN0fSBmbGFncyBmb3IgdGhpcyBwYWNrZXRcbiAqICAtIGBleGNlcHRgIHtBcnJheX0gc2lkcyB0aGF0IHNob3VsZCBiZSBleGNsdWRlZFxuICogIC0gYHJvb21zYCB7QXJyYXl9IGxpc3Qgb2Ygcm9vbXMgdG8gYnJvYWRjYXN0IHRvXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCBvYmplY3RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQWRhcHRlci5wcm90b3R5cGUuYnJvYWRjYXN0ID0gZnVuY3Rpb24ocGFja2V0LCBvcHRzKXtcbiAgdmFyIHJvb21zID0gb3B0cy5yb29tcyB8fCBbXTtcbiAgdmFyIGV4Y2VwdCA9IG9wdHMuZXhjZXB0IHx8IFtdO1xuICB2YXIgZmxhZ3MgPSBvcHRzLmZsYWdzIHx8IHt9O1xuICB2YXIgcGFja2V0T3B0cyA9IHtcbiAgICBwcmVFbmNvZGVkOiB0cnVlLFxuICAgIHZvbGF0aWxlOiBmbGFncy52b2xhdGlsZSxcbiAgICBjb21wcmVzczogZmxhZ3MuY29tcHJlc3NcbiAgfTtcbiAgdmFyIGlkcyA9IHt9O1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzb2NrZXQ7XG5cbiAgcGFja2V0Lm5zcCA9IHRoaXMubnNwLm5hbWU7XG4gIHRoaXMuZW5jb2Rlci5lbmNvZGUocGFja2V0LCBmdW5jdGlvbihlbmNvZGVkUGFja2V0cykge1xuICAgIGlmIChyb29tcy5sZW5ndGgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcm9vbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHJvb20gPSBzZWxmLnJvb21zW3Jvb21zW2ldXTtcbiAgICAgICAgaWYgKCFyb29tKSBjb250aW51ZTtcbiAgICAgICAgdmFyIHNvY2tldHMgPSByb29tLnNvY2tldHM7XG4gICAgICAgIGZvciAodmFyIGlkIGluIHNvY2tldHMpIHtcbiAgICAgICAgICBpZiAoc29ja2V0cy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgIGlmIChpZHNbaWRdIHx8IH5leGNlcHQuaW5kZXhPZihpZCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgc29ja2V0ID0gc2VsZi5uc3AuY29ubmVjdGVkW2lkXTtcbiAgICAgICAgICAgIGlmIChzb2NrZXQpIHtcbiAgICAgICAgICAgICAgc29ja2V0LnBhY2tldChlbmNvZGVkUGFja2V0cywgcGFja2V0T3B0cyk7XG4gICAgICAgICAgICAgIGlkc1tpZF0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpZCBpbiBzZWxmLnNpZHMpIHtcbiAgICAgICAgaWYgKHNlbGYuc2lkcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICBpZiAofmV4Y2VwdC5pbmRleE9mKGlkKSkgY29udGludWU7XG4gICAgICAgICAgc29ja2V0ID0gc2VsZi5uc3AuY29ubmVjdGVkW2lkXTtcbiAgICAgICAgICBpZiAoc29ja2V0KSBzb2NrZXQucGFja2V0KGVuY29kZWRQYWNrZXRzLCBwYWNrZXRPcHRzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIEdldHMgYSBsaXN0IG9mIGNsaWVudHMgYnkgc2lkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGV4cGxpY2l0IHNldCBvZiByb29tcyB0byBjaGVjay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFkYXB0ZXIucHJvdG90eXBlLmNsaWVudHMgPSBmdW5jdGlvbihyb29tcywgZm4pe1xuICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2Ygcm9vbXMpe1xuICAgIGZuID0gcm9vbXM7XG4gICAgcm9vbXMgPSBudWxsO1xuICB9XG5cbiAgcm9vbXMgPSByb29tcyB8fCBbXTtcblxuICB2YXIgaWRzID0ge307XG4gIHZhciBzaWRzID0gW107XG4gIHZhciBzb2NrZXQ7XG5cbiAgaWYgKHJvb21zLmxlbmd0aCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcm9vbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciByb29tID0gdGhpcy5yb29tc1tyb29tc1tpXV07XG4gICAgICBpZiAoIXJvb20pIGNvbnRpbnVlO1xuICAgICAgdmFyIHNvY2tldHMgPSByb29tLnNvY2tldHM7XG4gICAgICBmb3IgKHZhciBpZCBpbiBzb2NrZXRzKSB7XG4gICAgICAgIGlmIChzb2NrZXRzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgICAgIGlmIChpZHNbaWRdKSBjb250aW51ZTtcbiAgICAgICAgICBzb2NrZXQgPSB0aGlzLm5zcC5jb25uZWN0ZWRbaWRdO1xuICAgICAgICAgIGlmIChzb2NrZXQpIHtcbiAgICAgICAgICAgIHNpZHMucHVzaChpZCk7XG4gICAgICAgICAgICBpZHNbaWRdID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaWQgaW4gdGhpcy5zaWRzKSB7XG4gICAgICBpZiAodGhpcy5zaWRzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgICBzb2NrZXQgPSB0aGlzLm5zcC5jb25uZWN0ZWRbaWRdO1xuICAgICAgICBpZiAoc29ja2V0KSBzaWRzLnB1c2goaWQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChmbikgcHJvY2Vzcy5uZXh0VGljayhmbi5iaW5kKG51bGwsIG51bGwsIHNpZHMpKTtcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBvZiByb29tcyBhIGdpdmVuIGNsaWVudCBoYXMgam9pbmVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzb2NrZXQgaWRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHB1YmxpY1xuICovXG5BZGFwdGVyLnByb3RvdHlwZS5jbGllbnRSb29tcyA9IGZ1bmN0aW9uKGlkLCBmbil7XG4gIHZhciByb29tcyA9IHRoaXMuc2lkc1tpZF07XG4gIGlmIChmbikgcHJvY2Vzcy5uZXh0VGljayhmbi5iaW5kKG51bGwsIG51bGwsIHJvb21zID8gT2JqZWN0LmtleXMocm9vbXMpIDogbnVsbCkpO1xufTtcblxuLyoqXG4qIFJvb20gY29uc3RydWN0b3IuXG4qXG4qIEBhcGkgcHJpdmF0ZVxuKi9cblxuZnVuY3Rpb24gUm9vbSgpe1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUm9vbSkpIHJldHVybiBuZXcgUm9vbSgpO1xuICB0aGlzLnNvY2tldHMgPSB7fTtcbiAgdGhpcy5sZW5ndGggPSAwO1xufVxuXG4vKipcbiAqIEFkZHMgYSBzb2NrZXQgdG8gYSByb29tLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzb2NrZXQgaWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJvb20ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKGlkKXtcbiAgaWYgKCF0aGlzLnNvY2tldHMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdGhpcy5zb2NrZXRzW2lkXSA9IHRydWU7XG4gICAgdGhpcy5sZW5ndGgrKztcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmVzIGEgc29ja2V0IGZyb20gYSByb29tLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzb2NrZXQgaWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJvb20ucHJvdG90eXBlLmRlbCA9IGZ1bmN0aW9uKGlkKXtcbiAgaWYgKHRoaXMuc29ja2V0cy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICBkZWxldGUgdGhpcy5zb2NrZXRzW2lkXTtcbiAgICB0aGlzLmxlbmd0aC0tO1xuICB9XG59O1xuIiwiZnVuY3Rpb24gd2VicGFja0VtcHR5Q29udGV4dChyZXEpIHtcblx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdHRocm93IGU7XG59XG53ZWJwYWNrRW1wdHlDb250ZXh0LmtleXMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIFtdOyB9O1xud2VicGFja0VtcHR5Q29udGV4dC5yZXNvbHZlID0gd2VicGFja0VtcHR5Q29udGV4dDtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0VtcHR5Q29udGV4dDtcbndlYnBhY2tFbXB0eUNvbnRleHQuaWQgPSAxNDI7Il0sInNvdXJjZVJvb3QiOiIifQ==